[
{"function":{"name":"Add_NPC_Class","parent":"Global","type":"libraryfunc","description":"Defines a global entity class variable with an automatic value in order to prevent collisions with other Enums/CLASS. You should prefix your variable with CLASS_ for consistency.","realm":"Shared and Menu","file":{"text":"lua/includes/util.lua","line":"370-L373"},"args":{"arg":{"text":"The name of the new enum/global variable.","name":"name","type":"string"}}},"example":{"description":"Creates a global variable named CLASS_TESTER and prints its value.","code":"Add_NPC_Class( \"CLASS_TESTER\" )\nprint( CLASS_TESTER )","output":"36 (one greater than the current highest value of the Enums/CLASS)"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"AddCSLuaFile","parent":"Global","type":"libraryfunc","description":{"text":"Marks a Lua file to be sent to clients when they join the server. Doesn't do anything on the client - this means you can use it in a shared file without problems.","warning":"If the file trying to be added is empty, an error will occur, and the file will not be sent to the client\n\t\t\n\t\tThe string cannot have whitespace.","note":"This function is not needed for scripts located in **lua/autorun/** and **lua/autorun/client/**: they are automatically sent to clients.\n\n\t\tYou can add up to **8192** files. Each file can be up to **64KB** compressed (LZMA)"},"realm":"Shared","args":{"arg":{"text":"The name/path to the Lua file that should be sent, **relative to the garrysmod/lua folder**. If no parameter is specified, it sends the current file.\n\nThe file path can be relative to the script it's ran from. For example, if your script is in `lua/myfolder/stuff.lua`, calling Global.AddCSLuaFile(\"otherstuff.lua\") and Global.AddCSLuaFile(\"myfolder/otherstuff.lua\") is the same thing.","name":"file","type":"string","default":"current file","note":"Please make sure your file names are unique, the filesystem is shared across all addons, so a file named `lua/config.lua` in your addon may be overwritten by the same file in another addon."}}},"example":[{"description":"Adds the cl_init.lua file in the `lua` folder to be downloaded by connecting clients. This is required, and is normally done in init.lua.","code":"AddCSLuaFile( \"cl_init.lua\" )"},{"description":"Adds the current file to the list of files to be downloaded by clients. This is usually done at the top of a shared file.","code":"AddCSLuaFile()"},{"description":"Allows to send a clientside script when a user joins the server. This kind of code can be found in some addons which load scripts to a custom folder to prevent conflicts between others files.","code":"if SERVER then\n\t-- The server doesn't need to run this script through include() because it is intended only for the client unless your using it for a shared file.\n\tAddCSLuaFile( \"client_script.lua\" )\nend\n\nif CLIENT then\n\t-- The client must have received the file, let's run it!\n\tinclude( \"client_script.lua\" )\nend"},{"description":"Specify a base folder and recursively include cl, sh and sv files without having to specify them.","code":"local rootDir = \"vac-events\"\n\nlocal function AddFile(File, dir)\n    local fileSide = string.lower(string.Left(File , 3))\n\n    if SERVER and fileSide == \"sv_\" then\n        include(dir..File)\n        print(\"[AUTOLOAD] SV INCLUDE: \" .. File)\n    elseif fileSide == \"sh_\" then\n        if SERVER then \n            AddCSLuaFile(dir..File)\n            print(\"[AUTOLOAD] SH ADDCS: \" .. File)\n        end\n        include(dir..File)\n        print(\"[AUTOLOAD] SH INCLUDE: \" .. File)\n    elseif fileSide == \"cl_\" then\n        if SERVER then \n            AddCSLuaFile(dir..File)\n            print(\"[AUTOLOAD] CL ADDCS: \" .. File)\n        elseif CLIENT then\n            include(dir..File)\n            print(\"[AUTOLOAD] CL INCLUDE: \" .. File)\n        end\n    end\nend\n\nlocal function IncludeDir(dir)\n    dir = dir .. \"/\"\n    local File, Directory = file.Find(dir..\"*\", \"LUA\")\n\n    for k, v in ipairs(File) do\n        if string.EndsWith(v, \".lua\") then\n            AddFile(v, dir)\n        end\n    end\n    \n    for k, v in ipairs(Directory) do\n        print(\"[AUTOLOAD] Directory: \" .. v)\n        IncludeDir(dir..v)\n    end\n\nend\nIncludeDir(rootDir)"}],"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"AccessorFunc","parent":"Global","type":"libraryfunc","description":"Adds simple Get/Set accessor functions on the specified table.\nCan also force the value to be set to a number, bool or string.","realm":"Shared and Menu","file":{"text":"lua/includes/util.lua","line":"178-L198"},"args":{"arg":[{"text":"The table to add the accessor functions too.","name":"tab","type":"table"},{"text":"The key of the table to be get/set.","name":"key","type":"any"},{"text":"The name of the functions (will be prefixed with Get and Set).","name":"name","type":"string"},{"text":"The type the setter should force to (uses Enums/FORCE).","name":"force","type":"number","default":"nil"}]}},"example":{"description":"Adds the GetFooBar and SetFooBar functions to the Player metatable and then uses them.","code":"local meta = FindMetaTable(\"Player\")\nAccessorFunc(meta, \"foo_bar\", \"FooBar\", FORCE_BOOL)\n\nlocal ply = Entity( 1 )\nply:SetFooBar(true)\n\nprint(not ply:GetFooBar())","output":"false"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"AddBackgroundImage","parent":"Global","type":"libraryfunc","description":"Adds the specified image path to the main menu background pool. Image can be png or jpeg.","realm":"Menu","file":{"text":"lua/menu/background.lua","line":"77"},"args":{"arg":{"text":"Path to the image.","name":"path","type":"string"}}},"realms":["Menu"],"type":"Function"},
{"function":{"name":"AddConsoleCommand","parent":"Global","type":"libraryfunc","description":{"text":"Tells the engine to register a console command. If the command was ran, the engine calls concommand.Run.","internal":"Use concommand.Add instead."},"realm":"Shared and Menu","args":{"arg":[{"text":"The name of the console command to add.","name":"name","type":"string"},{"text":"The help text.","name":"helpText","type":"string"},{"text":"Concommand flags using Enums/FCVAR","name":"flags","type":"number"}]}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"AddonMaterial","parent":"Global","type":"libraryfunc","description":"Loads the specified image from the `/cache` folder, used in combination steamworks.Download. Most addons will provide a 512x512 png image.","realm":"Client and Menu","args":{"arg":{"text":"The name of the file.","name":"name","type":"string"}},"rets":{"ret":{"text":"The material, returns `nil` if the cached file is not an image.","name":"","type":"IMaterial"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"AddWorldTip","parent":"Global","type":"libraryfunc","description":{"text":"This function creates a World Tip, similar to the one shown when aiming at a Thruster where it shows you its force.\n\nThis function will make a World Tip that will only last 50 milliseconds (1/20th of a second), so you must call it continuously as long as you want the World Tip to be shown. It is common to call it inside a Think hook.\n\nContrary to what the function's name implies, it is impossible to create more than one World Tip at the same time. A new World Tip will overwrite the old one, so only use this function when you know nothing else will also be using it.\n\nSee SANDBOX:PaintWorldTips for more information.","note":"This function is only available in Sandbox and its derivatives"},"realm":"Client","args":{"arg":[{"text":"**This argument is no longer used**; it has no effect on anything. You can use nil in this argument.","name":"entindex","type":"number","default":"nil"},{"text":"The text for the world tip to display.","name":"text","type":"string"},{"text":"**This argument is no longer used**; when you add a World Tip it will always last only 0.05 seconds. You can use nil in this argument.","name":"dieTime","type":"number","default":"SysTime() + 0.05"},{"text":"Where in the world you want the World Tip to be drawn. If you add a valid Entity in the next argument, this argument will have no effect on the actual World Tip.","name":"pos","type":"Vector","default":"ent:GetPos()"},{"text":"Which entity you want to associate with the World Tip. This argument is optional. If set to a valid entity, this will override the position set in `pos` with the Entity's position.","name":"ent","type":"Entity","default":"nil"}]}},"example":{"description":"Creates a World Tip where the player is looking. If the player is looking at an entity, the World Tip is positioned on the entity.","code":"hook.Add( \"Think\", \"draw World Tip\", function()\n\tlocal ply = Entity( 1 )\n\tlocal tr = ply:GetEyeTrace()\n\t\n\tlocal pos = tr.HitPos -- will be unused if ent is valid\n\tlocal ent = tr.Entity\n\t\n\tAddWorldTip( nil, \"Hello world!\", nil, pos, ent )\nend )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"Angle","parent":"Global","type":"libraryfunc","description":"Creates an Angle object.","realm":"Shared and Menu","args":{"arg":[{"text":"The pitch value of the angle.\n\n\nIf this is an Angle, this function will return a copy of the given angle.\n\n\nIf this is a string, this function will try to parse the string as a angle. If it fails, it returns a 0 angle.\n(See examples)","name":"pitch","type":"number","default":"0"},{"text":"The yaw value of the angle.","name":"yaw","type":"number","default":"0"},{"text":"The roll value of the angle.","name":"roll","type":"number","default":"0"}]},"rets":{"ret":{"text":"Created angle","name":"","type":"Angle"}}},"example":{"description":"Creates an angle and prints the value to the console.","code":"print( Angle( 1, 2, 3 ) )\nprint( Angle( \"4 5 6\" ) )\nlocal test = Angle( 7, 8, 9 )\nprint( Angle( test ) )\n\nprint( Angle( \"4 5 test\" ) )\nprint( Angle() )","output":"```\n1.00 2.00 3.00\n4.00 5.00 6.00\n7.00 8.00 9.00\n\n0.00 0.00 0.00\n0.00 0.00 0.00\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"AddOriginToPVS","parent":"Global","type":"libraryfunc","description":"Adds the specified vector to the PVS which is currently building. This allows all objects in visleafs visible from that vector to be drawn.","realm":"Server","args":{"arg":{"text":"The origin to add.","name":"position","type":"Vector"}}},"example":{"description":"Adds an RTCamera's current position to all player's PVS, causing props near it to always render on an rtscreen","code":"hook.Add(\"SetupPlayerVisibility\", \"AddRTCamera\", function(pPlayer, pViewEntity)\n\t-- Adds any view entity\n\tif (pViewEntity:IsValid()) then\n\t\tAddOriginToPVS(pViewEntity:GetPos())\n\tend\nend)"},"realms":["Server"],"type":"Function"},
{"function":{"name":"AngleRand","parent":"Global","type":"libraryfunc","description":"Returns an angle with a randomized pitch, yaw, and roll between min(inclusive), max(exclusive).","realm":"Shared and Menu","file":{"text":"lua/includes/util.lua","line":"100-L102"},"args":{"arg":[{"text":"Min bound inclusive.","name":"min","type":"number","default":"-90 for pitch, -180 for yaw and roll"},{"text":"Max bound exclusive.","name":"max","type":"number","default":"90 for pitch, 180 for yaw and roll"}]},"rets":{"ret":{"text":"The randomly generated angle.","name":"","type":"Angle"}}},"example":{"description":"Prints out a random angle.","code":"print( AngleRand() )","output":"-6.949 113.388 130.879"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"BroadcastLua","parent":"Global","type":"libraryfunc","description":{"text":"Sends the specified Lua code to all connected clients and executes it.","note":"If you need to use this function more than once consider using net library. Send net message and make the entire code you want to execute in net.Receive on client."},"realm":"Server","args":{"arg":{"text":"The code to be executed. Capped at length of 254 characters.","name":"code","type":"string"}}},"example":{"description":"Print \"Hello World!\" in the clients' console","code":"BroadcastLua( \"print( 'Hello World!' )\" )","output":"Hello World!"},"realms":["Server"],"type":"Function"},
{"function":{"name":"assert","parent":"Global","type":"libraryfunc","description":"If the result of the first argument is false or nil, an error is thrown with the second argument as the message.","realm":"Shared and Menu","args":{"arg":[{"text":"The expression to assert.","name":"expression","type":"any"},{"text":"The error message to throw when assertion fails. This is only type-checked if the assertion fails.","name":"errorMessage","type":"string","default":"assertion failed!"},{"text":"Any arguments past the error message will be returned by a successful assert.","name":"returns","type":"vararg","default":"nil"}]},"rets":{"ret":[{"text":"If successful, returns the first argument.","name":"","type":"any"},{"text":"If successful, returns the error message. This will be nil if the second argument wasn't specified.\n\nSince the second argument is only type-checked if the assertion fails, this doesn't have to be a string.","name":"","type":"any"},{"text":"Returns any arguments past the error message.","name":"","type":"vararg"}]}},"example":[{"description":"The assertion is successful, and the result of the first argument is returned.","code":"local ABC = assert(print)\nprint(ABC)","output":"function: builtin#25"},{"description":"Since the first argument evaluates to false, an error is thrown.","code":"assert(print == 1, \"print is not equal to 1!\")","output":"[ERROR] lua_run:1: print is not equal to 1!"},{"description":"Examples of return behaviour.","code":"print(assert(5))\nprint(assert(true, \"foo\", 2, {}))","output":"```\n5\ntrue\tfoo\t2\ttable: 0x36409278\n```"}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"CanAddServerToFavorites","parent":"Global","type":"libraryfunc","description":{"text":"Used internally to check if the current server the player is on can be added to favorites or not. Does not check if the server is ALREADY in the favorites.","internal":""},"realm":"Menu","rets":{"ret":{"name":"","type":"boolean"}}},"realms":["Menu"],"type":"Function"},
{"function":{"name":"BuildNetworkedVarsTable","parent":"Global","type":"libraryfunc","description":"Dumps the networked variables of all entities into one table and returns it.","realm":"Shared","rets":{"ret":{"text":"Format:\n* key = Entity for NWVars or number (always 0) for global vars\n* value = table formatted as:\n  * key = string var name\n  * value = any type var value","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"CancelLoading","parent":"Global","type":"libraryfunc","description":"Aborts joining of the server you are currently joining.","realm":"Menu"},"realms":["Menu"],"type":"Function"},
{"function":{"name":"ChangeBackground","parent":"Global","type":"libraryfunc","description":"Sets the active main menu background image to a random entry from the background images pool. Images are added with Global.AddBackgroundImage.","realm":"Menu","file":{"text":"lua/menu/background.lua","line":"85"},"args":{"arg":{"text":"Apparently does nothing.","name":"currentgm","type":"string"}}},"realms":["Menu"],"type":"Function"},
{"function":{"name":"ChangeTooltip","parent":"Global","type":"libraryfunc","description":"Automatically called by the engine when a panel is hovered over with the mouse","realm":"Client and Menu","args":{"arg":{"text":"Panel that has been hovered over","name":"panel","type":"Panel"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"ClearBackgroundImages","parent":"Global","type":"libraryfunc","description":"Empties the pool of main menu background images.","realm":"Menu","file":{"text":"lua/menu/background.lua","line":"71"}},"realms":["Menu"],"type":"Function"},
{"function":{"name":"ClientsideModel","parent":"Global","type":"libraryfunc","description":{"text":"Creates a non physical entity that only exists on the client. See also ents.CreateClientProp.","bug":[{"text":"Parented clientside models will become detached if the parent entity leaves the PVS. **A workaround is available on its github page.**","issue":"861"},{"text":"Clientside entities are not garbage-collected, thus you must store a reference to the object and call CSEnt:Remove manually. **To workaround this bug, you need to hold a reference (in a variable) to the entity and remove it when necessary.**","issue":"1387"},{"text":"Clientside models will occasionally delete themselves during high server lag.","issue":"3184"}]},"realm":"Client","args":{"arg":[{"text":"The file path to the model.","name":"model","type":"string","warning":"Model must be precached with util.PrecacheModel on the server before usage."},{"text":"The render group of the entity for the clientside leaf system, see Enums/RENDERGROUP.","name":"renderGroup","type":"number","default":"RENDERGROUP_OTHER"}]},"rets":{"ret":{"text":"Created client-side model (`C_BaseFlex`).","name":"","type":"CSEnt"}}},"example":{"description":"Creates a clientside entity where the player is looking.","code":"local entity\n\nconcommand.Add( \"test_csent\", function( ply )\n\n\tlocal trace = ply:GetEyeTrace()\n\n\tentity = ClientsideModel( \"models/props_c17/oildrum001_explosive.mdl\" )\n\tentity:SetPos( trace.HitPos + trace.HitNormal * 24 )\n\tentity:Spawn()\n\nend )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"ClientsideScene","parent":"Global","type":"libraryfunc","description":"Creates a scene entity based on the scene name and the entity.","realm":"Client","args":{"arg":[{"text":"The name of the scene.","name":"name","type":"string"},{"text":"The entity to play the scene on.","name":"targetEnt","type":"Entity"}]},"rets":{"ret":{"text":"C_SceneEntity","name":"","type":"CSEnt"}}},"example":{"description":"Plays \"I guess you should go with Alyx\" line from HL2.","code":"ClientsideScene( \"scenes/eli_lab/mo_gowithalyx01.vcd\", LocalPlayer() )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"ClientsideRagdoll","parent":"Global","type":"libraryfunc","description":{"text":"Creates a fully clientside ragdoll.","note":"The ragdoll initially starts as hidden and with shadows disabled, see the example for how to enable it.\n\nThere's no need to call Entity:Spawn on this entity.\n\nThe physics won't initialize at all if the model hasn't been precached serverside first.","bug":{"text":"Clientside entities are not garbage-collected, thus you must store a reference to the object and call CSEnt:Remove manually.","issue":"1387"}},"realm":"Client","args":{"arg":[{"text":"The file path to the model.","name":"model","type":"string","warning":"Model must be precached with util.PrecacheModel on the server before usage."},{"text":"The Enums/RENDERGROUP to assign.","name":"renderGroup","type":"number","default":"RENDERGROUP_OPAQUE"}]},"rets":{"ret":{"text":"The newly created client-side ragdoll. ( C_ClientRagdoll )","name":"","type":"CSEnt"}}},"example":{"description":"Creates a new ragdoll with the player model of breen and enables rendering and shadows.","code":"local ragdoll = ClientsideRagdoll( \"models/player/breen.mdl\" )\nragdoll:SetNoDraw( false )\nragdoll:DrawShadow( true )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"CloseDermaMenus","parent":"Global","type":"libraryfunc","description":"Closes all Derma menus that have been passed to Global.RegisterDermaMenuForClose and calls GM:CloseDermaMenus","realm":"Client and Menu"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"collectgarbage","parent":"Global","type":"libraryfunc","description":"Executes the specified action on the garbage collector.","realm":"Shared and Menu","args":{"arg":[{"text":"The action to run.\n\nValid actions are `collect`, `stop`, `restart`, `count`, `step`, `setpause` and `setstepmul`.","name":"action","type":"string","default":"collect"},{"text":"The argument of the specified action, only applicable for `step`, `setpause` and `setstepmul`.","name":"arg","type":"number"}]},"rets":{"ret":{"text":"If the action is count this is the number of kilobytes of memory used by Lua.\nIf the action is step this is true if a garbage collection cycle was finished.\n\nIf the action is setpause this is the previous value for the GC's pause.\nIf the action is setstepmul this is the previous value for the GC's step.","name":"","type":"any"}}},"example":{"description":"The current floored dynamic memory usage of Lua, in kilobytes.","code":"print( collectgarbage( \"count\" ) )"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Color","parent":"Global","type":"libraryfunc","description":"Creates a Color.","realm":"Shared and Menu","file":{"text":"lua/includes/util/color.lua","line":"10-L18"},"args":{"arg":[{"text":"An integer from 0-255 describing the red value of the color.","name":"r","type":"number"},{"text":"An integer from 0-255 describing the green value of the color.","name":"g","type":"number"},{"text":"An integer from 0-255 describing the blue value of the color.","name":"b","type":"number"},{"text":"An integer from 0-255 describing the alpha (transparency) of the color.","name":"a","type":"number","default":"255"}]},"rets":{"ret":{"text":"The created Color.","name":"","type":"table"}}},"example":[{"description":"Creates a color and prints the components to the console.","code":"PrintTable(Color(1, 2, 3, 4))","output":"```\na\t=\t4\nb\t=\t3\ng\t=\t2\nr\t=\t1\n```"},{"description":"Color variables can have individual channels set using the arguments","code":"local col = Color( 0, 255, 0, 255)\n\ncol.r = 255\n\nPrintTable(col)","output":"```\na\t=\t255\nb\t=\t0\ng\t=\t255\nr\t=\t255\n```"},{"description":"Transforms a color object to a string, then prints it.","code":"local str = tostring( Color( 255, 0, 0 ) )\nprint( str )","output":"255 0 0"},{"description":"Prints \"equal\" if both colors are equal, otherwise \"unequal\" will be printed.","code":"if Color( 255, 0, 0 ) == Color( 255, 0, 0 ) then\n\tprint( \"equal\" )\nelse\n\tprint( \"unequal\" )\nend","output":"equal"}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"ColorAlpha","parent":"Global","type":"libraryfunc","description":"Returns a new Color with the RGB components of the given Color and the alpha value specified.","realm":"Shared and Menu","file":{"text":"lua/includes/util/color.lua","line":"20-L27"},"args":{"arg":[{"text":"The Color from which to take RGB values. This color will not be modified.","name":"color","type":"table"},{"text":"The new alpha value, a number between 0 and 255. Values above 255 will be clamped.","name":"alpha","type":"number"}]},"rets":{"ret":{"text":"The new Color with the modified alpha value","name":"","type":"table"}}},"example":{"code":"local red = Color( 255, 0, 0, 255 )\nlocal red2 = ColorAlpha( red, 125 )\nprint( red.r, red.g, red.b, red.a )\nprint( red2.r, red2.g, red2.b, red2.a )","output":"```\n255\t0\t0\t255\n255\t0\t0\t125\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"ColorToHSL","parent":"Global","type":"libraryfunc","description":"Converts a Color into HSL color space.","realm":"Shared and Menu","args":{"arg":{"text":"The Color.","name":"color","type":"table"}},"rets":{"ret":[{"text":"The hue in degrees `[0, 360]`.","name":"","type":"number"},{"text":"The saturation in the range `[0, 1]`.","name":"","type":"number"},{"text":"The lightness in the range `[0, 1]`.","name":"","type":"number"}]}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"ColorRand","parent":"Global","type":"libraryfunc","description":"Creates a Color with randomized red, green, and blue components. If the alpha argument is true, alpha will also be randomized.","realm":"Shared and Menu","file":{"text":"lua/includes/util.lua","line":"111-L117"},"args":{"arg":{"text":"Should alpha be randomized.","name":"a","type":"boolean","default":"false"}},"rets":{"ret":{"text":"The created Color.","name":"","type":"table"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"ColorToHSV","parent":"Global","type":"libraryfunc","description":"Converts a Color into HSV color space.","realm":"Shared and Menu","args":{"arg":{"text":"The Color.","name":"color","type":"table"}},"rets":{"ret":[{"text":"The hue in degrees `[0, 360]`.","name":"","type":"number"},{"text":"The saturation in the range `[0, 1]`.","name":"","type":"number"},{"text":"The value in the range `[0, 1]`.","name":"","type":"number"}]}},"example":{"description":"Creates a color and prints the HSV values to the console.","code":"print( ColorToHSV( Color( 255, 255, 0 ) ) )","output":"```\n60 1 1\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"CompileFile","parent":"Global","type":"libraryfunc","description":"Attempts to compile the given file. If successful, returns a function that can be called to perform the actual execution of the script.","realm":"Shared","args":{"arg":{"text":"Path to the file, relative to the garrysmod/lua/ directory.","name":"path","type":"string"}},"rets":{"ret":{"text":"The function which executes the script.","name":"","type":"function"}}},"example":{"description":"Assuming our file is named example.lua and located in the garrysmod/lua/ directory, the following code would execute the script.","code":"local example = CompileFile(\"example.lua\")\nexample()","output":"Hello!"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"CompileString","parent":"Global","type":"libraryfunc","description":"This function will compile the code argument as lua code and return a function that will execute that code. \n\nPlease note that this function will not automatically execute the given code after compiling it.","realm":"Shared and Menu","args":{"arg":[{"text":"The code to compile.","name":"code","type":"string"},{"text":"An identifier in case an error is thrown. (The same identifier can be used multiple times)","name":"identifier","type":"string"},{"text":"If false this function will return an error string instead of throwing an error.","name":"HandleError","type":"boolean","default":"true"}]},"rets":{"ret":{"text":"A function that, when called, will execute the given code.\n\nReturns the error string if there was a Lua error and third argument is false.","name":"","type":"function"}}},"example":[{"description":"Code that will not compile, with ErrorHandling set to false.","code":"local code = \"MsgN('Hi)\"\nlocal func = CompileString(code, \"TestCode\", false)\nMsgN(func)","output":"TestCode:1: unfinished string near '<eof>' (this is not a script error - it is a returned string)"},{"description":"Code that will compile.","code":"local code = \"MsgN('Hi')\"\nlocal func = CompileString(code, \"TestCode\")\n\nif func then -- Compile String returns nil if 3rd argument is true and code has errors.\n   func()\nend","output":"Hi"},{"description":"Compiled code with custom arguments; captured with the varargs identifier.","code":"local code = [[\n\tlocal args = { ... } \n\tprint( unpack( args ) )\n\tprint( args[ 2 ] + args[ 3 ])\n\tprint( args[ 4 ] .. args[ 5 ])\n\n\tlocal first, second = ...\n\tprint( first, second )\n]]\nlocal func = CompileString( code, \"VarargCodeTest\" )\nfunc( 1, 2, 3, \"A\", \"B\", \"C\" )","output":"```\n1\t2\t3\tA\tB\tC\n5\nAB\n1   2\n```"}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"ConsoleAutoComplete","parent":"Global","type":"libraryfunc","description":"Returns a table of console command names beginning with the given text.","realm":"Menu","args":{"arg":{"text":"Text that the console commands must begin with.","name":"text","type":"string"}},"rets":{"ret":{"text":"Table of console command names.","name":"","type":"table"}}},"realms":["Menu"],"type":"Function"},
{"function":{"name":"CreateClientConVar","parent":"Global","type":"libraryfunc","description":{"text":"Makes a clientside-only console variable\n\n\n\nAlthough this function is shared, it should only be used clientside.","note":"This function is a wrapper of Global.CreateConVar, with the difference being that FCVAR_ARCHIVE and FCVAR_USERINFO are added automatically when **shouldsave** and **userinfo** are true, respectively."},"realm":"Shared and Menu","file":{"text":"lua/includes/util.lua","line":"411-L425"},"args":{"arg":[{"text":"Name of the ConVar to be created and able to be accessed.\n\nThis cannot be a name of existing console command or console variable. It will silently fail if it is.","name":"name","type":"string"},{"text":"Default value of the ConVar.","name":"default","type":"string"},{"text":"Should the ConVar be saved across sessions in the cfg/client.vdf file.","name":"shouldsave","type":"boolean","default":"true"},{"text":"Should the ConVar and its containing data be sent to the server when it has changed. This make the convar accessible from server using Player:GetInfoNum and similar functions.","name":"userinfo","type":"boolean","default":"false"},{"text":"Help text to display in the console.","name":"helptext","type":"string","default":""},{"text":"If set, the convar cannot be changed to a number lower than this value.","name":"min","type":"number","default":"nil"},{"text":"If set, the convar cannot be changed to a number higher than this value.","name":"max","type":"number","default":"nil"}]},"rets":{"ret":{"text":"Created convar.","name":"","type":"ConVar"}}},"example":{"description":"Creates a ConVar that does nothing and saves.","code":"CreateClientConVar(\"superspeed_enabled\", \"0\", true, false)"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"ConVarExists","parent":"Global","type":"libraryfunc","description":"Returns whether a ConVar with the given name exists or not","realm":"Shared and Menu","args":{"arg":{"text":"Name of the ConVar.","name":"name","type":"string"}},"rets":{"ret":{"text":"True if the ConVar exists, false otherwise.","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"CreateConVar","parent":"Global","type":"libraryfunc","description":"Creates a console variable (ConVar), in general these are for things like gamemode/server settings.","realm":"Shared and Menu","args":{"arg":[{"text":"Name of the ConVar.\n\nThis cannot be a name of an engine console command or console variable. It will silently fail if it is. If it is the same name as another lua ConVar, it will return that ConVar object.","name":"name","type":"string"},{"text":"Default value of the convar. Can also be a number.","name":"value","type":"string"},{"text":"Flags of the convar, see Enums/FCVAR, either as bitflag or as table.","name":"flags","type":"number","default":"FCVAR_NONE"},{"text":"The help text to show in the console.","name":"helptext","type":"string","default":""},{"text":"If set, the ConVar cannot be changed to a number lower than this value.","name":"min","type":"number","default":"nil"},{"text":"If set, the ConVar cannot be changed to a number higher than this value.","name":"max","type":"number","default":"nil"}]},"rets":{"ret":{"text":"The convar created.","name":"","type":"ConVar"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"CreateMaterial","parent":"Global","type":"libraryfunc","description":{"text":"Creates a new material with the specified name and shader.","note":["Materials created with this function can be used in Entity:SetMaterial and Entity:SetSubMaterial by prepending a \"!\" to their material name argument.","This does not work with [patch materials](https://developer.valvesoftware.com/wiki/Patch)."],"bug":[{"text":".pngs must be loaded with Global.Material before being used with this function.","issue":"1531"},{"text":"This will not create a new material if another material object with the same name already exists.","issue":"3103"}]},"realm":"Client and Menu","args":{"arg":[{"text":"The material name. Must be unique.","name":"name","type":"string"},{"text":"The shader name. See Shaders.","name":"shaderName","type":"string"},{"text":"Key-value table that contains shader parameters and proxies.\n\n* See: [List of Shader Parameters on Valve Developers Wiki](https://developer.valvesoftware.com/wiki/Category:List_of_Shader_Parameters) and each shader's page from .","name":"materialData","type":"table","note":"Unlike IMaterial:SetTexture, this table will not accept ITexture values. Instead, use the texture's name (see ITexture:GetName)."}]},"rets":{"ret":{"text":"Created material","name":"","type":"IMaterial"}}},"example":{"description":"Alternative to render.SetColorMaterial, mainly for use with Entity:SetMaterial","code":"CreateMaterial( \"colortexshp\", \"VertexLitGeneric\", {\n  [\"$basetexture\"] = \"color/white\",\n  [\"$model\"] = 1,\n  [\"$translucent\"] = 1,\n  [\"$vertexalpha\"] = 1,\n  [\"$vertexcolor\"] = 1\n} )"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"CreatePhysCollideBox","parent":"Global","type":"libraryfunc","description":{"text":"Creates a new PhysCollide from the given bounds.","bug":{"text":"This fails to create planes or points - no components of the mins or maxs can be the same.","issue":"3568"}},"realm":"Shared","args":{"arg":[{"text":"Min corner of the box. This is not automatically ordered with the maxs and must contain the smallest vector components. See Global.OrderVectors.","name":"mins","type":"Vector"},{"text":"Max corner of the box. This is not automatically ordered with the mins and must contain the largest vector components.","name":"maxs","type":"Vector"}]},"rets":{"ret":{"text":"The new PhysCollide. This will be a NULL PhysCollide (PhysCollide:IsValid returns false) if given bad vectors or no more PhysCollides can be created in the physics engine.","name":"","type":"PhysCollide"}}},"example":{"description":"A box that interacts correctly with VPhysics objects and player movement.","code":"AddCSLuaFile()\n\nDEFINE_BASECLASS( \"base_anim\" )\n\nENT.PrintName = \"Cube\"\nENT.Spawnable = true\n\nENT.Mins = Vector( -16, -16, -16 )\nENT.Maxs = Vector(  16,  16,  16 )\n\nfunction ENT:Initialize()\n    self.PhysCollide = CreatePhysCollideBox( self.Mins, self.Maxs )\n    self:SetCollisionBounds( self.Mins, self.Maxs )\n\n    if SERVER then\n        self:PhysicsInitBox( self.Mins, self.Maxs )\n        self:SetSolid( SOLID_VPHYSICS )\n        self:PhysWake()\n    end\n\n    if CLIENT then\n        self:SetRenderBounds( self.Mins, self.Maxs )\n    end\n\n    self:EnableCustomCollisions( true )\n    self:DrawShadow( false )\nend\n\n-- Handles collisions against traces. This includes player movement.\nfunction ENT:TestCollision( startpos, delta, isbox, extents )\n    if not IsValid( self.PhysCollide ) then\n        return\n    end\n\n    -- TraceBox expects the trace to begin at the center of the box, but TestCollision is bad\n    local max = extents\n    local min = -extents\n    max.z = max.z - min.z\n    min.z = 0\n\n    local hit, norm, frac = self.PhysCollide:TraceBox( self:GetPos(), self:GetAngles(), startpos, startpos + delta, min, max )\n\n    if not hit then\n        return\n    end\n\n    return { \n        HitPos = hit,\n        Normal  = norm,\n        Fraction = frac,\n    }\nend\n\nfunction ENT:Draw()\n    render.DrawWireframeBox( self:GetPos(), self:GetAngles(), self.Mins, self.Maxs, Color( 255, 0, 0 ), true )\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"CreateParticleSystem","parent":"Global","type":"libraryfunc","description":{"text":"Creates a new particle system.","note":"The particle effect must be precached with Global.PrecacheParticleSystem and the file its from must be added via game.AddParticles before it can be used!"},"realm":"Client","args":{"arg":[{"text":"The entity to attach the control point to.","name":"ent","type":"Entity"},{"text":"The name of the effect to create. It must be precached.","name":"effect","type":"string"},{"text":"See Enums/PATTACH.","name":"partAttachment","type":"number"},{"text":"The attachment ID on the entity to attach the particle system to","name":"entAttachment","type":"number","default":"0"},{"text":"The offset from the Entity:GetPos of the entity we are attaching this CP to.","name":"offset","type":"Vector","default":"Vector( 0, 0, 0 )"}]},"rets":{"ret":{"text":"The created particle system.","name":"","type":"CNewParticleEffect"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"CreateSound","parent":"Global","type":"libraryfunc","description":{"text":"Returns a sound parented to the specified entity.","note":"You can only create one CSoundPatch per audio file, per entity at the same time."},"realm":"Shared","args":{"arg":[{"text":"The target entity.","name":"targetEnt","type":"Entity"},{"text":"The sound to play.","name":"soundName","type":"string"},{"text":"A CRecipientFilter of the players that will have this sound networked to them.","name":"filter","type":"CRecipientFilter","default":"[CPASAttenuationFilter](https://developer.valvesoftware.com/wiki/CRecipientFilter#Derived_classes)","note":"This argument only works serverside."}]},"rets":{"ret":{"text":"The sound object","name":"","type":"CSoundPatch"}}},"example":{"description":"Play a sound everywhere, similar to surface.PlaySound but available clientside and serverside.","code":"local LoadedSounds\nif CLIENT then\n\tLoadedSounds = {} -- this table caches existing CSoundPatches\nend\n\nlocal function ReadSound( FileName )\n\tlocal sound\n\tlocal filter\n\tif SERVER then\n\t\tfilter = RecipientFilter()\n\t\tfilter:AddAllPlayers()\n\tend\n\tif SERVER or !LoadedSounds[FileName] then\n\t\t-- The sound is always re-created serverside because of the RecipientFilter.\n\t\tsound = CreateSound( game.GetWorld(), FileName, filter ) -- create the new sound, parented to the worldspawn (which always exists)\n\t\tif sound then\n\t\t\tsound:SetSoundLevel( 0 ) -- play everywhere\n\t\t\tif CLIENT then\n\t\t\t\tLoadedSounds[FileName] = { sound, filter } -- cache the CSoundPatch\n\t\t\tend\n\t\tend\n\telse\n\t\tsound = LoadedSounds[FileName][1]\n\t\tfilter = LoadedSounds[FileName][2]\n\tend\n\tif sound then\n\t\tif CLIENT then\n\t\t\tsound:Stop() -- it won't play again otherwise\n\t\tend\n\t\tsound:Play()\n\tend\n\treturn sound -- useful if you want to stop the sound yourself\nend\n\n-- When we are ready, we play the sound:\nReadSound( \"phx/hmetal1.wav\" )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"CreatePhysCollidesFromModel","parent":"Global","type":"libraryfunc","description":"Creates PhysCollide objects for every physics object the model has. The model must be precached with util.PrecacheModel before being used with this function.","realm":"Shared","args":{"arg":{"text":"Model path to get the collision objects of.","name":"modelName","type":"string"}},"rets":{"ret":{"text":"Table of PhysCollide objects. The number of entries will match the model's physics object count. See also Entity:GetPhysicsObjectCount. Returns no value if the model doesn't exist, or has not been precached.","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"CreateSprite","parent":"Global","type":"libraryfunc","description":"Creates and returns a new DSprite element with the supplied material.","realm":"Client","args":{"arg":{"text":"Material the sprite should draw.","name":"material","type":"IMaterial"}},"rets":{"ret":{"text":"The new DSprite element.","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"CurTime","parent":"Global","type":"libraryfunc","description":{"text":"Returns the uptime of the server in seconds (to at least 4 decimal places)\n\nThis is a synchronised value and affected by various factors such as host_timescale (or game.GetTimeScale) and the server being paused - either by sv_pausable or all players disconnecting.\n\nYou should use this function for timing in-game events but not for real-world events.\n\nSee also: Global.RealTime, Global.SysTime","note":"This is internally defined as a float, and as such it will be affected by precision loss if your server uptime is more than 6 hours, which will cause jittery movement of players and props and inaccuracy of timers, it is highly encouraged to refresh or change the map when that happens (a server restart is not necessary).\n\n\n\nThis is **NOT** easy as it sounds to fix in the engine, so please refrain from posting issues about this","bug":{"text":"This returns 0 in GM:PlayerAuthed.","issue":"3026"}},"realm":"Shared and Menu","rets":{"ret":{"text":"Time synced with the game server.","name":"","type":"number"}}},"example":{"description":"Simple delay timer.","code":{"text":"local delay = 0\n\nhook.Add( \"Think\", \"CurTimeDelay\", function()\n\tif CurTime()","delay":{"then":"","return":"","end":"","print":"","this":"","message":"","will":"","repeat":"","every":"","seconds.":"","delay":"CurTime()","ode":"ode","output":"This message will repeat every 5 seconds."}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"DebugInfo","parent":"Global","type":"libraryfunc","description":"Writes text to the right hand side of the screen, like the old error system. Messages disappear after a couple of seconds.","realm":"Shared and Menu","args":{"arg":[{"text":"The location on the right hand screen to write the debug info to. Starts at 0, no upper limit","name":"slot","type":"number"},{"text":"The debugging information to be written to the screen","name":"info","type":"string"}]}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"DeriveGamemode","parent":"Global","type":"libraryfunc","description":"Loads and registers the specified gamemode, setting the GM table's DerivedFrom field to the value provided, if the table exists. The DerivedFrom field is used post-gamemode-load as the \"derived\" parameter for gamemode.Register.","realm":"Shared","args":{"arg":{"text":"Gamemode name to derive from.","name":"base","type":"string"}}},"example":{"name":"Example","description":"Retrieves data from sandbox.","code":"DeriveGamemode(\"sandbox\")"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"DEFINE_BASECLASS","parent":"Global","type":"libraryfunc","description":"This is not a function. This is a preprocessor keyword that translates to:\n```\nlocal BaseClass = baseclass.Get( \"my_weapon\" )\n```\nIf you type `DEFINE_BASECLASS( \"my_weapon\" )` in your script.\n\nSee baseclass.Get for more information.","realm":"Shared and Menu","args":{"arg":{"text":"Baseclass name","name":"value","type":"string"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"DamageInfo","parent":"Global","type":"libraryfunc","description":{"text":"Returns an CTakeDamageInfo object.","bug":{"text":"This does not create a unique object, but instead returns a shared reference. That means you cannot use two or more of these objects at once.","issue":"2771"}},"realm":"Shared","rets":{"ret":{"text":"The CTakeDamageInfo object.","name":"","type":"CTakeDamageInfo"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Derma_DrawBackgroundBlur","parent":"Global","type":"libraryfunc","description":"Draws background blur around the given panel.","realm":"Client and Menu","file":{"text":"lua/derma/derma_utils.lua","line":"7-L37"},"args":{"arg":[{"text":"Panel to draw the background blur around","name":"panel","type":"Panel"},{"text":"Time that the blur began being painted","name":"startTime","type":"number"}]}},"example":{"description":"Blur being drawn around a panel","code":"function PANEL:Init()\n\tself.startTime = SysTime()\nend\n\nfunction PANEL:Paint()\n\tDerma_DrawBackgroundBlur(self, self.startTime)\nend","output":"Background blur is drawn around the panel"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"Derma_Anim","parent":"Global","type":"libraryfunc","description":"Creates a new derma animation.","realm":"Client and Menu","file":{"text":"lua/derma/derma_animation.lua","line":"67"},"args":{"arg":[{"text":"Name of the animation to create","name":"name","type":"string"},{"text":"Panel to run the animation on","name":"panel","type":"Panel"},{"text":"Function to call to process the animation\n\n\nArguments:\n* Panel pnl - the panel passed to Derma_Anim\n* table anim - the anim table\n* number delta - the fraction of the progress through the animation\n* any data - optional data passed to the run metatable method","name":"func","type":"function"}]},"rets":{"ret":{"text":"A lua metatable containing four methods:\n* Run() - Should be called each frame you want the animation to be ran.\n* Active() - Returns if the animation is currently active (has not finished and stop has not been called)\n* Stop() - Halts the animation at its current progress.\n* Start( Length, Data ) - Prepares the animation to be ran for Length seconds. Must be called once before calling Run(). The data parameter will be passed to the func function.","name":"","type":"table"}}},"example":{"description":"Applies an [easeInQuad](http://easings.net/#easeInQuad) easing to the panel to make it glide naturally across the screen.","code":"local function inQuad(fraction, beginning, change)\n\treturn change * (fraction ^ 2) + beginning\nend\n\nlocal main = vgui.Create(\"DFrame\")\nmain:SetTitle(\"Derma_Anim Example\")\nmain:SetSize(250, 200)\nmain:SetPos(200)\nmain:MakePopup()\nlocal anim = Derma_Anim(\"EaseInQuad\", main, function(pnl, anim, delta, data)\n\tpnl:SetPos(inQuad(delta, 200, 600), 300) -- Change the X coordinate from 200 to 200+600\nend)\nanim:Start(2) -- Animate for two seconds\nmain.Think = function(self)\n\tif anim:Active() then\n\t\tanim:Run()\n\tend\nend","output":"Panel naturally glides across the screen from 200 x to 800 x"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"Derma_Install_Convar_Functions","parent":"Global","type":"libraryfunc","description":"Makes the panel (usually an input of sorts) respond to changes in console variables by adding next functions to the panel:\n* Panel:SetConVar\n* Panel:ConVarChanged\n* Panel:ConVarStringThink\n* Panel:ConVarNumberThink\n\nThe console variable value is saved in the `m_strConVar` property of the panel.\n\nThe panel should call\nPanel:ConVarStringThink or \nPanel:ConVarNumberThink \nin its PANEL:Think hook and should call Panel:ConVarChanged when the panel's value has changed.","realm":"Client and Menu","file":{"text":"lua/derma/init.lua","line":"75-L116"},"args":{"arg":{"text":"The panel the functions should be added to.","name":"target","type":"Panel"}}},"example":{"description":"Adds the functions to a panel (snippet of vgui/dcheckbox.lua)","code":"local PANEL = {}\n\nDerma_Install_Convar_Functions( PANEL )\n\nfunction PANEL:Init()\n\t-- Init function here\nend\nfunction PANEL:Think()\n\tself:ConVarStringThink()\nend","output":"The `PANEL` table now contains the functions `SetConVar`, `ConVarChanged`, `ConVarStringThink` and `ConVarNumberThink` (and an `Init` function and a `Think` function)"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"Derma_Hook","parent":"Global","type":"libraryfunc","description":"Creates panel method that calls the supplied Derma skin hook via derma.SkinHook","realm":"Client and Menu","file":{"text":"lua/derma/init.lua","line":"49-L55"},"args":{"arg":[{"text":"Panel to add the hook to","name":"panel","type":"Panel"},{"text":"Name of panel function to create","name":"functionName","type":"string"},{"text":"Name of Derma skin hook to call within the function","name":"hookName","type":"string"},{"text":"Type of element to call Derma skin hook for","name":"typeName","type":"string"}]}},"example":{"description":"Creates PANEL.Paint function to call Derma skin hook 'Paint' with type 'Panel'","code":"Derma_Hook( PANEL, \"Paint\", \"Paint\", \"Panel\" )","output":"Panel is painted with correct derma hooks"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"Derma_Message","parent":"Global","type":"libraryfunc","description":"Creates a derma window to display information","realm":"Client and Menu","args":{"arg":[{"text":"The text within the created panel.","name":"Text","type":"string"},{"text":"The title of the created panel.","name":"Title","type":"string"},{"text":"The text of the button to close the panel.","name":"Button","type":"string"}]},"rets":{"ret":{"text":"The created DFrame","name":"","type":"Panel"}}},"example":{"description":"Creates a popup informing the player that they are dead.","code":"Derma_Message(\"You are currently dead\", \"Death Notice\", \"OK\")","output":{"image":{"src":"Derma_Message.png"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"DermaMenu","parent":"Global","type":"libraryfunc","description":"Creates a DMenu and closes any current menus.","realm":"Client and Menu","file":{"text":"lua/derma/derma_menus.lua","line":"10-L18"},"args":{"arg":[{"text":"If we should keep other DMenus open (`true`) or not (`false`).","name":"keepOpen","type":"boolean","default":"false"},{"text":"The panel to parent the created menu to.","name":"parent","type":"Panel","default":"nil"}]},"rets":{"ret":{"text":"The created DMenu.","name":"menu","type":"Panel"}}},"example":{"description":"Creates a DMenu with buttons to commit suicide or close it.","code":"local menu = DermaMenu() \nmenu:AddOption( \"Die\", function() RunConsoleCommand( \"kill\" ) end )\nmenu:AddOption( \"Close\", function() print( \"Close pressed\" ) end ) -- The menu will remove itself, we don't have to do anything.\nmenu:Open()","output":{"image":{"src":"DermaMenu.png"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"Derma_Query","parent":"Global","type":"libraryfunc","description":"Shows a message box in the middle of the screen, with up to 4 buttons they can press.","realm":"Client and Menu","args":{"arg":[{"text":"The message to display.","name":"text","type":"string","default":"Message Text (Second Parameter)"},{"text":"The title to give the message box.","name":"title","type":"string","default":"Message Title (First Parameter)"},{"text":"The text to display on the first button.","name":"btn1text","type":"string"},{"text":"The function to run if the user clicks the first button.","name":"btn1func","type":"function","default":"nil"},{"text":"The text to display on the second button.","name":"btn2text","type":"string","default":"nil"},{"text":"The function to run if the user clicks the second button.","name":"btn2func","type":"function","default":"nil"},{"text":"The text to display on the third button","name":"btn3text","type":"string","default":"nil"},{"text":"The function to run if the user clicks the third button.","name":"btn3func","type":"function","default":"nil"},{"text":"The text to display on the fourth button","name":"btn4text","type":"string","default":"nil"},{"text":"The function to run if the user clicks the fourth button.","name":"btn4func","type":"function","default":"nil"}]},"rets":{"ret":{"text":"The Panel object of the created window.","name":"","type":"Panel"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"Derma_StringRequest","parent":"Global","type":"libraryfunc","description":"Creates a derma window asking players to input a string.","realm":"Client and Menu","args":{"arg":[{"text":"The title of the created panel.","name":"title","type":"string"},{"text":"The text above the input box","name":"subtitle","type":"string"},{"text":"The default text for the input box.","name":"default","type":"string"},{"text":"The function to be called once the user has confirmed their input.","name":"confirm","type":"function"},{"text":"The function to be called once the user has cancelled their input","name":"cancel","type":"function","default":"nil"},{"text":"Allows you to override text of the \"OK\" button","name":"confirmText","type":"string","default":"OK"},{"text":"Allows you to override text of the \"Cancel\" button","name":"cancelText","type":"string","default":"Cancel"}]},"rets":{"ret":{"text":"The created DFrame","name":"","type":"Panel"}}},"example":{"description":"Asks the user to input a string which is then printed to their console","code":"Derma_StringRequest(\n\t\"Console Print\", \n\t\"Input the string to print to console\",\n\t\"\",\n\tfunction(text) print(text) end,\n\tfunction(text) print(\"Cancelled input\") end\n)","output":{"image":{"src":"Derma_StringRequest.png"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"DOF_Kill","parent":"Global","type":"libraryfunc","description":"Cancels current DOF post-process effect started with Global.DOF_Start","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"DisableClipping","parent":"Global","type":"libraryfunc","description":"Sets whether rendering should be limited to being inside a panel or not.\n\nSee also Panel:NoClipping.","realm":"Client and Menu","args":{"arg":{"text":"Whether or not clipping should be disabled","name":"disable","type":"boolean"}},"rets":{"ret":{"text":"Whether the clipping was enabled or not before this function call","name":"oldState","type":"boolean","added":"2020.03.17"}}},"example":{"description":"Renders a white box outside of the panel","code":"function PANEL:Paint()\n\tlocal old = DisableClipping( true )\n\tdraw.RoundedBox( 0, -50, -50, 25, 25, color_white )\n\tDisableClipping( old )\nend"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"DOFModeHack","parent":"Global","type":"libraryfunc","description":{"text":"A hacky method used to fix some bugs regarding DoF. What this basically does it force all `C_BaseAnimating` entities to have the translucent , even if they use opaque or two-pass models.","page":",rendergroupEnums/RENDERGROUP","internal":""},"realm":"Client","args":{"arg":{"text":"Enables or disables depth-of-field mode","name":"enable","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"DOF_Start","parent":"Global","type":"libraryfunc","description":"Cancels any existing DOF post-process effects.\nBegins the DOF post-process effect.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"DrawMaterialOverlay","parent":"Global","type":"libraryfunc","description":"Draws a material overlay on the screen.","realm":"Client","file":{"text":"lua/postprocess/overlay.lua","line":"11-L31"},"args":{"arg":[{"text":"This will be the material that is drawn onto the screen.","name":"Material","type":"string"},{"text":"This will adjust how much the material will refract your screen.","name":"RefractAmount","type":"number"}]}},"example":{"description":"Creates a fisheye effect on your screen.","code":"hook.Add( \"RenderScreenspaceEffects\", \"FishEyeEffect\", function()\n\n\tDrawMaterialOverlay( \"models/props_c17/fisheyelens\", -0.06 )\n\nend )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"DrawBackground","parent":"Global","type":"libraryfunc","description":{"text":"Draws the currently active main menu background image and handles transitioning between background images.\n\nThis is called by default in the menu panel's Paint hook.","internal":""},"realm":"Menu","file":{"text":"lua/menu/background.lua","line":"73-L93"}},"realms":["Menu"],"type":"Function"},
{"function":{"name":"DrawBloom","parent":"Global","type":"libraryfunc","description":"Draws the bloom shader, which creates a glowing effect from bright objects.","realm":"Client","file":{"text":"lua/postprocess/bloom.lua","line":"25-L59"},"args":{"arg":[{"text":"Determines how much to darken the effect. A lower number will make the glow come from lower light levels. A value of `1` will make the bloom effect unnoticeable. Negative values will make even pitch black areas glow.","name":"Darken","type":"number"},{"text":"Will affect how bright the glowing spots are. A value of `0` will make the bloom effect unnoticeable.","name":"Multiply","type":"number"},{"text":"The size of the bloom effect along the horizontal axis.","name":"SizeX","type":"number"},{"text":"The size of the bloom effect along the vertical axis.","name":"SizeY","type":"number"},{"text":"Determines how much to exaggerate the effect.","name":"Passes","type":"number"},{"text":"Will multiply the colors of the glowing spots, making them more vivid.","name":"ColorMultiply","type":"number"},{"text":"How much red to multiply with the glowing color. Should be between `0` and `1`.","name":"Red","type":"number"},{"text":"How much green to multiply with the glowing color. Should be between `0` and `1`.","name":"Green","type":"number"},{"text":"How much blue to multiply with the glowing color. Should be between `0` and `1`.","name":"Blue","type":"number"}]}},"example":{"description":"Draws bloom effect with default settings.","code":"hook.Add( \"RenderScreenspaceEffects\", \"BloomEffect\", function()\n\n\tDrawBloom( 0.65, 2, 9, 9, 1, 1, 1, 1, 1 )\n\nend )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"DrawColorModify","parent":"Global","type":"libraryfunc","description":"Draws the Color Modify shader, which can be used to adjust colors on screen.","realm":"Client","file":{"text":"lua/postprocess/color_modify.lua","line":"19-L32"},"args":{"arg":{"text":"Color modification parameters. See Shaders/g_colourmodify and the example below. Note that if you leave out a field, it will retain its last value which may have changed if another caller uses this function.","name":"modifyParameters","type":"table"}}},"example":{"description":"Draws color modify with bright yellow and green colors.","code":"local tab = {\n\t[ \"$pp_colour_addr\" ] = 0.02,\n\t[ \"$pp_colour_addg\" ] = 0.02,\n\t[ \"$pp_colour_addb\" ] = 0,\n\t[ \"$pp_colour_brightness\" ] = 0,\n\t[ \"$pp_colour_contrast\" ] = 1,\n\t[ \"$pp_colour_colour\" ] = 3,\n\t[ \"$pp_colour_mulr\" ] = 0,\n\t[ \"$pp_colour_mulg\" ] = 0.02,\n\t[ \"$pp_colour_mulb\" ] = 0\n}\n\nhook.Add( \"RenderScreenspaceEffects\", \"color_modify_example\", function()\n\n\tDrawColorModify( tab )\n\nend )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"DrawMotionBlur","parent":"Global","type":"libraryfunc","description":"Creates a motion blur effect by drawing your screen multiple times.","realm":"Client","file":{"text":"lua/postprocess/motion_blur.lua","line":"17-L61"},"args":{"arg":[{"text":"How much alpha to change per frame.","name":"AddAlpha","type":"number"},{"text":"How much alpha the frames will have. A value of 0 will not render the motion blur effect.","name":"DrawAlpha","type":"number"},{"text":"Determines the amount of time between frames to capture.","name":"Delay","type":"number"}]}},"example":{"description":"Creates a motion blur effect.","code":"hook.Add( \"RenderScreenspaceEffects\", \"MotionBlurEffect\", function()\n\n\tDrawMotionBlur( 0.4, 0.8, 0.01 )\n\nend )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"DrawSobel","parent":"Global","type":"libraryfunc","description":"Draws the sobel shader, which detects edges and draws a black border.","realm":"Client","file":{"text":"lua/postprocess/sobel.lua","line":"8-L18"},"args":{"arg":{"text":"Determines the threshold of edges. A value of `0` will make your screen completely black.","name":"Threshold","type":"number"}}},"example":{"description":"Draws the sobel shader.","code":"hook.Add( \"RenderScreenspaceEffects\", \"SobelShader\", function()\n\n\tDrawSobel( 0.5 )\n\nend )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"DrawTexturize","parent":"Global","type":"libraryfunc","description":{"text":"Draws the texturize shader, which replaces each pixel on your screen with a different part of the texture depending on its brightness. See  for information on making the texture.","page":",g_texturizeShaders/g_texturize"},"realm":"Client","file":{"text":"lua/postprocess/texturize.lua","line":"8-L19"},"args":{"arg":[{"text":"Scale of the texture. A smaller number creates a larger texture.","name":"Scale","type":"number"},{"text":"This will be the texture to use in the effect. Make sure you use Global.Material to get the texture number.","name":"BaseTexture","type":"number"}]}},"example":{"description":"Draws the texturize shader with a pattern texture.","code":"local pattern = Material(\"pp/texturize/pattern1.png\")\n\nhook.Add( \"RenderScreenspaceEffects\", \"TexturizeShader\", function()\n\n\tDrawTexturize( 1, pattern )\n\nend )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"DrawSunbeams","parent":"Global","type":"libraryfunc","description":"Renders the post-processing effect of beams of light originating from the map's sun. Utilises the `pp/sunbeams` material.","realm":"Client","file":{"text":"lua/postprocess/sunbeams.lua","line":"14-L29"},"args":{"arg":[{"text":"`$darken` property for sunbeams material.","name":"darken","type":"number"},{"text":"`$multiply` property for sunbeams material.","name":"multiplier","type":"number"},{"text":"`$sunsize` property for sunbeams material.","name":"sunSize","type":"number"},{"text":"`$sunx` property for sunbeams material.","name":"sunX","type":"number"},{"text":"`$suny` property for sunbeams material.","name":"sunY","type":"number"}]}},"example":[{"code":"DrawSunbeams( 0.3, 0.12, 1, 1.2, 1.2 )"},{"description":"Smaller sunbeams (more realistic)","code":"DrawSunbeams( 0.1, 0.013, 0.14, 0.2, 0.6 )"}],"realms":["Client"],"type":"Function"},
{"function":{"name":"DrawSharpen","parent":"Global","type":"libraryfunc","description":"Draws the sharpen shader, which creates more contrast.","realm":"Client","file":{"text":"lua/postprocess/sharpen.lua","line":"12-L22"},"args":{"arg":[{"text":"How much contrast to create.","name":"Contrast","type":"number"},{"text":"How large the contrast effect will be.","name":"Distance","type":"number"}]}},"example":{"description":"Draws the sharpen shader.","code":"hook.Add( \"RenderScreenspaceEffects\", \"SharpenShader\", function()\n\n\tDrawSharpen( 1.2, 1.2 )\n\nend )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"DrawToyTown","parent":"Global","type":"libraryfunc","description":"Draws the toy town shader, which blurs the top and bottom of your screen. This can make very large objects look like toys, hence the name.","realm":"Client","file":{"text":"lua/postprocess/toytown.lua","line":"12-L28"},"args":{"arg":[{"text":"An integer determining how many times to draw the effect. A higher number creates more blur.","name":"Passes","type":"number"},{"text":"The amount of screen which should be blurred on the top and bottom.","name":"Height","type":"number"}]}},"example":{"description":"Draws toy town effect.","code":"hook.Add( \"RenderScreenspaceEffects\", \"ToytownEffect\", function()\n\n\tDrawToyTown(2, ScrH() / 2)\n\nend )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"DropEntityIfHeld","parent":"Global","type":"libraryfunc","description":"Drops the specified entity if it is being held by any player with Gravity Gun or +use pickup.","realm":"Shared","args":{"arg":{"text":"The entity to drop.","name":"ent","type":"Entity"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"DynamicLight","parent":"Global","type":"libraryfunc","description":{"text":"Creates or replaces a dynamic light with the given id.","note":"Only 32 dlights and 64 elights can be active at once.","warning":"It is not safe to hold a reference to this object after creation since its data can be replaced by another dlight at any time.","bug":{"text":"The minlight parameter affects the world and entities differently.","issue":"3798"}},"realm":"Client","args":{"arg":[{"text":"An unsigned Integer. Usually an  is used here.","name":"index","type":"number","page":",entity indexEntity:EntIndex"},{"text":"Allocates an elight instead of a dlight. Elights have a higher light limit and do not light the world (making the \"noworld\" parameter have no effect).","name":"elight","type":"boolean","default":"false"}]},"rets":{"ret":{"text":"A DynamicLight structured table. See Structures/DynamicLight","name":"","type":"table"}}},"example":{"description":"Emits a bright white light from local players eyes.","code":"hook.Add( \"Think\", \"Think_Lights!\", function()\n\tlocal dlight = DynamicLight( LocalPlayer():EntIndex() )\n\tif ( dlight ) then\n\t\tdlight.pos = LocalPlayer():GetShootPos()\n\t\tdlight.r = 255\n\t\tdlight.g = 255\n\t\tdlight.b = 255\n\t\tdlight.brightness = 2\n\t\tdlight.Decay = 1000\n\t\tdlight.Size = 256\n\t\tdlight.DieTime = CurTime() + 1\n\tend\nend )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"EffectData","parent":"Global","type":"libraryfunc","description":{"text":"Returns a CEffectData object to be used with util.Effect.","bug":{"text":"This does not create a unique object, but instead returns a shared reference. That means you cannot use two or more of these objects at once.","issue":"2771"}},"realm":"Shared","rets":{"ret":{"text":"The CEffectData object.","name":"","type":"CEffectData"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Either","parent":"Global","type":"libraryfunc","description":"An [eagerly evaluated](https://en.wikipedia.org/wiki/Eager_evaluation) [ternary operator](https://en.wikipedia.org/wiki/%3F:), or, in layman's terms, a compact \"if then else\" statement.\n\nIn most cases, you should just use Lua's [\"pseudo\" ternary operator](https://en.wikipedia.org/wiki/%3F:#Lua), like this:\n\n```\nlocal myCondition = true\nlocal consequent = \"myCondition is true\"\nlocal alternative = \"myCondition is false\"\n\nprint(myCondition and consequent or alternative)\n```\n\nHowever, in very rare cases, you may find `Either` useful. In the above example, due to [short-circuit evaluation](https://en.wikipedia.org/wiki/Short-circuit_evaluation), `consequent` would be \"skipped\" and ignored (not evaluated) by Lua due to `myCondition` being `true`, and only `alternative` would be evaluated. However, when using `Either`, both `consequent` and `alternative` would be evaluated. A practical example of this can be found below.","realm":"Shared and Menu","file":{"text":"lua/includes/util.lua","line":"362-L365"},"args":{"arg":[{"text":"The condition to check if true or false.","name":"condition","type":"any"},{"text":"If the condition isn't nil/false, returns this value.","name":"truevar","type":"any"},{"text":"If the condition is nil/false, returns this value.","name":"falsevar","type":"any"}]},"rets":{"ret":{"text":"The result.","name":"","type":"any"}}},"example":[{"description":"The following two `print` statements have identical results.","code":"local ply = Entity( 1 )\nprint( \"Player \" .. Either( ply:IsAdmin(), \"is\", \"is not\" ) .. \" an admin\" )\n\nprint( \"Player \" .. ( ply:IsAdmin() and \"is\" or \"is not\" ) .. \" an admin\" )","output":"If Player 1 is admin, it will print \"Player is an admin\"."},{"description":"A practical example of the behavior of this function in comparison to Lua's [\"pseudo\" ternary operator](https://en.wikipedia.org/wiki/%3F:#Lua), demonstrating [short-circuit evaluation](https://en.wikipedia.org/wiki/Short-circuit_evaluation), and the lack of it when using `Either`.","code":"local function printHello()\n\tprint( \"Hello, world!\" )\n\treturn \"printHello called\"\nend\n\nlocal myCondition = true\nprint( myCondition and \"printHello not called\" or printHello() )\nprint( Either( myCondition, \"myCondition is true, but printHello was still called\", printHello() ) )","output":"```\nprintHello not called\nHello, world!\nmyCondition is true, but printHello was still called\n```"}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"EmitSentence","parent":"Global","type":"libraryfunc","description":"Plays a sentence from `scripts/sentences.txt`","realm":"Shared","args":{"arg":[{"text":"The sound to play","name":"soundName","type":"string"},{"text":"The position to play at","name":"position","type":"Vector"},{"text":"The entity to emit the sound from. Must be Entity:EntIndex","name":"entity","type":"number"},{"text":"The sound channel, see Enums/CHAN.","name":"channel","type":"number","default":"CHAN_AUTO"},{"text":"The volume of the sound, from 0 to 1","name":"volume","type":"number","default":"1"},{"text":"The sound level of the sound, see Enums/SNDLVL","name":"soundLevel","type":"number","default":"75"},{"text":"The flags of the sound, see Enums/SND","name":"soundFlags","type":"number","default":"0"},{"text":"The pitch of the sound, 0-255","name":"pitch","type":"number","default":"100"}]}},"example":{"description":"Plays random combine death sound on first player.","code":"EmitSentence( \"COMBINE_DIE\" .. math.random( 0, 2 ), Entity( 1 ):GetPos(), 1, CHAN_AUTO, 1, 75, 0, 100 )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"EndTooltip","parent":"Global","type":"libraryfunc","description":"Removes the currently active tool tip from the screen.","realm":"Client and Menu","args":{"arg":{"text":"This is the panel that has a tool tip.","name":"panel","type":"Panel"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"EmitSound","parent":"Global","type":"libraryfunc","description":{"text":"Emits the specified sound at the specified position.","bug":"Sounds must be precached serverside manually before they can be played. util.PrecacheSound does not work for this purpose, Entity:EmitSound does the trick"},"realm":"Shared","args":{"arg":[{"text":"The sound to play","name":"soundName","type":"string"},{"text":"The position to play at","name":"position","type":"Vector"},{"text":"The entity to emit the sound from. Can be an Entity:EntIndex or one of the following:\n* `0` - Plays sound on the world (position set to `0,0,0`)\n* `-1` - Plays sound on the local player (on server acts as `0`)\n* `-2` - Plays UI sound (position set to `0,0,0`, no spatial sound, on server acts as `0`)","name":"entity","type":"number"},{"text":"The sound channel, see Enums/CHAN.","name":"channel","type":"number","default":"CHAN_AUTO"},{"text":"The volume of the sound, from 0 to 1","name":"volume","type":"number","default":"1"},{"text":"The sound level of the sound, see Enums/SNDLVL","name":"soundLevel","type":"number","default":"75"},{"text":"The flags of the sound, see Enums/SND","name":"soundFlags","type":"number","default":"0"},{"text":"The pitch of the sound, 0-255","name":"pitch","type":"number","default":"100"},{"text":"The DSP preset for this sound. [List of DSP presets](https://developer.valvesoftware.com/wiki/Dsp_presets)","name":"dsp","type":"number","default":"0"}]}},"example":{"description":"Plays magical sound on first player.","code":"EmitSound( Sound( \"garrysmod/save_load1.wav\" ), Entity(1):GetPos(), 1, CHAN_AUTO, 1, 75, 0, 100 )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Entity","parent":"Global","type":"libraryfunc","description":{"text":"Returns the entity with the matching Entity:EntIndex.\n\nIndices `1` through game.MaxPlayers() are always reserved for players.","note":"In examples on this wiki, `Entity( 1 )` is used when a player entity is needed (see ). In singleplayer and listen servers, `Entity( 1 )` will always be the first player. In dedicated servers, however, `Entity( 1 )` won't always be a valid player if there is no one currently on the server."},"realm":"Shared","args":{"arg":{"text":"The entity index.","name":"entityIndex","type":"number"}},"rets":{"ret":{"text":"The entity if it exists, or NULL if it doesn't.","name":"","type":"Entity"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ErrorNoHalt","parent":"Global","type":"libraryfunc","description":"Throws a Lua error but does not break out of the current call stack.\nThis function will not print a stack trace like a normal error would.\nEssentially similar if not equivalent to Global.Msg.","realm":"Shared and Menu","args":{"arg":{"text":"Converts all arguments to strings and prints them with no spacing.","name":"arguments","type":"vararg"}}},"example":{"description":"An example of the use of this function","code":"local num = 11\nif ( num <= 10 and num >= 0 ) then\n\tprint( \"The number is\", num )\nelse\n\tErrorNoHalt( \"Number out of range!\\n\" )\n\tprint(\"This line will be printed\")\nend","output":"```\nNumber out of range!\nThis line will be printed\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"ErrorNoHaltWithStack","parent":"Global","type":"libraryfunc","description":"Throws a Lua error but does not break out of the current call stack.\n\nThis function will print a stack trace like a normal error would.","realm":"Shared and Menu","added":"2021.01.27","args":{"arg":{"text":"Converts all arguments to strings and prints them with no spacing.","name":"arguments","type":"vararg"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"ambig":{"text":"You might be looking for the \"Error\" function, which has the same name as this function.","page":"Global.Error"},"function":{"name":"error","parent":"Global","type":"libraryfunc","description":"Throws a Lua error and breaks out of the current call stack.","realm":"Shared and Menu","args":{"arg":[{"text":"The error message to throw","name":"message","type":"string"},{"text":"The level to throw the error at.","name":"errorLevel","type":"number","default":"1"}]}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"FindMetaTable","parent":"Global","type":"libraryfunc","description":"Returns the meta table for the class with the matching name.\n\nInternally returns debug.getregistry()[metaName]\n\nYou can learn more about meta tables on the Meta Tables page.\n\nYou can find a list of meta tables that can be retrieved with this function on Enums/TYPE. The name in the description is the string to use with this function.","realm":"Shared and Menu","args":{"arg":{"text":"The object type to retrieve the meta table of.","name":"metaName","type":"string"}},"rets":{"ret":{"text":"The corresponding meta table.","name":"","type":"table"}}},"example":{"description":"Adds a very simple function for checking if a player is sick to the player metatable.","code":"local meta = FindMetaTable(\"Player\")\n\nfunction meta:IsSick()\n\treturn true\nend\n\n-- Sometime later...\nlocal ply = Entity(1)\nif ( ply:IsSick() ) then\n\tply:ChatPrint( \"Get well soon, \" .. ply:Nick() .. \"!\" )\n\tply:ChatPrint( \"I just don't understand how you're always sick...\" )\nend","output":"```\nGet well soon, Player1!\nI just don't understand how you're always sick...\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"EyeAngles","parent":"Global","type":"libraryfunc","description":{"text":"Returns the angles of the current render context as calculated by GM:CalcView.","bug":{"text":"This function is only reliable inside rendering hooks.","issue":"2516"}},"realm":"Client","rets":{"ret":{"text":"The angle of the currently rendered scene.","name":"","type":"Angle"}}},"example":[{"description":"Print the view angles","code":"print(EyeAngles())"},{"description":"Identical to Global.EyeVector","code":"print(EyeAngles():Forward())"}],"realms":["Client"],"type":"Function"},
{"function":{"name":"EyePos","parent":"Global","type":"libraryfunc","description":{"text":"Returns the origin of the current render context as calculated by GM:CalcView.","bug":{"text":"This function is only reliable inside rendering hooks.","issue":"2516"}},"realm":"Client","rets":{"ret":{"text":"Camera position.","name":"","type":"Vector"}}},"example":[{"description":"Print the view position","code":"print(EyePos())"},{"description":"Ensuring EyePos returns the correct value outside of render hooks.","code":"hook.Add(\"PreDrawTranslucentRenderables\", \"FixEyePos\", function() EyePos() end)\nhook.Add( \"Think\", \"Use Eyepos outside of render function\", function()\n\tlocal start = EyePos()\n\tlocal dir = gui.ScreenToVector(gui.MousePos())\n\tlocal trace = util.TraceLine{\n\t\tstart = start,\n\t\tendpos = start + ( dir * 10000 ),\n\t\tfilter = { ply },\n\t}\n\tdebugoverlay.Box( trace.HitPos, Vector( -5, -5, -5 ), Vector( 5, 5, 5 ) )\nend )","output":"Draws a white box in the world where you point the mouse to. Requires the **developer** convar to be set to 1."}],"realms":["Client"],"type":"Function"},
{"function":{"name":"EyeVector","parent":"Global","type":"libraryfunc","description":{"text":"Returns the normal vector of the current render context as calculated by GM:CalcView, similar to Global.EyeAngles.","bug":{"text":"This function is only reliable inside rendering hooks.","issue":"2516"}},"realm":"Client","rets":{"ret":{"text":"View direction of the currently rendered scene.","name":"","type":"Vector"}}},"example":{"description":"Print the view angles","code":"print( EyeVector() )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"FindTooltip","parent":"Global","type":"libraryfunc","description":"Returns the tool-tip text and tool-tip-panel (if any) of the given panel as well as itself","realm":"Client and Menu","args":{"arg":{"text":"Panel to find tool-tip of","name":"panel","type":"Panel"}},"rets":{"ret":[{"text":"tool-tip text","name":"","type":"string"},{"text":"tool-tip panel","name":"","type":"Panel"},{"text":"panel that the function was called with","name":"","type":"Panel"}]}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"Format","parent":"Global","type":"libraryfunc","description":"Formats the specified values into the string given. Same as string.format.","realm":"Shared and Menu","args":{"arg":[{"text":"The string to be formatted.\nFollows this format: http://www.cplusplus.com/reference/cstdio/printf/","name":"format","type":"string"},{"text":"Values to be formatted into the string.","name":"formatParameters","type":"vararg"}]},"rets":{"ret":{"text":"The formatted string","name":"","type":"string"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"FrameTime","parent":"Global","type":"libraryfunc","description":"Returns the Global.CurTime-based time in seconds it took to render the last frame.\n\nThis should be used for frame/tick based timing, such as movement prediction or animations.\n\nFor real-time-based frame time that isn't affected by host_timescale, use Global.RealFrameTime. RealFrameTime is more suited for things like GUIs or HUDs.","realm":"Shared and Menu","rets":{"ret":{"text":"time (in seconds)","name":"","type":"number"}}},"example":[{"description":"Print the frame time","code":"print( FrameTime() )","output":"0.014999999664724"},{"description":"Get the servers/clients tickrate/fps","code":"print( \"Tick: \" .. ( 1 / FrameTime() ) )","output":"Tick: 66.666668156783"}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"GameDetails","parent":"Global","type":"libraryfunc","description":"Callback function for when the client has joined a server. This function shows the server's loading URL by default.","realm":"Menu","file":{"text":"lua/menu/loading.lua","line":"243"},"args":{"arg":[{"text":"Server's name.","name":"servername","type":"string"},{"text":"Server's loading screen URL, or \"\" if the URL is not set.","name":"serverurl","type":"string"},{"text":"Server's current map's name.","name":"mapname","type":"string"},{"text":"Max player count of server.","name":"maxplayers","type":"number"},{"text":"The local player's Player:SteamID64.","name":"steamid","type":"string"},{"text":"Server's current gamemode's folder name.","name":"gamemode","type":"string"}]}},"example":{"description":"Prints GameDetails of the server you join to console, and preserves default behavior.","code":"local OldGameDetails = GameDetails\nfunction GameDetails( servername, serverurl, mapname, maxplayers, steamid, gamemode )\n\tprint( 1, servername )\n\tprint( 2, serverurl )\n\tprint( 3, mapname )\n\tprint( 4, maxplayers )\n\tprint( 5, steamid )\n\tprint( 6, gamemode )\n\tOldGameDetails( servername, serverurl, mapname, maxplayers, steamid, gamemode )\nend","output":"```\n1\tZerfTestServer\n2\t\n3\tgm_construct\n4\t8\n5\t76561198052589582\n6\tsandbox\n```"},"realms":["Menu"],"type":"Function"},
{"function":{"name":"FrameNumber","parent":"Global","type":"libraryfunc","description":"Returns the number of frames rendered since the game was launched.","realm":"Client"},"example":{"description":"Prints the frame count to the console.","code":"print(FrameNumber())"},"realms":["Client"],"type":"Function"},
{"function":{"name":"gcinfo","parent":"Global","type":"libraryfunc","description":{"text":"Returns the current floored dynamic memory usage of Lua in kilobytes.","deprecated":"This function was deprecated in Lua 5.1 and is removed in Lua 5.2. Use Global.collectgarbage( \"count\" ) instead."},"realm":"Shared and Menu","rets":{"ret":{"text":"The current floored dynamic memory usage of Lua, in kilobytes.","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"GetConVar","parent":"Global","type":"libraryfunc","description":{"text":"Gets the ConVar with the specified name.","note":"This function uses Global.GetConVar_Internal internally, but caches the result in Lua for quicker lookups."},"realm":"Shared and Menu","file":{"text":"lua/includes/util.lua","line":"433-L445"},"args":{"arg":{"text":"Name of the ConVar to get","name":"name","type":"string"}},"rets":{"ret":{"text":"The ConVar object, or nil if no such ConVar was found.","name":"","type":"ConVar"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"GetConVarNumber","parent":"Global","type":"libraryfunc","description":{"text":"Gets the numeric value ConVar with the specified name.","deprecated":"Store the ConVar object retrieved with Global.GetConVar and call ConVar:GetInt or ConVar:GetFloat on it."},"realm":"Shared and Menu","file":{"text":"lua/includes/util.lua","line":"450-L454"},"args":{"arg":{"text":"Name of the ConVar to get.","name":"name","type":"string"}},"rets":{"ret":{"text":"The ConVar's value.","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"GetConVar_Internal","parent":"Global","type":"libraryfunc","description":{"text":"Gets the ConVar with the specified name. This function doesn't cache the convar.","internal":""},"realm":"Shared and Menu","args":{"arg":{"text":"Name of the ConVar to get","name":"name","type":"string"}},"rets":{"ret":{"text":"The ConVar object","name":"","type":"ConVar"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"GetConVarString","parent":"Global","type":"libraryfunc","description":{"text":"Gets the string value ConVar with the specified name.","deprecated":"Store the ConVar object retrieved with Global.GetConVar and call ConVar:GetString on it."},"realm":"Shared and Menu","file":{"text":"lua/includes/util.lua","line":"456-L460"},"args":{"arg":{"text":"Name of the ConVar to get.","name":"name","type":"string"}},"rets":{"ret":{"text":"The ConVar's value.","name":"","type":"string"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"GetDefaultLoadingHTML","parent":"Global","type":"libraryfunc","description":"Returns the default loading screen URL (asset://garrysmod/html/loading.html)","realm":"Menu","rets":{"ret":{"text":"Default loading url (asset://garrysmod/html/loading.html)","name":"","type":"string"}}},"realms":["Menu"],"type":"Function"},
{"function":{"name":"GetDemoFileDetails","parent":"Global","type":"libraryfunc","description":"Retrieves data about the demo with the specified filename. Similar to Global.GetSaveFileDetails.","realm":"Menu","args":{"arg":{"text":"The file name of the demo.","name":"filename","type":"string"}},"rets":{"ret":{"text":"Demo data.","name":"","type":"table"}}},"realms":["Menu"],"type":"Function"},
{"function":{"name":"GetDownloadables","parent":"Global","type":"libraryfunc","description":"Returns a table with the names of files needed from the server you are currently joining.","realm":"Menu","rets":{"ret":{"text":"table of file names","name":"","type":"table"}}},"example":{"description":"Returns a table with the file names.","code":"PrintTable( GetDownloadables() )","output":"```\n1\t=\tmaps\\gm_flatgrass.bsp\n2\t=\tmaps\\graphs\\gm_flatgrass.ain\n3\t=\tmaps\\gm_flatgrass.nav\n```"},"realms":["Menu"],"type":"Function"},
{"function":{"name":"GetGlobalAngle","parent":"Global","type":"libraryfunc","description":"Returns an angle that is shared between the server and all clients.","realm":"Shared","args":{"arg":[{"text":"The unique index to identify the global value with.","name":"index","type":"string"},{"text":"The value to return if the global value is not set.","name":"default","type":"Angle","default":"Angle( 0, 0, 0 )"}]},"rets":{"ret":{"text":"The global value, or default if the global is not set.","name":"","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"getfenv","parent":"Global","type":"libraryfunc","description":"Returns the environment table of either the stack level or the function specified.","realm":"Shared and Menu","args":{"arg":{"text":"The object to get the enviroment from. Can also be a number that specifies the function at that stack level: Level 1 is the function calling getfenv.","name":"location","type":"function","default":"1"}},"rets":{"ret":{"text":"The environment.","name":"","type":"table"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"GetGlobalBool","parent":"Global","type":"libraryfunc","description":"Returns a boolean that is shared between the server and all clients.","realm":"Shared","args":{"arg":[{"text":"The unique index to identify the global value with.","name":"index","type":"string"},{"text":"The value to return if the global value is not set.","name":"default","type":"boolean","default":"false"}]},"rets":{"ret":{"text":"The global value, or the default if the global value is not set.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetGlobalEntity","parent":"Global","type":"libraryfunc","description":"Returns an entity that is shared between the server and all clients.","realm":"Shared","args":{"arg":[{"text":"The unique index to identify the global value with.","name":"index","type":"string"},{"text":"The value to return if the global value is not set.","name":"default","type":"Entity","default":"NULL"}]},"rets":{"ret":{"text":"The global value, or the default if the global value is not set.","name":"","type":"Entity"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetGlobalInt","parent":"Global","type":"libraryfunc","description":{"text":"Returns an integer that is shared between the server and all clients.","bug":{"text":"This function will not round decimal values as it actually networks a float internally.","issue":"3374"}},"realm":"Shared","args":{"arg":[{"text":"The unique index to identify the global value with.","name":"index","type":"string"},{"text":"The value to return if the global value is not set.","name":"default","type":"number","default":"0"}]},"rets":{"ret":{"text":"The global value, or the default if the global value is not set.","name":"","type":"number"}}},"example":{"description":"Prints the current round number if set, otherwise 0.","code":"print(GetGlobalInt(\"RoundNumber\", 0))"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetGlobalFloat","parent":"Global","type":"libraryfunc","description":"Returns a float that is shared between the server and all clients.","realm":"Shared","args":{"arg":[{"text":"The unique index to identify the global value with.","name":"index","type":"string"},{"text":"The value to return if the global value is not set.","name":"default","type":"number","default":"0"}]},"rets":{"ret":{"text":"The global value, or the default if the global value is not set.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetGlobalString","parent":"Global","type":"libraryfunc","description":"Returns a string that is shared between the server and all clients.","realm":"Shared","args":{"arg":[{"text":"The unique index to identify the global value with.","name":"index","type":"string"},{"text":"The value to return if the global value is not set.","name":"default","type":"string","default":""}]},"rets":{"ret":{"text":"The global value, or the default if the global value is not set.","name":"","type":"string"}}},"example":{"description":"Prints the current server name if set, otherwise \"Garry's Mod 13\".","code":"print( GetGlobalString(\"ServerName\", \"Garry's Mod 13\") )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetGlobalVector","parent":"Global","type":"libraryfunc","description":"Returns a vector that is shared between the server and all clients.","realm":"Shared","args":{"arg":[{"text":"The unique index to identify the global value with.","name":"Index","type":"string"},{"text":"The value to return if the global value is not set.","name":"Default","type":"Vector"}]},"rets":{"ret":{"text":"The global value, or the default if the global value is not set.","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetHostName","parent":"Global","type":"libraryfunc","description":"Returns the name of the current server.","realm":"Shared","rets":{"ret":{"text":"The name of the server.","name":"","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetHUDPanel","parent":"Global","type":"libraryfunc","description":"Returns the panel that is used as a wrapper for the HUD. If you want your panel to be hidden when the main menu is opened, parent it to this. Child panels will also have their controls disabled.\n\nSee also vgui.GetWorldPanel","realm":"Client","rets":{"ret":{"text":"The HUD panel","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetLoadPanel","parent":"Global","type":"libraryfunc","description":"Returns the loading screen panel and creates it if it doesn't exist.","realm":"Menu","file":{"text":"lua/menu/loading.lua","line":"224"},"rets":{"ret":{"text":"The loading screen panel","name":"","type":"Panel"}}},"realms":["Menu"],"type":"Function"},
{"function":{"name":"GetLoadStatus","parent":"Global","type":"libraryfunc","description":"Returns the current status of the server join progress.","realm":"Menu","rets":{"ret":{"text":"The current status","name":"","type":"string"}}},"realms":["Menu"],"type":"Function"},
{"function":{"name":"GetMapList","parent":"Global","type":"libraryfunc","description":"Returns a table with the names of all maps and categories that you have on your client.","realm":"Menu","file":{"text":"lua/menu/getmaps.lua","line":"314"},"rets":{"ret":{"text":"table of map names and categories","name":"","type":"table"}}},"realms":["Menu"],"type":"Function"},
{"function":{"name":"GetOverlayPanel","parent":"Global","type":"libraryfunc","description":"Returns the menu overlay panel, a container for panels like the error panel created in GM:OnLuaError.","realm":"Menu","rets":{"ret":{"text":"The overlay panel","name":"","type":"Panel"}}},"realms":["Menu"],"type":"Function"},
{"function":{"name":"GetPredictionPlayer","parent":"Global","type":"libraryfunc","added":"2020.04.29","description":"Returns the player whose movement commands are currently being processed. The player this returns can safely have Player:GetCurrentCommand() called on them. See Prediction.","realm":"Shared","rets":{"ret":{"text":"The player currently being predicted, or NULL if no command processing is currently being done.","name":"","type":"Player"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"getmetatable","parent":"Global","type":"libraryfunc","description":"Returns the metatable of an object. This function obeys the metatable's __metatable field, and will return that field if the metatable has it set.\n\nUse debug.getmetatable if you want the true metatable of the object.","realm":"Shared and Menu","args":{"arg":{"text":"The value to return the metatable of.","name":"object","type":"any"}},"rets":{"ret":{"text":"The metatable of the value. This is not always a table.","name":"","type":"any"}}},"example":[{"description":"Use a table's metatable and alter it.","code":"print(getmetatable(Pupil).__index.GetName(Pupil))\n-- getmetatable(Pupil) will return Pupil_meta.\n-- Same as print(Pupil:GetName())\n-- This is what the Lua interpreter basically does. (When __index is a table.)\n\ngetmetatable(Pupil).SetName = function(self, newName)\n self.name = newName\nend\n-- We're adding a new method to Pupil's metatable\n\nprint(getmetatable(Pupil).GetName(Pupil))\n-- Still the same, because Pupil_meta.__index is Pupil_meta.","output":"\"John Doe\""},{"description":"Using a Metatable to make functions easier","code":"local ply = getmetatable(\"player\")\n\nfunction ply:PrintData()\n\tlocal tbl = {\n\t\tself:Nick(), -- Using self is the same as having an argument in the function\n\t\tself:SteamID() -- but instead self is referring to the player the functions being ran on\n\t\t}\n\treturn tbl\nend"}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"GetRenderTarget","parent":"Global","type":"libraryfunc","description":{"text":"Creates or gets the rendertarget with the given name.\n\nSee Global.GetRenderTargetEx for an advanced version of this function with more options.","bug":{"text":"This crashes when used on a cubemap texture.","issue":"2885"},"note":"Calling this function is equivalent to\n```lua\nGetRenderTargetEx(name,\n\twidth, height,\n\tRT_SIZE_NO_CHANGE,\n\tMATERIAL_RT_DEPTH_SEPARATE,\n\tbit.bor(2, 256),\n\t0,\n\tIMAGE_FORMAT_BGRA8888\n)\n```"},"realm":"Client","args":{"arg":[{"text":"The internal name of the render target.","name":"name","type":"string"},{"text":"The width of the render target, must be power of 2. If not set to PO2, the size will be automatically converted to the nearest PO2 size.","name":"width","type":"number"},{"text":"The height of the render target, must be power of 2. If not set to PO2, the size will be automatically converted to the nearest PO2 size.","name":"height","type":"number"}]},"rets":{"ret":{"text":"The render target","name":"","type":"ITexture"}}},"example":[{"description":"Example usage of a render target","code":"-- Give the RT a size\nlocal TEX_SIZE = 512\n\n-- Create the RT\nlocal tex = GetRenderTarget( \"ExampleRT\", TEX_SIZE, TEX_SIZE )\n\n-- Write something to the RT\n-- Note how this is not in a render hook, in this case we only write to the render target once\nlocal txBackground = surface.GetTextureID( \"models/weapons/v_toolgun/screen_bg\" )\nrender.PushRenderTarget( tex )\ncam.Start2D()\n\n\tsurface.SetDrawColor( color_white )\n\tsurface.SetTexture( txBackground )\n\tsurface.DrawTexturedRect( 0, 0, TEX_SIZE, TEX_SIZE )\n\ncam.End2D()\nrender.PopRenderTarget()\n\n-- Create a render-able material for our render target\nlocal myMat = CreateMaterial( \"ExampleRTMat\", \"UnlitGeneric\", {\n\t[\"$basetexture\"] = tex:GetName() -- Make the material use our render target texture\n} )\n\n-- Draw it on screen\nhook.Add( \"HUDPaint\", \"DrawExampleMat\", function()\n\tsurface.SetDrawColor( color_white )\n\tsurface.SetMaterial( myMat )\n\tsurface.DrawTexturedRect( 25, 25, TEX_SIZE, TEX_SIZE )\nend )"},{"description":"Example usage of a render target with transparency/alpha channel","code":"local textureRT = GetRenderTarget( \"ExampleRTwithAlpha\", 512, 512 )\n\nlocal mat = CreateMaterial( \"ExampleRTwithAlpha_Mat\", \"UnlitGeneric\", {\n\t['$basetexture'] = textureRT:GetName(),\n\t[\"$translucent\"] = \"1\" -- This is necessary to render the RT with alpha channel\n} );\n\nhook.Add( \"HUDPaint\", \"ExampleRTwithAlpha_Render\", function()\n\trender.PushRenderTarget( textureRT )\n\tcam.Start2D()\n\n\t\t-- Clear the RT\n\t\trender.Clear( 0, 0, 0, 0 )\n\n\t\t-- Draw some basic animated stuff on it\n\t\tdraw.RoundedBox( 0, 20, 100 + math.sin( CurTime() ) * 50, 50, 50, color_white )\n\n\t\t-- Draw with transparency\n\t\tdraw.RoundedBox( 0, 120, 100 + math.sin( CurTime() ) * 50, 50, 50, Color( 255, 0, 0, 100 ) )\n\n\tcam.End2D()\n\trender.PopRenderTarget()\n\n\t-- Draw our render target on screen so we can see our result\n\tsurface.SetDrawColor( color_white )\n\tsurface.SetMaterial( mat )\n\tsurface.DrawTexturedRect( 50, 50, 512, 512 )\nend )"}],"realms":["Client"],"type":"Function"},
{"cat":"global","function":{"name":"GetTimeoutInfo","parent":"Global","type":"libraryfunc","description":"Returns if the client is timing out, and time since last ping from the server. Similar to the server side Player:IsTimingOut.","realm":"Client","added":"2021.01.27","rets":{"ret":[{"text":"Is timing out?","name":"","type":"boolean"},{"text":"Get time since last pinged received.","name":"","type":"number"}]}},"example":{"description":"","code":"print( GetTimeoutInfo() )","output":"```\nfalse\n0.011438442269421\n```"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetRenderTargetEx","parent":"Global","type":"libraryfunc","description":"Gets (or creates if it does not exist) the rendertarget with the given name, this function allows to adjust the creation of a rendertarget more than Global.GetRenderTarget.\n\nSee also render.PushRenderTarget and render.SetRenderTarget.","realm":"Client","args":{"arg":[{"text":"The internal name of the render target.","name":"name","type":"string","warning":{"text":"The name is treated like a path and gets its extension discarded.\"name.1\" and \"name.2\" are considered the same name and will result in the same render target being reused.","br":""}},{"text":"The width of the render target, must be power of 2.","name":"width","type":"number"},{"text":"The height of the render target, must be power of 2.","name":"height","type":"number"},{"text":"Bitflag that influences the sizing of the render target, see Enums/RT_SIZE.","name":"sizeMode","type":"number"},{"text":"Bitflag that determines the depth buffer usage of the render target Enums/MATERIAL_RT_DEPTH.","name":"depthMode","type":"number"},{"text":"Bitflag that configurates the texture, see Enums/TEXTUREFLAGS.\n\nList of flags can also be found on the Valve's Developer Wiki:\nhttps://developer.valvesoftware.com/wiki/Valve_Texture_Format","name":"textureFlags","type":"number"},{"text":"Flags that controll the HDR behaviour of the render target, see Enums/CREATERENDERTARGETFLAGS.","name":"rtFlags","type":"number"},{"text":"Image format, see Enums/IMAGE_FORMAT.","name":"imageFormat","type":"number"}]},"rets":{"ret":{"text":"The new render target.","name":"","type":"ITexture"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetSaveFileDetails","parent":"Global","type":"libraryfunc","description":"Retrieves data about the save with the specified filename. Similar to Global.GetDemoFileDetails.","realm":"Menu","args":{"arg":{"text":"The file name of the save.","name":"filename","type":"string"}},"rets":{"ret":{"text":"Save data.","name":"","type":"table"}}},"realms":["Menu"],"type":"Function"},
{"function":{"name":"GetViewEntity","parent":"Global","type":"libraryfunc","description":"Returns the entity the client is using to see from (such as the player itself, the camera, or another entity).","realm":"Client","rets":{"ret":{"text":"The view entity.","name":"","type":"Entity"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"HSVToColor","parent":"Global","type":"libraryfunc","description":{"text":"Converts a color from [HSV color space](https://en.wikipedia.org/wiki/HSL_and_HSV) into RGB color space and returns a Color.","bug":{"text":"The returned color will not have the color metatable.","issue":"2407"}},"realm":"Shared and Menu","args":{"arg":[{"text":"The hue in degrees from 0-360.","name":"hue","type":"number"},{"text":"The saturation from 0-1.","name":"saturation","type":"number"},{"text":"The value from 0-1.","name":"value","type":"number"}]},"rets":{"ret":{"text":"The Color created from the HSV color space.","name":"","type":"table"}}},"example":[{"description":"A helper function for drawing rainbow text.","code":"local function DrawRainbowText( frequency, str, font, x, y )\n\n\tsurface.SetFont( font )\n\tsurface.SetTextPos( x, y )\n\n\tfor i = 1, #str do\n\t\tlocal col = HSVToColor( i * frequency % 360, 1, 1 ) -- Providing 3 numbers to surface.SetTextColor rather\n\t\tsurface.SetTextColor( col.r, col.g, col.b )\t\t\t-- than a single color is faster\n\t\tsurface.DrawText( string.sub( str, i, i ) )\n\tend\n\nend\n\n-- Solid color rainbow, faster than example above\nlocal function DrawSimpleRainbowText( speed, str, font, x, y )\n\n\tsurface.SetFont( font )\n\tsurface.SetTextColor( HSVToColor(  ( CurTime() * speed ) % 360, 1, 1 ) )\n\tsurface.SetTextPos( x, y )\n\n\tsurface.DrawText( str )\n\nend\n\nhook.Add( \"HUDPaint\", \"RainbowPuke\", function()\n\tDrawRainbowText( 10, \"Hello world! This is rainbow text.\", \"CloseCaption_Bold\", 5, 5 )\n\tDrawSimpleRainbowText( 100, \"Hello world! This is rainbow text.\", \"CloseCaption_Bold\", 5, 55 )\nend )","output":{"image":{"src":"DrawRainbowText.png","alt":"300px"}}},{"description":"A helper function for printing rainbow text in the chat.","code":"local function PrintRainbowText( frequency, str )\n\n\tlocal text = {}\n\tlocal len = #text\n\n\tfor i = 1, #str do\n\t\ttext[len + 1] = HSVToColor( i * frequency % 360, 1, 1 )\n\t\ttext[len + 2] = string.sub( str, i, i )\n\t\tlen = len + 2\n\tend\n\n\t-- Print to chat, also prints to console\n\tchat.AddText( unpack( text ) )\n\n\t-- Uncomment this to print to console only, works serverside too\n\t-- MsgC( unpack( text ) )\n\nend\n\n-- The higher the number, the quicker the color will change between each character\nPrintRainbowText( 10, \"Hello world!\" )","output":{"image":[{"src":"ChatPrintRainbow.png","alt":"300px"},{"src":"ConsolePrintRainbow.png","alt":"300px"}]}}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"HSLToColor","parent":"Global","type":"libraryfunc","description":{"text":"Converts a color from [HSL color space](https://en.wikipedia.org/wiki/HSL_and_HSV) into RGB color space and returns a Color.","bug":{"text":"The returned color will not have the color metatable.","issue":"2407"}},"realm":"Shared and Menu","args":{"arg":[{"text":"The hue in degrees from 0-360.","name":"hue","type":"number"},{"text":"The saturation from 0-1.","name":"saturation","type":"number"},{"text":"The lightness from 0-1.","name":"value","type":"number"}]},"rets":{"ret":{"text":"The Color created from the HSL color space.","name":"","type":"table"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"include","parent":"Global","type":"libraryfunc","description":{"text":"Executes a Lua script.","note":["Addon files (.gma files) do not support relative parent folders (`..` notation).","This function will try to load local client file if `sv_allowcslua` is **1**."],"warning":["The file you are attempting to include MUST NOT be empty or the include will fail. Files over a certain size may fail as well.","If the file you are including is clientside or shared, it **must** be Global.AddCSLuaFile'd or this function will error saying the file doesn't exist."],"bug":{"text":"Global.pcalling this function will break autorefresh.","issue":"1976"}},"realm":"Shared and Menu","args":{"arg":{"text":"The name of the script to be executed. The path must be either relative to the current file, or be an absolute path (relative to and excluding the **lua/** folder).","name":"fileName","type":"string","note":"Please make sure your file names are unique, the filesystem is shared across all addons, so a file named `lua/config.lua` in your addon may be overwritten by the same file in another addon."}},"rets":{"ret":{"text":"Anything that the executed Lua script returns.","name":"","type":"vararg"}}},"example":[{"description":"Demonstrates correct and incorrect usage.","code":"-- Correct usage:\n-- Will look for \"lua/myLuaFolder/myLuaFile.lua\" in all addons and then the base game **lua/** folder.\ninclude( \"myLuaFolder/myLuaFile.lua\" )\n\n-- This is incorrect, and will NOT work.\ninclude( \t\t\t\t\"lua/myLuaFolder/myLuaFile.lua\" )\ninclude( \t\t \"addons/lua/myLuaFolder/myLuaFile.lua\" )\ninclude( \"addons/MyAddon/lua/myLuaFolder/myLuaFile.lua\" )\ninclude( \t\t\"MyAddon/lua/myLuaFolder/myLuaFile.lua\" )"},{"description":"Specify a base folder and recursively include cl, sh and sv files without having to specify them.","code":"local rootDir = \"vac-events\"\n\nlocal function AddFile(File, dir)\n    local fileSide = string.lower(string.Left(File , 3))\n\n    if SERVER and fileSide == \"sv_\" then\n        include(dir..File)\n        print(\"[AUTOLOAD] SV INCLUDE: \" .. File)\n    elseif fileSide == \"sh_\" then\n        if SERVER then \n            AddCSLuaFile(dir..File)\n            print(\"[AUTOLOAD] SH ADDCS: \" .. File)\n        end\n        include(dir..File)\n        print(\"[AUTOLOAD] SH INCLUDE: \" .. File)\n    elseif fileSide == \"cl_\" then\n        if SERVER then \n            AddCSLuaFile(dir..File)\n            print(\"[AUTOLOAD] CL ADDCS: \" .. File)\n        elseif CLIENT then\n            include(dir..File)\n            print(\"[AUTOLOAD] CL INCLUDE: \" .. File)\n        end\n    end\nend\n\nlocal function IncludeDir(dir)\n    dir = dir .. \"/\"\n    local File, Directory = file.Find(dir..\"*\", \"LUA\")\n\n    for k, v in ipairs(File) do\n        if string.EndsWith(v, \".lua\") then\n            AddFile(v, dir)\n        end\n    end\n    \n    for k, v in ipairs(Directory) do\n        print(\"[AUTOLOAD] Directory: \" .. v)\n        IncludeDir(dir..v)\n    end\n\nend\nIncludeDir(rootDir)"}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"HTTP","parent":"Global","type":"libraryfunc","description":{"text":"Launches an asynchronous http request with the given parameters.","bug":{"text":"This cannot send or receive multiple headers with the same name.","issue":"2232"},"note":{"text":"HTTP-requests to destinations on private networks (such as `192.168.0.1`) won't work.\nTo enable HTTP-requests to destinations on private networks use Command Line Parameters `-allowlocalhttp`.","br":""}},"realm":"Shared and Menu","args":{"arg":{"text":"The request parameters. See Structures/HTTPRequest.","name":"parameters","type":"table"}},"rets":{"ret":{"text":"`true` if we made a request, `nil` if we failed.","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"IncludeCS","parent":"Global","type":"libraryfunc","description":{"text":"This function works exactly the same as Global.include both clientside and serverside.\n\nThe only difference is that on the serverside it also calls Global.AddCSLuaFile on the filename, so that it gets sent to the client.","deprecated":"To send the target file to the client simply call AddCSLuaFile() in the target file itself."},"realm":"Shared and Menu","file":{"text":"lua/includes/util.lua","line":"158-L164"},"args":{"arg":{"text":"The filename of the Lua file you want to include.","name":"filename","type":"string"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"isangle","parent":"Global","type":"libraryfunc","description":"Returns if the passed object is an Angle.","realm":"Shared and Menu","args":{"arg":{"text":"The variable to perform the type check for.","name":"variable","type":"any"}},"rets":{"ret":{"text":"True if the variable is an Angle.","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"ipairs","parent":"Global","type":"libraryfunc","description":"Returns an iterator function for a for loop, to return ordered key-value pairs from a table.\n\nThis will only iterate though **numerical** keys, and these must also be **sequential**; starting at 1 with no gaps.\n\nFor unordered pairs, see Global.pairs.\n\nFor pairs sorted by key in alphabetical order, see Global.SortedPairs.","realm":"Shared and Menu","args":{"arg":{"text":"The table to iterate over.","name":"tab","type":"table"}},"rets":{"ret":[{"text":"The iterator function.","name":"","type":"function"},{"text":"The table being iterated over.","name":"","type":"table"},{"text":"The origin index **=0**.","name":"","type":"number"}]}},"example":[{"description":"Demonstrates how this differs from Global.pairs.","code":"local tbl = { two = 2, one = 1, \"alpha\", \"bravo\", [3] = \"charlie\", [5] = \"echo\", [6] = \"foxtrot\" }\n\nprint( \"pairs:\" )\nfor k, v in pairs( tbl ) do\n\tprint( k, v )\nend\n\nprint( \"\\nipairs:\" )\nfor k, v in ipairs( tbl ) do\n\tprint( k, v )\nend","output":"```\npairs:\n1\talpha\n2\tbravo\n3\tcharlie\n5\techo\n6\tfoxtrot\none\t1\ntwo\t2\n\nipairs:\n1\talpha\n2\tbravo\n3\tcharlie\n```"},{"description":"From `UpdateUI` in [undo.lua](https://github.com/garrynewman/garrysmod/blob/master/garrysmod/lua/includes/modules/undo.lua#L40-L50), this adds the first 100 undo entries to the `Undo` panel in the spawnmenu.","code":"local Limit = 100\nlocal Count = 0\nfor k, v in ipairs( ClientUndos ) do\n\n\tlocal Item = ComboBox:AddItem( tostring( v.Name ) )\n\tItem.DoClick = function() RunConsoleCommand( \"gmod_undonum\", tostring( v.Key ) ) end\n\n\tCount = Count + 1\n\tif ( Count > Limit ) then break end\n\nend"}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"isbool","parent":"Global","type":"libraryfunc","description":"Returns if the passed object is a boolean.","realm":"Shared and Menu","args":{"arg":{"text":"The variable to perform the type check for.","name":"variable","type":"any"}},"rets":{"ret":{"text":"True if the variable is a boolean.","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"IsEntity","parent":"Global","type":"libraryfunc","description":"Returns if the passed object is an Entity. Alias of Global.isentity.","realm":"Shared","args":{"arg":{"text":"The variable to check.","name":"variable","type":"any"}},"rets":{"ret":{"text":"True if the variable is an Entity.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsEnemyEntityName","parent":"Global","type":"libraryfunc","description":"Returns if the given NPC class name is an enemy.\n\nReturns true if the entity name is one of the following:\n* \"npc_antlion\"\n* \"npc_antlionguard\"\n* \"npc_antlionguardian\"\n* \"npc_barnacle\"\n* \"npc_breen\"\n* \"npc_clawscanner\"\n* \"npc_combine_s\"\n* \"npc_cscanner\"\n* \"npc_fastzombie\"\n* \"npc_fastzombie_torso\"\n* \"npc_headcrab\"\n* \"npc_headcrab_fast\"\n* \"npc_headcrab_poison\"\n* \"npc_hunter\"\n* \"npc_metropolice\"\n* \"npc_manhack\"\n* \"npc_poisonzombie\"\n* \"npc_strider\"\n* \"npc_stalker\"\n* \"npc_zombie\"\n* \"npc_zombie_torso\"\n* \"npc_zombine\"","realm":"Shared and Menu","file":{"text":"lua/includes/util.lua","line":"317-L319"},"args":{"arg":{"text":"Class name of the entity to check","name":"className","type":"string"}},"rets":{"ret":{"text":"Is an enemy","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"IsColor","parent":"Global","type":"libraryfunc","description":{"text":"Returns whether the given object does or doesn't have a `metatable` of a color.","bug":{"text":"Engine functions (i.e. those not written in plain Lua) that return color objects do not currently set the color metatable and this function will return false if you use it on them.","issue":"2407"}},"realm":"Shared and Menu","args":{"arg":{"text":"The object to be tested","name":"Object","type":"any"}},"rets":{"ret":{"text":"Whether the given object is a color or not","name":"","type":"boolean"}}},"example":{"description":"How work 'isColor' function ?","code":"local color = Color(255, 255, 255)\n\nprint(IsColor(color) or \"This variable is not a colour\")","output":"```\ntrue\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"IsFirstTimePredicted","parent":"Global","type":"libraryfunc","description":{"text":"Returns if this is the first time this hook was predicted.\n\nThis is useful for one-time logic in your SWEPs PrimaryAttack, SecondaryAttack and Reload and other  (to prevent those hooks from being called rapidly in succession). It's also useful in a Move hook for when the client predicts movement.\n\nVisit Prediction for more information about this behavior.","note":"This is already used internally for Entity:EmitSound, Weapon:SendWeaponAnim and Entity:FireBullets, but NOT in  util.Effect."},"realm":"Shared","rets":{"ret":{"text":"Whether or not this is the first time being predicted.","name":"","type":"boolean"}}},"example":{"description":"An override for GM:KeyPress in the gamemode Trouble in Terrorist Town, to work around the hook being called multiple times.","code":"-- Note that for some reason KeyPress and KeyRelease are called multiple times\n-- for the same key event in multiplayer.\nfunction GM:KeyPress(ply, key)\n   if not IsFirstTimePredicted() then return end\n   if not IsValid(ply) or ply != LocalPlayer() then return end\n\n   if key == IN_SPEED and ply:IsActiveTraitor() then\n      timer.Simple(0.05, function() RunConsoleCommand(\"+voicerecord\") end)\n   end\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsFriendEntityName","parent":"Global","type":"libraryfunc","description":"Returns if the given NPC class name is a friend.\n\nReturns true if the entity name is one of the following:\n* \"npc_alyx\"\n* \"npc_barney\"\n* \"npc_citizen\"\n* \"npc_dog\"\n* \"npc_eli\"\n* \"npc_fisherman\"\n* \"npc_gman\"\n* \"npc_kleiner\"\n* \"npc_magnusson\"\n* \"npc_monk\"\n* \"npc_mossman\"\n* \"npc_odessa\"\n* \"npc_vortigaunt\"","realm":"Shared and Menu","file":{"text":"lua/includes/util.lua","line":"330-L332"},"args":{"arg":{"text":"Class name of the entity to check","name":"className","type":"string"}},"rets":{"ret":{"text":"Is a friend","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"isfunction","parent":"Global","type":"libraryfunc","description":"Returns if the passed object is a function.","realm":"Shared and Menu","args":{"arg":{"text":"The variable to perform the type check for.","name":"variable","type":"any"}},"rets":{"ret":{"text":"True if the variable is a function.","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"IsInGame","parent":"Global","type":"libraryfunc","description":"Returns true if the client is currently playing either a singleplayer or multiplayer game.","realm":"Menu","rets":{"ret":{"text":"True if we are in a game.","name":"","type":"boolean"}}},"realms":["Menu"],"type":"Function"},
{"function":{"name":"isnumber","parent":"Global","type":"libraryfunc","description":"Returns if the passed object is a number.","realm":"Shared and Menu","args":{"arg":{"text":"The variable to perform the type check for.","name":"variable","type":"any"}},"rets":{"ret":{"text":"True if the variable is a number.","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"ismatrix","parent":"Global","type":"libraryfunc","description":"Returns whether the passed object is a VMatrix.","realm":"Shared and Menu","args":{"arg":{"text":"The variable to perform the type check for.","name":"variable","type":"any"}},"rets":{"ret":{"text":"True if the variable is a VMatrix.","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"ispanel","parent":"Global","type":"libraryfunc","description":"Returns if the passed object is a Panel.","realm":"Shared and Menu","args":{"arg":{"text":"The variable to perform the type check for.","name":"variable","type":"any"}},"rets":{"ret":{"text":"True if the variable is a Panel.","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"IsMounted","parent":"Global","type":"libraryfunc","description":"Checks whether or not a game is currently mounted. Uses data given by engine.GetGames.","realm":"Shared and Menu","file":{"text":"lua/includes/util.lua","line":"342-L357"},"args":{"arg":{"text":"The game string/app ID to check.","name":"game","type":"string"}},"rets":{"ret":{"text":"True if the game is mounted.","name":"","type":"boolean"}}},"example":{"description":"Check if Counter-Strike: Source is mounted.","code":"IsMounted('cstrike')"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"istable","parent":"Global","type":"libraryfunc","description":{"text":"Returns if the passed object is a table.","note":"Will return TRUE for variables of type Color"},"realm":"Shared and Menu","args":{"arg":{"text":"The variable to perform the type check for.","name":"variable","type":"any"}},"rets":{"ret":{"text":"True if the variable is a table.","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"IsTableOfEntitiesValid","parent":"Global","type":"libraryfunc","description":"Returns whether or not every element within a table is a valid entity","realm":"Shared and Menu","file":{"text":"lua/includes/util.lua","line":"35-L45"},"args":{"arg":{"text":"Table containing entities to check","name":"table","type":"table"}},"rets":{"ret":{"text":"All entities valid","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"isstring","parent":"Global","type":"libraryfunc","description":"Returns if the passed object is a string.","realm":"Shared and Menu","args":{"arg":{"text":"The variable to perform the type check for.","name":"variable","type":"any"}},"rets":{"ret":{"text":"True if the variable is a string.","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"isvector","parent":"Global","type":"libraryfunc","description":"Returns if the passed object is a Vector.","realm":"Shared and Menu","args":{"arg":{"text":"The variable to perform the type check for.","name":"variable","type":"any"}},"rets":{"ret":{"text":"True if the variable is a Vector.","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"IsValid","parent":"Global","type":"libraryfunc","description":{"text":"Returns whether an object is valid or not. (Such as Entitys, Panels, custom table objects and more).\nChecks that an object is not nil, has an IsValid method and if this method returns true.","note":"Due to vehicles being technically valid the moment they're spawned, also use Vehicle:IsValidVehicle to make sure they're fully initialized"},"realm":"Shared and Menu","file":{"text":"lua/includes/util.lua","line":"203-L212"},"args":{"arg":{"text":"The table or object to be validated.","name":"toBeValidated","type":"any"}},"rets":{"ret":{"text":"True if the object is valid.","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"IsUselessModel","parent":"Global","type":"libraryfunc","description":"Returns whether or not a model is useless by checking that the file path is that of a proper model.\n\nIf the string \".mdl\" is not found in the model name, the function will return true.\n\nThe function will also return true if any of the following strings are found in the given model name:\n* \"_gesture\"\n* \"_anim\"\n* \"_gst\"\n* \"_pst\"\n* \"_shd\"\n* \"_ss\"\n* \"_posture\"\n* \"_anm\"\n* \"ghostanim\"\n* \"_paths\"\n* \"_shared\"\n* \"anim_\"\n* \"gestures_\"\n* \"shared_ragdoll_\"","realm":"Shared and Menu","file":{"text":"lua/includes/util.lua","line":"264-L278"},"args":{"arg":{"text":"The model name to be checked","name":"modelName","type":"string"}},"rets":{"ret":{"text":"Whether or not the model is useless","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"JoinServer","parent":"Global","type":"libraryfunc","description":"Joins the server with the specified IP.","realm":"Menu","args":{"arg":{"text":"The IP of the server to join","name":"IP","type":"string"}}},"example":{"description":"Joins the server running on your machine.","code":"JoinServer(\"localhost\")"},"realms":["Menu"],"type":"Function"},
{"function":{"name":"JS_Utility","parent":"Global","type":"libraryfunc","description":"Adds javascript function 'util.MotionSensorAvailable' to an HTML panel as a method to call Lua's motionsensor.IsAvailable function.","realm":"Client and Menu","args":{"arg":{"text":"Panel to add javascript function 'util.MotionSensorAvailable' to.","name":"htmlPanel","type":"Panel"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"JS_Language","parent":"Global","type":"libraryfunc","description":"Adds javascript function 'language.Update' to an HTML panel as a method to call Lua's language.GetPhrase function.","realm":"Client and Menu","args":{"arg":{"text":"Panel to add javascript function 'language.Update' to.","name":"htmlPanel","type":"Panel"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"LanguageChanged","parent":"Global","type":"libraryfunc","description":"Callback function for when the client's language changes. Called by the engine.","realm":"Menu","file":{"text":"lua/menu/mainmenu.lua","line":"263"},"args":{"arg":{"text":"The new language code.","name":"lang","type":"string"}}},"example":{"description":"Prints the new language code whenever the language changes.","code":"local OldLanguageChanged = LanguageChanged\nfunction LanguageChanged( lang )\n\tprint( \"New language: \" .. lang )\n\tOldLanguageChanged( lang )\nend","output":"New language: en"},"realms":["Menu"],"type":"Function"},
{"function":{"name":"Label","parent":"Global","type":"libraryfunc","description":"Convenience function that creates a DLabel, sets the text, and returns it","realm":"Client and Menu","args":{"arg":[{"text":"The string to set the label's text to","name":"text","type":"string"},{"text":"Optional. The panel to parent the DLabel to","name":"parent","type":"Panel","default":"nil"}]},"rets":{"ret":{"text":"The created DLabel","name":"","type":"Panel"}}},"example":[{"description":"Create a label","code":"local lbl = Label( \"The quick brown fox\" )"},{"description":"Create a label and parents it to a DPanel","code":"local pnl = vgui.Create(\"DPanel\")\nlocal lbl = Label( \"The quick brown fox\", pnl )"}],"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"JS_Workshop","parent":"Global","type":"libraryfunc","description":"Adds workshop related javascript functions to an HTML panel, used by the \"Dupes\" and \"Saves\" tabs in the spawnmenu.","realm":"Client and Menu","args":{"arg":{"text":"Panel to add javascript functions to.","name":"htmlPanel","type":"Panel"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"Lerp","parent":"Global","type":"libraryfunc","description":{"text":"Performs a linear interpolation from the start number to the end number.\n\nThis function provides a very efficient and easy way to smooth out movements.","note":"This function is not meant to be used with constant value in the first argument, if you're dealing with animation! Use a value that changes over time. See example for **proper** usage of Lerp for animations."},"realm":"Shared and Menu","file":{"text":"lua/includes/util.lua","line":"236-L246"},"args":{"arg":[{"text":"The fraction for finding the result. This number is clamped between 0 and 1. Shouldn't be a constant.","name":"t","type":"number"},{"text":"The starting number. The result will be equal to this if delta is 0.","name":"from","type":"number"},{"text":"The ending number. The result will be equal to this if delta is 1.","name":"to","type":"number"}]},"rets":{"ret":{"text":"The result of the linear interpolation, `from + (to - from) * t`.","name":"","type":"number"}}},"example":[{"description":"Example of simple Lerp usage for animations.","code":"local start = SysTime()\n\nhook.Add( \"HUDPaint\", \"LerpAnimation\", function()\n\tdraw.RoundedBox( 4, 100, 100, Lerp( SysTime() - start, 0, 100 ), 20, color_white )\n\n\tif SysTime() - start > 2 then\n\t\tstart = SysTime()\n\tend\nend )"},{"description":"Advanced example of Lerp animation: A health bar that will smooth the health change over 0.5 seconds to reach new health value from the previous value.","code":"local start, oldhp, newhp = 0, -1, -1\nlocal barW = 200\nlocal animationTime = 0.5 -- seconds\n\nhook.Add( \"HUDPaint\", \"LerpAnimation\", function()\n\t-- Local player still loading, do nothing\n\tif ( !IsValid( LocalPlayer() ) ) then return end\n\n\tlocal hp = LocalPlayer():Health()\n\tlocal maxhp = LocalPlayer():GetMaxHealth()\n\n\t-- The values are not initialized yet, do so right now\n\tif ( oldhp == -1 and newhp == -1 ) then\n\t\toldhp = hp\n\t\tnewhp = hp\n\tend\n\n\t-- You can use a different smoothing function here\n\tlocal smoothHP = Lerp( ( SysTime() - start ) / animationTime, oldhp, newhp )\n\n\t-- Health was changed, initialize the animation\n\tif newhp ~= hp then\n\t\t-- Old animation is still in progress, adjust\n\t\tif ( smoothHP ~= hp ) then\n\t\t\t-- Pretend our current \"smooth\" position was the target so the animation will\n\t\t\t-- not jump to the old target and start to the new target from there\n\t\t\tnewhp = smoothHP\n\t\tend\n\n\t\toldhp = newhp\n\t\tstart = SysTime()\n\t\tnewhp = hp\n\tend\n\n\tdraw.RoundedBox( 4, 100, 200, barW, 100, color_black )\n\tdraw.RoundedBox( 4, 100, 200, math.max( 0, smoothHP ) / maxhp * barW, 100, color_white )\nend )"}],"realms":["Server","Client","Menu"],"type":"Function"},
{"cat":"global","function":{"name":"LoadAddonPresets","parent":"Global","type":"libraryfunc","description":"Returns the contents of `addonpresets.txt` located in the `garrysmod/settings` folder. By default, this file stores your addon presets as JSON.\n\nYou can use Global.SaveAddonPresets to modify this file.","realm":"Menu","rets":{"ret":{"text":"The contents of the file.","name":"JSON","type":"string"}}},"realms":["Menu"],"type":"Function"},
{"text":"If you do it each frame to smooth positions, you should couple it with FrameTime()","function":{"name":"LerpVector","parent":"Global","type":"libraryfunc","description":{"text":"Linear interpolation between two vectors. It is commonly used to smooth movement between two vectors","note":"This function is not meant to be used with constant value in the first argument, if you're dealing with animation! Use a value that changes over time"},"realm":"Shared and Menu","args":{"arg":[{"text":"Fraction ranging from 0 to 1","name":"fraction","type":"number"},{"text":"The initial Vector","name":"from","type":"Vector"},{"text":"The desired Vector","name":"to","type":"Vector"}]},"rets":{"ret":{"text":"The lerped vector.","name":"","type":"Vector"}}},"example":{"description":"Get the middle point (50%) between two vectors.","code":"local output = LerpVector( 0.5, Vector( 0, 0, 100 ), Vector( 0, 0, 200 ) )","output":"Vector( 0, 0, 150 )"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"LerpAngle","parent":"Global","type":"libraryfunc","description":{"text":"Returns point between first and second angle using given fraction and linear interpolation","note":"This function is not meant to be used with constant value in the first argument, if you're dealing with animation! Use a value that changes over time"},"realm":"Shared and Menu","args":{"arg":[{"text":"Ratio of progress through values","name":"ratio","type":"number"},{"text":"Angle to begin from","name":"angleStart","type":"Angle"},{"text":"Angle to end at","name":"angleEnd","type":"Angle"}]},"rets":{"ret":{"text":"angle","name":"","type":"Angle"}}},"example":{"description":"Turns an entity 180 degrees linearly over ten seconds","code":"local startAngle = Angle(0, 0, 0)\nlocal endAngle = Angle(0, 180, 0)\nlocal ratio = 0\n\ntimer.Create(\"Turn\", 0.1, 10, function()\n    ratio = ratio + 0.1\n    entity:SetAngles(LerpAngle(ratio, startAngle, endAngle))\nend)"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"LoadLastMap","parent":"Global","type":"libraryfunc","description":{"text":"This function is used to get the last map and category to which the map belongs from the cookie saved with Global.SaveLastMap.","internal":""},"realm":"Menu","file":{"text":"lua/menu/getmaps.lua","line":"347"}},"realms":["Menu"],"type":"Function"},
{"function":{"name":"LocalPlayer","parent":"Global","type":"libraryfunc","description":{"text":"Returns the player object of the current client.","note":"LocalPlayer() will return NULL until all entities have been initialized. See GM:InitPostEntity."},"realm":"Client","rets":{"ret":{"text":"The player object representing the client.","name":"","type":"Player"}}},"example":{"description":"Demonstrates the use of this function.","code":"print( LocalPlayer() )","output":"Player [1][Player1]"},"realms":["Client"],"type":"Function"},
{"function":{"name":"LoadPresets","parent":"Global","type":"libraryfunc","description":"Loads all preset settings for the presets and returns them in a table","realm":"Client","rets":{"ret":{"text":"Preset data","name":"","type":"table"}}},"example":{"description":"Prints all of the presets in to the console","code":"PrintTable(LoadPresets())"},"realms":["Client"],"type":"Function"},
{"function":{"name":"Localize","parent":"Global","type":"libraryfunc","description":"Returns a localisation for the given token, if none is found it will return the default (second) parameter.","realm":"Client and Menu","args":{"arg":[{"text":"The token to find a translation for.","name":"localisationToken","type":"string"},{"text":"The default value to be returned if no translation was found.","name":"default","type":"string"}]}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"Material","parent":"Global","type":"libraryfunc","description":{"text":"Either returns the material with the given name, or loads the material interpreting the first argument as the path.","note":"When using .png or .jpg textures, try to make their sizes Power Of 2 (1, 2, 4, 8, 16, 32, 64, etc). While images are no longer scaled to Power of 2 sizes since February 2019, it is a good practice for things like icons, etc."},"realm":"Shared and Menu","file":{"text":"lua/includes/util.lua","line":"17-L30"},"args":{"arg":[{"text":"The material name or path. The path is relative to the **materials/** folder. You do not need to add **materials/** to your path.\n\nTo retrieve a Lua material created with Global.CreateMaterial, just prepend a \"!\" to the material name.","name":"materialName","type":"string","note":"Since paths are relative to the materials folder, resource paths like ../data/MyImage.jpg will work since \"..\" translates to moving up a parent directory in the file tree."},{"text":"A string containing space separated keywords which will be used to add material parameters.\n\nSee Material Parameters for more information.","name":"pngParameters","type":"string","default":"nil","note":"This feature only works when importing .png or .jpeg image files"}]},"rets":{"ret":[{"text":"Generated material","name":"","type":"IMaterial"},{"text":"How long it took for the function to run","name":"","type":"number"}]}},"example":[{"description":"Creates a PNG material with noclamp and smooth parameters set and then draws on screen.\n\nIn this example the .png file is located in **materials/vgui/wave.png**","code":"local wave = Material( \"vgui/wave.png\", \"noclamp smooth\" )\n\nhook.Add( \"HUDPaint\", \"HUDPaint_DrawATexturedBox\", function()\n\tsurface.SetMaterial( wave )\n\tsurface.SetDrawColor( 255, 255, 255, 255 )\n\tsurface.DrawTexturedRect( 50, 50, 128, 128 )\nend )"},{"description":"Acquires and uses one of the Post-Processing Materials to make the screen darker and more saturated","code":"local mat_color = Material( \"pp/colour\" )  -- used outside of the hook for performance\n\nhook.Add(\"RenderScreenspaceEffects\", \"ColorExample\", function()\n\trender.UpdateScreenEffectTexture()\n\n\tmat_color:SetTexture( \"$fbtexture\", render.GetScreenEffectTexture() )\n\n\tmat_color:SetFloat( \"$pp_colour_addr\", 0 )\n\tmat_color:SetFloat( \"$pp_colour_addg\", 0 )\n\tmat_color:SetFloat( \"$pp_colour_addb\", 0 )\n\tmat_color:SetFloat( \"$pp_colour_mulr\", 0 )\n\tmat_color:SetFloat( \"$pp_colour_mulg\", 0 )\n\tmat_color:SetFloat( \"$pp_colour_mulb\", 0 )\n\tmat_color:SetFloat( \"$pp_colour_brightness\", 0 )\n\tmat_color:SetFloat( \"$pp_colour_contrast\", 0.5 )\n\tmat_color:SetFloat( \"$pp_colour_colour\", 5 )\n\n\trender.SetMaterial( mat_color )\n\trender.DrawScreenQuad()\nend )"}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Mesh","parent":"Global","type":"libraryfunc","description":"Returns a new mesh object.","realm":"Client","args":{"arg":{"text":"The material the mesh is intended to be rendered with. It's merely a hint that tells that mesh what vertex format it should use.","name":"mat","type":"IMaterial","default":"nil"}},"rets":{"ret":{"text":"The created object.","name":"","type":"IMesh"}}},"example":{"description":"Draws a triangle near Vector( 0, 0, 0 ) in the map.","code":"local mat = Material( \"editor/wireframe\" ) -- The material (a wireframe)\nlocal obj = Mesh() -- Create the IMesh object\n\nlocal verts = { -- A table of 3 vertices that form a triangle\n\t{ pos = Vector( 0,  0,  0 ), u = 0, v = 0 }, -- Vertex 1\n\t{ pos = Vector( 10, 0,  0 ), u = 1, v = 0 }, -- Vertex 2\n\t{ pos = Vector( 10, 10, 0 ), u = 1, v = 1 }, -- Vertex 3\n}\n\nobj:BuildFromTriangles( verts ) -- Load the vertices into the IMesh object\n\nhook.Add( \"PostDrawOpaqueRenderables\", \"IMeshTest\", function()\n\n\trender.SetMaterial( mat ) -- Apply the material\n\tobj:Draw() -- Draw the mesh\n\nend )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"LocalToWorld","parent":"Global","type":"libraryfunc","description":"Translates the specified position and angle from the specified local coordinate system into worldspace coordinates.\n\nIf you're working with an entity's local vectors, use Entity:LocalToWorld and/or Entity:LocalToWorldAngles instead.\n\nSee also: Global.WorldToLocal, the reverse of this function.","realm":"Shared","args":{"arg":[{"text":"The position vector in the source coordinate system, that should be translated to world coordinates","name":"localPos","type":"Vector"},{"text":"The angle in the source coordinate system, that should be converted to a world angle. If you don't need to convert an angle, you can supply an arbitrary valid angle (e.g. Global.Angle()).","name":"localAng","type":"Angle"},{"text":"The origin point of the source coordinate system, in world coordinates","name":"originPos","type":"Vector"},{"text":"The angles of the source coordinate system, as a world angle","name":"originAngle","type":"Angle"}]},"rets":{"ret":[{"text":"The world position of the supplied local position.","name":"","type":"Vector"},{"text":"The world angles of the supplied local angle.","name":"","type":"Angle"}]}},"example":{"description":"Matrix math which showcases how this is calculated internally.","code":"local localTransform = Matrix()\nlocalTransform:SetTranslation(localPos)\nlocalTransform:SetAngles(localAng)\n\nlocal worldTransform = Matrix()\nworldTransform:SetTranslation(originPos)\nworldTransform:SetAngles(originAngle)\n\n-- Transform the local coordinates using the world transform as a transformation matrix\nlocal localToWorld = worldTransform * localTransform\n\nprint(localToWorld:GetTranslation(), localToWorld:GetAngles())"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Model","parent":"Global","type":"libraryfunc","description":"Runs util.PrecacheModel and returns the string.","realm":"Shared and Menu","file":{"text":"lua/includes/util.lua","line":"131-L137"},"args":{"arg":{"text":"The model to precache.","name":"model","type":"string"}},"rets":{"ret":{"text":"The same string entered as an argument.","name":"","type":"string"}}},"example":{"description":"From [entities/gmod_cameraprop.lua](https://github.com/Facepunch/garrysmod/blob/master/garrysmod/gamemodes/sandbox/entities/entities/gmod_cameraprop.lua).","code":"local CAMERA_MODEL = Model( \"models/dav0r/camera.mdl\" )\nfunction ENT:Initialize()\n\tself:SetModel( CAMERA_MODEL )\nend"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Matrix","parent":"Global","type":"libraryfunc","description":"Returns a VMatrix object.","realm":"Shared","args":{"arg":{"text":"Initial data to initialize the matrix with. Leave empty to initialize an identity matrix. See examples for usage.\n\nCan be a VMatrix to copy its data.","name":"data","type":"table","default":"{{1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 0}, {0, 0, 0, 1}}"}},"rets":{"ret":{"text":"New matrix.","name":"","type":"VMatrix"}}},"example":{"description":"Initializes a matrix, translates it by Vector( 4, 5, 6 ) and then scales it by Vector( 1, 2, 3 ).","code":"local M = Matrix()\nM:Translate( Vector( 4, 5, 6 ) )\nM:Scale( Vector( 1, 2, 3 ) )\n\n-- This matrix is equivalent:\nlocal M2 = Matrix( {\n\t{ 1, 0, 0, 4 },\n\t{ 0, 2, 0, 5 },\n\t{ 0, 0, 3, 6 },\n\t{ 0, 0, 0, 1 }\n} )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"module","parent":"Global","type":"libraryfunc","description":"Creates a table with the specified module name and sets the function environment for said table.\n\nAny passed loaders are called with the table as an argument. An example of this is package.seeall.","realm":"Shared and Menu","args":{"arg":[{"text":"The name of the module. This will be used to access the module table in the runtime environment.","name":"name","type":"string"},{"text":"Calls each function passed with the new table as an argument.","name":"loaders","type":"vararg"}]}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Msg","parent":"Global","type":"libraryfunc","description":{"text":"Writes every given argument to the console.\n\nAutomatically attempts to convert each argument to a string. (See Global.tostring)\n\nUnlike Global.print, arguments are not separated by anything. They are simply concatenated.\n\nAdditionally, a newline isn't added automatically to the end, so subsequent Msg or print operations will continue the same line of text in the console. See Global.MsgN for a version that does add a newline.\n\nThe text is blue on the server, orange on the client, and green on the menu:","image":{"src":"msg_server_client_colors.png"}},"realm":"Shared and Menu","args":{"arg":{"text":"List of values to print.","name":"args","type":"vararg"}}},"example":{"description":"Prints \"Hello World!\" to the console.","code":"Msg(\"Hello\", \" World!\")","output":"Hello World!"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"MsgAll","parent":"Global","type":"libraryfunc","description":"Works exactly like Global.Msg except that, if called on the server, will print to all players consoles plus the server console.","realm":"Shared","args":{"arg":{"text":"List of values to print.","name":"args","type":"vararg"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"MsgAll","parent":"Global","type":"libraryfunc","description":"Works exactly like Global.Msg except that, if called on the server, will print to all players consoles plus the server console.","realm":"Shared","args":{"arg":{"text":"List of values to print.","name":"args","type":"vararg"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"newproxy","parent":"Global","type":"libraryfunc","description":"Returns a new userdata object.","realm":"Shared and Menu","args":{"arg":{"text":"If true, the userdata will get its own metatable automatically. If another newproxy is passed, it will create new one and copy its metatable.","name":"addMetatable","type":"boolean","default":"false"}},"rets":{"ret":{"text":"The newly created userdata.","name":"","type":"userdata"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"NamedColor","parent":"Global","type":"libraryfunc","description":"Returns named color defined in resource/ClientScheme.res.","realm":"Client","args":{"arg":{"text":"Name of color","name":"name","type":"string"}},"rets":{"ret":{"text":"A Color or nil","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"next","parent":"Global","type":"libraryfunc","description":{"text":"Returns the next key and value pair in a table.","note":"Table keys in Lua have no specific order, and will be returned in whatever order they exist in memory. This may not always be in ascending order or alphabetical order. If you need to iterate over an array in order, use Global.ipairs."},"realm":"Shared and Menu","args":{"arg":[{"text":"The table","name":"tab","type":"table"},{"text":"The previous key in the table.","name":"prevKey","type":"any","default":"nil"}]},"rets":{"ret":[{"text":"The next key for the table. If the previous key was nil, this will be the first key in the table. If the previous key was the last key in the table, this will be nil.","name":"","type":"any"},{"text":"The value associated with that key. If the previous key was the last key in the table, this will be nil.","name":"","type":"any"}]}},"example":{"description":"Returns whether the table is empty or not","code":"local function IsEmptyTable( t )\n\treturn next( t ) == nil\nend\n\nlocal mytable = {}\nprint( \"mytable is empty:\", IsEmptyTable( mytable ) )\nmytable[\"hello\"]=true\nprint( \"mytable is empty:\", IsEmptyTable( mytable ) )","output":"```\nmytable is empty: true\nmytable is empty: false\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"MsgN","parent":"Global","type":"libraryfunc","description":"Same as Global.print, except it concatinates the arguments without inserting any whitespace in between them.\n\nSee also Global.Msg, which doesn't add a newline (`\"\\n\"`) at the end.","realm":"Shared and Menu","args":{"arg":{"text":"List of values to print. They can be of any type and will be converted to strings with Global.tostring.","name":"args","type":"vararg"}}},"example":{"description":"Prints \"Hello, World!\" in two lines to the console.","code":"MsgN(\"Hello,\")\nMsgN(\"World!\")","output":"```\nHello,\nWorld!\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"NumModelSkins","parent":"Global","type":"libraryfunc","description":"Returns the amount of skins the specified model has.\n\nSee also Entity:SkinCount if you have an entity.","realm":"Client","args":{"arg":{"text":"Model to return amount of skins of","name":"modelName","type":"string"}},"rets":{"ret":{"text":"Amount of skins","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnModelLoaded","parent":"Global","type":"libraryfunc","description":{"text":"Called by the engine when a model has been loaded. Caches model information with the sql.","internal":""},"realm":"Client","args":{"arg":[{"text":"Name of the model.","name":"modelName","type":"string"},{"text":"Number of pose parameters the model has.","name":"numPostParams","type":"number"},{"text":"Number of sequences the model has.","name":"numSeq","type":"number"},{"text":"Number of attachments the model has.","name":"numAttachments","type":"number"},{"text":"Number of bone controllers the model has.","name":"numBoneControllers","type":"number"},{"text":"Number of skins that the model has.","name":"numSkins","type":"number"},{"text":"Size of the model.","name":"size","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OpenFolder","parent":"Global","type":"libraryfunc","description":{"text":"Opens a folder with the given name in the garrysmod folder using the operating system's file browser.","bug":{"text":"This does not work on OSX or Linux.","issue":"1532"}},"realm":"Menu","args":{"arg":{"text":"The subdirectory to open in the garrysmod folder.","name":"folder","type":"string"}}},"example":{"description":"Opens the \"saves\" folder.","code":"OpenFolder( \"saves\" )"},"realms":["Menu"],"type":"Function"},
{"function":{"name":"NumDownloadables","parent":"Global","type":"libraryfunc","description":"Returns the number of files needed from the server you are currently joining.","realm":"Menu","rets":{"ret":{"text":"The number of downloadables","name":"","type":"number"}}},"realms":["Menu"],"type":"Function"},
{"function":{"name":"OrderVectors","parent":"Global","type":"libraryfunc","description":{"text":"Modifies the given vectors so that all of vector2's axis are larger than vector1's by switching them around. Also known as ordering vectors.","note":"This function will irreversibly modify the given vectors"},"realm":"Shared and Menu","args":{"arg":[{"text":"Bounding box min resultant","name":"vector1","type":"Vector"},{"text":"Bounding box max resultant","name":"vector2","type":"Vector"}]}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"pairs","parent":"Global","type":"libraryfunc","description":{"text":"Returns an iterator function(Global.next) for a for loop that will return the values of the specified table in an arbitrary order.\n\n* For alphabetical **key** order use Global.SortedPairs.\n* For alphabetical **value** order use Global.SortedPairsByValue.","br":"","note":"In sequential tables like player.GetAll or ents.GetAll (and `ents.Find*` functions), it's more efficient to use Global.ipairs or [for](http://lua-users.org/wiki/ForTutorial) iterator."},"realm":"Shared and Menu","args":{"arg":{"text":"The table to iterate over.","name":"tab","type":"table"}},"rets":{"ret":[{"text":"The iterator (Global.next).","name":"","type":"function"},{"text":"The table being iterated over.","name":"","type":"table"},{"text":"**nil** (for the constructor).","name":"","type":"any"}]}},"example":{"description":{"text":"Iterates through all  hooks on the server and prints their unique identifiers and called function.","page":",PlayerInitialSpawnGM:PlayerInitialSpawn"},"code":"for k, v in pairs( hook.GetTable().PlayerInitialSpawn ) do\n\n\t-- The custom name given in the second argument of the hook.Add function.\n\t-- Example : \"myCustomSpawnFunc\".\n\tprint( \"Unique identifier:\", k )\n\n\t-- The hook function.\n\t-- Example : \"function: 0x3a3f2c80\".\n\tprint( \"Called function:\", v )\n\nend","output":"A list of all hooks."},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Particle","parent":"Global","type":"libraryfunc","description":"Calls game.AddParticles and returns given string.","realm":"Shared and Menu","file":{"text":"lua/includes/util.lua","line":"139-L144"},"args":{"arg":{"text":"The particle file.","name":"file","type":"string"}},"rets":{"ret":{"text":"The particle file.","name":"","type":"string"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"ParticleEmitter","parent":"Global","type":"libraryfunc","description":{"text":"Creates a new CLuaEmitter.","note":"Do not forget to delete the emitter with CLuaEmitter:Finish once you are done with it"},"realm":"Client","args":{"arg":[{"text":"The start position of the emitter.\n\nThis is only used to determine particle drawing order for translucent particles.","name":"position","type":"Vector"},{"text":"Whenever to render the particles in 2D or 3D mode.","name":"use3D","type":"boolean"}]},"rets":{"ret":{"text":"The new particle emitter.","name":"","type":"CLuaEmitter"}}},"example":{"description":"Creates a simple spark particle effect 100 units above where the local player is looking at.","code":"local tr =  LocalPlayer():GetEyeTrace()\nlocal pos = tr.HitPos + tr.HitNormal * 100 -- The origin position of the effect\n\nlocal emitter = ParticleEmitter( pos ) -- Particle emitter in this position\n\nfor i = 0, 100 do -- Do 100 particles\n\tlocal part = emitter:Add( \"effects/spark\", pos ) -- Create a new particle at pos\n\tif ( part ) then\n\t\tpart:SetDieTime( 1 ) -- How long the particle should \"live\"\n\n\t\tpart:SetStartAlpha( 255 ) -- Starting alpha of the particle\n\t\tpart:SetEndAlpha( 0 ) -- Particle size at the end if its lifetime\n\n\t\tpart:SetStartSize( 5 ) -- Starting size\n\t\tpart:SetEndSize( 0 ) -- Size when removed\n\n\t\tpart:SetGravity( Vector( 0, 0, -250 ) ) -- Gravity of the particle\n\t\tpart:SetVelocity( VectorRand() * 50 ) -- Initial velocity of the particle\n\tend\nend\n\nemitter:Finish()"},"realms":["Client"],"type":"Function"},
{"function":{"name":"ParticleEffect","parent":"Global","type":"libraryfunc","description":{"text":"Creates a particle effect.","note":"The particle effect must be precached with Global.PrecacheParticleSystem and the file its from must be added via game.AddParticles before it can be used!"},"realm":"Shared","args":{"arg":[{"text":"The name of the particle effect.","name":"particleName","type":"string"},{"text":"The start position of the effect.","name":"position","type":"Vector"},{"text":"The orientation of the effect.","name":"angles","type":"Angle"},{"text":"If set, the particle will be parented to the entity.","name":"parent","type":"Entity","default":"NULL"}]}},"example":{"description":"Example usage of the function. Precaches **ExplosionCore_wall** particle from **particles/explosion.pcf**, a Team Fortress 2 particle file.\n\nYou can then test the particle by using the **particleitup** console command.\n\nYou can find a list of particles inside a .pcf file using the [Particle Editor Tool](https://developer.valvesoftware.com/wiki/Particle_Editor)","code":"game.AddParticles( \"particles/explosion.pcf\" )\nPrecacheParticleSystem( \"ExplosionCore_wall\" )\n\nif ( SERVER ) then\n\t-- A test console command to see if the particle works, spawns the particle where the player is looking at. \n\tconcommand.Add( \"particleitup\", function( ply, cmd, args )\n\t\tParticleEffect( \"ExplosionCore_wall\", ply:GetEyeTrace().HitPos, Angle( 0, 0, 0 ) )\n\tend )\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ParticleEffectAttach","parent":"Global","type":"libraryfunc","description":{"text":"Creates a particle effect with specialized parameters.","note":"The particle effect must be precached with Global.PrecacheParticleSystem and the file its from must be added via game.AddParticles before it can be used!"},"realm":"Shared","args":{"arg":[{"text":"The name of the particle effect.","name":"particleName","type":"string"},{"text":"Attachment type using Enums/PATTACH.","name":"attachType","type":"number"},{"text":"The entity to be used in the way specified by the attachType.","name":"entity","type":"Entity"},{"text":"The id of the attachment to be used in the way specified by the attachType.","name":"attachmentID","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Path","parent":"Global","type":"libraryfunc","description":"Creates a path for the bot to follow","realm":"Server","file_name":"src/garrysmod/Objects/lua_path.cpp","file_line":"444","args":{"arg":{"text":"The name of the path to create.\nThis is going to be \"Follow\" or \"Chase\" right now.","name":"type","type":"string"}},"rets":{"ret":{"text":"The path","name":"","type":"PathFollower"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"pcall","parent":"Global","type":"libraryfunc","description":{"text":"Calls a function and catches an error that can be thrown while the execution of the call.","bug":[{"text":"Using this function with Global.include will break autorefresh.","issue":"1976"},{"text":"This cannot stop errors from hooks called from the engine.","issue":"2036"},{"text":"This does not stop Global.Error and Global.ErrorNoHalt from sending error messages to the server (if called clientside) or calling the GM:OnLuaError hook. The success boolean returned will always return true and thus you will not get the error message returned. Global.error does not exhibit these behaviours.","issue":"2498"},{"text":"This does not stop errors incurred by Global.include.","issue":"3112"}]},"realm":"Shared and Menu","args":{"arg":[{"text":"Function to be executed and of which the errors should be caught of","name":"func","type":"function"},{"text":"Arguments to call the function with.","name":"arguments","type":"vararg"}]},"rets":{"ret":[{"text":"If the function had no errors occur within it.","name":"","type":"boolean"},{"text":"If an error occurred, this will be a string containing the error message. Otherwise, this will be the return values of the function passed in.","name":"","type":"vararg"}]}},"example":{"description":"Catch an error.","code":"local succ, err = pcall(function() aisj() end)\nprint(succ, err)","output":"false attempt to call global 'aisj' (a nil value)"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Player","parent":"Global","type":"libraryfunc","description":"Returns the player with the matching Player:UserID.\n\nFor a function that returns a player based on their Entity:EntIndex, see Global.Entity.\n\n\nFor a function that returns a player based on their connection ID, see player.GetByID.","realm":"Shared","args":{"arg":{"text":"The player index.","name":"playerIndex","type":"number"}},"rets":{"ret":{"text":"The retrieved player.","name":"","type":"Player"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"PositionSpawnIcon","parent":"Global","type":"libraryfunc","description":"Moves the given model to the given position and calculates appropriate camera parameters for rendering the model to an icon.\n\nThe output table interacts nicely with Panel:RebuildSpawnIconEx with a few key renames.","realm":"Client","args":{"arg":[{"text":"Model that is being rendered to the spawn icon","name":"model","type":"Entity"},{"text":"Position that the model is being rendered at","name":"position","type":"Vector"},{"text":"If true the function won't reset the angles to 0 for the model.","name":"noAngles","type":"boolean"}]},"rets":{"ret":{"text":"Table of information of the view which can be used for rendering","name":"","type":"table"}}},"example":{"description":"Creates a clientside model and then PositionSpawnIcon is used to figure out the appropriate camera parameters for rendering this model.","code":"local ent = ClientsideModel(\"models/props_wasteland/cafeteria_table001a.mdl\", RENDERGROUP_BOTH)\nlocal tab = PositionSpawnIcon(ent, vector_origin)\nent:Remove()\n\nPrintTable(tab)","output":"```\nangles\t=\t25.000 220.000 0.000\nfov\t=\t8.4436927451273\norigin\t=\t1156.924316 970.773010 704.184265\nzfar\t=\t1888.5692536466\nznear\t=\t1\n```"},"realms":["Client"],"type":"Function"},
{"function":{"name":"PrecacheScene","parent":"Global","type":"libraryfunc","description":"Precaches a scene file.","realm":"Server","args":{"arg":{"text":"Path to the scene file to precache.","name":"scene","type":"string"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"PrecacheParticleSystem","parent":"Global","type":"libraryfunc","description":"Precaches the particle with the specified name.","realm":"Shared","args":{"arg":{"text":"The name of the particle system.","name":"particleSystemName","type":"string"}}},"example":{"description":"Example usage of the function. Precaches \"ExplosionCore_wall\" particle from \"particles/explosion.pcf\", a Team Fortress 2 particle file.\n\nYou can find a list of particles inside a .pcf file using the [Particle Editor Tool](https://developer.valvesoftware.com/wiki/Particle_Editor)","code":"game.AddParticles( \"particles/explosion.pcf\" )\nPrecacheParticleSystem( \"ExplosionCore_wall\" )\n\nif ( SERVER ) then\n\t-- A test console command to see if the particle works, spawns the particle where the player is looking at. \n\tconcommand.Add( \"particleitup\", function( ply, cmd, args )\n\t\tParticleEffect( \"ExplosionCore_wall\", ply:GetEyeTrace().HitPos, Angle( 0, 0, 0 ) )\n\tend )\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"PrecacheSentenceGroup","parent":"Global","type":"libraryfunc","description":"Precache a sentence group in a sentences.txt definition file.","realm":"Server","args":{"arg":{"text":"The group to precache.","name":"group","type":"string"}}},"example":{"description":"Precache all metropolice sentences.","code":"PrecacheSentenceGroup( \"METROPOLICE\" )","output":"Precaches sounds used in all sentences starting with \"METROPOLICE\"."},"realms":["Server"],"type":"Function"},
{"function":{"name":"PrintMessage","parent":"Global","type":"libraryfunc","description":"Displays a message in the chat, console, or center of screen of every player.\n\nThis uses the archaic user message system (umsg) and hence is limited to ≈250 characters.","realm":"Server","args":{"arg":[{"text":"Which type of message should be sent to the players (see Enums/HUD)","name":"type","type":"number"},{"text":"Message to be sent to the players","name":"message","type":"string"}]}},"example":{"description":"Prints into the every player's chat: \"I'm new here.\"","code":"PrintMessage(HUD_PRINTTALK, \"I'm new here.\")","output":"I'm new here."},"realms":["Server"],"type":"Function"},
{"function":{"name":"PrintTable","parent":"Global","type":"libraryfunc","description":"Recursively prints the contents of a table to the console.","realm":"Shared and Menu","file":{"text":"lua/includes/util.lua","line":"58-L92"},"args":{"arg":[{"text":"The table to be printed","name":"tableToPrint","type":"table"},{"text":"Number of tabs to start indenting at. Increases by 2 when entering another table.","name":"indent","type":"number","default":"0"},{"text":"Internal argument, you shouldn't normally change this. Used to check if a nested table has already been printed so it doesn't get caught in a loop.","name":"done","type":"table","default":"{}"}]}},"example":{"description":"Prints the table we created.","code":"local tbl = {\n \"test\",\n 3829.4,\n {\"foo\", \"baah\", 20/5},\n true\n}\nPrintTable(tbl)","output":"```\n1 = test\n2 = 3829.4\n3:\n\t1 = foo\n\t2 = baah\n\t3 = 4\n4 = true\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"PrecacheSentenceFile","parent":"Global","type":"libraryfunc","description":"Load and precache a custom sentence file.","realm":"Shared","args":{"arg":{"text":"The path to the custom sentences.txt.","name":"filename","type":"string"}}},"example":{"description":"Precache a file named \"customsentences.txt\" in the data directory.","code":"PrecacheSentenceFile( \"data/customsentences.txt\" )","output":"Loads and precaches the sentences."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"print","parent":"Global","type":"libraryfunc","description":"Writes every given argument to the console.\nAutomatically attempts to convert each argument to a string. (See Global.tostring)\n\nSeperates lines with a line break (`\"\\n\"`)\n\nSeparates arguments with a tab character (`\"\\t\"`).","realm":"Shared and Menu","args":{"arg":{"text":"List of values to print.","name":"args","type":"vararg"}}},"example":{"description":"Prints \"Hello World! Yay!\" to the console.","code":"print(\"Hello World!\", \"Yay!\")","output":"```\nHello World! Yay!\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"ProtectedCall","parent":"Global","type":"libraryfunc","description":"Runs a function without stopping the whole script on error.\n\nThis function is similar to Global.pcall and Global.xpcall except the errors are still printed and sent to the error handler (i.e. sent to server console if clientside and GM:OnLuaError called).","realm":"Shared","args":{"arg":{"text":"Function to run","name":"func","type":"function"}},"rets":{"ret":{"text":"Whether the function executed successfully or not","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"RandomPairs","parent":"Global","type":"libraryfunc","description":"Returns an iterator function that can be used to loop through a table in random order","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/table.lua","line":"575"},"args":{"arg":[{"text":"Table to create iterator for","name":"table","type":"table"},{"text":"Whether the iterator should iterate descending or not","name":"descending","type":"boolean"}]},"rets":{"ret":{"text":"Iterator function","name":"","type":"function"}}},"example":{"description":"Creates a table and prints its contents in random order","code":"local tab = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"}\n\nfor k, v in RandomPairs(tab) do\n    print(v)\nend","output":"b\nd\nf\nc\na\ne"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"ProjectedTexture","parent":"Global","type":"libraryfunc","description":"Creates a new ProjectedTexture.","realm":"Client","rets":{"ret":{"text":"Newly created projected texture.","name":"","type":"ProjectedTexture"}}},"example":{"description":{"text":"Creates a simple ProjectedTexture attached to a .\n\nNote that this code must be ran on clientside only, not shared.","page":",Scripted EntityScripted_Entities"},"code":"function ENT:Initialize()\n\tlocal lamp = ProjectedTexture() -- Create a projected texture\n\tself.lamp = lamp -- Assign it to the entity table so it may be accessed later\n\n\t-- Set it all up\n\tlamp:SetTexture( \"effects/flashlight001\" )\n\tlamp:SetFarZ( 500 ) -- How far the light should shine\n\n\tlamp:SetPos( self:GetPos() ) -- Initial position and angles\n\tlamp:SetAngles( self:GetAngles() )\n\tlamp:Update()\nend\n\nfunction ENT:OnRemove()\n\tif ( IsValid( self.lamp ) ) then\n\t\tself.lamp:Remove()\n\tend\nend\n\nfunction ENT:Think()\n\t-- Keep updating the light so it's attached to our entity\n\t-- you might want to call other functions here, you can do animations here as well\n\tif ( IsValid( self.lamp ) ) then\n\t\tself.lamp:SetPos( self:GetPos() )\n\t\tself.lamp:SetAngles( self:GetAngles() )\n\t\tself.lamp:Update()\n\tend\nend"},"realms":["Client"],"type":"Function"},
{"function":{"name":"rawequal","parent":"Global","type":"libraryfunc","description":"Compares the two values without calling their __eq operator.","realm":"Shared and Menu","args":{"arg":[{"text":"The first value to compare.","name":"value1","type":"any"},{"text":"The second value to compare.","name":"value2","type":"any"}]},"rets":{"ret":{"text":"Whether or not the two values are equal.","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"rawget","parent":"Global","type":"libraryfunc","description":"Gets the value with the specified key from the table without calling the __index method.","realm":"Shared and Menu","args":{"arg":[{"text":"Table to get the value from.","name":"table","type":"table"},{"text":"The index to get the value from.","name":"index","type":"any"}]},"rets":{"ret":{"text":"The value.","name":"","type":"any"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"rawset","parent":"Global","type":"libraryfunc","description":"Sets the value with the specified key from the table without calling the __newindex method.","realm":"Shared and Menu","args":{"arg":[{"text":"Table to get the value from.","name":"table","type":"table"},{"text":"The index to get the value from.","name":"index","type":"any"},{"text":"The value to set for the specified key.","name":"value","type":"any"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"rawset","parent":"Global","type":"libraryfunc","description":"Sets the value with the specified key from the table without calling the __newindex method.","realm":"Shared and Menu","args":{"arg":[{"text":"Table to get the value from.","name":"table","type":"table"},{"text":"The index to get the value from.","name":"index","type":"any"},{"text":"The value to set for the specified key.","name":"value","type":"any"}]}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"RealFrameTime","parent":"Global","type":"libraryfunc","description":"Returns the real frame-time which is unaffected by host_timescale. To be used for GUI effects (for example)","realm":"Client","rets":{"ret":{"text":"Real frame time","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"RememberCursorPosition","parent":"Global","type":"libraryfunc","description":"Saves position of your cursor on screen. You can restore it by using\nGlobal.RestoreCursorPosition.","realm":"Client and Menu","file":{"text":"lua/includes/util.lua","line":"388-L397"}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"RecordDemoFrame","parent":"Global","type":"libraryfunc","description":{"text":"Adds a frame to the currently recording demo.","internal":""},"realm":"Menu","file":{"text":"lua/menu/demo_to_video.lua","line":"312"}},"realms":["Menu"],"type":"Function"},
{"function":{"name":"RecipientFilter","parent":"Global","type":"libraryfunc","description":"Creates a new CRecipientFilter.","realm":"Server","args":{"arg":{"text":"If set to true, makes the filter unreliable. \n\nThis means, when sending over the network in cases like Global.CreateSound (and its subsequent updates), the message is not guaranteed to reach all clients.","name":"unreliable","type":"boolean","default":"false","added":"2020.08.12"}},"rets":{"ret":{"text":"The new created recipient filter.","name":"","type":"CRecipientFilter"}}},"example":{"description":"Example usage of the function","code":"local rf = RecipientFilter()\nrf:AddAllPlayers()\nprint( rf:GetCount() )\nPrintTable( rf:GetPlayers() )","output":"```\n2\n1\t=\tPlayer [1][Player #1]\n2\t=\tPlayer [2][Player #2]\n```"},"realms":["Server"],"type":"Function"},
{"function":{"name":"RegisterDermaMenuForClose","parent":"Global","type":"libraryfunc","description":"Registers a Derma element to be closed the next time Global.CloseDermaMenus is called","realm":"Client and Menu","args":{"arg":{"text":"Menu to be registered for closure","name":"menu","type":"Panel"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"RenderAngles","parent":"Global","type":"libraryfunc","description":"Returns the angle that the clients view is being rendered at","realm":"Client","rets":{"ret":{"text":"Render Angles","name":"","type":"Angle"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"RemoveTooltip","parent":"Global","type":"libraryfunc","description":"Does the removing of the tooltip panel. Called by Global.EndTooltip.","realm":"Client and Menu"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"RenderDoF","parent":"Global","type":"libraryfunc","description":"Renders a Depth of Field effect","realm":"Client","args":{"arg":[{"text":"Origin to render the effect at","name":"origin","type":"Vector"},{"text":"Angle to render the effect at","name":"angle","type":"Angle"},{"text":"Point to focus the effect at","name":"usableFocusPoint","type":"Vector"},{"text":"Angle size of the effect","name":"angleSize","type":"number"},{"text":"Amount of radial steps to render the effect with","name":"radialSteps","type":"number"},{"text":"Amount of render passes","name":"passes","type":"number"},{"text":"Whether to cycle the frame or not","name":"spin","type":"boolean"},{"text":"Table of view data","name":"inView","type":"table"},{"text":"FOV to render the effect with","name":"fov","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"RenderStereoscopy","parent":"Global","type":"libraryfunc","description":"Renders the stereoscopic post-process effect","realm":"Client","args":{"arg":[{"text":"Origin to render the effect at","name":"viewOrigin","type":"Vector"},{"text":"Angles to render the effect at","name":"viewAngles","type":"Angle"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"RestoreCursorPosition","parent":"Global","type":"libraryfunc","description":"Restores position of your cursor on screen. You can save it by using Global.RememberCursorPosition.","realm":"Client and Menu","file":{"text":"lua/includes/util.lua","line":"399-L404"}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"RunConsoleCommand","parent":"Global","type":"libraryfunc","description":{"text":"Executes the given console command with the parameters.","note":"Some commands/convars are blocked from being ran/changed using this function, usually to prevent harm/annoyance to clients. For a list of blocked commands, see Blocked ConCommands."},"realm":"Shared and Menu","args":{"arg":[{"text":"The command to be executed.","name":"command","type":"string"},{"text":"The arguments. Note, that unlike Player:ConCommand, you must pass each argument as a new string, not separating them with a space.","name":"arguments","type":"vararg"}]}},"example":{"description":"Changes the gravity to 400 (default 600).","code":"RunConsoleCommand(\"sv_gravity\", \"400\")"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"RunGameUICommand","parent":"Global","type":"libraryfunc","description":"Runs a menu command. Equivalent to Global.RunConsoleCommand( \"gamemenucommand\", command ) unless the command starts with the \"engine\" keyword in which case it is equivalent to Global.RunConsoleCommand( command ).","realm":"Menu","args":{"arg":{"text":"The menu command to run\n\nShould be one of the following:\n* Disconnect - Disconnects from the current server.\n* OpenBenchmarkDialog - Opens the \"Video Hardware Stress Test\" dialog.\n* OpenChangeGameDialog - Does not work in GMod.\n* OpenCreateMultiplayerGameDialog - Opens the Source dialog for creating a listen server.\n* OpenCustomMapsDialog - Does nothing.\n* OpenFriendsDialog - Does nothing.\n* OpenGameMenu - Does not work in GMod.\n* OpenLoadCommentaryDialog - Opens the \"Developer Commentary\" selection dialog. Useless in GMod.\n* OpenLoadDemoDialog - Does nothing.\n* OpenLoadGameDialog - Opens the Source \"Load Game\" dialog.\n* OpenNewGameDialog - Opens the \"New Game\" dialog. Useless in GMod.\n* OpenOptionsDialog - Opens the options dialog.\n* OpenPlayerListDialog - Opens the \"Mute Players\" dialog that shows all players connected to the server and allows to mute them.\n* OpenSaveGameDialog - Opens the Source \"Save Game\" dialog.\n* OpenServerBrowser - Opens the legacy server browser.\n* Quit - Quits the game `without` confirmation (unlike other Source games).\n* QuitNoConfirm - Quits the game without confirmation (like other Source games).\n* ResumeGame - Closes the menu and returns to the game.\n* engine","name":"command","type":"string","concommand":{"text":"- Runs a console command. Equivalent to Global.RunConsoleCommand(","concommand":")."}}}},"example":[{"description":"Opens the options dialog.","code":"RunGameUICommand( \"OpenOptionsDialog\" )"},{"description":"Hides the game UI (menu). Equivalent to Global.RunConsoleCommand( \"gameui_hide\" )","code":"RunGameUICommand( \"engine gameui_hide\" )"}],"realms":["Menu"],"type":"Function"},
{"function":{"name":"RenderSuperDoF","parent":"Global","type":"libraryfunc","description":"Renders the Super Depth of Field post-process effect","realm":"Client","args":{"arg":[{"text":"Origin to render the effect at","name":"viewOrigin","type":"Vector"},{"text":"Angles to render the effect at","name":"viewAngles","type":"Angle"},{"text":"Field of View to render the effect at","name":"viewFOV","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"require","parent":"Global","type":"libraryfunc","description":{"text":"First tries to load a binary module with the given name, if unsuccessful, it tries to load a Lua module with the given name.","bug":{"text":"Running this function with Global.pcall or Global.xpcall will still print an error that counts towards sv_kickerrornum.","issue":"1041","request":"813"},"note":"This function will try to load local client file if `sv_allowcslua` is **1**"},"realm":"Shared and Menu","args":{"arg":{"text":"The name of the module to be loaded.","name":"name","type":"string"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"SafeRemoveEntity","parent":"Global","type":"libraryfunc","description":"Removes the given entity unless it is a player or the world entity","realm":"Shared and Menu","file":{"text":"lua/includes/util.lua","line":"217-L223"},"args":{"arg":{"text":"Entity to safely remove.","name":"ent","type":"Entity"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"RunString","parent":"Global","type":"libraryfunc","description":{"text":"Evaluates and executes the given code, will throw an error on failure.","note":"Local variables are not passed to the given code."},"realm":"Shared and Menu","args":{"arg":[{"text":"The code to execute.","name":"code","type":"string"},{"text":"The name that should appear in any error messages caused by this code.","name":"identifier","type":"string","default":"RunString"},{"text":"If false, this function will return a string containing any error messages instead of throwing an error.","name":"handleError","type":"boolean","default":"true"}]},"rets":{"ret":{"text":"If handleError is false, the error message (if any).","name":"","type":"string"}}},"example":{"description":"Compiles and runs `print(\"test\")`.","code":"RunString([[print(\"test\")]])","output":"test"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"RunStringEx","parent":"Global","type":"libraryfunc","description":{"text":"Alias of Global.RunString.","deprecated":"Use Global.RunString instead."},"realm":"Shared and Menu"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"SafeRemoveEntityDelayed","parent":"Global","type":"libraryfunc","description":"Removes entity after delay using Global.SafeRemoveEntity","realm":"Shared and Menu","file":{"text":"lua/includes/util.lua","line":"228-L234"},"args":{"arg":[{"text":"Entity to be removed","name":"entity","type":"Entity"},{"text":"Delay for entity removal in seconds","name":"delay","type":"number"}]}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"SavePresets","parent":"Global","type":"libraryfunc","description":"Overwrites all presets with the supplied table. Used by the presets for preset saving","realm":"Client","args":{"arg":{"text":"Presets to be saved","name":"presets","type":"table"}}},"realms":["Client"],"type":"Function"},
{"cat":"global","function":{"name":"SaveAddonPresets","parent":"Global","type":"libraryfunc","description":"Sets the content of `addonpresets.txt` located in the `garrysmod/settings` folder. By default, this file stores your addon presets as JSON.\n\nYou can use Global.LoadAddonPresets to retrieve the data in this file.","realm":"Menu","args":{"arg":{"text":"The new contents of the file.","name":"JSON","type":"string"}}},"realms":["Menu"],"type":"Function"},
{"function":{"name":"SaveLastMap","parent":"Global","type":"libraryfunc","description":{"text":"This function is used to save the last map and category to which the map belongs as a .","internal":""},"realm":"Menu","file":{"text":"lua/menu/getmaps.lua","line":"337"},"args":{"arg":[{"text":"The name of the map.","name":"map","type":"string"},{"text":"The name of the category to which this map belongs.","name":"category","type":"string"}]}},"realms":["Menu"],"type":"Function"},
{"function":{"name":"ScreenScale","parent":"Global","type":"libraryfunc","description":"Returns a number based on the Size argument and your screen's width. The screen's width is always equal to size 640. This function is primarily used for scaling font sizes.","realm":"Client","file":{"text":"lua/includes/extensions/client/globals.lua","line":"6-L8"},"args":{"arg":{"text":"The number you want to scale.","name":"Size","type":"number"}}},"example":{"description":"Prints a scaled number based on the number 96, 400 and 640.","code":"print( ScreenScale( 96 ) )\nprint( ScreenScale( 400 ) )\nprint( ScreenScale( 640 ) )","output":"252, 1050, 1680 (this will differ depending on your screen width. Here the screen width is 1680.)"},"realms":["Client"],"type":"Function"},
{"function":{"name":"ScrH","parent":"Global","type":"libraryfunc","description":"Gets the height of the game's window (in pixels).","realm":"Client and Menu","rets":{"ret":{"text":"The height of the game's window in pixels","name":"","type":"number"}}},"example":[{"description":"Prints the Height of the window.","code":"print( ScrH() )","output":"1080 (depends on your screen)."},{"description":"Draws a white box on the top left corner of your screen.","code":"hook.Add( \"HUDPaint\", \"WhiteBox\", function()\n    surface.SetDrawColor( Color( 255, 255, 255, 255 ) )\n    surface.DrawRect( 0, 0, ScrW() / 2, ScrH() / 2 )\nend )","output":"A white box on the top left corner of your screen."}],"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"SendUserMessage","parent":"Global","type":"libraryfunc","description":{"text":"Send a usermessage","deprecated":"This uses the umsg internally, which has been deprecated. Use the net instead.","note":"Useless on client, only server can send info to client."},"realm":"Shared","args":{"arg":[{"text":"The name of the usermessage","name":"name","type":"string"},{"text":"Can be a CRecipientFilter, table or Player object.","name":"recipients","type":"any"},{"text":"Data to send in the usermessage","name":"args","type":"vararg"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"select","parent":"Global","type":"libraryfunc","description":"Used to select single values from a vararg or get the count of values in it.","realm":"Shared and Menu","args":{"arg":[{"text":"Can be a number or string.\n* If it's a string and starts with \"#\", the function will return the amount of values in the vararg (ignoring the rest of the string).\n* If it's a positive number, the function will return all values starting from the given index.\n* If the number is negative, it will return the amount specified from the end instead of the beginning. This mode will not be compiled by LuaJIT.","name":"parameter","type":"any"},{"text":"The vararg. These are the values from which you want to select.","name":"vararg","type":"vararg"}]},"rets":{"ret":{"text":"Returns a number or vararg, depending on the select method.","name":"","type":"any"}}},"example":[{"description":"This code shows how it works with the \"#\" modifier:","code":"print( select( '#', 'a', true, false, {}, 1 ) )","output":"\"5\", which is the count of parameters passed excluding the modifier (the \"#\")"},{"description":"This prints from the 2nd vararg passed to the last","code":"print( select( 2, 1, 2, 3, 4, 5 ) )","output":"\"2 3 4 5\" in the console"},{"description":"This prints the last 2 arguments passed","code":"print( select( -2, 1, 2, 3, 4, 5 ) )","output":"\"4 5\" in the console"}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"ScrW","parent":"Global","type":"libraryfunc","description":"Gets the width of the game's window (in pixels).","realm":"Client and Menu","rets":{"ret":{"text":"The width of the game's window in pixels","name":"","type":"number"}}},"example":{"description":"Prints the width of the screen","code":"print( ScrW() )","output":"1280 (depends on your resolution)"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"SentenceDuration","parent":"Global","type":"libraryfunc","description":"Returns approximate duration of a sentence by name. See Global.EmitSentence.","realm":"Shared","added":"2020.04.29","args":{"arg":{"text":"The sentence name.","name":"name","type":"string"}},"rets":{"ret":{"text":"The approximate duration.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetClipboardText","parent":"Global","type":"libraryfunc","description":"Adds the given string to the computers clipboard, which can then be pasted in or outside of GMod with Ctrl + V.","realm":"Client and Menu","args":{"arg":{"text":"The text to add to the clipboard.","name":"text","type":"string"}}},"example":{"description":"Sets the clipboards text to \"Hello!\".","code":"SetClipboardText( \"Hello!\" )"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"ServerLog","parent":"Global","type":"libraryfunc","description":"Prints \"ServerLog: PARAM\" without a newline, to the server log and console.","realm":"Server","args":{"arg":{"text":"The value to be printed to console.","name":"parameter","type":"string"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"setfenv","parent":"Global","type":"libraryfunc","description":"Sets the enviroment for a function or a stack level, if a function is passed, the return value will be the function, otherwise nil.","realm":"Shared and Menu","args":{"arg":[{"text":"The function to set the enviroment for or a number representing stack level.","name":"location","type":"function"},{"text":"Table to be used as enviroment.","name":"enviroment","type":"table"}]}},"example":{"description":"Create a new environment and setfenv Display inside it","code":"local newenvironment = {}\n\nfunction newenvironment.log( msg )\n\tprint( msg )\nend\n\nlocal function Display()\n\tlog( \"yay\" )\nend\n\nsetfenv( Display , newenvironment )\n\nDisplay()","output":"```\nyay\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"SetGlobalAngle","parent":"Global","type":"libraryfunc","description":{"text":"Defines an angle to be automatically networked to clients","note":"Running this function clientside will only set it clientside for the client it is called on!"},"realm":"Shared","args":{"arg":[{"text":"Index to identify the global angle with","name":"index","type":"any"},{"text":"Angle to be networked","name":"angle","type":"Angle"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetGlobalBool","parent":"Global","type":"libraryfunc","description":{"text":"Defined a boolean to be automatically networked to clients","note":"Running this function clientside will only set it clientside for the client it is called on!"},"realm":"Shared","args":{"arg":[{"text":"Index to identify the global boolean with","name":"index","type":"any"},{"text":"Boolean to be networked","name":"bool","type":"boolean"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetGlobalEntity","parent":"Global","type":"libraryfunc","description":{"text":"Defines an entity to be automatically networked to clients","note":"Running this function clientside will only set it clientside for the client it is called on!"},"realm":"Shared","args":{"arg":[{"text":"Index to identify the global entity with","name":"index","type":"any"},{"text":"Entity to be networked","name":"ent","type":"Entity"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetGlobalInt","parent":"Global","type":"libraryfunc","description":{"text":"Sets an integer that is shared between the server and all clients.","note":"Running this function clientside will only set it clientside for the client it is called on!","bug":{"text":"This function will not round decimal values as it actually networks a float internally.","issue":"3374"}},"realm":"Shared","args":{"arg":[{"text":"The unique index to identify the global value with.","name":"index","type":"string"},{"text":"The value to set the global value to","name":"value","type":"number"}]}},"example":{"description":"Sets the current round number.","code":"SetGlobalInt(\"RoundNumber\", 4)"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetGlobalFloat","parent":"Global","type":"libraryfunc","description":{"text":"Defines a floating point number to be automatically networked to clients","note":"Running this function clientside will only set it clientside for the client it is called on!"},"realm":"Shared","args":{"arg":[{"text":"Index to identify the global float with","name":"index","type":"any"},{"text":"Float to be networked","name":"float","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetGlobalString","parent":"Global","type":"libraryfunc","description":{"text":"Defines a string with a maximum of 199 characters to be automatically networked to clients","note":"Running this function clientside will only set it clientside for the client it is called on!"},"realm":"Shared","args":{"arg":[{"text":"Index to identify the global string with","name":"index","type":"any"},{"text":"String to be networked","name":"string","type":"string"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetGlobalVector","parent":"Global","type":"libraryfunc","description":{"text":"Defines a vector to be automatically networked to clients","note":"Running this function clientside will only set it clientside for the client it is called on!"},"realm":"Shared","args":{"arg":[{"text":"Index to identify the global vector with","name":"index","type":"any"},{"text":"Vector to be networked","name":"vec","type":"Vector"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetPhysConstraintSystem","parent":"Global","type":"libraryfunc","description":"Called by the engine to set which [constraint system](https://developer.valvesoftware.com/wiki/Phys_constraintsystem) the next created constraints should use.","realm":"Shared","args":{"arg":{"text":"Constraint system to use","name":"constraintSystem","type":"Entity"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SortedPairs","parent":"Global","type":"libraryfunc","description":"This function can be used in a for loop instead of Global.pairs. It sorts all **keys** alphabetically.\n\nFor sorting by specific **value member**, use Global.SortedPairsByMemberValue.\n\n\nFor sorting by **value**, use Global.SortedPairsByValue.","realm":"Shared and Menu","args":{"arg":[{"text":"The table to sort","name":"table","type":"table"},{"text":"Reverse the sorting order","name":"desc","type":"boolean","default":"false"}]},"rets":{"ret":[{"text":"Iterator function","name":"","type":"function"},{"text":"The table being iterated over","name":"","type":"table"}]}},"example":{"description":"Example of usage.","code":"for id, text in SortedPairs( { \"e\", \"b\", \"d\", \"c\", \"a\" } ) do\n    print(id, text)\nend\n\nprint( \"---\" )\n\nfor id, text in SortedPairs( { e = 1, b = 2, d = 3, c = 4, a = 5 } ) do\n    print(id, text)\nend","output":"```\n1 e\n2 b\n3 d\n4 c\n5 a\n---\na 5\nb 2\nc 4\nd 3\ne 1\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"setmetatable","parent":"Global","type":"libraryfunc","description":"Sets, changes or removes a table's metatable. Returns Tab (the first argument).","realm":"Shared and Menu","args":{"arg":[{"text":"The table who's metatable to change.","name":"Tab","type":"table"},{"text":"The metatable to assign.  If it's nil, the metatable will be removed.","name":"Metatable","type":"table","br":""}]},"rets":{"ret":{"text":"The first argument.","name":"","type":"table"}}},"example":{"description":"Creates a metatable and assigns it to a table.","code":"local Pupil_meta = {\n\tGetName = function(self)\n\t\treturn self.name\n\tend\n}\nPupil_meta.__index = Pupil_meta\n-- If a key cannot be found in an object, it will look in it's metatable's __index metamethod.\n\nlocal Pupil = {\n\tname = \"John Doe\"\n}\n\nsetmetatable(Pupil, Pupil_meta)\n\nprint( Pupil:GetName() )\n-- This will look for the \"GetName\" key in Pupil, but it doesn't have one. So it will look in it's metatable (Pupil_meta) __index key instead.","output":"\"John Doe\""},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"SortedPairsByMemberValue","parent":"Global","type":"libraryfunc","description":"Returns an iterator function that can be used to loop through a table in order of member values, when the values of the table are also tables and contain that member.\n\nTo sort by **value**, use Global.SortedPairsByValue.\n\n\nTo sort by **keys**, use Global.SortedPairs.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/table.lua","line":"552-570"},"args":{"arg":[{"text":"Table to create iterator for.","name":"table","type":"table"},{"text":"Key of the value member to sort by.","name":"memberKey","type":"any"},{"text":"Whether the iterator should iterate in descending order or not.","name":"descending","type":"boolean","default":"false"}]},"rets":{"ret":[{"text":"Iterator function","name":"","type":"function"},{"text":"The table the iterator was created for.","name":"","type":"table"}]}},"example":{"description":"Creates a table and prints its contents in order of the age member descending","code":"local tab = {\n\t{\n\t\tName = \"Adam\",\n\t\tAge = 16\n\t},\n\t{\n\t\tName = \"Charles\",\n\t\tAge = 18\n\t}\n}\n\nfor k, v in SortedPairsByMemberValue(tab, \"Age\", true) do\n\tprint(v.Name)\nend","output":"```\nCharles\nAdam\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"SoundDuration","parent":"Global","type":"libraryfunc","description":{"text":"Returns the duration of the specified sound in seconds.","bug":{"text":"This function doesn't work proprely on MacOS and Linux.","issue":"936"}},"realm":"Shared","args":{"arg":{"text":"The sound file path.","name":"soundName","type":"string"}},"rets":{"ret":{"text":"Sound duration in seconds.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SortedPairsByValue","parent":"Global","type":"libraryfunc","description":"Returns an iterator function that can be used to loop through a table in order of its **values**.\n\nTo sort by specific **value member**, use Global.SortedPairsByMemberValue.\n\n\nTo sort by **keys**, use Global.SortedPairs.","realm":"Shared and Menu","args":{"arg":[{"text":"Table to create iterator for","name":"table","type":"table"},{"text":"Whether the iterator should iterate in descending order or not","name":"descending","type":"boolean","default":"false"}]},"rets":{"ret":[{"text":"Iterator function","name":"","type":"function"},{"text":"The table which will be iterated over","name":"","type":"table"}]}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Sound","parent":"Global","type":"libraryfunc","description":{"text":"Runs util.PrecacheSound and returns the string.","bug":"util.PrecacheSound does nothing and therefore so does this function."},"realm":"Shared and Menu","file":{"text":"lua/includes/util.lua","line":"123-L129"},"args":{"arg":{"text":"The soundpath to precache.","name":"soundPath","type":"string"}},"rets":{"ret":{"text":"The string passed as the first argument.","name":"","type":"string"}}},"example":{"description":"From [entities/sent_ball.lua](https://github.com/Facepunch/garrysmod/blob/c4a74bebe3113b01aee85501c297530fb8fdfa81/garrysmod/lua/entities/sent_ball.lua#L98-L121).","code":"local BounceSound = Sound( \"garrysmod/balloon_pop_cute.wav\" )\n\nfunction ENT:PhysicsCollide( data, physobj )\n\n\t-- Play sound on bounce\n\tif ( data.Speed > 60 && data.DeltaTime > 0.2 ) then\n\n\t\tlocal pitch = 32 + 128 - math.Clamp( self:GetBallSize(), self.MinSize, self.MaxSize )\n\t\tsound.Play( BounceSound, self:GetPos(), 75, math.random( pitch - 10, pitch + 10 ), math.Clamp( data.Speed / 150, 0, 1 ) )\n\n\tend\n\nend"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"SQLStr","parent":"Global","type":"libraryfunc","description":"Returns the input value in an escaped form so that it can safely be used inside of queries. The returned value is surrounded by quotes unless noQuotes is true. Alias of sql.SQLStr","realm":"Shared and Menu","args":{"arg":[{"text":"String to be escaped","name":"input","type":"string"},{"text":"Whether the returned value should be surrounded in quotes or not","name":"noQuotes","type":"boolean","default":"false"}]},"rets":{"ret":{"text":"Escaped input","name":"","type":"string"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"SScale","parent":"Global","type":"libraryfunc","description":{"text":"Returns a number based on the Size argument and your screen's width. Alias of Global.ScreenScale.","deprecated":"You should be using Global.ScreenScale instead."},"file":{"text":"lua/includes/extensions/client/globals.lua","line":"6-L10"},"realm":"Client","args":{"arg":{"text":"The number you want to scale.","name":"Size","type":"number"}}},"example":{"description":"Prints a scaled number based on the number 40.","code":"print( SScale( 40 ) )","output":"105 (this will differ depending on your screen size)"},"realms":["Client"],"type":"Function"},
{"function":{"name":"TauntCamera","parent":"Global","type":"libraryfunc","description":"Returns a TauntCamera object","realm":"Shared","rets":{"ret":{"text":"TauntCamera","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"STNDRD","parent":"Global","type":"libraryfunc","description":"Returns the ordinal suffix of a given number.","realm":"Shared and Menu","file":{"text":"lua/includes/util.lua","line":"285-L293"},"args":{"arg":{"text":"The number to find the ordinal suffix of.","name":"number","type":"number"}},"rets":{"ret":{"text":"suffix","name":"","type":"string"}}},"example":{"description":"Returns the ordinal suffix of 72.","code":"print( 72 .. STNDRD(72) )","output":"72nd"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"SuppressHostEvents","parent":"Global","type":"libraryfunc","description":"Suppress any networking from the server to the specified player. This is automatically called by the engine before/after a player fires their weapon, reloads, or causes any other similar shared-predicted event to occur.","realm":"Server","args":{"arg":{"text":"The player to suppress any networking to.","name":"suppressPlayer","type":"Player"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SysTime","parent":"Global","type":"libraryfunc","description":"Returns a highly accurate time in seconds since the start up, ideal for benchmarking. Unlike Global.RealTime, this value will be updated any time the function is called, allowing for sub-think precision.","realm":"Shared and Menu","rets":{"ret":{"text":"Uptime of the server.","name":"","type":"number"}}},"example":[{"description":"Prints the runtime","code":"print(SysTime())","output":"1654.4422888037"},{"description":"Typical usage of this function for benchmarking","code":"local SysTime = SysTime\nlocal Distance = FindMetaTable(\"Vector\").Distance\n\nlocal vec1 = Vector(1, 2, 3)\nlocal vec2 = Vector(13, 26, -10)\n\nlocal count = 10000\n\nlocal StartTime = SysTime()\n\nfor i = 1, count do\n\t-- Repeat an action 10,000 times to check how long it takes on average\n\t-- Example action:\n\tDistance(vec1 , vec2)\nend\n\nlocal EndTime = SysTime()\nlocal TotalTime = EndTime - StartTime\nlocal AverageTime = TotalTime / count\n\nprint(\"Total: \" .. TotalTime .. \" seconds. Average: \" .. AverageTime .. \" seconds.\")","output":"```\nTotal: 0.0099969995115998 seconds. Average: 9.9969995115998e-07 seconds.\n```"}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"TextEntryLoseFocus","parent":"Global","type":"libraryfunc","description":"Clears focus from any text entries player may have focused.","realm":"Client and Menu"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"TimedCos","parent":"Global","type":"libraryfunc","description":"Returns a cosine value that fluctuates based on the current time","realm":"Shared and Menu","file":{"text":"lua/includes/util.lua","line":"302-L307"},"args":{"arg":[{"text":"The frequency of fluctuation","name":"frequency","type":"number"},{"text":"Minimum value","name":"min","type":"number"},{"text":"Maxmimum value","name":"max","type":"number"},{"text":"Offset variable that doesn't affect the rate of change, but causes the returned value to be offset by time","name":"offset","type":"number"}]},"rets":{"ret":{"text":"Cosine value","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"tobool","parent":"Global","type":"libraryfunc","description":"Attempts to return an appropriate boolean for the given value","realm":"Shared and Menu","file":{"text":"lua/includes/util.lua","line":"248-L251"},"args":{"arg":{"text":"The object to be converted to a boolean","name":"val","type":"any"}},"rets":{"ret":{"text":"**false** for the boolean false.\n**false** for \"false\".\n**false** for \"0\".\n**false** for numeric 0.\n**false** for nil.\n**true** otherwise.","name":"","type":"boolean"}}},"example":{"description":"Demonstrate the output of this function with various values.","code":"print(\"boolean true:\", tobool(true))\nprint(\"boolean false:\", tobool(false))\nprint(\"string true:\", tobool(\"true\"))\nprint(\"string false:\", tobool(\"false\"))\nprint(\"numeric 0:\", tobool(0))\nprint(\"string 0:\", tobool(\"0\"))\nprint(\"string 1:\", tobool(\"1\"))\nprint(\"nil:\", tobool(nil))\nprint(\"text string:\", tobool(\"not a boolean\"))\nprint(\"empty string:\", tobool(\"\"))","output":"```\nboolean true: true\nboolean false: false\nstring true: true\nstring false: false\nnumeric 0: false\nstring 0: false\nstring 1: true\nnil: false\ntext string: true\nempty string: true\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"TimedSin","parent":"Global","type":"libraryfunc","description":{"text":"Returns a sine value that fluctuates based on Global.CurTime. The value returned will be between the start value plus/minus the range value.","bug":"The range arguments don't work as intended. The existing (bugged) behavior is documented below."},"realm":"Shared and Menu","file":{"text":"lua/includes/util.lua","line":"295-L300"},"args":{"arg":[{"text":"The frequency of fluctuation, in","name":"frequency","type":"number"},{"text":"The center value of the sine wave.","name":"origin","type":"number"},{"text":"This argument's distance from origin defines the size of the full range of the sine wave. For example, if origin is 3 and max is 5, then the full range of the sine wave is 5-3 = 2. 3 is the center point of the sine wave, so the sine wave will range between 2 and 4.","name":"max","type":"number"},{"text":"Offset variable that doesn't affect the rate of change, but causes the returned value to be offset by time","name":"offset","type":"number"}]},"rets":{"ret":{"text":"Sine value","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"tonumber","parent":"Global","type":"libraryfunc","description":"Attempts to convert the value to a number.\n\nReturns nil on failure.","realm":"Shared and Menu","args":{"arg":[{"text":"The value to convert. Can be a number or string.","name":"value","type":"any"},{"text":"The  used in the string. Can be any integer between 2 and 36, inclusive.","name":"base","type":"number","default":"10"}]},"rets":{"ret":{"text":"The numeric representation of the value with the given base, or nil if the conversion failed.","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"ToggleFavourite","parent":"Global","type":"libraryfunc","description":"Toggles whether or not the named map is favorited in the new game list.","realm":"Menu","file":{"text":"lua/menu/getmaps.lua","line":"359-375"},"args":{"arg":{"text":"Map to toggle favorite.","name":"map","type":"string"}}},"realms":["Menu"],"type":"Function"},
{"function":{"name":"TranslateDownloadableName","parent":"Global","type":"libraryfunc","description":{"text":"Returns \"Lua Cache File\" if the given file name is in a certain string table, nothing otherwise.","deprecated":"","internal":""},"realm":"Menu","args":{"arg":{"text":"File name to test","name":"filename","type":"string"}},"rets":{"ret":{"text":"\"Lua Cache File\" if the given file name is in a certain string table, nothing otherwise.","name":"","type":"string"}}},"realms":["Menu"],"type":"Function"},
{"function":{"name":"tostring","parent":"Global","type":"libraryfunc","description":"Attempts to convert the value to a string. If the value is an object and its metatable has defined the __tostring metamethod, this will call that function.\n\nGlobal.print also uses this functionality.","realm":"Shared and Menu","args":{"arg":{"text":"The object to be converted to a string.","name":"value","type":"any"}},"rets":{"ret":{"text":"The string representation of the value.","name":"","type":"string"}}},"example":{"description":"Convert a number to a string.","code":"print(tostring(0x16))","output":"22"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"unpack","parent":"Global","type":"libraryfunc","description":"This function takes a numeric indexed table and return all the members as a vararg. If specified, it will start at the given index and end at end index.","realm":"Shared and Menu","args":{"arg":[{"text":"The table to generate the vararg from.","name":"tbl","type":"table"},{"text":"Which index to start from. Optional.","name":"startIndex","type":"number","default":"1"},{"text":"Which index to end at. Optional, even if you set StartIndex.","name":"endIndex","type":"number","default":"#tbl"}]},"rets":{"ret":{"text":"Output values","name":"","type":"vararg"}}},"example":{"description":"Prints a vararg","code":"print( unpack({\"a\", \"b\", \"c\"}) )","output":"```\n a b c\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"type","parent":"Global","type":"libraryfunc","description":"Returns a string representing the name of the type of the passed object.","realm":"Shared and Menu","args":{"arg":{"text":"The object to get the type of.","name":"var","type":"any"}},"rets":{"ret":{"text":"The name of the object's type.","name":"","type":"string"}}},"example":[{"description":"Print the name of a few types.","code":"print( type( 2 ) )\nprint( type( \"hai\" ) )\nprint( type( {} ) )","output":"```\nnumber\nstring\ntable\n```"},{"description":"Returns `no value` if called with 0 arguments/parameters.","code":"print( type() )","output":"no value"},{"description":"A list of code showing how you can use the type function in replacement with any of the `is*` functions. (example being Global.istable, Global.isentity, etc.)","code":"print( type( LocalPlayer() ) )\nprint( type( Vector() ) )\nprint( type( Angle() ) )\nprint( type( Entity( num ) ) ) -- num is the EntIndex for the entity\nprint( type( vgui.Create( \"DFrame\" ) ) )","output":"```\nPlayer\nVector\nAngle\nEntity\nPanel\n```"}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"UTIL_IsUselessModel","parent":"Global","type":"libraryfunc","description":{"text":"Returns whether or not a model is useless by checking that the file path is that of a proper model.\n\nIf the string \".mdl\" is not found in the model name, the function will return true.\n\nThe function will also return true if any of the following strings are found in the given model name:\n* \"_gesture\"\n* \"_anim\"\n* \"_gst\"\n* \"_pst\"\n* \"_shd\"\n* \"_ss\"\n* \"_posture\"\n* \"_anm\"\n* \"ghostanim\"\n* \"_paths\"\n* \"_shared\"\n* \"anim_\"\n* \"gestures_\"\n* \"shared_ragdoll_\"","deprecated":"You should use Global.IsUselessModel instead."},"realm":"Shared and Menu","file":{"text":"lua/includes/util.lua","line":"256-L280"},"args":{"arg":{"text":"The model name to be checked","name":"modelName","type":"string"}},"rets":{"ret":{"text":"Whether or not the model is useless","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"UpdateLoadPanel","parent":"Global","type":"libraryfunc","description":"Runs JavaScript on the loading screen panel (Global.GetLoadPanel).","realm":"Menu","file":{"text":"lua/menu/loading.lua","line":"217-223"},"args":{"arg":{"text":"JavaScript to run on the loading panel.","name":"javascript","type":"string"}}},"realms":["Menu"],"type":"Function"},
{"function":{"name":"UnPredictedCurTime","parent":"Global","type":"libraryfunc","description":"Returns the current asynchronous in-game time.","realm":"Shared and Menu","rets":{"ret":{"text":"The asynchronous in-game time.","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"TypeID","parent":"Global","type":"libraryfunc","description":{"text":"Gets the associated type ID of the variable. Unlike Global.type, this does not work with no value - an argument must be provided.","bug":[{"text":"This returns garbage for _LOADLIB objects.","request":"1120"},{"text":"This returns TYPE_NIL for protos.","request":"1459"}]},"realm":"Shared","args":{"arg":{"text":"The variable to get the type ID of.","name":"variable","type":"any"}},"rets":{"ret":{"text":"The type ID of the variable. See the Enums/TYPE.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Vector","parent":"Global","type":"libraryfunc","description":"Creates a Vector object.","realm":"Shared and Menu","args":{"arg":[{"text":"The x component of the vector.\n\n\nIf this is a Vector, this function will return a copy of the given vector.\n\n\nIf this is a string, this function will try to parse the string as a vector. If it fails, it returns a 0 vector.\n(See examples)","name":"x","type":"number","default":"0"},{"text":"The y component of the vector.","name":"y","type":"number","default":"0"},{"text":"The z component of the vector.","name":"z","type":"number","default":"0"}]},"rets":{"ret":{"text":"The created vector object.","name":"","type":"Vector"}}},"example":{"description":"Creates a vector and prints the value to the console.","code":"print( Vector( 1, 2, 3 ) )\nprint( Vector( \"4 5 6\" ) )\nlocal test = Vector( 7, 8, 9 )\nprint( Vector( test ) )\n\nprint( Vector( \"4 5 test\" ) )\nprint( Vector() )","output":"```\n1.000000 2.000000 3.000000\n4.000000 5.000000 6.000000\n7.000000 8.000000 9.000000\n\n0.000000 0.000000 0.000000\n0.000000 0.000000 0.000000\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"VectorRand","parent":"Global","type":"libraryfunc","description":"Returns a random vector whose components are each between min(inclusive), max(exclusive).","realm":"Shared and Menu","file":{"text":"lua/includes/util.lua","line":"94-L98"},"args":{"arg":[{"text":"Min bound inclusive.","name":"min","type":"number","default":"-1"},{"text":"Max bound exclusive.","name":"max","type":"number","default":"1"}]},"rets":{"ret":{"text":"The random direction vector.","name":"","type":"Vector"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"VGUIFrameTime","parent":"Global","type":"libraryfunc","description":"Returns the time in seconds it took to render the VGUI.","realm":"Client and Menu"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"VisualizeLayout","parent":"Global","type":"libraryfunc","description":{"text":"Briefly displays layout details of the given panel on-screen","internal":"Used by the **vgui_visualizelayout** convar"},"realm":"Client and Menu","args":{"arg":{"text":"Panel to display layout details of","name":"panel","type":"Panel"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"VGUIRect","parent":"Global","type":"libraryfunc","description":"Creates and returns a DShape rectangle GUI element with the given dimensions.","realm":"Client","args":{"arg":[{"text":"X position of the created element","name":"x","type":"number"},{"text":"Y position of the created element","name":"y","type":"number"},{"text":"Width of the created element","name":"w","type":"number"},{"text":"Height of the created element","name":"h","type":"number"}]},"rets":{"ret":{"text":"DShape element","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"WorkshopFileBase","parent":"Global","type":"libraryfunc","description":{"text":"Returns a new WorkshopFileBase element","internal":""},"realm":"Client and Menu","args":{"arg":[{"text":"Namespace for the file base","name":"namespace","type":"string"},{"text":"Tags required for a Workshop submission to be interacted with by the filebase","name":"requiredTags","type":"table"}]},"rets":{"ret":{"text":"WorkshopFileBase element","name":"","type":"table"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"ValidPanel","parent":"Global","type":"libraryfunc","description":{"text":"Returns if a panel is safe to use.","deprecated":"You should use Global.IsValid instead"},"realm":"Client and Menu","args":{"arg":{"text":"The panel to validate.","name":"panel","type":"Panel"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"WorldToLocal","parent":"Global","type":"libraryfunc","description":"Translates the specified position and angle into the specified coordinate system.","realm":"Shared","args":{"arg":[{"text":"The position that should be translated from the current to the new system.","name":"position","type":"Vector"},{"text":"The angles that should be translated from the current to the new system.","name":"angle","type":"Angle"},{"text":"The origin of the system to translate to.","name":"newSystemOrigin","type":"Vector"},{"text":"The angles of the system to translate to.","name":"newSystemAngles","type":"Angle"}]},"rets":{"ret":[{"text":"Local position","name":"","type":"Vector"},{"text":"Local angles","name":"","type":"Angle"}]}},"example":{"description":"Matrix math which showcases how this is calculated internally.","code":"local worldTransform = Matrix()\nworldTransform:SetTranslation(position)\nworldTransform:SetAngles(angle)\n\nlocal objectTransform = Matrix()\nobjectTransform:SetTranslation(newSystemOrigin)\nobjectTransform:SetAngles(newSystemAngles)\n\n-- Transform the world coordinates using the object transform as an inverted transformation matrix\nlocal worldToLocal = objectTransform:GetInverse() * worldTransform\n\nprint(worldToLocal:GetTranslation(), worldToLocal:GetAngles())"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Add","parent":"Angle","type":"classfunc","description":"Adds the values of the argument angle to the orignal angle. \n\nThis functions the same as angle1 + angle2 without creating a new angle object, skipping object construction and garbage collection.","realm":"Shared","args":{"arg":{"text":"The angle to add.","name":"angle","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Div","parent":"Angle","type":"classfunc","description":"Divides all values of the original angle by a scalar. This functions the same as angle1 / num without creating a new angle object, skipping object construction and garbage collection.","realm":"Shared","args":{"arg":{"text":"The number to divide by.","name":"scalar","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"xpcall","parent":"Global","type":"libraryfunc","description":{"text":"Attempts to call the first function. If the execution succeeds, this returns `true` followed by the returns of the function. If execution fails, this returns `false` and the second function is called with the error message. \n\nUnlike in Global.pcall, the stack is not unwound and can therefore be used for stack analyses with the debug.","bug":[{"text":"Using this function with Global.include will break autorefresh.","issue":"1976"},{"text":"This cannot stop errors from hooks called from the engine.","issue":"2036"},{"text":"This does not stop Global.Error and Global.ErrorNoHalt from sending error messages to the server (if called clientside) or calling the GM:OnLuaError hook. The success boolean returned will always return true and thus you will not get the error message returned. Global.error does not exhibit these behaviours.","issue":"2498"},{"text":"This does not stop errors incurred by Global.include.","issue":"3112"}]},"realm":"Shared and Menu","args":{"arg":[{"text":"The function to call initially.","name":"func","type":"function"},{"text":"The function to be called if execution of the first fails; the error message is passed as a string.\n\nYou cannot throw an Global.error() from this callback: it will have no effect (not even stopping the callback).","name":"errorCallback","type":"function"},{"text":"Arguments to pass to the initial function.","name":"arguments","type":"vararg"}]},"rets":{"ret":[{"text":"Status of the execution; `true` for success, `false` for failure.","name":"","type":"boolean"},{"text":"The returns of the first function if execution succeeded, otherwise the **first** return value of the error callback.","name":"","type":"vararg"}]}},"example":{"description":"Using xpcall to catch an error.","code":"local function test()\n\taisj()\nend\n\nlocal function catch( err )\n\tprint( \"ERROR: \", err )\nend\n\nprint( \"Output: \", xpcall( test, catch ) )","output":"```\nERROR: \tlua/wiki/xpcall_example.lua:2: attempt to call global 'aisj' (a nil value)\nOutput:\tfalse \tnil\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Mul","parent":"Angle","type":"classfunc","description":"Multiplies a scalar to all the values of the orignal angle. This functions the same as num * angle without creating a new angle object, skipping object construction and garbage collection.","realm":"Shared","args":{"arg":{"text":"The number to multiply.","name":"scalar","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Forward","parent":"Angle","type":"classfunc","description":"Returns a normal vector facing in the direction that the angle points.","realm":"Shared","rets":{"ret":{"text":"The forward direction of the angle","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Normalize","parent":"Angle","type":"classfunc","description":"Normalizes the angles by applying a module with 360 to pitch, yaw and roll.","realm":"Shared"},"example":{"description":"Example usage of the function","code":"local a = Angle( 0, 181, 1 )\na:Normalize()\nprint( a )","output":"0.000 -179.000 1.000"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsZero","parent":"Angle","type":"classfunc","description":"Returns whether the pitch, yaw and roll are 0 or not.","realm":"Shared","rets":{"ret":{"text":"Whether the pitch, yaw and roll are 0 or not.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetUnpacked","parent":"Angle","type":"classfunc","description":"Sets the p, y, and r of the angle.","realm":"Shared","args":{"arg":[{"text":"The pitch component of the Angle","name":"p","type":"number"},{"text":"The yaw component of the Angle","name":"y","type":"number"},{"text":"The roll component of the Angle","name":"r","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Right","parent":"Angle","type":"classfunc","description":"Returns a normal vector facing in the direction that points right relative to the angle's direction.","realm":"Shared","rets":{"ret":{"text":"The right direction of the angle","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"RotateAroundAxis","parent":"Angle","type":"classfunc","description":"Rotates the angle around the specified axis by the specified degrees.","realm":"Shared","args":{"arg":[{"text":"The axis to rotate around as a normalized unit vector. When argument is not a unit vector, you will experience numerical offset errors in the rotated angle.","name":"axis","type":"Vector"},{"text":"The degrees to rotate around the specified axis.","name":"rotation","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Set","parent":"Angle","type":"classfunc","description":"Copies pitch, yaw and roll from the second angle to the first.","realm":"Shared","args":{"arg":{"text":"The angle to copy the values from.","name":"originalAngle","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Sub","parent":"Angle","type":"classfunc","description":"Subtracts the values of the argument angle to the orignal angle. This functions the same as angle1 - angle2 without creating a new angle object, skipping object construction and garbage collection.","realm":"Shared","args":{"arg":{"text":"The angle to subtract.","name":"angle","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SnapTo","parent":"Angle","type":"classfunc","description":{"text":"Snaps the angle to nearest interval of degrees.","note":"This will modify the original angle too!"},"realm":"Shared","file":{"text":"lua/includes/extensions/angle.lua","line":"5-L18"},"args":{"arg":[{"text":"The component/axis to snap. Can be either \"p\"/\"pitch\", \"y\"/\"yaw\" or \"r\"/\"roll\".","name":"axis","type":"string"},{"text":"The target angle snap interval","name":"target","type":"number"}]},"rets":{"ret":{"text":"The snapped angle.","name":"","type":"Angle"}}},"example":{"description":"Example usage","code":"print( Angle( 0, 92, 0 ):SnapTo( \"y\", 90 ) )\nprint( Angle( 0, 115, 0 ):SnapTo( \"y\", 45 ) )\nprint( Angle( 12, 98, 167 ):SnapTo( \"p\", 30 ):SnapTo( \"y\", 45 ):SnapTo( \"r\", 45 ) )","output":"```\nAngle( 0, 90, 0 )\nAngle( 0, 135, 0 )\nAngle( 0, 90, -180 )\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Unpack","parent":"Angle","type":"classfunc","description":"Returns the pitch, yaw, and roll components of the angle.","realm":"Shared","rets":{"ret":[{"text":"p, pitch, x, or Angle[1].","name":"","type":"number"},{"text":"y, yaw, or Angle[2].","name":"","type":"number"},{"text":"r, roll, r, or Angle[3].","name":"","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Zero","parent":"Angle","type":"classfunc","description":"Sets pitch, yaw and roll to 0.\nThis function is faster than doing it manually.","realm":"Shared"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ToTable","parent":"Angle","type":"classfunc","description":"Returns the angle as a table with three elements.","realm":"Shared","rets":{"ret":{"text":"The table with elements 1 = p, 2 = y, 3 = r.","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Up","parent":"Angle","type":"classfunc","description":"Returns a normal vector facing in the direction that points up relative to the angle's direction.","realm":"Shared","rets":{"ret":{"text":"The up direction of the angle.","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ReadChar","parent":"bf_read","type":"classfunc","description":"Reads a signed char and returns a number from -127 to 127 representing the ascii value of that char.","realm":"Client","rets":{"ret":{"text":"asciiVal","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ReadEntity","parent":"bf_read","type":"classfunc","description":"Reads a short representing an entity index and returns the matching entity handle.","realm":"Client","rets":{"ret":{"text":"ent","name":"","type":"Entity"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ReadAngle","parent":"bf_read","type":"classfunc","description":"Reads an returns an angle object from the bitstream.","realm":"Client","rets":{"ret":{"text":"The read angle","name":"","type":"Angle"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ReadBool","parent":"bf_read","type":"classfunc","description":"Reads 1 bit an returns a bool representing the bit.","realm":"Client","rets":{"ret":{"text":"bit","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ReadShort","parent":"bf_read","type":"classfunc","description":"Reads a 2 byte short from the bitstream and returns it.","realm":"Client","rets":{"ret":{"text":"short","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ReadFloat","parent":"bf_read","type":"classfunc","description":"Reads a 4 byte float from the bitstream and returns it.","realm":"Client","rets":{"ret":{"text":"float","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ReadLong","parent":"bf_read","type":"classfunc","description":"Reads a 4 byte long from the bitstream and returns it.","realm":"Client","rets":{"ret":{"text":"int","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ReadVector","parent":"bf_read","type":"classfunc","description":"Reads a special encoded vector from the bitstream and returns it, this function is not suitable to send normals.","realm":"Client","rets":{"ret":{"text":"vec","name":"","type":"Vector"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ReadString","parent":"bf_read","type":"classfunc","description":"Reads a null terminated string from the bitstream.","realm":"Client","rets":{"ret":{"text":"str","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ReadVectorNormal","parent":"bf_read","type":"classfunc","description":"Reads a special encoded vector normal from the bitstream and returns it, this function is not suitable to send vectors that represent a position.","realm":"Client","rets":{"ret":{"text":"normal","name":"","type":"Vector"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetAngles","parent":"CEffectData","type":"classfunc","description":"Returns the angles of the effect.","realm":"Shared","rets":{"ret":{"text":"The angles of the effect","name":"","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Reset","parent":"bf_read","type":"classfunc","description":"Rewinds the bitstream so it can be read again.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetAttachment","parent":"CEffectData","type":"classfunc","description":"Returns the attachment ID for the effect.","realm":"Shared","rets":{"ret":{"text":"The attachment ID of the effect.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetColor","parent":"CEffectData","type":"classfunc","description":"Returns byte which represents the color of the effect.","realm":"Shared","rets":{"ret":{"text":"The color of the effect","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetEntity","parent":"CEffectData","type":"classfunc","description":"Returns the entity assigned to the effect.","realm":"Shared","rets":{"ret":{"text":"The entity assigned to the effect","name":"","type":"Entity"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetEntIndex","parent":"CEffectData","type":"classfunc","description":"Returns the entity index of the entity set for the effect.","realm":"Server","rets":{"ret":{"text":"The entity index of the entity set for the effect.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetDamageType","parent":"CEffectData","type":"classfunc","description":"Returns the damage type of the effect","realm":"Shared","rets":{"ret":{"text":"Damage type of the effect, see Enums/DMG","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetFlags","parent":"CEffectData","type":"classfunc","description":"Returns the flags of the effect.","realm":"Shared","rets":{"ret":{"text":"The flags of the effect.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetMagnitude","parent":"CEffectData","type":"classfunc","description":"Returns the magnitude of the effect.","realm":"Shared","rets":{"ret":{"text":"The magnitude of the effect.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetMaterialIndex","parent":"CEffectData","type":"classfunc","description":"Returns the material ID of the effect.","realm":"Shared","rets":{"ret":{"text":"The material ID of the effect.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetHitBox","parent":"CEffectData","type":"classfunc","description":"Returns the hit box ID of the effect.","realm":"Shared","rets":{"ret":{"text":"The hit box ID of the effect.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetNormal","parent":"CEffectData","type":"classfunc","description":"Returns the normalized direction vector of the effect.","realm":"Shared","rets":{"ret":{"text":"The normalized direction vector of the effect.","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetOrigin","parent":"CEffectData","type":"classfunc","description":"Returns the origin position of the effect.","realm":"Shared","rets":{"ret":{"text":"The origin position of the effect.","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetRadius","parent":"CEffectData","type":"classfunc","description":"Returns the radius of the effect.","realm":"Shared","rets":{"ret":{"text":"The radius of the effect.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetScale","parent":"CEffectData","type":"classfunc","description":"Returns the scale of the effect.","realm":"Shared","rets":{"ret":{"text":"The scale of the effect","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetAngles","parent":"CEffectData","type":"classfunc","description":"Sets the angles of the effect.","realm":"Shared","args":{"arg":{"text":"The new angles to be set.","name":"ang","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetAttachment","parent":"CEffectData","type":"classfunc","description":{"text":"Sets the attachment id of the effect to be created with this effect data.","note":"This is internally stored as an integer, but only the first 5 bits will be networked, effectively limiting this function to 0-31 range."},"realm":"Shared","args":{"arg":{"text":"New attachment ID of the effect.","name":"attachment","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetStart","parent":"CEffectData","type":"classfunc","description":"Returns the start position of the effect.","realm":"Shared","rets":{"ret":{"text":"The start position of the effect","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetSurfaceProp","parent":"CEffectData","type":"classfunc","description":"Returns the surface property index of the effect.","realm":"Shared","rets":{"ret":{"text":"The surface property index of the effect","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetDamageType","parent":"CEffectData","type":"classfunc","description":"Sets the damage type of the effect to be created with this effect data.","realm":"Shared","args":{"arg":{"text":"Damage type, see Enums/DMG.","name":"damageType","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetColor","parent":"CEffectData","type":"classfunc","description":{"text":"Sets the \"color\" of the effect.\n\nAll this does is provide an addition 8 bits of data for the effect to use. What this will actually do will vary from effect to effect, depending on how a specific effect uses this given data, if at all.","note":"Internally stored as an integer, but only first 8 bits are networked, effectively limiting this function to 0-255 range."},"realm":"Shared","args":{"arg":{"text":"Color represented by a byte.","name":"color","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetEntIndex","parent":"CEffectData","type":"classfunc","description":"Sets the entity of the effect via its index.","realm":"Server","args":{"arg":{"text":"The entity index to be set.","name":"entIndex","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetEntity","parent":"CEffectData","type":"classfunc","description":"Sets the entity of the effect to be created with this effect data.","realm":"Shared","args":{"arg":{"text":"Entity of the effect, mostly used for parenting.","name":"entity","type":"Entity"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetHitBox","parent":"CEffectData","type":"classfunc","description":{"text":"Sets the hit box index of the effect.","note":"Internally stored as an integer, but only first 11 bits are networked, effectively limiting this function to 0-2047 range."},"realm":"Shared","args":{"arg":{"text":"The hit box index of the effect.","name":"hitBoxIndex","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetFlags","parent":"CEffectData","type":"classfunc","description":{"text":"Sets the flags of the effect.","note":"Internally stored as an integer, but only first 8 bits are networked, effectively limiting this function to 0-255 range."},"realm":"Shared","args":{"arg":{"text":"The flags of the effect. Each effect has their own flags.","name":"flags","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetMagnitude","parent":"CEffectData","type":"classfunc","description":{"text":"Sets the magnitude of the effect.","note":"Internally stored as a float with 12 bit precision for networking purposes, limited to range of 0-1023."},"realm":"Shared","args":{"arg":{"text":"The magnitude of the effect.","name":"magnitude","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetMaterialIndex","parent":"CEffectData","type":"classfunc","description":{"text":"Sets the material index of the effect.","note":"Internally stored as an integer, but only first 12 bits are networked, effectively limiting this function to 0-4095 range."},"realm":"Shared","args":{"arg":{"text":"The material index of the effect.","name":"materialIndex","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetOrigin","parent":"CEffectData","type":"classfunc","description":{"text":"Sets the origin of the effect to be created with this effect data.","note":"Limited to world bounds (+-16386 on every axis) and has horrible networking precision. (17 bit float per component)"},"realm":"Shared","args":{"arg":{"text":"Origin of the effect.","name":"origin","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetRadius","parent":"CEffectData","type":"classfunc","description":{"text":"Sets the radius of the effect to be created with this effect data.","note":"Internally stored as a float, but networked as a 10bit float, and is clamped to 0-1023 range."},"realm":"Shared","args":{"arg":{"text":"Radius of the effect.","name":"radius","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetScale","parent":"CEffectData","type":"classfunc","description":"Sets the scale of the effect to be created with this effect data.","realm":"Shared","args":{"arg":{"text":"Scale of the effect.","name":"scale","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetNormal","parent":"CEffectData","type":"classfunc","description":"Sets the normalized (length=1) direction vector of the effect to be created with this effect data. This **must** be a normalized vector for networking purposes.","realm":"Shared","args":{"arg":{"text":"The normalized direction vector of the effect.","name":"normal","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetSurfaceProp","parent":"CEffectData","type":"classfunc","description":{"text":"Sets the surface property index of the effect.","note":"Internally stored as an integer, but only first 8 bits are networked, effectively limiting this function to `-1`-`254` range.(yes, that's not a mistake)"},"realm":"Shared","args":{"arg":{"text":"The surface property index of the effect.","name":"surfaceProperties","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetStart","parent":"CEffectData","type":"classfunc","description":{"text":"Sets the start of the effect to be created with this effect data.","note":"Limited to world bounds (+-16386 on every axis) and has horrible networking precision. (17 bit float per component)"},"realm":"Shared","args":{"arg":{"text":"Start of the effect.","name":"start","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Add","parent":"CLuaEmitter","type":"classfunc","description":"Creates a new CLuaParticle with the given material and position.","realm":"Client","args":{"arg":[{"text":"The particles material. Can also be an IMaterial.","name":"material","type":"string"},{"text":"The position to spawn the particle on.","name":"position","type":"Vector"}]},"rets":{"ret":{"text":"The created particle, if any.","name":"","type":"CLuaParticle"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Draw","parent":"CLuaEmitter","type":"classfunc","description":"Manually renders all particles the emitter has created.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"Finish","parent":"CLuaEmitter","type":"classfunc","description":"Removes the emitter, making it no longer usable from Lua. If particles remain, the emitter will be removed when all particles die.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetNumActiveParticles","parent":"CLuaEmitter","type":"classfunc","description":"Returns the amount of active particles of this emitter.","realm":"Client","rets":{"ret":{"text":"The amount of active particles of this emitter","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetPos","parent":"CLuaEmitter","type":"classfunc","description":"Returns the position of this emitter. This is set when creating the emitter with Global.ParticleEmitter.","realm":"Client","rets":{"ret":{"text":"Position of this particle emitter.","name":"","type":"Vector"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetBBox","parent":"CLuaEmitter","type":"classfunc","description":"Sets the bounding box for this emitter.\n\nUsually the bounding box is automatically determined by the particles, but this function overrides it.","realm":"Client","args":{"arg":[{"text":"The minimum position of the box","name":"mins","type":"Vector"},{"text":"The maximum position of the box","name":"maxs","type":"Vector"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Is3D","parent":"CLuaEmitter","type":"classfunc","description":"Returns whether this emitter is 3D or not. This is set when creating the emitter with Global.ParticleEmitter.","realm":"Client","rets":{"ret":{"text":"Whether this emitter is 3D or not.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsValid","parent":"CLuaEmitter","type":"classfunc","description":"Returns whether this CLuaEmitter is valid or not.","realm":"Client","rets":{"ret":{"text":"Whether this CLuaEmitter is valid or not.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetNoDraw","parent":"CLuaEmitter","type":"classfunc","description":"Prevents all particles of the emitter from automatically drawing.","realm":"Client","args":{"arg":{"text":"Whether we should draw the particles ( false ) or not ( true )","name":"noDraw","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetNearClip","parent":"CLuaEmitter","type":"classfunc","description":"This function sets the the distance between the render camera and the emitter at which the particles should start fading and at which distance fade ends ( alpha becomes 0 ).","realm":"Client","args":{"arg":[{"text":"Min distance where the alpha becomes 0.","name":"distanceMin","type":"number"},{"text":"Max distance where the alpha starts fading.","name":"distanceMax","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetParticleCullRadius","parent":"CLuaEmitter","type":"classfunc","description":"The function name has not much in common with its actual function, it applies a radius to every particles that affects the building of the bounding box, as it, usually is constructed by the particle that has the lowest x, y and z and the highest x, y and z, this function just adds/subtracts the radius and inflates the bounding box.","realm":"Client","args":{"arg":{"text":"Particle radius.","name":"radius","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Approach","parent":"CLuaLocomotion","type":"classfunc","description":"Sets the location we want to get to","realm":"Server","args":{"arg":[{"text":"The vector we want to get to","name":"goal","type":"Vector"},{"text":"If unsure then set this to 1","name":"goalweight","type":"number"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"ClearStuck","parent":"CLuaLocomotion","type":"classfunc","description":"Removes the stuck status from the bot","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetAcceleration","parent":"CLuaLocomotion","type":"classfunc","description":"Returns the acceleration speed","realm":"Server","rets":{"ret":{"text":"Current acceleration speed","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetPos","parent":"CLuaEmitter","type":"classfunc","description":"Sets the position of the particle emitter.","realm":"Client","args":{"arg":{"text":"New position.","name":"position","type":"Vector"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"FaceTowards","parent":"CLuaLocomotion","type":"classfunc","description":"Sets the direction we want to face","realm":"Server","args":{"arg":{"text":"The vector we want to face","name":"goal","type":"Vector"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetCurrentAcceleration","parent":"CLuaLocomotion","type":"classfunc","description":"Returns the current acceleration as a vector","realm":"Server","rets":{"ret":{"text":"Current acceleration","name":"","type":"Vector"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetDeathDropHeight","parent":"CLuaLocomotion","type":"classfunc","description":"Gets the height the bot is scared to fall from","realm":"Server","rets":{"ret":{"text":"Current death drop height","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetDeathDropHeight","parent":"CLuaLocomotion","type":"classfunc","description":"Gets the height the bot is scared to fall from","realm":"Server","rets":{"ret":{"text":"Current death drop height","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetGravity","parent":"CLuaLocomotion","type":"classfunc","description":"Returns the locomotion's gravity.","realm":"Server","rets":{"ret":{"text":"The gravity.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetGroundMotionVector","parent":"CLuaLocomotion","type":"classfunc","description":"Return unit vector in XY plane describing our direction of motion - even if we are currently not moving","realm":"Server","rets":{"ret":{"text":"A vector representing the X and Y movement","name":"","type":"Vector"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetMaxJumpHeight","parent":"CLuaLocomotion","type":"classfunc","description":"Returns maximum jump height of this CLuaLocomotion.","realm":"Server","rets":{"ret":{"text":"The maximum jump height.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetJumpHeight","parent":"CLuaLocomotion","type":"classfunc","description":"Gets the height of the bot's jump","realm":"Server","rets":{"ret":{"text":"Current jump height","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetStepHeight","parent":"CLuaLocomotion","type":"classfunc","description":"Gets the max height the bot can step up","realm":"Server","rets":{"ret":{"text":"Current step height","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetVelocity","parent":"CLuaLocomotion","type":"classfunc","description":"Returns the current movement velocity as a vector","realm":"Server","rets":{"ret":{"text":"Current velocity","name":"","type":"Vector"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetMaxYawRate","parent":"CLuaLocomotion","type":"classfunc","description":"Returns the max rate at which the NextBot can visually rotate.","realm":"Server","rets":{"ret":{"text":"Maximum yaw rate","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetNextBot","parent":"CLuaLocomotion","type":"classfunc","description":"Returns the NextBot this locomotion is associated with.","realm":"Server","rets":{"ret":{"text":"The nextbot","name":"","type":"NextBot"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsAttemptingToMove","parent":"CLuaLocomotion","type":"classfunc","description":"Returns true if we're trying to move.","realm":"Server","rets":{"ret":{"text":"Whether we're trying to move or not.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsAreaTraversable","parent":"CLuaLocomotion","type":"classfunc","description":"Returns whether this CLuaLocomotion can reach and/or traverse/move in given CNavArea.","realm":"Server","args":{"arg":{"text":"The area to test","name":"area","type":"CNavArea"}},"rets":{"ret":{"text":"Whether this CLuaLocomotion can traverse given CNavArea.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsStuck","parent":"CLuaLocomotion","type":"classfunc","description":"Returns true if we're stuck","realm":"Server","rets":{"ret":{"text":"Whether we're stuck or not","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsOnGround","parent":"CLuaLocomotion","type":"classfunc","description":"Returns whether the nextbot this locomotion is attached to is on ground or not.","realm":"Server","rets":{"ret":{"text":"Whether the nextbot is on ground or not.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsClimbingOrJumping","parent":"CLuaLocomotion","type":"classfunc","description":"Returns true of the locomotion engine is jumping or climbing","realm":"Server","rets":{"ret":{"text":"Whether we're climbing or jumping or not","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsUsingLadder","parent":"CLuaLocomotion","type":"classfunc","description":"Returns whether or not the target in question is on a ladder or not.","realm":"Server","rets":{"ret":{"text":"If the target is on a ladder or not.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"JumpAcrossGap","parent":"CLuaLocomotion","type":"classfunc","realm":"Server","description":"Makes the bot jump across a gap. The bot must be on ground (Entity:IsOnGround) and its model must have `ACT_JUMP` activity.","args":{"arg":[{"name":"landingGoal","type":"Vector"},{"name":"landingForward","type":"Vector"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetAcceleration","parent":"CLuaLocomotion","type":"classfunc","description":"Sets the acceleration speed","realm":"Server","args":{"arg":{"text":"Speed acceleration (default is 400)","name":"speed","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Jump","parent":"CLuaLocomotion","type":"classfunc","description":"Makes the bot jump. It must be on ground (Entity:IsOnGround) and its model must have `ACT_JUMP` activity.","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetDeceleration","parent":"CLuaLocomotion","type":"classfunc","description":"Sets the deceleration speed.","realm":"Server","args":{"arg":{"text":"New deceleration speed (default is 400)","name":"deceleration","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetGravity","parent":"CLuaLocomotion","type":"classfunc","description":{"text":"Sets the locomotion's gravity.","note":"With values 0 or below, or even lower positive values, the nextbot will start to drift sideways, use CLuaLocomotion:SetVelocity to counteract this."},"realm":"Server","args":{"arg":{"text":"New gravity to set. Default is 1000.","name":"gravity","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetDeathDropHeight","parent":"CLuaLocomotion","type":"classfunc","description":"Sets the height the bot is scared to fall from.","realm":"Server","args":{"arg":{"text":"Height (default is 200)","name":"height","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetDesiredSpeed","parent":"CLuaLocomotion","type":"classfunc","description":"Sets movement speed.","realm":"Server","args":{"arg":{"text":"The new desired speed","name":"speed","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetStepHeight","parent":"CLuaLocomotion","type":"classfunc","description":"Sets the max height the bot can step up","realm":"Server","args":{"arg":{"text":"Height (default is 18)","name":"height","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetVelocity","parent":"CLuaLocomotion","type":"classfunc","description":"Sets the current movement velocity","realm":"Server","args":{"arg":{"name":"velocity","type":"Vector"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetJumpHeight","parent":"CLuaLocomotion","type":"classfunc","description":"Sets the height of the bot's jump","realm":"Server","args":{"arg":{"text":"Height (default is 58)","name":"height","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetMaxYawRate","parent":"CLuaLocomotion","type":"classfunc","description":"Sets the max rate at which the NextBot can visually rotate. This will not affect moving or pathing.","realm":"Server","args":{"arg":{"text":"Desired new maximum yaw rate","name":"yawRate","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetBounce","parent":"CLuaParticle","type":"classfunc","description":"Returns the 'bounciness' of the particle.","realm":"Client","rets":{"ret":{"text":"The 'bounciness' of the particle\n\n2 means it will gain 100% of its previous velocity,\n\n\n1 means it will not lose velocity,\n\n\n0.5 means it will lose half of its velocity with each bounce.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetAngles","parent":"CLuaParticle","type":"classfunc","description":"Returns the current orientation of the particle.","realm":"Client","rets":{"ret":{"text":"The angles of the particle","name":"","type":"Angle"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetAirResistance","parent":"CLuaParticle","type":"classfunc","description":"Returns the air resistance of the particle.","realm":"Client","rets":{"ret":{"text":"The air resistance of the particle","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetAngleVelocity","parent":"CLuaParticle","type":"classfunc","description":"Returns the angular velocity of the particle","realm":"Client","rets":{"ret":{"text":"The angular velocity of the particle","name":"","type":"Angle"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetEndAlpha","parent":"CLuaParticle","type":"classfunc","description":"Returns the alpha value that the particle will reach on its death.","realm":"Client","rets":{"ret":{"text":"The alpha value the particle will fade to","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetDieTime","parent":"CLuaParticle","type":"classfunc","description":"Returns the amount of time in seconds after which the particle will be destroyed.","realm":"Client","rets":{"ret":{"text":"The amount of time in seconds after which the particle will be destroyed","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetEndLength","parent":"CLuaParticle","type":"classfunc","description":"Returns the length that the particle will reach on its death.","realm":"Client","rets":{"ret":{"text":"The length the particle will reach","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetGravity","parent":"CLuaParticle","type":"classfunc","description":"Returns the gravity of the particle.","realm":"Client","rets":{"ret":{"text":"The gravity of the particle.","name":"","type":"Vector"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetColor","parent":"CLuaParticle","type":"classfunc","description":"Returns the color of the particle.","realm":"Client","rets":{"ret":[{"text":"Red part of the color","name":"","type":"number"},{"text":"Green part of the color","name":"","type":"number"},{"text":"Blue part of the color","name":"","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetPos","parent":"CLuaParticle","type":"classfunc","description":"Returns the absolute position of the particle.","realm":"Client","rets":{"ret":{"text":"The absolute position of the particle.","name":"","type":"Vector"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetEndSize","parent":"CLuaParticle","type":"classfunc","description":"Returns the size that the particle will reach on its death.","realm":"Client","rets":{"ret":{"text":"The size the particle will reach","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetMaterial","parent":"CLuaParticle","type":"classfunc","description":"Returns the current material of the particle.","realm":"Client","added":"2020.03.17","rets":{"ret":{"text":"The material.","name":"mat","type":"IMaterial"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetLifeTime","parent":"CLuaParticle","type":"classfunc","description":"Returns the 'life time' of the particle, how long the particle existed since its creation.\n\nThis value will always be between 0 and CLuaParticle:GetDieTime.\n\n\nIt changes automatically as time goes.\n\nIt can be manipulated using CLuaParticle:SetLifeTime.\n\n\nIf the life time of the particle will be more than CLuaParticle:GetDieTime, it will be removed.","realm":"Client","rets":{"ret":{"text":"How long the particle existed, in seconds.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetRoll","parent":"CLuaParticle","type":"classfunc","description":"Returns the current rotation of the particle in radians, this should only be used for 2D particles.","realm":"Client","rets":{"ret":{"text":"The current rotation of the particle in radians","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetRollDelta","parent":"CLuaParticle","type":"classfunc","description":"Returns the current rotation speed of the particle in radians, this should only be used for 2D particles.","realm":"Client","rets":{"ret":{"text":"The current rotation speed of the particle in radians","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetStartSize","parent":"CLuaParticle","type":"classfunc","description":"Returns the size which the particle has when it's created.","realm":"Client","rets":{"ret":{"text":"The size which the particle has when it's created.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetVelocity","parent":"CLuaParticle","type":"classfunc","description":"Returns the current velocity of the particle.","realm":"Client","rets":{"ret":{"text":"The current velocity of the particle.","name":"","type":"Vector"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetStartAlpha","parent":"CLuaParticle","type":"classfunc","description":"Returns the alpha value which the particle has when it's created.","realm":"Client","rets":{"ret":{"text":"The alpha value which the particle has when it's created.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetStartLength","parent":"CLuaParticle","type":"classfunc","description":"Returns the length which the particle has when it's created.","realm":"Client","rets":{"ret":{"text":"The length which the particle has when it's created.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetAngles","parent":"CLuaParticle","type":"classfunc","description":"Sets the angles of the particle.","realm":"Client","args":{"arg":{"text":"New angle.","name":"ang","type":"Angle"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetAirResistance","parent":"CLuaParticle","type":"classfunc","description":"Sets the air resistance of the the particle.","realm":"Client","args":{"arg":{"text":"New air resistance.","name":"airResistance","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetBounce","parent":"CLuaParticle","type":"classfunc","description":"Sets the 'bounciness' of the the particle.","realm":"Client","args":{"arg":{"text":"New 'bounciness' of the particle\n\n2 means it will gain 100% of its previous velocity,\n\n\n1 means it will not lose velocity,\n\n\n0.5 means it will lose half of its velocity with each bounce.","name":"bounce","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetCollideCallback","parent":"CLuaParticle","type":"classfunc","description":"Sets the function that gets called whenever the particle collides with the world.","realm":"Client","args":{"arg":{"text":"Collide callback, the arguments are:\n\n\n\n\nCLuaParticle particle - The particle itself\n\nVector hitPos - Position of the collision\n\nVector hitNormal - Direction of the collision, perpendicular to the hit surface","name":"collideFunc","type":"function"}}},"example":{"description":"Creates an explosion every time an particle collides with something.","code":"MyParticle:SetCollideCallback( function( part, hitpos, hitnormal ) --This is an in-line function\n    local efdata = EffectData() --Grab base EffectData table\n    efdata:SetOrigin( hitpos ) --Sets the origin of it to the hitpos of the particle\n    util.Effect( \"Explosion\", efdata ) --Create the effect\nend )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetAngleVelocity","parent":"CLuaParticle","type":"classfunc","description":"Sets the angular velocity of the the particle.","realm":"Client","args":{"arg":{"text":"New angular velocity.","name":"angVel","type":"Angle"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetCollide","parent":"CLuaParticle","type":"classfunc","description":"Sets the whether the particle should collide with the world or not.","realm":"Client","args":{"arg":{"text":"Whether the particle should collide with the world or not","name":"shouldCollide","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetColor","parent":"CLuaParticle","type":"classfunc","description":"Sets the color of the particle.","realm":"Client","args":{"arg":[{"text":"The red component.","name":"r","type":"number"},{"text":"The green component.","name":"g","type":"number"},{"text":"The blue component.","name":"b","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDieTime","parent":"CLuaParticle","type":"classfunc","description":"Sets the time where the particle will be removed.","realm":"Client","args":{"arg":{"text":"The new die time.","name":"dieTime","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetEndSize","parent":"CLuaParticle","type":"classfunc","description":"Sets the size of the particle that it will reach when it dies.","realm":"Client","args":{"arg":{"text":"The new size of the particle that it will reach when it dies.","name":"endSize","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetEndAlpha","parent":"CLuaParticle","type":"classfunc","description":"Sets the alpha value of the particle that it will reach when it dies.","realm":"Client","args":{"arg":{"text":"The new alpha value of the particle that it will reach when it dies.","name":"endAlpha","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetEndLength","parent":"CLuaParticle","type":"classfunc","description":"Sets the length of the particle that it will reach when it dies.","realm":"Client","args":{"arg":{"text":"The new length of the particle that it will reach when it dies.","name":"endLength","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetGravity","parent":"CLuaParticle","type":"classfunc","description":"Sets the directional gravity aka. acceleration of the particle.","realm":"Client","args":{"arg":{"text":"The directional gravity.","name":"gravity","type":"Vector"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetLifeTime","parent":"CLuaParticle","type":"classfunc","description":"Sets the 'life time' of the particle, how long the particle existed since its creation.\n\nThis value should always be between 0 and CLuaParticle:GetDieTime.\n\n\nIt changes automatically as time goes.\n\n\nIf the life time of the particle will be more than CLuaParticle:GetDieTime, it will be removed.","realm":"Client","args":{"arg":{"text":"The new life time of the particle.","name":"lifeTime","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetLighting","parent":"CLuaParticle","type":"classfunc","description":"Sets whether the particle should be affected by lighting.","realm":"Client","args":{"arg":{"text":"Whether the particle should be affected by lighting.","name":"useLighting","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetMaterial","parent":"CLuaParticle","type":"classfunc","description":"Sets the material of the particle.","realm":"Client","added":"2020.03.17","args":{"arg":{"text":"The new material to set. Can also be a string.","name":"mat","type":"IMaterial"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetNextThink","parent":"CLuaParticle","type":"classfunc","description":"Sets when the particles think function should be called next, this uses the synchronized server time returned by Global.CurTime.","realm":"Client","args":{"arg":{"text":"Next think time.","name":"nextThink","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetRoll","parent":"CLuaParticle","type":"classfunc","description":"Sets the roll of the particle in radians. This should only be used for 2D particles.","realm":"Client","args":{"arg":{"text":"The new rotation of the particle in radians.","name":"roll","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetPos","parent":"CLuaParticle","type":"classfunc","description":"Sets the absolute position of the particle.","realm":"Client","args":{"arg":{"text":"The new particle position.","name":"pos","type":"Vector"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetRollDelta","parent":"CLuaParticle","type":"classfunc","description":"Sets the rotation speed of the particle in radians. This should only be used for 2D particles.","realm":"Client","args":{"arg":{"text":"The new rotation speed of the particle in radians.","name":"rollDelta","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetStartLength","parent":"CLuaParticle","type":"classfunc","description":"Sets the initial length value of the particle.","realm":"Client","args":{"arg":{"text":"Initial length.","name":"startLength","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetStartSize","parent":"CLuaParticle","type":"classfunc","description":"Sets the initial size value of the particle.","realm":"Client","args":{"arg":{"text":"Initial size.","name":"startSize","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetThinkFunction","parent":"CLuaParticle","type":"classfunc","description":"Sets the think function of the particle.","realm":"Client","args":{"arg":{"text":"Think function. It has only one argument:\n\n\nCLuaParticle particle - The particle the think hook is set on","name":"thinkFunc","type":"function"}}},"example":{"description":"Example on how to use a think function, randomizes the colors of a particle","code":"p:SetNextThink( CurTime() ) -- Makes sure the think hook is used on all particles of the particle emitter\np:SetThinkFunction( function( pa )\n\tpa:SetColor( math.random( 0, 255 ), math.random( 0, 255 ), math.random( 0, 255 ) ) -- Randomize it\n\tpa:SetNextThink( CurTime() ) -- Makes sure the think hook is actually ran.\nend )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetStartAlpha","parent":"CLuaParticle","type":"classfunc","description":"Sets the initial alpha value of the particle.","realm":"Client","args":{"arg":{"text":"Initial alpha.","name":"startAlpha","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetVelocity","parent":"CLuaParticle","type":"classfunc","description":"Sets the velocity of the particle.","realm":"Client","args":{"arg":{"text":"The new velocity of the particle.","name":"vel","type":"Vector"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddKey","parent":"CMoveData","type":"classfunc","description":"Adds keys to the move data, as if player pressed them.","realm":"Shared","args":{"arg":{"text":"Keys to add, see Enums/IN","name":"keys","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetVelocityScale","parent":"CLuaParticle","type":"classfunc","description":"Scales the velocity based on the particle speed.","realm":"Client","args":{"arg":{"text":"Use velocity scaling.","name":"doScale","type":"boolean","default":"false"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetAbsMoveAngles","parent":"CMoveData","type":"classfunc","description":"Gets the aim angle. Seems to be same as CMoveData:GetAngles.","realm":"Shared","rets":{"ret":{"text":"Aiming angle","name":"","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetAngles","parent":"CMoveData","type":"classfunc","description":"Gets the aim angle. On client is the same as Entity:GetAngles.","realm":"Shared","rets":{"ret":{"text":"Aiming angle","name":"","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetForwardSpeed","parent":"CMoveData","type":"classfunc","description":"Returns the players forward speed.","realm":"Shared","rets":{"ret":{"text":"speed","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetConstraintRadius","parent":"CMoveData","type":"classfunc","description":"Returns the radius that constrains the players movement.","realm":"Shared","rets":{"ret":{"text":"The constraint radius","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetButtons","parent":"CMoveData","type":"classfunc","description":"Gets which buttons are down","realm":"Shared","rets":{"ret":{"text":"An integer representing which buttons are down, see Enums/IN","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetMaxClientSpeed","parent":"CMoveData","type":"classfunc","description":"Returns the maximum client speed of the player","realm":"Shared","rets":{"ret":{"text":"The maximum client speed","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetMaxSpeed","parent":"CMoveData","type":"classfunc","description":"Returns the maximum speed of the player.","realm":"Shared","rets":{"ret":{"text":"The maximum speed","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetOldButtons","parent":"CMoveData","type":"classfunc","description":"Get which buttons were down last frame","realm":"Shared","rets":{"ret":{"text":"An integer representing which buttons were down, see Enums/IN","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetMoveAngles","parent":"CMoveData","type":"classfunc","description":"Returns the angle the player is moving at. For more info, see CMoveData:SetMoveAngles.","realm":"Shared","rets":{"ret":{"text":"The move direction","name":"","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetImpulseCommand","parent":"CMoveData","type":"classfunc","description":"Gets the number passed to \"impulse\" console command","realm":"Shared","rets":{"ret":{"text":"The impulse","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetOldAngles","parent":"CMoveData","type":"classfunc","description":"Gets the aim angle. Only works clientside, server returns same as CMoveData:GetAngles.","realm":"Shared","rets":{"ret":{"text":"The aim angle","name":"","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetSideSpeed","parent":"CMoveData","type":"classfunc","description":"Returns the strafe speed of the player.","realm":"Shared","rets":{"ret":{"text":"speed","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetVelocity","parent":"CMoveData","type":"classfunc","description":{"text":"Gets the players velocity.","bug":{"text":"This will return Vector(0,0,0) sometimes when walking on props.","issue":"3413"}},"realm":"Shared","rets":{"ret":{"text":"The players velocity","name":"","type":"Vector"}}},"example":{"description":"Prints the player's velocity.","code":"function GM:Move( ply, movedata )\n    print( movedata:GetVelocity() )\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetOrigin","parent":"CMoveData","type":"classfunc","description":"Gets the player's position.","realm":"Shared","rets":{"ret":{"text":"The player's position.","name":"","type":"Vector"}}},"example":{"description":"Print's the players position.","code":"function GM:SetupMove( ply, movedata )\n    print( movedata:GetOrigin() )\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetUpSpeed","parent":"CMoveData","type":"classfunc","description":"Returns the vertical speed of the player. ( Z axis of CMoveData:GetVelocity )","realm":"Shared","rets":{"ret":{"text":"Vertical speed","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"KeyDown","parent":"CMoveData","type":"classfunc","description":"Returns whether the key is down or not","realm":"Shared","args":{"arg":{"text":"The key to test, see Enums/IN","name":"key","type":"number"}},"rets":{"ret":{"text":"Is the key down or not","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"KeyPressed","parent":"CMoveData","type":"classfunc","description":"Returns whether the key was pressed. If you want to check if the key is held down, try CMoveData:KeyDown","realm":"Shared","args":{"arg":{"text":"The key to test, see Enums/IN","name":"key","type":"number"}},"rets":{"ret":{"text":"Was the key pressed or not.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"KeyWasDown","parent":"CMoveData","type":"classfunc","description":"Returns whether the key was down or not.\n\n\n\n\nUnlike CMoveData:KeyDown, it will return false if CMoveData:KeyPressed is true and it will return true if CMoveData:KeyReleased is true.","realm":"Shared","args":{"arg":{"text":"The key to test, see Enums/IN","name":"key","type":"number"}},"rets":{"ret":{"text":"Was the key down or not","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"KeyReleased","parent":"CMoveData","type":"classfunc","description":"Returns whether the key was released","realm":"Shared","args":{"arg":{"text":"A key to test, see Enums/IN","name":"key","type":"number"}},"rets":{"ret":{"text":"Was the key released or not.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetAngles","parent":"CMoveData","type":"classfunc","description":{"text":"Sets angles.","bug":{"text":"This function does nothing.","issue":"2382"}},"realm":"Shared","args":{"arg":{"text":"The angles.","name":"ang","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetAbsMoveAngles","parent":"CMoveData","type":"classfunc","description":"Sets absolute move angles.( ? ) Doesn't seem to do anything.","realm":"Shared","args":{"arg":{"text":"New absolute move angles","name":"ang","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetButtons","parent":"CMoveData","type":"classfunc","description":"Sets the pressed buttons on the move data","realm":"Shared","args":{"arg":{"text":"A number representing which buttons are down, see Enums/IN","name":"buttons","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetConstraintRadius","parent":"CMoveData","type":"classfunc","description":"Sets the radius that constrains the players movement.\n\n\nIt is unknown what this function does as changing its values doesn't affect player movement.","realm":"Shared","args":{"arg":{"text":"The new constraint radius","name":"radius","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetImpulseCommand","parent":"CMoveData","type":"classfunc","description":"Sets the impulse command. This isn't actually utilised in the engine anywhere.","realm":"Shared","args":{"arg":{"text":"The impulse to set","name":"impulse","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetMaxClientSpeed","parent":"CMoveData","type":"classfunc","description":{"text":"Sets the maximum player speed. Player won't be able to run or sprint faster then this value.\n\n\nThis also automatically sets CMoveData:SetMaxSpeed when used in the GM:SetupMove hook. You must set it manually in the GM:Move hook.\n\n\nThis must be called on both client and server to avoid prediction errors.\n\n\nThis will **not** reduce speed in air.","note":"Setting this to 0 will not make the player stationary. It won't do anything."},"realm":"Shared","args":{"arg":{"text":"The new maximum speed","name":"maxSpeed","type":"number"}}},"example":[{"description":"Doesn't let the player to run or sprint faster than 100 units per second.","code":"hook.Add(\"SetupMove\",\"MySpeed\", function( ply, mv )\n    mv:SetMaxClientSpeed( 100 )\nend )"},{"description":"Doubles the players speed properly.","code":"hook.Add( \"Move\", \"testestst\", function( ply, mv, usrcmd )\n\tlocal speed = mv:GetMaxSpeed() * 2\n\tmv:SetMaxSpeed( speed )\n\tmv:SetMaxClientSpeed( speed )\nend )"}],"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetMaxSpeed","parent":"CMoveData","type":"classfunc","description":"Sets the maximum speed of the player. This must match with CMoveData:SetMaxClientSpeed both, on server and client.\n\n\nDoesn't seem to be doing anything on it's own, use CMoveData:SetMaxClientSpeed instead.","realm":"Shared","args":{"arg":{"text":"The new maximum speed","name":"maxSpeed","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetOldAngles","parent":"CMoveData","type":"classfunc","description":"Sets old aim angles. ( ? ) Doesn't seem to be doing anything.","realm":"Shared","args":{"arg":{"text":"The old angles","name":"aimAng","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetOldButtons","parent":"CMoveData","type":"classfunc","description":"Sets the 'old' pressed buttons on the move data. These buttons are used to work out which buttons have been released, which have just been pressed and which are being held down.","realm":"Shared","args":{"arg":{"text":"A number representing which buttons were down, see Enums/IN","name":"buttons","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetForwardSpeed","parent":"CMoveData","type":"classfunc","description":"Sets players forward speed.","realm":"Shared","args":{"arg":{"text":"New forward speed","name":"speed","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetMoveAngles","parent":"CMoveData","type":"classfunc","description":{"text":"Sets the serverside move angles, making the movement keys act as if player was facing that direction.","bug":{"text":"This does nothing clientside.","issue":"1181"}},"realm":"Shared","args":{"arg":{"text":"The aim direction.","name":"dir","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetOrigin","parent":"CMoveData","type":"classfunc","description":"Sets the players position.","realm":"Shared","args":{"arg":{"text":"The position","name":"pos","type":"Vector"}}},"example":{"description":"Make the player freeze at the origin of the map.","code":"function GM:SetupMove( ply, movedata )\n    movedata:SetOrigin( vector_origin )\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetUpSpeed","parent":"CMoveData","type":"classfunc","description":"Sets vertical speed of the player. ( Z axis of CMoveData:SetVelocity )","realm":"Shared","args":{"arg":{"text":"Vertical speed to set","name":"speed","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetSideSpeed","parent":"CMoveData","type":"classfunc","description":"Sets players strafe speed.","realm":"Shared","args":{"arg":{"text":"Strafe speed","name":"speed","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetVelocity","parent":"CMoveData","type":"classfunc","description":"Sets the player's velocity","realm":"Shared","args":{"arg":{"text":"The velocity to set","name":"velocity","type":"Vector"}}},"example":{"description":"Make the player shake to hell and back.","code":"function GM:SetupMove( ply, movedata )\n    movedata:SetVelocity( VectorRand() * 800 )\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"AddToOpenList","parent":"CNavArea","type":"classfunc","description":"Adds this CNavArea to the Open List.\n\nUsed in pathfinding via the [A* algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm).\n\n\nMore information can be found on the Simple Pathfinding page.","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"AddToClosedList","parent":"CNavArea","type":"classfunc","description":"Adds this CNavArea to the closed list, a list of areas that have been checked by A* pathfinding algorithm.\n\nUsed in pathfinding via the [A* algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm).\n\n\nMore information can be found on the Simple Pathfinding page.","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"AddHidingSpot","parent":"CNavArea","type":"classfunc","description":"Adds a hiding spot onto this nav area.\n\nThere's a limit of 255 hiding spots per area.","realm":"Server","args":{"arg":[{"text":"The position on the nav area","name":"pos","type":"Vector"},{"text":"Flags describing what kind of hiding spot this is.\n* 0 = None (Not recommended)\n* 1 = In Cover/basically a hiding spot, in a corner with good hard cover nearby\n* 2 = good sniper spot, had at least one decent sniping corridor\n* 4 = perfect sniper spot, can see either very far, or a large area, or both\n* 8 = exposed, spot in the open, usually on a ledge or cliff\n\nValues over 255 will be clamped.","name":"flags","type":"number","default":"7"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"ClearSearchLists","parent":"CNavArea","type":"classfunc","description":"Clears the open and closed lists for a new search.\n\nUsed in pathfinding via the [A* algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm).\n\n\nMore information can be found on the Simple Pathfinding page.","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"ComputeDirection","parent":"CNavArea","type":"classfunc","description":"Returns the Enums/NavDir direction that the given vector faces on this CNavArea.","realm":"Server","args":{"arg":{"text":"The position to compute direction towards.","name":"pos","type":"Vector"}},"rets":{"ret":{"text":"The direction the vector is in relation to this CNavArea. See Enums/NavDir.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"ComputeAdjacentConnectionHeightChange","parent":"CNavArea","type":"classfunc","description":"Returns the height difference between the edges of two connected navareas.","realm":"Server","args":{"arg":{"name":"navarea","type":"CNavArea"}},"rets":{"ret":{"text":"The height change","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"ComputeGroundHeightChange","parent":"CNavArea","type":"classfunc","description":"Returns the height difference on the Z axis of the two CNavAreas. This is calculated from the center most point on both CNavAreas.","realm":"Server","args":{"arg":{"text":"The nav area to test against.","name":"navArea","type":"CNavArea"}},"rets":{"ret":{"text":"The ground height change.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Disconnect","parent":"CNavArea","type":"classfunc","description":"Disconnects this nav area from given area or ladder. (Only disconnects one way)","realm":"Server","args":{"arg":{"text":"The CNavArea or CNavLadder this to disconnect from.","name":"area","type":"CNavArea"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Contains","parent":"CNavArea","type":"classfunc","description":"Returns true if this CNavArea contains the given vector.","realm":"Server","args":{"arg":{"text":"The position to test.","name":"pos","type":"Vector"}},"rets":{"ret":{"text":"True if the vector was inside and false otherwise.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"ConnectTo","parent":"CNavArea","type":"classfunc","description":"Connects this CNavArea to another CNavArea or CNavLadder with a one way connection. ( From this area to the target )\n\nSee CNavLadder:ConnectTo for making the connection from ladder to area.","realm":"Server","args":{"arg":{"text":"The CNavArea or CNavLadder this area leads to.","name":"area","type":"CNavArea"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetAdjacentAreas","parent":"CNavArea","type":"classfunc","description":"Returns a table of all the CNavAreas that have a  ( one and two way ) connection **from** this CNavArea.\n\nIf an area has a one-way incoming connection to this CNavArea, then it will **not** be returned from this function, use CNavArea:GetIncomingConnections to get all one-way incoming connections.\n\nSee CNavArea:GetAdjacentAreasAtSide for a function that only returns areas from one side/direction.","realm":"Server","rets":{"ret":{"text":"A table of all CNavArea that have a ( one and two way ) connection **from** this CNavArea. \n\nReturns an empty table if this area has no outgoing connections to any other areas.","name":"","type":"table"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Draw","parent":"CNavArea","type":"classfunc","description":"Draws this navarea on debug overlay.","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetAdjacentAreasAtSide","parent":"CNavArea","type":"classfunc","description":"Returns a table of all the CNavAreas that have a ( one and two way ) connection **from** this CNavArea in given direction.\n\nIf an area has a one-way incoming connection to this CNavArea, then it will **not** be returned from this function, use CNavArea:GetIncomingConnections to get all incoming connections.\n\nSee CNavArea:GetAdjacentAreas for a function that returns all areas from all sides/directions.","realm":"Server","args":{"arg":{"text":"The direction, in which to look for CNavAreas, see Enums/NavDir.","name":"navDir","type":"number"}},"rets":{"ret":{"text":"A table of all CNavArea that have a ( one and two way ) connection **from** this CNavArea in given direction.\n\nReturns an empty table if this area has no outgoing connections to any other areas in given direction.","name":"","type":"table"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"DrawSpots","parent":"CNavArea","type":"classfunc","description":"Draws the hiding spots on debug overlay. This includes sniper/exposed spots too!","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetAdjacentCount","parent":"CNavArea","type":"classfunc","description":"Returns the amount of CNavAreas that have a connection ( one and two way ) **from** this CNavArea.\n\nSee CNavArea:GetAdjacentCountAtSide for a function that only returns area count from one side/direction.","realm":"Server","rets":{"ret":{"text":"The amount of CNavAreas that have a connection ( one and two way ) **from** this CNavArea.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetAttributes","parent":"CNavArea","type":"classfunc","description":"Returns the attribute mask for the given CNavArea.","realm":"Server","rets":{"ret":{"text":"Attribute mask for this CNavArea, see Enums/NAV_MESH for the specific flags.","name":"","type":"boolean","note":"A navmesh that was generated with nav_quicksave set to 1 will have all CNavAreas attribute masks set to 0"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetCenter","parent":"CNavArea","type":"classfunc","description":"Returns the center most vector point for the given CNavArea.","realm":"Server","rets":{"ret":{"text":"The center vector.","name":"","type":"Vector"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetAdjacentCountAtSide","parent":"CNavArea","type":"classfunc","description":"Returns the amount of CNavAreas that have a connection ( one or two way ) **from** this CNavArea in given direction.\n\nSee CNavArea:GetAdjacentCount for a function that returns CNavArea count from/in all sides/directions.","realm":"Server","args":{"arg":{"text":"The direction, in which to look for CNavAreas, see Enums/NavDir.","name":"navDir","type":"number"}},"rets":{"ret":{"text":"The amount of CNavAreas that have a connection ( one or two way ) **from** this CNavArea in given direction.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetClosestPointOnArea","parent":"CNavArea","type":"classfunc","description":"Returns the closest point of this Nav Area from the given position.","realm":"Server","args":{"arg":{"text":"The given position, can be outside of the Nav Area bounds.","name":"pos","type":"Vector"}},"rets":{"ret":{"text":"The closest position on this Nav Area.","name":"","type":"Vector"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetCorner","parent":"CNavArea","type":"classfunc","description":"Returns the vector position of the corner for the given CNavArea.","realm":"Server","args":{"arg":{"text":"The target corner to get the position of, takes Enums/NavCorner.","name":"cornerid","type":"number"}},"rets":{"ret":{"text":"The corner position.","name":"","type":"Vector"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetExposedSpots","parent":"CNavArea","type":"classfunc","description":"Returns a table of very bad hiding spots in this area.\n\nSee also CNavArea:GetHidingSpots.","realm":"Server","rets":{"ret":{"text":"A table of Vectors","name":"","type":"table"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetExtentInfo","parent":"CNavArea","type":"classfunc","description":"Returns size info about the nav area.","realm":"Server","rets":{"ret":{"text":"Returns a table containing the following keys:\n* Vector hi|\n* Vector lo|\n* number SizeX|\n* number SizeY|\n* number SizeZ|","name":"","type":"table"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetCostSoFar","parent":"CNavArea","type":"classfunc","description":"Returns the cost from starting area this area when pathfinding. Set by CNavArea:SetCostSoFar.\n\nUsed in pathfinding via the [A* algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm).\n\n\nMore information can be found on the Simple Pathfinding page.","realm":"Server","rets":{"ret":{"text":"The cost so far.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetHidingSpots","parent":"CNavArea","type":"classfunc","description":"Returns a table of good hiding spots in this area.\n\nSee also CNavArea:GetExposedSpots.","realm":"Server","args":{"arg":{"text":"The type of spots to include.\n\n* 0 = None (Not recommended)\n* 1 = In Cover/basically a hiding spot, in a corner with good hard cover nearby\n* 2 = good sniper spot, had at least one decent sniping corridor\n* 4 = perfect sniper spot, can see either very far, or a large area, or both\n* 8 = exposed, spot in the open, usually on a ledge or cliff, same as GetExposedSpots\n* Values over 255 and below 0 will be clamped.","name":"type","type":"number","default":"1"}},"rets":{"ret":{"text":"A table of Vectors","name":"","type":"table"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetID","parent":"CNavArea","type":"classfunc","description":"Returns this CNavAreas unique ID.","realm":"Server","rets":{"ret":{"text":"The unique ID.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetIncomingConnectionsAtSide","parent":"CNavArea","type":"classfunc","description":"Returns a table of all the CNavAreas that have a one-way connection **to** this CNavArea from given direction.\n\nIf a CNavArea has a two-way connection **to or from** this CNavArea then it will not be returned from this function, use CNavArea:GetAdjacentAreas to get outgoing ( one and two way ) connections.\n\nSee CNavArea:GetIncomingConnections for a function that returns one-way incoming connections from  all sides/directions.","realm":"Server","args":{"arg":{"text":"The direction, from which to look for CNavAreas, see Enums/NavDir.","name":"navDir","type":"number"}},"rets":{"ret":{"text":"A table of all CNavAreas with one-way connection **to** this CNavArea from given direction.\n\nReturns an empty table if there are no one-way incoming connections **to** this CNavArea from given direction.","name":"","type":"table"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetIncomingConnections","parent":"CNavArea","type":"classfunc","description":"Returns a table of all the CNavAreas that have a one-way connection **to** this CNavArea.\n\nIf a CNavArea has a two-way connection **to or from** this CNavArea then it will not be returned from this function, use CNavArea:GetAdjacentAreas to get outgoing ( one and two way ) connections.\n\nSee CNavArea:GetIncomingConnectionsAtSide for a function that returns one-way incoming connections from  only one side/direction.","realm":"Server","rets":{"ret":{"text":"A table of all CNavAreas with one-way connection **to** this CNavArea.\n\nReturns an empty table if there are no one-way incoming connections **to** this CNavArea.","name":"","type":"table"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetLadders","parent":"CNavArea","type":"classfunc","description":"Returns all CNavLadders that have a ( one or two way ) connection **from** this CNavArea.\n\nSee CNavArea:GetLaddersAtSide for a function that only returns CNavLadders in given direction.","realm":"Server","rets":{"ret":{"text":"The CNavLadders that have a ( one or two way ) connection **from** this CNavArea.","name":"","type":"table"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetLaddersAtSide","parent":"CNavArea","type":"classfunc","description":"Returns all CNavLadders that have a ( one or two way ) connection **from** ( one and two way ) this CNavArea in given direction.\n\nSee CNavArea:GetLadders for a function that returns CNavLadder from/in all sides/directions.","realm":"Server","args":{"arg":{"text":"The direction, in which to look for CNavLadders.\n\n0 = Up ( LadderDirectionType::LADDER_UP )\n1 = Down ( LadderDirectionType::LADDER_DOWN )","name":"navDir","type":"number"}},"rets":{"ret":{"text":"The CNavLadders that have a ( one or two way ) connection **from** this CNavArea in given direction.","name":"","type":"table"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetParent","parent":"CNavArea","type":"classfunc","description":"Returns the parent CNavArea","realm":"Server","rets":{"ret":{"text":"The parent CNavArea","name":"","type":"CNavArea"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetParentHow","parent":"CNavArea","type":"classfunc","description":"Returns how this CNavArea is connected to its parent.","realm":"Server","rets":{"ret":{"text":"See Enums/NavTraverseType","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetPlace","parent":"CNavArea","type":"classfunc","description":"Returns the Place of the nav area.","realm":"Server","rets":{"ret":{"text":"The place of the nav area, or no value if it doesn't have a place set.","name":"","type":"string"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetRandomAdjacentAreaAtSide","parent":"CNavArea","type":"classfunc","description":"Returns a random CNavArea that has an outgoing ( one or two way ) connection **from** this CNavArea in given direction.","realm":"Server","args":{"arg":{"text":"The direction, in which to look for CNavAreas, see Enums/NavDir.","name":"navDir","type":"number"}},"rets":{"ret":{"text":"The random CNavArea that has an outgoing ( one or two way ) connection **from** this CNavArea in given direction, if any.","name":"","type":"CNavArea"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetRandomPoint","parent":"CNavArea","type":"classfunc","description":"Returns a random point on the nav area.","realm":"Server","rets":{"ret":{"text":"The random point on the nav area.","name":"","type":"Vector"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetSizeX","parent":"CNavArea","type":"classfunc","description":"Returns the width this Nav Area.","realm":"Server","rets":{"ret":{"name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetSizeY","parent":"CNavArea","type":"classfunc","description":"Returns the height of this Nav Area.","realm":"Server","rets":{"ret":{"name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetZ","parent":"CNavArea","type":"classfunc","description":"Returns the elevation of this Nav Area at the given position.","realm":"Server","args":{"arg":{"text":"The position to get the elevation from, the z value from this position is ignored and only the X and Y values are used to this task.","name":"pos","type":"Vector"}},"rets":{"ret":{"text":"The elevation.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetTotalCost","parent":"CNavArea","type":"classfunc","description":"Returns the total cost when passing from starting area to the goal area through this node. Set by CNavArea:SetTotalCost.\n\nUsed in pathfinding via the [A* algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm).\n\n\nMore information can be found on the Simple Pathfinding page.","realm":"Server","rets":{"ret":{"text":"The total cost","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsBlocked","parent":"CNavArea","type":"classfunc","description":"Returns whether the nav area is blocked or not, i.e. whether it can be walked through or not.","realm":"Server","args":{"arg":[{"text":"The team ID to test, -2 = any team.\n\nOnly 2 actual teams are available, 0 and 1.","name":"teamID","type":"number","default":"-2"},{"text":"Whether to ignore [func_nav_blocker](https://developer.valvesoftware.com/wiki/Func_nav_blocker) entities.","name":"ignoreNavBlockers","type":"boolean","default":"false"}]},"rets":{"ret":{"text":"Whether the area is blocked or not","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsClosed","parent":"CNavArea","type":"classfunc","description":"Returns whether this node is in the Closed List.\n\nUsed in pathfinding via the [A* algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm).\n\n\nMore information can be found on the Simple Pathfinding page.","realm":"Server","rets":{"ret":{"text":"Whether this node is in the Closed List.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"HasAttributes","parent":"CNavArea","type":"classfunc","description":"Returns true if the given CNavArea has this attribute flag set.","realm":"Server","args":{"arg":{"text":"Attribute mask to check for, see Enums/NAV_MESH","name":"attribs","type":"number"}},"rets":{"ret":{"text":"True if the CNavArea matches the given mask. False otherwise.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsCompletelyVisible","parent":"CNavArea","type":"classfunc","description":"Returns whether this CNavArea can completely (i.e. all corners of this area can see all corners of the given area) see the given CNavArea.","realm":"Server","added":"2020.08.12","args":{"arg":{"text":"The CNavArea to test.","name":"area","type":"CNavArea"}},"rets":{"ret":{"text":"Whether the given area is visible from this area","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsConnected","parent":"CNavArea","type":"classfunc","description":"Returns whether this CNavArea has an outgoing ( one or two way ) connection **to** given CNavArea.\n\nSee CNavArea:IsConnectedAtSide for a function that only checks for outgoing connections in one direction.","realm":"Server","args":{"arg":{"text":"The CNavArea to test against.","name":"navArea","type":"CNavArea"}},"rets":{"ret":{"text":"Whether this CNavArea has an outgoing ( one or two way ) connection **to** given CNavArea.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsConnectedAtSide","parent":"CNavArea","type":"classfunc","description":"Returns whether this CNavArea has an outgoing ( one or two way ) connection **to** given CNavArea in given direction.\n\nSee CNavArea:IsConnected for a function that checks all sides.","realm":"Server","args":{"arg":[{"text":"The CNavArea to test against.","name":"navArea","type":"CNavArea"},{"text":"The direction, in which to look for the connection. See Enums/NavDir","name":"navDirType","type":"number"}]},"rets":{"ret":{"text":"Whether this CNavArea has an outgoing ( one or two way ) connection **to** given CNavArea in given direction.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsCoplanar","parent":"CNavArea","type":"classfunc","description":"Returns whether this Nav Area is in the same plane as the given one.","realm":"Server","args":{"arg":{"text":"The Nav Area to test.","name":"navArea","type":"CNavArea"}},"rets":{"ret":{"text":"Whether we're coplanar or not.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsOpen","parent":"CNavArea","type":"classfunc","description":"Returns whether this area is in the Open List.\n\nUsed in pathfinding via the [A* algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm).\n\n\nMore information can be found on the Simple Pathfinding page.","realm":"Server","rets":{"ret":{"text":"Whether this area is in the Open List.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsFlat","parent":"CNavArea","type":"classfunc","description":"Returns whether this Nav Area is flat within the tolerance of the **nav_coplanar_slope_limit_displacement** and **nav_coplanar_slope_limit** convars.","realm":"Server","rets":{"ret":{"text":"Whether this CNavArea is mostly flat.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsOpenListEmpty","parent":"CNavArea","type":"classfunc","description":"Returns whether the Open List is empty or not.\n\nUsed in pathfinding via the [A* algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm).\n\n\nMore information can be found on the Simple Pathfinding page.","realm":"Server","rets":{"ret":{"text":"Whether the Open List is empty or not.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsOverlapping","parent":"CNavArea","type":"classfunc","description":"Returns if this position overlaps the Nav Area within the given tolerance.","realm":"Server","args":{"arg":[{"text":"The overlapping position to test.","name":"pos","type":"Vector"},{"text":"The tolerance of the overlapping, set to 0 for no tolerance.","name":"tolerance","type":"number","default":"0"}]},"rets":{"ret":{"text":"Whether the given position overlaps the Nav Area or not.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsOverlappingArea","parent":"CNavArea","type":"classfunc","description":"Returns true if this CNavArea is overlapping the given CNavArea.","realm":"Server","args":{"arg":{"text":"The CNavArea to test against.","name":"navArea","type":"CNavArea"}},"rets":{"ret":{"text":"True if the given CNavArea overlaps this CNavArea at any point.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsPartiallyVisible","parent":"CNavArea","type":"classfunc","description":"Returns whether this CNavArea can see given position.","realm":"Server","added":"2020.08.12","args":{"arg":[{"text":"The position to test.","name":"pos","type":"Vector"},{"text":"If set, the given entity will be ignored when doing LOS tests","name":"ignoreEnt","type":"Entity","default":"NULL"}]},"rets":{"ret":{"text":"Whether the given position is visible from this area","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsPotentiallyVisible","parent":"CNavArea","type":"classfunc","description":"Returns whether this CNavArea can potentially see the given CNavArea.","realm":"Server","added":"2020.08.12","args":{"arg":{"text":"The CNavArea to test.","name":"area","type":"CNavArea"}},"rets":{"ret":{"text":"Whether the given area is visible from this area","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsRoughlySquare","parent":"CNavArea","type":"classfunc","description":"Returns if we're shaped like a square.","realm":"Server","rets":{"ret":{"text":"If we're a square or not.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsValid","parent":"CNavArea","type":"classfunc","description":"Returns whether this CNavArea is valid or not.","realm":"Server","rets":{"ret":{"text":"Whether this CNavArea is valid or not.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsUnderwater","parent":"CNavArea","type":"classfunc","description":"Whether this Nav Area is placed underwater.","realm":"Server","rets":{"ret":{"text":"Whether we're underwater or not.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsVisible","parent":"CNavArea","type":"classfunc","description":"Returns whether we can be seen from the given position.","realm":"Server","args":{"arg":{"text":"The position to check.","name":"pos","type":"Vector"}},"rets":{"ret":[{"text":"Whether we can be seen or not.","name":"","type":"boolean"},{"text":"If we can be seen, this is returned with either the center or one of the corners of the Nav Area.","name":"","type":"Vector"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"PlaceOnGround","parent":"CNavArea","type":"classfunc","description":"Drops a corner or all corners of a CNavArea to the ground below it.","realm":"Server","args":{"arg":{"text":"The corner(s) to drop, uses Enums/NavCorner","name":"corner","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"PopOpenList","parent":"CNavArea","type":"classfunc","description":"Removes a CNavArea from the Open List with the lowest cost to traverse to from the starting node, and returns it.\n\nUsed in pathfinding via the [A* algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm).\n\n\nMore information can be found on the Simple Pathfinding page.","realm":"Server","rets":{"ret":{"text":"The CNavArea from the Open List with the lowest cost to traverse to from the starting node.","name":"","type":"CNavArea"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Remove","parent":"CNavArea","type":"classfunc","description":"Removes the given nav area.","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"RemoveFromClosedList","parent":"CNavArea","type":"classfunc","description":"Removes this node from the Closed List.\n\nUsed in pathfinding via the [A* algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm).\n\n\nMore information can be found on the Simple Pathfinding page.","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetAttributes","parent":"CNavArea","type":"classfunc","description":"Sets the attributes for given CNavArea.","realm":"Server","args":{"arg":{"text":"The attribute bitflag. See Enums/NAV_MESH","name":"attribs","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetCorner","parent":"CNavArea","type":"classfunc","description":"Sets the position of a corner of a nav area.","realm":"Server","args":{"arg":[{"text":"The corner to set, uses Enums/NavCorner","name":"corner","type":"number"},{"text":"The new position to set.","name":"position","type":"Vector"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetCostSoFar","parent":"CNavArea","type":"classfunc","description":"Sets the cost from starting area this area when pathfinding.\n\nUsed in pathfinding via the [A* algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm).\n\n\nMore information can be found on the Simple Pathfinding page.","realm":"Server","args":{"arg":{"text":"The cost so far","name":"cost","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetParent","parent":"CNavArea","type":"classfunc","description":"Sets the new parent of this CNavArea.","realm":"Server","args":{"arg":{"text":"The new parent to set","name":"parent","type":"CNavArea"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"ConnectTo","parent":"CNavLadder","type":"classfunc","description":"Connects this ladder to a CNavArea with a one way connection. ( From this ladder to the target area ).\n\nSee CNavArea:ConnectTo for making the connection from area to ladder.","realm":"Server","args":{"arg":{"text":"The area this ladder leads to.","name":"area","type":"CNavArea"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetTotalCost","parent":"CNavArea","type":"classfunc","description":"Sets the total cost when passing from starting area to the goal area through this node.\n\nUsed in pathfinding via the [A* algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm).\n\n\nMore information can be found on the Simple Pathfinding page.","realm":"Server","args":{"arg":{"text":"The total cost of the path to set.\n\nMust be above or equal 0.","name":"cost","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetPlace","parent":"CNavArea","type":"classfunc","description":"Sets the Place of the nav area.\n\nThere is a limit of 256 Places per nav file.","realm":"Server","args":{"arg":{"text":"Set to \"\" to remove place from the nav area.","name":"place","type":"string"}},"rets":{"ret":{"text":"Returns true of operation succeeded, false otherwise.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetBottom","parent":"CNavLadder","type":"classfunc","description":"Returns the bottom most position of the ladder.","realm":"Server","rets":{"ret":{"text":"The bottom most position of the ladder.","name":"","type":"Vector"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"UpdateOnOpenList","parent":"CNavArea","type":"classfunc","description":"Moves this open list to appropriate position based on its CNavArea:GetTotalCost compared to the total cost of other areas in the open list.\n\nUsed in pathfinding via the [A* algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm).\n\n\nMore information can be found on the Simple Pathfinding page.","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"Disconnect","parent":"CNavLadder","type":"classfunc","description":"Disconnects this ladder from given area in a single direction.","realm":"Server","args":{"arg":{"text":"The CNavArea this to disconnect from.","name":"area","type":"CNavArea"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetBottomArea","parent":"CNavLadder","type":"classfunc","description":"Returns the bottom area of the CNavLadder.","realm":"Server","rets":{"ret":{"name":"","type":"CNavArea"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetID","parent":"CNavLadder","type":"classfunc","description":"Returns this CNavLadders unique ID.","realm":"Server","rets":{"ret":{"text":"The unique ID.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetNormal","parent":"CNavLadder","type":"classfunc","description":"Returns the direction of this CNavLadder. ( The direction in which players back will be facing if they are looking directly at the ladder )","realm":"Server","rets":{"ret":{"text":"The direction of this CNavLadder.","name":"","type":"Vector"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetLength","parent":"CNavLadder","type":"classfunc","description":"Returns the length of the ladder.","realm":"Server","rets":{"ret":{"text":"The length of the ladder.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetPosAtHeight","parent":"CNavLadder","type":"classfunc","description":"Returns the world position based on given height relative to the ladder.","realm":"Server","args":{"arg":{"text":"The Z position in world space coordinates.","name":"height","type":"number"}},"rets":{"ret":{"text":"The closest point on the ladder to that height.","name":"","type":"Vector"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetTopForwardArea","parent":"CNavLadder","type":"classfunc","description":"Returns the top forward CNavArea of the CNavLadder.","realm":"Server","rets":{"ret":{"text":"The top forward CNavArea of the CNavLadder.","name":"","type":"CNavArea"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetTop","parent":"CNavLadder","type":"classfunc","description":"Returns the topmost position of the ladder.","realm":"Server","rets":{"ret":{"text":"The topmost position of the ladder.","name":"","type":"Vector"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetTopBehindArea","parent":"CNavLadder","type":"classfunc","description":"Returns the top behind CNavArea of the CNavLadder.","realm":"Server","rets":{"ret":{"text":"The top behind CNavArea of the CNavLadder.","name":"","type":"CNavArea"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetTopLeftArea","parent":"CNavLadder","type":"classfunc","description":"Returns the top left CNavArea of the CNavLadder.","realm":"Server","rets":{"ret":{"text":"The top left CNavArea of the CNavLadder.","name":"","type":"CNavArea"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetTopRightArea","parent":"CNavLadder","type":"classfunc","description":"Returns the top right CNavArea of the CNavLadder.","realm":"Server","rets":{"ret":{"text":"The top right CNavArea of the CNavLadder.","name":"","type":"CNavArea"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsValid","parent":"CNavLadder","type":"classfunc","description":"Returns whether this CNavLadder is valid or not.","realm":"Server","rets":{"ret":{"text":"Whether this CNavLadder is valid or not.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetWidth","parent":"CNavLadder","type":"classfunc","description":"Returns the width of the ladder in Hammer Units.","realm":"Server","rets":{"ret":{"text":"The width of the ladder in Hammer Units.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsConnectedAtSide","parent":"CNavLadder","type":"classfunc","description":"Returns whether this CNavLadder has an outgoing ( one or two way ) connection **to** given CNavArea in given direction.","realm":"Server","args":{"arg":[{"text":"The CNavArea to test against.","name":"navArea","type":"CNavArea"},{"text":"The direction, in which to look for the connection. See Enums/NavDir","name":"navDirType","type":"number"}]},"rets":{"ret":{"text":"Whether this CNavLadder has an outgoing ( one or two way ) connection **to** given CNavArea in given direction.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetTopForwardArea","parent":"CNavLadder","type":"classfunc","description":"Sets the top forward area of the CNavLadder.","realm":"Server","args":{"arg":{"name":"area","type":"CNavArea"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetBottomArea","parent":"CNavLadder","type":"classfunc","description":"Sets the bottom area of the CNavLadder.","realm":"Server","args":{"arg":{"name":"area","type":"CNavArea"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetTopBehindArea","parent":"CNavLadder","type":"classfunc","description":"Sets the top behind area of the CNavLadder.","realm":"Server","args":{"arg":{"name":"area","type":"CNavArea"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Remove","parent":"CNavLadder","type":"classfunc","description":"Removes the given nav ladder.","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetAutoUpdateBBox","parent":"CNewParticleEffect","type":"classfunc","realm":"Client","rets":{"ret":{"name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetTopRightArea","parent":"CNavLadder","type":"classfunc","description":"Sets the top right area of the CNavLadder.","realm":"Server","args":{"arg":{"name":"area","type":"CNavArea"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"AddControlPoint","parent":"CNewParticleEffect","type":"classfunc","description":{"text":"Adds a control point to the particle system.","note":"This function will not work if the CNewParticleEffect:GetOwner entity is not valid"},"realm":"Client","args":{"arg":[{"text":"The control point ID, 0 to 63.","name":"cpID","type":"number"},{"text":"The entity to attach the control point to.","name":"ent","type":"Entity"},{"text":"See Enums/PATTACH.","name":"partAttachment","type":"number"},{"text":"The attachment ID on the entity to attach the particle system to","name":"entAttachment","type":"number","default":"0"},{"text":"The offset from the Entity:GetPos of the entity we are attaching this CP to.","name":"offset","type":"Vector","default":"Vector( 0, 0, 0 )"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetTopLeftArea","parent":"CNavLadder","type":"classfunc","description":"Sets the top left area of the CNavLadder.","realm":"Server","args":{"arg":{"name":"area","type":"CNavArea"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetEffectName","parent":"CNewParticleEffect","type":"classfunc","description":"Returns the name of the particle effect this system is set to emit.","realm":"Client","rets":{"ret":{"text":"The name of the particle effect.","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetHighestControlPoint","parent":"CNewParticleEffect","type":"classfunc","description":"Returns the highest control point number for given particle system.","realm":"Client","rets":{"ret":{"text":"The highest control point number for given particle system, 0 to 63.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetOwner","parent":"CNewParticleEffect","type":"classfunc","description":"Returns the owner of the particle system, the entity the particle system is attached to.","realm":"Client","rets":{"ret":{"text":"The owner of the particle system.","name":"","type":"Entity"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsValid","parent":"CNewParticleEffect","type":"classfunc","description":"Returns whether the particle system is valid or not.","realm":"Client","rets":{"ret":{"text":"Whether the particle system is valid or not.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsFinished","parent":"CNewParticleEffect","type":"classfunc","description":"Returns whether the particle system has finished emitting particles or not.","realm":"Client","rets":{"ret":{"text":"Whether the particle system has finished emitting particles or not.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsViewModelEffect","parent":"CNewParticleEffect","type":"classfunc","description":"Returns whether the particle system is intended to be used on a view model?","realm":"Client","rets":{"ret":{"name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetControlPoint","parent":"CNewParticleEffect","type":"classfunc","description":"Sets a value for given control point.","realm":"Client","args":{"arg":[{"text":"The control point ID, 0 to 63.","name":"cpID","type":"number"},{"text":"The value to set for given control point.","name":"value","type":"Vector"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Restart","parent":"CNewParticleEffect","type":"classfunc","description":"Forces the particle system to restart emitting particles.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"Render","parent":"CNewParticleEffect","type":"classfunc","description":"Forces the particle system to render using current rendering context.\n\nCan be used to render the particle system in vgui panels, etc.\n\nUsed in conjunction with CNewParticleEffect:SetShouldDraw.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetControlPointEntity","parent":"CNewParticleEffect","type":"classfunc","description":"Essentially makes child control point follow the parent entity.","realm":"Client","args":{"arg":[{"text":"The child control point ID, 0 to 63.","name":"child","type":"number"},{"text":"The parent entity to follow.","name":"parent","type":"Entity"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetControlPointOrientation","parent":"CNewParticleEffect","type":"classfunc","description":"Sets the orientation for given control point.","realm":"Client","args":{"arg":[{"text":"The control point ID, 0 to 63.","name":"cpID","type":"number"},{"text":"The forward direction for given control point","name":"forward","type":"Vector"},{"text":"The right direction for given control point","name":"right","type":"Vector"},{"text":"The up direction for given control point","name":"up","type":"Vector"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetControlPointForwardVector","parent":"CNewParticleEffect","type":"classfunc","description":"Sets the forward direction for given control point.","realm":"Client","args":{"arg":[{"text":"The control point ID, 0 to 63.","name":"cpID","type":"number"},{"text":"The forward direction for given control point","name":"forward","type":"Vector"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetControlPointRightVector","parent":"CNewParticleEffect","type":"classfunc","description":"Sets the right direction for given control point.","realm":"Client","args":{"arg":[{"text":"The control point ID, 0 to 63.","name":"cpID","type":"number"},{"text":"The right direction for given control point.","name":"right","type":"Vector"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetControlPointUpVector","parent":"CNewParticleEffect","type":"classfunc","description":"Sets the upward direction for given control point.","realm":"Client","args":{"arg":[{"text":"The control point ID, 0 to 63.","name":"cpID","type":"number"},{"text":"The upward direction for given control point","name":"upward","type":"Vector"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetControlPointParent","parent":"CNewParticleEffect","type":"classfunc","description":"Essentially makes child control point follow the parent control point.","realm":"Client","args":{"arg":[{"text":"The child control point ID, 0 to 63.","name":"child","type":"number"},{"text":"The parent control point ID, 0 to 63.","name":"parent","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetIsViewModelEffect","parent":"CNewParticleEffect","type":"classfunc","description":"","realm":"Client","args":{"arg":{"name":"isViewModel","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetSortOrigin","parent":"CNewParticleEffect","type":"classfunc","description":"Sets the sort origin for given particle system. This is used as a helper to determine which particles are in front of which.","realm":"Client","args":{"arg":{"text":"The new sort origin.","name":"origin","type":"Vector"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"StopEmission","parent":"CNewParticleEffect","type":"classfunc","description":"Stops the particle emission.","realm":"Client","args":{"arg":[{"name":"infiniteOnly","type":"boolean","default":"false"},{"name":"removeAllParticles","type":"boolean","default":"false"},{"name":"wakeOnStop","type":"boolean","default":"false"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetShouldDraw","parent":"CNewParticleEffect","type":"classfunc","description":"Forces the particle system to stop automatically rendering.\n\nUsed in conjunction with CNewParticleEffect:Render.","realm":"Client","args":{"arg":{"text":"Whether to automatically draw the particle effect or not.","name":"should","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"StartEmission","parent":"CNewParticleEffect","type":"classfunc","description":"Starts the particle emission.","realm":"Client","args":{"arg":{"name":"infiniteOnly","type":"boolean","default":"false"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetUnpacked","parent":"Color","type":"classfunc","description":"Sets the red, green, blue, and alpha of the color.","realm":"Shared","args":{"arg":[{"text":"The red component","name":"r","type":"number"},{"text":"The green component","name":"g","type":"number"},{"text":"The blue component","name":"b","type":"number"},{"text":"The alpha component","name":"a","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"StopEmissionAndDestroyImmediately","parent":"CNewParticleEffect","type":"classfunc","description":{"text":"Stops particle emission and destroys all particles instantly. Also detaches the particle effect from the entity it was attached to.\n\n\n\nConsider using CNewParticleEffect:StopEmission( false, true ) instead, which has same effect, but doesn't require owner entity, and does't detach the particle system from its entity.","note":"This function will work identically to CNewParticleEffect:StopEmission( false, true ) if  CNewParticleEffect:GetOwner entity is not valid."},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"ToHSL","parent":"Color","type":"classfunc","description":"Converts a Color into HSL color space. This calls Global.ColorToHSL internally.","realm":"Shared and Menu","rets":{"ret":[{"text":"The hue in degrees [0, 360).","name":"","type":"number"},{"text":"The saturation in the range [0, 1].","name":"","type":"number"},{"text":"The lightness in the range [0, 1].","name":"","type":"number"}]}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"ToTable","parent":"Color","type":"classfunc","description":"Returns the color as a table with four elements.","realm":"Shared","rets":{"ret":{"text":"The table with elements 1 = r, 2 = g, 3 = b, 4 = a.","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ToHSV","parent":"Color","type":"classfunc","description":"Converts a Color into HSV color space. This calls Global.ColorToHSV internally.","realm":"Shared and Menu","rets":{"ret":[{"text":"The hue in degrees [0, 360).","name":"","type":"number"},{"text":"The saturation in range [0, 1].","name":"","type":"number"},{"text":"The value in range [0, 1].","name":"","type":"number"}]}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"ToVector","parent":"Color","type":"classfunc","description":{"text":"Translates the Color into a Vector, losing the alpha channel.\nThis will also range the values from 0 - 255 to 0 - 1\n\nr / 255 -> x\ng / 255 -> y\nb / 255 -> z\n\nThis is the opposite of Vector:ToColor","br":["",""]},"realm":"Shared","rets":{"ret":{"text":"The created Vector","name":"","type":"Vector"}}},"example":{"description":"Useful when setting player colors, since the function requires a vector as argument.","code":"Entity( 1 ):SetPlayerColor( Color( 220, 20, 60 ):ToVector() )","output":"Sets the player color for Player1 (only works if they are using a colorable player model)"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetBool","parent":"ConVar","type":"classfunc","description":"Tries to convert the current string value of a ConVar to a boolean.","realm":"Shared and Menu","rets":{"ret":{"text":"The boolean value of the console variable. If the variable is numeric and not 0, the result will be true. Otherwise the result will be false.","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Unpack","parent":"Color","type":"classfunc","description":"Returns the red, green, blue, and alpha of the color.","realm":"Shared","rets":{"ret":[{"text":"Red","name":"","type":"number"},{"text":"Green","name":"","type":"number"},{"text":"Blue","name":"","type":"number"},{"text":"Alpha","name":"","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetDefault","parent":"ConVar","type":"classfunc","description":"Returns the default value of the ConVar","realm":"Shared and Menu","rets":{"ret":{"text":"The default value of the console variable.","name":"","type":"string"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"GetFloat","parent":"ConVar","type":"classfunc","description":"Attempts to convert the ConVar value to a float","realm":"Shared and Menu","rets":{"ret":{"text":"The float value of the console variable.\n\n\nIf the value cannot be converted to a float, it will return 0.","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"GetFlags","parent":"ConVar","type":"classfunc","description":"Returns the Enums/FCVAR flags of the ConVar","realm":"Shared and Menu","rets":{"ret":{"text":"The bitflag. See Enums/FCVAR","name":"flag","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"GetHelpText","parent":"ConVar","type":"classfunc","description":"Returns the help text assigned to that convar.","realm":"Shared and Menu","rets":{"ret":{"text":"The help text","name":"","type":"string"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"GetInt","parent":"ConVar","type":"classfunc","description":"Attempts to convert the ConVar value to a integer.","realm":"Shared and Menu","rets":{"ret":{"text":"The integer value of the console variable.\n\n\nIf it fails to convert to an integer, it will return 0.\n\n\nAll float/decimal values will be rounded down. ( With math.floor )","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"GetMax","parent":"ConVar","type":"classfunc","description":"Returns the maximum value of the ConVar","realm":"Shared and Menu","rets":{"ret":{"text":"The maximum value of the ConVar","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"GetMin","parent":"ConVar","type":"classfunc","description":"Returns the minimum value of the ConVar","realm":"Shared and Menu","rets":{"ret":{"text":"The minimum value of the ConVar","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"GetName","parent":"ConVar","type":"classfunc","description":"Returns the name of the ConVar.","realm":"Shared and Menu","rets":{"ret":{"text":"The name of the console variable.","name":"","type":"string"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"GetString","parent":"ConVar","type":"classfunc","description":"Returns the current ConVar value as a string.","realm":"Shared and Menu","rets":{"ret":{"text":"The current console variable value as a string.","name":"","type":"string"}}},"example":{"description":"Will check if the gamemode is sandbox (Consider using engine.ActiveGamemode)","code":"if GetConVar(\"gamemode\"):GetString() == \"sandbox\" then\n    print(\"Gamemode is sandbox\")\nend","output":"Gamemode is sandbox"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Revert","parent":"ConVar","type":"classfunc","description":"Reverts ConVar to its default value","realm":"Shared and Menu"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"IsFlagSet","parent":"ConVar","type":"classfunc","description":"Returns whether the specified flag is set on the ConVar","realm":"Shared and Menu","args":{"arg":{"text":"The Enums/FCVAR flag to test","name":"flag","type":"number"}},"rets":{"ret":{"text":"Whether the flag is set or not","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"SetBool","parent":"ConVar","type":"classfunc","description":"Sets a ConVar's value to 1 or 0 based on the input boolean. This can only be ran on ConVars created from within Lua.","realm":"Shared and Menu","args":{"arg":{"text":"Value to set the ConVar to.","name":"value","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"SetFloat","parent":"ConVar","type":"classfunc","description":{"text":"Sets a ConVar's value to the input number.","note":"This can only be ran on ConVars created from within Lua."},"realm":"Shared and Menu","args":{"arg":{"text":"Value to set the ConVar to.","name":"value","type":"number"}}},"example":{"description":"Demonstrates the use of this function.","code":"local example = GetConVar( \"CVAR_EXAMPLE\" )\nexample:SetFloat( 13.37 )"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"SetString","parent":"ConVar","type":"classfunc","description":"Sets a ConVar's value to the input string. This can only be ran on ConVars created from within Lua.","realm":"Shared and Menu","args":{"arg":{"text":"Value to set the ConVar to.","name":"value","type":"string"}}},"example":{"description":"Demonstrates the use of this function.","code":"local example = GetConVar( \"CVAR_EXAMPLE\" )\nexample:SetString( \"1337\" )"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"AddAllPlayers","parent":"CRecipientFilter","type":"classfunc","description":"Adds all players to the recipient filter.","realm":"Server"},"example":{"description":"Adds all players to a recipient filter, then uses the recipient filter in a usermessage.","code":"function SendMessage()\n\tlocal filter = RecipientFilter()\n\tfilter:AddAllPlayers()\n\tumsg.Start(\"message\",filter)\n\tumsg.End()\nend","output":"Sends a usermessage to every player."},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetInt","parent":"ConVar","type":"classfunc","description":{"text":"Sets a ConVar's value to the input number after converting it to an integer.","note":"This can only be ran on ConVars created from within Lua."},"realm":"Shared and Menu","args":{"arg":{"text":"Value to set the ConVar to.","name":"value","type":"number"}}},"example":{"description":"Demonstrates the use of this function.","code":"local example = GetConVar( \"CVAR_EXAMPLE\" )\nexample:SetInt( 1337 )"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"AddPAS","parent":"CRecipientFilter","type":"classfunc","description":"Adds all players that are in the same [PAS (Potentially Audible Set)](https://developer.valvesoftware.com/wiki/PAS \"PAS - Valve Developer Community\") as this position.","realm":"Server","args":{"arg":{"text":"A position that players may be able to hear, usually the position of an entity the sound is playing played from.","name":"pos","type":"Vector"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"AddPlayer","parent":"CRecipientFilter","type":"classfunc","description":"Adds a player to the recipient filter","realm":"Server","args":{"arg":{"text":"Player to add to the recipient filter.","name":"Player","type":"Player"}}},"example":{"description":"Adds the first player object to the recipient filter, then sends him a message.","code":"function SendMessage()\n\tlocal filter = RecipientFilter()\n\tfilter:AddPlayer( Entity( 1 ) )\n\tumsg.Start( \"message\", filter )\n\tumsg.End()\nend","output":"Sends a usermessage to the first player object, if it exists."},"realms":["Server"],"type":"Function"},
{"function":{"name":"AddPVS","parent":"CRecipientFilter","type":"classfunc","description":"Adds all players that are in the same [PVS(Potential Visibility Set)](https://developer.valvesoftware.com/wiki/PVS \"PVS - Valve Developer Community\") as this position.","realm":"Server","args":{"arg":{"text":"PVS position that players may be able to see.","name":"Position","type":"Vector"}}},"example":{"description":"Adds players that are visible from the origin of the map to a recipient filter, then sends them a message.","code":"function SendMessage()\n\tlocal filter = RecipientFilter()\n\tfilter:AddPVS( Vector( 0, 0, 0 ) )\n\n\tnet.Start( \"message\" )\n\tnet.Send( filter )\nend","output":"Sends a net message to every player visible from 0,0,0"},"realms":["Server"],"type":"Function"},
{"function":{"name":"AddRecipientsByTeam","parent":"CRecipientFilter","type":"classfunc","description":"Adds all players that are on the given team to the filter.","realm":"Server","args":{"arg":{"text":"Team index to add players from.","name":"teamid","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetPlayers","parent":"CRecipientFilter","type":"classfunc","description":"Returns a table of all valid players currently in the recipient filter.","realm":"Server","rets":{"ret":{"text":"A table of all valid players currently in the recipient filter.","name":"","type":"table"}}},"example":{"description":"Example usage of the function","code":"local rf = RecipientFilter()\nrf:AddAllPlayers()\nprint( rf:GetCount() )\nPrintTable( rf:GetPlayers() )","output":"```\n2\n1\t=\tPlayer [1][Player #1]\n2\t=\tPlayer [2][Player #2]\n```"},"realms":["Server"],"type":"Function"},
{"function":{"name":"RemoveAllPlayers","parent":"CRecipientFilter","type":"classfunc","description":"Removes all players from the recipient filter.","realm":"Server"},"example":{"description":"Adds all players that can see the origin of the map, removes all players, then adds the first player object to the recipient filter, and sends them a message.","code":"function SendMessage()\n local filter = RecipientFilter()\n filter:AddPVS(Vector(0,0,0))\n filter:RemoveAllPlayers()\n filter:AddPlayer(Entity(1))\n umsg.Start(\"message\",filter)\n umsg.End()\nend","output":"Sends a usermessage to the first player object, if it exists."},"realms":["Server"],"type":"Function"},
{"function":{"name":"RemovePAS","parent":"CRecipientFilter","type":"classfunc","description":"Removes all players from the filter that are in Potentially Audible Set for given position.","realm":"Server","args":{"arg":{"text":"The position to test","name":"position","type":"Vector"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetCount","parent":"CRecipientFilter","type":"classfunc","description":"Returns the number of valid players in the recipient filter.","realm":"Server","rets":{"ret":{"text":"Number of valid players in the recipient filter.","name":"","type":"number"}}},"example":{"description":"Example usage of the function","code":"local rf = RecipientFilter()\nrf:AddAllPlayers()\nprint( rf:GetCount() )\nPrintTable( rf:GetPlayers() )","output":"```\n2\n1\t=\tPlayer [1][Player #1]\n2\t=\tPlayer [2][Player #2]\n```"},"realms":["Server"],"type":"Function"},
{"function":{"name":"RemoveRecipientsByTeam","parent":"CRecipientFilter","type":"classfunc","description":"Removes all players that are on the given team from the filter.","realm":"Server","args":{"arg":{"text":"Team index to remove players from.","name":"teamid","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"RemovePVS","parent":"CRecipientFilter","type":"classfunc","description":"Removes all players that can see this PVS from the recipient filter.","realm":"Server","args":{"arg":{"text":"Position that players may be able to see.","name":"pos","type":"Vector"}}},"example":{"description":"Adds the first player object to the recipient filter, then sends him a message.","code":"function SendMessage()\n\tlocal filter = RecipientFilter()\n\tfilter:AddPVS( Vector( 0,0,0 ) )\n\tfilter:RemovePVS( Vector( 0,10,0 ) )\n\tumsg.Start( \"message\", filter )\n\tumsg.End()\nend","output":"Adds all players that can see the map's origin to the recipient filter, then removes all players who can see 10 units to the left of the origin, and sends the rest a message."},"realms":["Server"],"type":"Function"},
{"function":{"name":"Remove","parent":"CSEnt","type":"classfunc","description":"Removes the clientside entity","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"RemovePlayer","parent":"CRecipientFilter","type":"classfunc","description":"Removes the player from the recipient filter.","realm":"Server","args":{"arg":{"text":"The player that should be in the recipient filter if you call this function.","name":"Player","type":"Player"}}},"example":{"description":"Adds all players to the recipient filter, then removes the first player and sends a message to the rest.","code":"util.AddNetworkString(\"message\")\nfunction SendMessage()\n\tlocal filter = RecipientFilter()\n\tfilter:AddAllPlayers()\n\tfilter:RemovePlayer(Entity(1))\n\tnet.Start(\"message\")\n\tnet.Send(filter)\nend","output":"Sends a net message to every player except the first."},"realms":["Server"],"type":"Function"},
{"function":{"name":"RemoveRecipientsNotOnTeam","parent":"CRecipientFilter","type":"classfunc","description":"Removes all players that are not on the given team from the filter.","realm":"Server","args":{"arg":{"text":"Team index.","name":"teamid","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"ChangeVolume","parent":"CSoundPatch","type":"classfunc","description":{"text":"Adjusts the volume of the sound played.\nAppears to only work while the sound is being played.","br":""},"realm":"Shared","args":{"arg":[{"text":"The volume ranges from 0 to 1.","name":"volume","type":"number"},{"text":"Time to fade the volume from previous to new value from.","name":"deltaTime","type":"number","default":"0"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ChangePitch","parent":"CSoundPatch","type":"classfunc","description":"Adjust the pitch, alias the speed at which the sound is being played.\n\nThis invokes the GM:EntityEmitSound.","realm":"Shared","args":{"arg":[{"text":"The pitch can range from 0-255. Where 100 is the original pitch.","name":"pitch","type":"number"},{"text":"The time to fade from previous to the new pitch.","name":"deltaTime","type":"number","default":"0"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"FadeOut","parent":"CSoundPatch","type":"classfunc","description":"Fades out the volume of the sound from the current volume to 0 in the given amount of seconds.","realm":"Shared","args":{"arg":{"text":"Fade time.","name":"seconds","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetPitch","parent":"CSoundPatch","type":"classfunc","description":"Returns the current pitch.","realm":"Shared","rets":{"ret":{"text":"The current pitch, can range from 0-255.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetDSP","parent":"CSoundPatch","type":"classfunc","description":"Returns the DSP ( Digital Signal Processor ) effect for the sound.","realm":"Shared","rets":{"ret":{"text":"The DSP effects of the sound\nList of DSP's are Pick from the [here](https://developer.valvesoftware.com/wiki/Dsp_presets).","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetSoundLevel","parent":"CSoundPatch","type":"classfunc","description":"Returns the current sound level.","realm":"Shared","rets":{"ret":{"text":"The current sound level, see Enums/SNDLVL.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Play","parent":"CSoundPatch","type":"classfunc","description":"Starts to play the sound. This will reset the sound's volume and pitch to their default values. See CSoundPatch:PlayEx","realm":"Shared"},"example":{"description":"Example usage","code":"local mysound = CreateSound( \"test.wav\" )\nmysound:Play()"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetVolume","parent":"CSoundPatch","type":"classfunc","description":"Returns the current volume.","realm":"Shared","rets":{"ret":{"text":"The current volume, ranging from 0 to 1.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsPlaying","parent":"CSoundPatch","type":"classfunc","description":"Returns whenever the sound is being played.","realm":"Shared","rets":{"ret":{"text":"Is playing or not","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"PlayEx","parent":"CSoundPatch","type":"classfunc","description":"Same as CSoundPatch:Play but with 2 extra arguments allowing to set volume and pitch directly.","realm":"Shared","args":{"arg":[{"text":"The volume ranges from 0 to 1.","name":"volume","type":"number"},{"text":"The pitch can range from 0-255.","name":"pitch","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetSoundLevel","parent":"CSoundPatch","type":"classfunc","description":"Sets the sound level in decibel.","realm":"Shared","args":{"arg":{"text":"The sound level in decibel. See Enums/SNDLVL","name":"level","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetDSP","parent":"CSoundPatch","type":"classfunc","description":{"text":"Sets the DSP (Digital Signal Processor) effect for the sound. Similar to Player:SetDSP but for individual sounds.","bug":{"text":"This will only apply if the sound is not playing.","issue":"4086"}},"realm":"Shared","args":{"arg":{"text":"The DSP effect to set.\nPick from the [list of DSP's](https://developer.valvesoftware.com/wiki/Dsp_presets)","name":"dsp","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Stop","parent":"CSoundPatch","type":"classfunc","description":{"text":"Stops the sound from being played.","bug":{"text":"This will not work if the entity attached to this sound patch (specified by Global.CreateSound) is invalid.","issue":"3260"}},"realm":"Shared"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"AddDamage","parent":"CTakeDamageInfo","type":"classfunc","description":"Increases the damage by damageIncrease.","realm":"Shared","args":{"arg":{"text":"The damage to add.","name":"damageIncrease","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetAmmoType","parent":"CTakeDamageInfo","type":"classfunc","description":"Returns the ammo type used by the weapon that inflicted the damage.","realm":"Shared","rets":{"ret":{"text":"Ammo type ID","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetAttacker","parent":"CTakeDamageInfo","type":"classfunc","description":"Returns the attacker ( character who originated the attack ), for example a player or an NPC that shot the weapon.","realm":"Shared","rets":{"ret":{"text":"The attacker","name":"","type":"Entity"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetBaseDamage","parent":"CTakeDamageInfo","type":"classfunc","description":"Returns the initial unmodified by skill level ( game.GetSkillLevel ) damage.","realm":"Shared","rets":{"ret":{"text":"baseDamage","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetDamage","parent":"CTakeDamageInfo","type":"classfunc","description":"Returns the total damage.","realm":"Shared","rets":{"ret":{"text":"damage","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetDamageBonus","parent":"CTakeDamageInfo","type":"classfunc","description":"Gets the current bonus damage.","realm":"Shared","rets":{"ret":{"text":"Bonus damage","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetDamageCustom","parent":"CTakeDamageInfo","type":"classfunc","description":"Gets the custom damage type. This is used by Day of Defeat: Source and Team Fortress 2 for extended damage info, but isn't used in Garry's Mod by default.","realm":"Shared","rets":{"ret":{"text":"The custom damage type","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetDamageForce","parent":"CTakeDamageInfo","type":"classfunc","description":"Returns a vector representing the damage force.\n\nCan be set with CTakeDamageInfo:SetDamageForce.","realm":"Shared","rets":{"ret":{"text":"The damage force","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetDamagePosition","parent":"CTakeDamageInfo","type":"classfunc","description":"Returns the position where the damage was or is going to be applied to.\n\nCan be set using CTakeDamageInfo:SetDamagePosition.","realm":"Shared","rets":{"ret":{"text":"The damage position","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetReportedPosition","parent":"CTakeDamageInfo","type":"classfunc","description":"Returns the initial, unmodified position where the damage occured.","realm":"Shared","rets":{"ret":{"text":"position","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetMaxDamage","parent":"CTakeDamageInfo","type":"classfunc","description":"Returns the maximum damage.","realm":"Shared","rets":{"ret":{"text":"maxDmg","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetInflictor","parent":"CTakeDamageInfo","type":"classfunc","description":{"text":"Returns the inflictor of the damage. This is not necessarily a weapon.\n\nFor hitscan weapons this is the weapon.\n\n\nFor projectile weapons this is the projectile.\n\n\n\n\n\nFor a more reliable method of getting the weapon that damaged an entity, use  with .","page":[",GetAttackerCTakeDamageInfo:GetAttacker",",GetActiveWeaponPlayer:GetActiveWeapon"]},"realm":"Shared","rets":{"ret":{"text":"The inflictor","name":"","type":"Entity"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetDamageType","parent":"CTakeDamageInfo","type":"classfunc","description":"Returns a bitflag which indicates the damage type(s) of the damage.\n\nConsider using CTakeDamageInfo:IsDamageType instead. Value returned by this function can contain multiple damage types.","realm":"Shared","rets":{"ret":{"text":"Damage type(s), a combination of Enums/DMG","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsBulletDamage","parent":"CTakeDamageInfo","type":"classfunc","description":"Returns true if the damage was caused by a bullet.","realm":"Shared","rets":{"ret":{"text":"isBulletDmg","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsDamageType","parent":"CTakeDamageInfo","type":"classfunc","description":"Returns whenever the damageinfo contains the damage type specified.","realm":"Shared","args":{"arg":{"text":"Damage type to test. See Enums/DMG.","name":"dmgType","type":"number"}},"rets":{"ret":{"text":"Whether this damage contains specified damage type or not","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsExplosionDamage","parent":"CTakeDamageInfo","type":"classfunc","description":"Returns whenever the damageinfo contains explosion damage.","realm":"Shared","rets":{"ret":{"text":"isExplDamage","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsFallDamage","parent":"CTakeDamageInfo","type":"classfunc","description":"Returns whenever the damageinfo contains fall damage.","realm":"Shared","rets":{"ret":{"text":"isFallDmg","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetAttacker","parent":"CTakeDamageInfo","type":"classfunc","description":"Sets the attacker ( character who originated the attack ) of the damage, for example a player or an NPC.","realm":"Shared","args":{"arg":{"text":"The entity to be set as the attacker.","name":"ent","type":"Entity"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ScaleDamage","parent":"CTakeDamageInfo","type":"classfunc","description":"Scales the damage by the given value.","realm":"Shared","args":{"arg":{"text":"Value to scale the damage with.","name":"scale","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetBaseDamage","parent":"CTakeDamageInfo","type":"classfunc","description":"Sets the initial unmodified by skill level ( game.GetSkillLevel ) damage. This function will not update or touch CTakeDamageInfo:GetDamage.","realm":"Shared","added":"2020.10.14","args":{"arg":{"text":"baseDamage","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetDamage","parent":"CTakeDamageInfo","type":"classfunc","description":"Sets the amount of damage.","realm":"Shared","args":{"arg":{"text":"The value to set the absolute damage to.","name":"damage","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetAmmoType","parent":"CTakeDamageInfo","type":"classfunc","description":"Changes the ammo type used by the weapon that inflicted the damage.","realm":"Shared","args":{"arg":{"text":"Ammo type ID","name":"ammoType","type":"number"}}},"example":{"description":"Creates a new DamageInfo object and sets the ammo that caused the damage to AR2 ammo","code":"local dmginfo = DamageInfo()\n\ndmginfo:SetAmmoType( game.GetAmmoID( 'AR2' ) )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetDamageBonus","parent":"CTakeDamageInfo","type":"classfunc","description":"Sets the bonus damage. Bonus damage isn't automatically applied, so this will have no outer effect by default.","realm":"Shared","args":{"arg":{"text":"The extra damage to be added.","name":"damage","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetDamageCustom","parent":"CTakeDamageInfo","type":"classfunc","description":"Sets the custom damage type. This is used by Day of Defeat: Source and Team Fortress 2 for extended damage info, but isn't used in Garry's Mod by default.","realm":"Shared","args":{"arg":{"text":"Any integer - can be based on your own custom enums.","name":"DamageType","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetDamageForce","parent":"CTakeDamageInfo","type":"classfunc","description":"Sets the directional force of the damage.","realm":"Shared","args":{"arg":{"text":"The vector to set the force to.","name":"force","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetDamagePosition","parent":"CTakeDamageInfo","type":"classfunc","description":"Sets the position of where the damage gets applied to.","realm":"Shared","args":{"arg":{"text":"The position where the damage will be applied.","name":"pos","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetInflictor","parent":"CTakeDamageInfo","type":"classfunc","description":"Sets the inflictor of the damage for example a weapon.\n\nFor hitscan/bullet weapons this should the weapon.\n\n\nFor projectile ( rockets, etc ) weapons this should be the projectile.","realm":"Shared","args":{"arg":{"text":"The new inflictor.","name":"inflictor","type":"Entity"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetDamageType","parent":"CTakeDamageInfo","type":"classfunc","description":"Sets the damage type.","realm":"Shared","args":{"arg":{"text":"The damage type, see Enums/DMG.","name":"type","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetMaxDamage","parent":"CTakeDamageInfo","type":"classfunc","description":"Sets the maximum damage the object can cause.","realm":"Shared","args":{"arg":{"text":"Maximum damage value.","name":"maxDamage","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetReportedPosition","parent":"CTakeDamageInfo","type":"classfunc","description":"Sets the origin of the damage.","realm":"Shared","args":{"arg":{"text":"The location of where the damage is originating","name":"pos","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SubtractDamage","parent":"CTakeDamageInfo","type":"classfunc","description":"Subtracts the specified amount from the damage.","realm":"Shared","args":{"arg":{"text":"Value to subtract.","name":"damage","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ClearButtons","parent":"CUserCmd","type":"classfunc","description":{"text":"Removes all keys from the command.","note":"If you are looking to affect player movement, you may need to use CUserCmd:ClearMovement instead of clearing the buttons."},"realm":"Shared"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ClearMovement","parent":"CUserCmd","type":"classfunc","description":"Clears the movement from the command.\n\nSee also CUserCmd:SetForwardMove, CUserCmd:SetSideMove and  CUserCmd:SetUpMove.","realm":"Shared"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"CommandNumber","parent":"CUserCmd","type":"classfunc","description":{"text":"Returns an increasing number representing the index of the user cmd.","warning":"The value returned is occasionally 0 inside GM:CreateMove and GM:StartCommand. It is advised to check for a non-zero value if you wish to get the correct number."},"realm":"Shared","rets":{"ret":{"text":"The command number","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetForwardMove","parent":"CUserCmd","type":"classfunc","description":"The speed the client wishes to move forward with, negative if the clients wants to move backwards.","realm":"Shared","rets":{"ret":{"text":"The desired speed","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetButtons","parent":"CUserCmd","type":"classfunc","description":"Returns a bitflag indicating which buttons are pressed.","realm":"Shared","rets":{"ret":{"text":"Pressed buttons, see Enums/IN","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetImpulse","parent":"CUserCmd","type":"classfunc","description":{"text":"Gets the current impulse from the client, usually 0. [See impulses list](https://developer.valvesoftware.com/wiki/Impulse) and some .","page":",GMod specific impulsesCUserCmd:SetImpulse"},"realm":"Shared","rets":{"ret":{"text":"The impulse","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetMouseWheel","parent":"CUserCmd","type":"classfunc","description":"Returns the scroll delta as whole number.","realm":"Shared","rets":{"ret":{"text":"Scroll delta","name":"","type":"number"}}},"example":{"code":"hook.Add( \"StartCommand\", \"StartCommandExample\", function( ply, cmd )\n\tif ( cmd:GetMouseWheel() != 0 ) then print( ply, \" scrolled \", cmd:GetMouseWheel()) end\nend )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetMouseX","parent":"CUserCmd","type":"classfunc","description":"Returns the delta of the angular horizontal mouse movement of the player.","realm":"Shared","rets":{"ret":{"text":"xDelta","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetMouseY","parent":"CUserCmd","type":"classfunc","description":"Returns the delta of the angular vertical mouse movement of the player.","realm":"Shared","rets":{"ret":{"text":"yDelta","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetSideMove","parent":"CUserCmd","type":"classfunc","description":"The speed the client wishes to move sideways with, positive if it wants to move right, negative if it wants to move left.","realm":"Shared","rets":{"ret":{"text":"requestSpeed","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetUpMove","parent":"CUserCmd","type":"classfunc","description":"The speed the client wishes to move up with, negative if the clients wants to move down.","realm":"Shared","rets":{"ret":{"text":"requestSpeed","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsForced","parent":"CUserCmd","type":"classfunc","description":"When players are not sending usercommands to the server (often due to lag), their last usercommand will be executed multiple times as a backup. This function returns true if that is happening.\n\nThis will never return true clientside.","realm":"Shared","rets":{"ret":{"text":"isForced","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetViewAngles","parent":"CUserCmd","type":"classfunc","description":"Gets the direction the player is looking in.","realm":"Shared","rets":{"ret":{"text":"The direction the player is looking in.","name":"","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"RemoveKey","parent":"CUserCmd","type":"classfunc","description":"Removes a key bit from the current key bitflag. For movement you will want to use CUserCmd:SetForwardMove, CUserCmd:SetUpMove and CUserCmd:SetSideMove.","realm":"Shared","args":{"arg":{"text":"Bitflag to be removed from the key bitflag, see Enums/IN.","name":"button","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"KeyDown","parent":"CUserCmd","type":"classfunc","description":"Returns true if the specified button(s) is pressed.","realm":"Shared","args":{"arg":{"text":"Bitflag representing which button to check, see Enums/IN.","name":"key","type":"number"}},"rets":{"ret":{"text":"Is key down or not","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SelectWeapon","parent":"CUserCmd","type":"classfunc","description":{"text":"Forces the associated player to select a weapon. This is used internally in the default HL2 weapon selection HUD.\n\nThis may not work immediately if the current command is in prediction. Use input.SelectWeapon to switch the weapon from the client when the next available command can do so.","note":"This is the ideal function to use to create a custom weapon selection HUD, as it allows prediction to run properly for WEAPON:Deploy and GM:PlayerSwitchWeapon"},"realm":"Shared","args":{"arg":{"text":"The weapon entity to select.","name":"weapon","type":"Weapon"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetButtons","parent":"CUserCmd","type":"classfunc","description":{"text":"Sets the buttons as a bitflag. See also CUserCmd:GetButtons.","note":"If you are looking to affect player movement, you may need to use CUserCmd:SetForwardMove instead of setting the keys."},"realm":"Shared","args":{"arg":{"text":"Bitflag representing which buttons are \"down\", see Enums/IN.","name":"buttons","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetForwardMove","parent":"CUserCmd","type":"classfunc","description":"Sets speed the client wishes to move forward with, negative if the clients wants to move backwards.\n\nSee also CUserCmd:ClearMovement, CUserCmd:SetSideMove and CUserCmd:SetUpMove.","realm":"Shared","args":{"arg":{"text":"The new speed to request. The client will not be able to move faster than their set walk/sprint speed.","name":"speed","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetMouseX","parent":"CUserCmd","type":"classfunc","description":"Sets the delta of the angular horizontal mouse movement of the player.\n\nSee also CUserCmd:SetMouseY.","realm":"Shared","args":{"arg":{"text":"Angular horizontal move delta.","name":"speed","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetMouseWheel","parent":"CUserCmd","type":"classfunc","description":"Sets the scroll delta.","realm":"Shared","args":{"arg":{"text":"The scroll delta.","name":"speed","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetImpulse","parent":"CUserCmd","type":"classfunc","description":"Sets the impulse command to be sent to the server.\n\nHere are a few examples of impulse numbers:\n- `100` toggles their flashlight\n- `101` gives the player all Half-Life 2 weapons with `sv_cheats` set to `1`\n- `200` toggles holstering / restoring the current weapon  \n  When holstered, the `EF_NODRAW` flag is set on the active weapon.\n- `154` toggles noclip\n\n[See full list](https://developer.valvesoftware.com/wiki/Impulse)","realm":"Shared","args":{"arg":{"text":"The impulse to send.","name":"impulse","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetSideMove","parent":"CUserCmd","type":"classfunc","description":"Sets speed the client wishes to move sidewards with, positive to move right, negative to move left.\n\nSee also CUserCmd:SetForwardMove and  CUserCmd:SetUpMove.","realm":"Shared","args":{"arg":{"text":"The new speed to request.","name":"speed","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetUpMove","parent":"CUserCmd","type":"classfunc","description":"Sets speed the client wishes to move upwards with, negative to move down.\n\nSee also CUserCmd:SetSideMove and  CUserCmd:SetForwardMove.","realm":"Shared","args":{"arg":{"text":"The new speed to request.","name":"speed","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"TickCount","parent":"CUserCmd","type":"classfunc","description":{"text":"Returns tick count since joining the server.","note":["This will always return 0 for bots.","Returns 0 clientside during prediction calls. If you are trying to use CUserCmd:Set*() on the client in a movement or command hook, keep doing so till TickCount returns a non-zero number to maintain prediction."]},"realm":"Shared","rets":{"ret":{"text":"The amount of ticks passed since joining the server.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetMouseY","parent":"CUserCmd","type":"classfunc","description":"Sets the delta of the angular vertical mouse movement of the player.\n\nSee also CUserCmd:SetMouseX.","realm":"Shared","args":{"arg":{"text":"Angular vertical move delta.","name":"speed","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetViewAngles","parent":"CUserCmd","type":"classfunc","description":{"text":"Sets the direction the client wants to move in.","note":"The pitch (vertical) angle should be clamped to +/- 89° to prevent the player's view from glitching."},"realm":"Shared","args":{"arg":{"text":"New view angles.","name":"viewAngle","type":"Angle"}}},"example":{"description":"Locks the player's view to only vertical movement.","code":"hook.Add(\"InputMouseApply\", \"LockToPitchOnly\", function( ccmd, x, y, angle )\n\t-- By leaving angle.roll and angle.yaw alone, we effectively lock them\n\tangle.pitch = math.Clamp( angle.pitch + y / 50, -89, 89 )\n\tccmd:SetViewAngles( angle )\n\treturn true\nend)"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"AddCallback","parent":"Entity","type":"classfunc","description":{"text":"Add a callback function to a specific event. This is used instead of hooks to avoid calling empty functions unnecessarily.\n\nThis also allows you to use certain hooks in engine entities (non-scripted entities).","warning":"This method does not check if the function has already been added to this object before, so if you add the same callback twice, it will be run twice! Make sure to add your callback only once."},"realm":"Shared","args":{"arg":[{"text":"The hook name to hook onto. See Entity Callbacks","name":"hook","type":"string"},{"text":"The function to call","name":"func","type":"function"}]},"rets":{"ret":{"text":"The callback ID that was just added, which can later be used in Entity:RemoveCallback.\n\nReturns nothing if the passed callback function was invalid or when asking for a non-existent hook.","name":"","type":"number"}}},"example":[{"description":"Adds a callback to an entity which is called every time the entity angles change.","code":"myentity:AddCallback( \"OnAngleChange\", function( entity, newangle )\n\t-- Do stuff\nend )"},{"description":"Creates watermelon prop which creates sparks on collision point whenever touches something.","code":"local melon = ents.Create( \"prop_physics\" ) -- Spawn prop\nif ( !IsValid( melon ) ) then return end -- Safety first\nmelon:SetModel( \"models/props_junk/watermelon01.mdl\" ) -- Set watermelon model\nmelon:SetPos( Entity(1):GetEyeTrace().HitPos ) -- Set pos where is player looking\nmelon:Spawn() -- Instantiate prop\n\nlocal function PhysCallback( ent, data ) -- Function that will be called whenever collision happends\n\tlocal effect = EffectData() -- Create effect data\n\teffect:SetOrigin( data.HitPos ) -- Set origin where collision point is\n\tutil.Effect( \"cball_bounce\", effect ) -- Spawn small sparky effect\nend\nmelon:AddCallback( \"PhysicsCollide\", PhysCallback ) -- Add Callback"}],"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Activate","parent":"Entity","type":"classfunc","description":{"text":"Activates the entity. This needs to be used on some entities (like constraints) after being spawned.","note":"For some entity types when this function is used after Entity:SetModelScale, the physics object will be recreated with the new scale. [Source-sdk-2013](https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/server/baseanimating.cpp#L321-L327).\n\nCalling this method after Entity:SetModelScale will recreate a new scaled `SOLID_VPHYSICS` PhysObj on scripted entities. This can be a problem if you made a properly scaled PhysObj of another kind (using Entity:PhysicsInitSphere for instance) or if you edited the PhysObj's properties. This is especially the behavior of the Sandbox spawn menu.","bug":{"text":"This crashes the game with scaled vehicles.","issue":"3372"}},"realm":"Shared"},"example":{"description":"Spawns a `sent_ball` on the player.","code":"function ENT:SpawnMe(ply)\n\tlocal ent = ents.Create(\"sent_ball\")\n\tent:SetPos( ply:GetPos() ) \n\tent:Spawn()\n\tent:Activate()\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"AddEFlags","parent":"Entity","type":"classfunc","description":"Adds engine flags.","realm":"Shared","args":{"arg":{"text":"Engine flag to add, see Enums/EFL","name":"flag","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"AddEffects","parent":"Entity","type":"classfunc","description":"Applies an engine effect to an entity.\n\nSee also Entity:IsEffectActive and  Entity:RemoveEffects.","realm":"Shared","args":{"arg":{"text":"The effect to apply, see Enums/EF.","name":"effect","type":"number"}}},"example":{"description":"Adds a blinking effect to an entity.","code":"Entity:AddEffects( EF_ITEM_BLINK )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"AddGestureSequence","parent":"Entity","type":"classfunc","description":{"text":"Adds a gesture animation to the entity and plays it.\n\n\nSee Entity:AddGesture for a function that takes Enums/ACT.\n\n\nSee also Entity:AddLayeredSequence.","note":"This function only works on BaseAnimatingOverlay entites!"},"realm":"Server","args":{"arg":[{"text":"The sequence ID to play as the gesture. See Entity:LookupSequence.","name":"sequence","type":"number"},{"name":"autokill","type":"boolean","default":"true"}]},"rets":{"ret":{"text":"Layer ID of the started gesture, used to manipulate the played gesture by other functions.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"AddFlags","parent":"Entity","type":"classfunc","description":"Adds flags to the entity.","realm":"Shared","args":{"arg":{"text":"Flag to add, see Enums/FL","name":"flag","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"AddLayeredSequence","parent":"Entity","type":"classfunc","description":{"text":"Adds a gesture animation to the entity and plays it.\n\n\nSee Entity:AddGestureSequence for a function that doesn't take priority.\n\n\nSee Entity:AddGesture for a function that takes Enums/ACT.","note":"This function only works on BaseAnimatingOverlay entites!"},"realm":"Server","args":{"arg":[{"text":"The sequence ID to play as the gesture. See Entity:LookupSequence.","name":"sequence","type":"number"},{"name":"priority","type":"number"}]},"rets":{"ret":{"text":"Layer ID of created layer","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"AddGesture","parent":"Entity","type":"classfunc","description":{"text":"Adds a gesture animation to the entity and plays it.\n\n\nSee Entity:AddGestureSequence and Entity:AddLayeredSequence for functions that takes sequences instead of Enums/ACT.","note":"This function only works on BaseAnimatingOverlay entites!"},"realm":"Server","args":{"arg":[{"text":"The activity to play as the gesture. See Enums/ACT.","name":"activity","type":"number"},{"name":"autokill","type":"boolean","default":"true"}]},"rets":{"ret":{"text":"Layer ID of the started gesture, used to manipulate the played gesture by other functions.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"AddToMotionController","parent":"Entity","type":"classfunc","description":{"text":"Adds a PhysObject to the entity's motion controller so that ENTITY:PhysicsSimulate will be called for given PhysObject as well.\n\nYou must first create a motion controller with Entity:StartMotionController.\n\nYou can remove added PhysObjects by using Entity:RemoveFromMotionController.","note":"Only works on a scripted Entity of anim type"},"realm":"Shared","args":{"arg":{"text":"The PhysObj to add to the motion controller.","name":"physObj","type":"PhysObj"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"AlignAngles","parent":"Entity","type":"classfunc","description":{"text":"Returns an angle based on the ones inputted that you can use to align an object.","note":"This function doesn't change the angle of the entity on its own (see example)."},"realm":"Shared","args":{"arg":[{"text":"The angle you want to align from","name":"from","type":"Angle"},{"text":"The angle you want to align to","name":"to","type":"Angle"}]},"rets":{"ret":{"text":"The resulting aligned angle","name":"","type":"Angle"}}},"example":{"description":"This example will make ent1 face up from ent2.","code":"ent1:SetAngles(ent1:AlignAngles(ent1:GetForward():Angle(), ent2:GetUp():Angle()))","output":"Sets ent1's angle to one where ent1 faces up from ent2."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"AddSolidFlags","parent":"Entity","type":"classfunc","description":"Adds solid flag(s) to the entity.","realm":"Shared","args":{"arg":{"text":"The flag(s) to apply, see Enums/FSOLID.","name":"flags","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"BecomeRagdollOnClient","parent":"Entity","type":"classfunc","description":"Spawns a clientside ragdoll for the entity, positioning it in place of the original entity, and makes the entity invisible. It doesn't preserve flex values (face posing) as CSRagdolls don't support flex.\n\nIt does not work on players. Use Player:CreateRagdoll instead.\n\nThe original entity is not removed, and neither are any ragdolls previously generated with this function.\n\nTo make the entity re-appear, run Entity:SetNoDraw( false )","realm":"Client","rets":{"ret":{"text":"The created ragdoll. (class C_ClientRagdoll])","name":"","type":"Entity"}}},"example":{"description":"Spawns a ragdoll for all NPCs.","code":"for i, npc in ipairs( ents.FindByClass( \"npc_*\" ) ) do\n    npc.RagDoll = npc:BecomeRagdollOnClient()\nend"},"realms":["Client"],"type":"Function"},
{"function":{"name":"BeingLookedAtByLocalPlayer","parent":"Entity","type":"classfunc","description":{"text":"Returns true if the entity is being looked at by the local player and is within 256 units of distance.","note":"This function is only available in entities that are based off of sandbox's base_gmodentity."},"realm":"Client","file":{"text":"gamemodes/sandbox/entities/entities/base_gmodentity.lua","line":"10-L35"},"rets":{"ret":{"text":"Is the entity being looked at by the local player and within 256 units.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Blocked","parent":"Entity","type":"classfunc","description":{"text":"Dispatches blocked events to this entity's blocked handler. This function is only useful when interacting with entities like func_movelinear.","internal":""},"realm":"Server","args":{"arg":{"text":"The entity that is blocking us","name":"entity","type":"Entity"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"BodyTarget","parent":"Entity","type":"classfunc","description":{"text":"Returns a centered vector of this entity, NPCs use this internally to aim at their targets.","note":"This only works on players and NPCs."},"realm":"Server","args":{"arg":[{"text":"The vector of where the the attack comes from.","name":"origin","type":"Vector"},{"text":"Decides if it should return the centered vector with a random offset to it.","name":"noisy","type":"boolean","default":"false"}]},"rets":{"ret":{"text":"The centered vector.","name":"","type":"Vector"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"BoneHasFlag","parent":"Entity","type":"classfunc","description":"Returns whether the entity's bone has the flag or not.","realm":"Shared","args":{"arg":[{"text":"Bone ID to test flag of.","name":"boneID","type":"number"},{"text":"The flag to test, see Enums/BONE","name":"flag","type":"number"}]},"rets":{"ret":{"text":"Whether the bone has that flag or not","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"BoundingRadius","parent":"Entity","type":"classfunc","description":"Returns the distance between the center of the bounding box and the furthest bounding box corner.","realm":"Shared","rets":{"ret":{"text":"The radius of the bounding box.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"CallOnRemove","parent":"Entity","type":"classfunc","description":{"text":"Causes a specified function to be run if the entity is removed by any means. This can later be undone by Entity:RemoveCallOnRemove if you need it to not run.","bug":[{"text":"This hook is called during clientside full updates. See ENTITY:OnRemove#clientsidebehaviourremarks for more information.","issue":"4675"},{"text":"Using players with this function will provide a gimped entity to the callback.","pull":"1275"}]},"realm":"Shared","file":{"text":"lua/includes/extensions/entity.lua","line":"96-L108"},"args":{"arg":[{"text":"Identifier of the function within CallOnRemove","name":"identifier","type":"string"},{"text":"Function to be called on remove","name":"removeFunc","type":"function"},{"text":"Optional arguments to pass to removeFunc. Do note that the first argument passed to the function will always be the entity being removed, and the arguments passed on here start after that.","name":"argn...","type":"vararg"}]}},"example":{"description":"Stops an engine sound when the entity is removed","code":"Entity:CallOnRemove(\"StopEngineSound\",function(ent) ent:StopSound( \"enginenoise.wav\" ) end)"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"BoneLength","parent":"Entity","type":"classfunc","description":"Returns the length between given bone's position and the position of given bone's parent.","realm":"Shared","args":{"arg":{"text":"The ID of the bone you want the length of. You may want to get the length of the next bone ( boneID + 1 ) for decent results","name":"boneID","type":"number"}},"rets":{"ret":{"text":"The length of the bone","name":"","type":"number"}}},"example":{"description":"Returns first bones length of first player on the server","code":"print( Entity( 1 ):BoneLength( 1 ) )","output":"Returns 0"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ClearPoseParameters","parent":"Entity","type":"classfunc","description":"Resets all pose parameters such as aim_yaw, aim_pitch and rotation.","realm":"Shared"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"CollisionRulesChanged","parent":"Entity","type":"classfunc","description":{"text":"Declares that the collision rules of the entity have changed, and subsequent calls for GM:ShouldCollide with this entity may return a different value than they did previously.","warning":["This function must **not** be called inside of GM:ShouldCollide. Instead, it must be called in advance when the condition is known to change.","Failure to use this function correctly will result in a crash of the physics engine."]},"realm":"Shared"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"CreatedByMap","parent":"Entity","type":"classfunc","description":"Returns whether the entity was created by map or not.","realm":"Server","rets":{"ret":{"text":"Is created by map?","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"CreateBoneFollowers","parent":"Entity","type":"classfunc","description":{"text":"Creates bone followers based on the current entity model.\n\nBone followers are physics objects that follow the visual mesh. This is what is used by `prop_dynamic` for things like big combine doors for vehicles with multiple physics objects which follow the visual mesh of the door when it animates.\n\nYou must call Entity:UpdateBoneFollowers every tick for bone followers to update their positions.","note":"This function only works on `anim` type entities."},"realm":"Server","added":"2021.01.27"},"realms":["Server"],"type":"Function"},
{"function":{"name":"CreateParticleEffect","parent":"Entity","type":"classfunc","description":{"text":"Creates a clientside particle system attached to the entity. See also Global.CreateParticleSystem","note":"The particle effect must be precached with Global.PrecacheParticleSystem and the file its from must be added via game.AddParticles before it can be used!"},"realm":"Client","args":{"arg":[{"text":"The particle name to create","name":"particle","type":"string"},{"text":"Attachment ID to attach the particle to","name":"attachment","type":"number"},{"text":"A table of tables ( IDs 1 to 64 ) having the following structure:\n* number attachtype - The particle attach type. See . **Default:** PATTACH_ABSORIGIN\n* Entity entity - The parent entity? **Default:** NULL\n* Vector position - The offset position for given control point. **Default:**  nil\n\nThis only affects the control points of the particle effects and will do nothing if the effect doesn't use control points.","name":"options","type":"table","default":"nil","page":",PATTACHEnums/PATTACH"}]},"rets":{"ret":{"text":"The created particle system.","name":"","type":"CNewParticleEffect"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"CreateShadow","parent":"Entity","type":"classfunc","description":"Draws the shadow of an entity.","realm":"Client"},"example":{"code":"function ENT:Draw()\n self:DrawModel()\n self:CreateShadow()\nend","output":"Draws the shadow of an entity"},"realms":["Client"],"type":"Function"},
{"function":{"name":"DeleteOnRemove","parent":"Entity","type":"classfunc","description":"Whenever the entity is removed, entityToRemove will be removed also.","realm":"Server","args":{"arg":{"text":"The entity to be removed","name":"entityToRemove","type":"Entity"}}},"example":{"description":"Creates a second chair in spawned jeeps that is removed when the jeep is removed","code":"hook.Add(\"PlayerSpawnedVehicle\", \"VehicleUpgrade\", function(ply,vehicle)\n\tif vehicle:GetClass() == \"prop_vehicle_jeep\" then\n\t\tlocal seat = ents.Create( 'prop_vehicle_prisoner_pod' )\n\t\tseat:SetModel( \"models/nova/jeep_seat.mdl\" )\n\t\tseat:SetPos( vehicle:LocalToWorld(Vector(21,-32,18)) )\n\t\tseat:SetAngles( vehicle:LocalToWorldAngles(Angle(0,-3.5,0)) )\n\t\tseat:Spawn()\n\t\tseat:SetKeyValue( \"limitview\", 0 )\n\t\ttable.Merge( seat, { HandleAnimation = function(_,ply) return ply:SelectWeightedSequence( ACT_HL2MP_SIT ) end } )\n\t\tgamemode.Call( \"PlayerSpawnedVehicle\", ply, seat )\n\t\tvehicle.PassengerSeat = seat\n\t\tvehicle:DeleteOnRemove(seat) //<--\n\t\tconstraint.Weld(seat, vehicle)\n\tend\nend)"},"realms":["Server"],"type":"Function"},
{"function":{"name":"DestroyBoneFollowers","parent":"Entity","type":"classfunc","description":{"text":"Destroys bone followers created by Entity:CreateBoneFollowers.","note":"This function only works on `anim` type entities."},"realm":"Server","added":"2021.01.27"},"realms":["Server"],"type":"Function"},
{"function":{"name":"DestroyShadow","parent":"Entity","type":"classfunc","description":{"text":"Removes the shadow for the entity.\n\nThe shadow will be recreated as soon as the entity wakes.","note":"Doesn't affect shadows from flashlight/lamps/env_projectedtexture."},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"DisableMatrix","parent":"Entity","type":"classfunc","description":"Disables an active matrix.","realm":"Client","args":{"arg":{"text":"The name of the matrix type to disable.\n\n\n\n\nThe only known matrix type is \"RenderMultiply\".","name":"matrixType","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"DispatchTraceAttack","parent":"Entity","type":"classfunc","description":{"text":"Performs a trace attack.","warning":"Calling this function on the victim entity in ENTITY:OnTakeDamage can cause infinite loops."},"realm":"Shared","args":{"arg":[{"text":"The damage to apply.","name":"damageInfo","type":"CTakeDamageInfo"},{"text":"Trace result to use to deal damage. See Structures/TraceResult","name":"traceRes","type":"table"},{"text":"Direction of the attack.","name":"dir","type":"Vector","default":"traceRes.HitNormal"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"DrawModel","parent":"Entity","type":"classfunc","description":{"text":"Draws the entity or model.\n\nIf called inside ENTITY:Draw or ENTITY:DrawTranslucent, it only draws the entity's model itself.\n\nIf called outside of those hooks, it will call both of said hooks depending on Entity:GetRenderGroup, drawing the entire entity again.","note":"When drawing an entity more than once per frame in different positions, you should call Entity:SetupBones before each draw; Otherwise, the entity will retain its first drawn position.","rendercontext":{"hook":"false","type":"3D"},"bug":[{"text":"Calling this on entities with  and  applied causes a crash.","issue":"1558","page":[",EF_BONEMERGEEnums/EF",",EF_NODRAWEnums/EF"]},{"text":"Using this with a map model (game.GetWorld():()) crashes the game.","issue":"2688","page":",GetModelEntity:GetModel"}]},"args":{"arg":{"text":"The optional  flags, usually taken from ENTITY:Draw and similar hooks.","name":"flags","type":"number","default":"STUDIO_RENDER","page":",STUDIO_Enums/STUDIO"}},"realm":"Client"},"example":{"description":"Manually draws a single Global.ClientsideModel on the specified bone, on the given offset for every player affected by this hook.\n\nThis is useful in case you want to reuse a single model without having to create one for each player.","code":"local modelexample = ClientsideModel( \"models/thrusters/jetpack.mdl\" )\nmodelexample:SetNoDraw( true )\n\nlocal offsetvec = Vector( 3, -5.6, 0 )\nlocal offsetang = Angle( 180, 90, -90 )\n\nhook.Add( \"PostPlayerDraw\" , \"manual_model_draw_example\" , function( ply )\n\tlocal boneid = ply:LookupBone( \"ValveBiped.Bip01_Spine2\" )\n\t\n\tif not boneid then\n\t\treturn\n\tend\n\t\n\tlocal matrix = ply:GetBoneMatrix( boneid )\n\t\n\tif not matrix then \n\t\treturn \n\tend\n\t\n\tlocal newpos, newang = LocalToWorld( offsetvec, offsetang, matrix:GetTranslation(), matrix:GetAngles() )\n\t\n\tmodelexample:SetPos( newpos )\n\tmodelexample:SetAngles( newang )\n\tmodelexample:SetupBones()\n\tmodelexample:DrawModel()\nend)","output":{"image":{"src":"entity_drawmodel_example.png"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"DrawShadow","parent":"Entity","type":"classfunc","description":"Sets whether an entity's shadow should be drawn.","realm":"Shared","args":{"arg":{"text":"True to enable, false to disable shadow drawing.","name":"shouldDraw","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"DropToFloor","parent":"Entity","type":"classfunc","description":{"text":"Move an entity down until it collides with something.","warning":"The entity needs to already have something below it within 256 units."},"realm":"Server"},"example":[{"description":"Move all props on the server down until they collide with something.","code":"for _, ent in ipairs( ents.FindByClass( \"prop_physics\" ) ) do\n\tent:DropToFloor()\nend"},{"description":"Drops players to the ground when they spawn.","code":"hook.Add( \"PlayerSpawn\", \"DropGround\", function( ply )\n\tply:DropToFloor()\nend )"}],"realms":["Server"],"type":"Function"},
{"function":{"name":"DontDeleteOnRemove","parent":"Entity","type":"classfunc","description":"This removes the argument entity from an ent's list of entities to 'delete on remove'","realm":"Server","args":{"arg":{"text":"The entity to be removed from the list of entities to delete","name":"entityToUnremove","type":"Entity"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"DTVar","parent":"Entity","type":"classfunc","description":{"text":"Sets up a self.dt.NAME alias for a Data Table variable.","internal":{"text":"You should use Entity:NetworkVar instead","br":["",""]}},"realm":"Shared","args":{"arg":[{"text":"The type of the DTVar being set up. It can be one of the following: 'Int', 'Float', 'Vector', 'Angle', 'Bool', 'Entity' or 'String'","name":"Type","type":"string"},{"text":"The ID of the DTVar. Can be between 0 and 3 for strings, 0 and 31 for everything else.","name":"ID","type":"number"},{"text":"Name by which you will refer to DTVar. It must be a valid variable name. (No spaces!)","name":"Name","type":"string"}]}},"example":{"description":"Sets up two float networked variables, **TargetZ** and **Speed**","code":"function ENT:SetupDataTables()\n\n\tself:DTVar( \"Float\", 0, \"TargetZ\" )\n\tself:DTVar( \"Float\", 1, \"Speed\" )\n\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"EmitSound","parent":"Entity","type":"classfunc","description":{"text":"Plays a sound on an entity. If run clientside, the sound will only be heard locally.\n\nIf used on a player or NPC character with the mouth rigged, the character will \"lip-sync\". This does not work with all sound files.","note":"When using this function with weapons, use the Weapon itself as the entity, not its owner!","bug":{"text":"This does not respond to Global.SuppressHostEvents.","issue":"2651"}},"realm":"Shared","args":{"arg":[{"text":"The name of the sound to be played.","name":"soundName","type":"string","warning":"The string cannot have whitespace at the start or end. You can remove this with string.Trim."},{"text":"A modifier for the distance this sound will reach, acceptable range is 0 to 511. 100 means no adjustment to the level. See Enums/SNDLVL\n\nWill not work if a [sound script](https://developer.valvesoftware.com/wiki/Soundscripts) is used.","name":"soundLevel","type":"number","default":"75"},{"text":"The pitch applied to the sound. The acceptable range is from 0 to 255. 100 means the pitch is not changed.","name":"pitchPercent","type":"number","default":"100"},{"text":"The volume, from 0 to 1.","name":"volume","type":"number","default":"1"},{"text":"The sound channel, see Enums/CHAN.\n\nWill not work if a [sound script](https://developer.valvesoftware.com/wiki/Soundscripts) is used.","name":"channel","type":"number","default":"CHAN_AUTO, CHAN_WEAPON for weapons"},{"text":"The flags of the sound, see Enums/SND","name":"soundFlags","type":"number","default":"0"},{"text":"The DSP preset for this sound. [List of DSP presets](https://developer.valvesoftware.com/wiki/Dsp_presets)","name":"dsp","type":"number","default":"0"}]}},"example":{"description":"Plays sound from the first player on the server.","code":"Entity(1):EmitSound( \"garrysmod/save_load1.wav\", 75, 100, 1, CHAN_AUTO ) -- Same as below\nEntity(1):EmitSound( \"garrysmod/save_load1.wav\" ) -- You can remove the arguments that have default values.\n\nEntity(1):EmitSound( \"Weapon_AR2.Single\" )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"EnableCustomCollisions","parent":"Entity","type":"classfunc","description":"Flags an entity as using custom lua defined collisions. Fixes entities having spongy player collisions or not hitting traces, such as after Entity:PhysicsFromMesh\n\nInternally identical to `Entity:AddSolidFlags( bit.bor( FSOLID_CUSTOMRAYTEST, FSOLID_CUSTOMBOXTEST ) )`\n\nDo not confuse this function with Entity:SetCustomCollisionCheck, they are not the same.","realm":"Shared","args":{"arg":{"text":"True to flag this entity","name":"useCustom","type":"boolean"}}},"example":{"description":"Creates a mesh table, and assigns it as the entity's collisions","code":"function ENT:ProceduralPlatform()\n\tlocal VERTICES = {}\n\tfor x = 1, 32 do\n\t\tfor y = 1, 32 do\n\t\t\ttable.insert( VERTICES, { pos = ( self:GetPos() + Vector( 0, 0, 1 ) ) } )\n\t\t\ttable.insert( VERTICES, { pos = ( self:GetPos() + Vector( 0, y, 1 ) ) } )\n\t\t\ttable.insert( VERTICES, { pos = ( self:GetPos() + Vector( x, y, 1 ) ) } )\n\n\t\t\ttable.insert( VERTICES, { pos = ( self:GetPos() + Vector( 0, 0, 1 ) ) } )\n\t\t\ttable.insert( VERTICES, { pos = ( self:GetPos() + Vector( x, y, 1 ) ) } )\n\t\t\ttable.insert( VERTICES, { pos = ( self:GetPos() + Vector( x, 0, 1 ) ) } )\n\t\tend\n\tend\n\tself:PhysicsFromMesh( VERTICES )\n\tself:GetPhysicsObject():EnableMotion( false )\n\tself:EnableCustomCollisions( true )\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"EnableMatrix","parent":"Entity","type":"classfunc","description":{"text":"Can be used to apply a custom VMatrix to the entity, mostly used for scaling the model by a Vector.\n\nTo disable it, use Entity:DisableMatrix.\n\nIf your old scales are wrong due to a recent update, use Entity:SetLegacyTransform as a quick fix.","note":"The matrix can also be modified to apply a custom rotation and offset via the VMatrix:SetAngles and VMatrix:SetTranslation functions.","bug":[{"text":"This does not scale procedural bones.","issue":"3502"},{"text":"This disables inverse kinematics of an entity.","issue":"3502"}]},"realm":"Client","args":{"arg":[{"text":"The name of the matrix type. \nThe only implemented matrix type is \"RenderMultiply\".","name":"matrixType","type":"string","br":""},{"text":"The matrix to apply before drawing the entity.","name":"matrix","type":"VMatrix"}]}},"example":{"description":"To scale a prop's height by 4x","code":"local scale = Vector(1,1,4)\n\nlocal mat = Matrix()\nmat:Scale(scale)\nprop:EnableMatrix(\"RenderMultiply\", mat)"},"realms":["Client"],"type":"Function"},
{"function":{"name":"EntIndex","parent":"Entity","type":"classfunc","description":{"text":"Gets the unique entity index of an entity.","note":"Entity indices are marked as unused after deletion, and can be reused by newly-created entities"},"realm":"Shared","rets":{"ret":{"text":"The index of the entity.\n\n-1 for clientside-only or serverside-only entities.","name":"","type":"number"}}},"example":{"description":"Demonstrates the use of this function.","code":"print( player.GetAll()[1]:EntIndex() )","output":"1"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"EnableConstraints","parent":"Entity","type":"classfunc","description":"Toggles the constraints of this ragdoll entity on and off.","realm":"Server","args":{"arg":{"text":"Set to true to enable the constraints and false to disable them.\n\nDisabling constraints will delete the constraint entities.","name":"toggleConstraints","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Extinguish","parent":"Entity","type":"classfunc","description":"Extinguishes the entity if it is on fire.\n\nHas no effect if called inside GM:EntityTakeDamage (and the attacker is the flame that's hurting the entity)\n\nSee also Entity:Ignite.","realm":"Server"},"example":{"description":"Demonstrates the use of this function.","code":"Player(1):Extinguish()","output":"Extinguishes the first player if he is on fire."},"realms":["Server"],"type":"Function"},
{"function":{"name":"EyeAngles","parent":"Entity","type":"classfunc","description":{"text":"Returns the direction a player/npc/ragdoll is looking as a world-oriented angle.","bug":[{"text":"This can return an incorrect value in pods.","issue":"1150"},{"text":"This can return an incorrect value in jeeps when used with Player:EnterVehicle.","issue":"2620"}]},"realm":"Shared","rets":{"ret":{"text":"eyeAng","name":"","type":"Angle"}}},"example":{"description":"Print the local player's angles","code":"print(LocalPlayer():EyeAngles())","output":"When looking straight down, it might return Angle(89,-175.38,0)"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"EyePos","parent":"Entity","type":"classfunc","description":"Returns the position of an Player/NPC's view.","realm":"Shared","rets":{"ret":{"text":"View position of the entity.","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"FindBodygroupByName","parent":"Entity","type":"classfunc","description":"Searches for bodygroup with given name.","realm":"Shared","args":{"arg":{"text":"The bodygroup name to search for.","name":"name","type":"string"}},"rets":{"ret":{"text":"Bodygroup ID, -1 if not found","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"FindTransitionSequence","parent":"Entity","type":"classfunc","description":"Returns a transition from the given start and end sequence.\n\nThis function was only used by HL1 entities and NPCs, before the advent of sequence blending and gestures.","realm":"Shared","args":{"arg":[{"text":"The currently playing sequence","name":"currentSequence","type":"number"},{"text":"The goal sequence.","name":"goalSequence","type":"number"}]},"rets":{"ret":{"text":"The transition sequence, -1 if not available.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Fire","parent":"Entity","type":"classfunc","description":"Fires an entity's input, conforming to the map IO event queue system. You can find inputs for most entities on the [Valve Developer Wiki](https://developer.valvesoftware.com/wiki/Output)\n\nSee also Entity:Input for a function that bypasses the event queue and GM:AcceptInput.","realm":"Server","args":{"arg":[{"text":"The name of the input to fire","name":"input","type":"string"},{"text":"The value to give to the input, can also be a number or a boolean.","name":"param","type":"string","default":"nil"},{"text":"Delay in seconds before firing","name":"delay","type":"number","default":"0"},{"text":"The entity that caused this input (i.e. the player who pushed a button)","name":"activator","type":"Entity","default":"nil"},{"text":"The entity that is triggering this input (i.e. the button that was pushed)","name":"caller","type":"Entity","default":"nil"}]}},"example":{"description":"If you are looking at a door, this will lock it","code":"// Entity(1) is considered a player in this example\nlocal tr = Entity( 1 ):GetEyeTrace()\nlocal ent = tr.Entity\nif IsValid( ent ) then\n\tent:Fire(\"Lock\")\nend"},"realms":["Server"],"type":"Function"},
{"function":{"name":"FireBullets","parent":"Entity","type":"classfunc","description":{"text":"Fires a bullet.\n\nWhen used in a  hook such as WEAPON:Think or WEAPON:PrimaryAttack, it will use Player:LagCompensation internally.","note":"Lag compensation will not work if this function is called in a timer, regardless if the timer was made in a  hook."},"realm":"Shared","args":{"arg":[{"text":"The bullet data to be used. See the Structures/Bullet.","name":"bulletInfo","type":"table"},{"text":"Has the effect of encasing the FireBullets call in Global.SuppressHostEvents, only works in multiplayer.","name":"suppressHostEvents","type":"boolean","default":"false"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"FollowBone","parent":"Entity","type":"classfunc","description":{"text":"Makes an entity follow another entity's bone.\n\nInternally this function calls Entity:SetParent( parent, boneid ), Entity:AddEffects( EF_FOLLOWBONE \n ) and sets an internal flag to always rebuild all bones.","note":"If the entity vibrates or stops following the parent, you probably need to run Entity:SetPredictable( true ) clientside.","warning":"This function will not work if the target bone's parent bone is invalid or if the bone is not used by VERTEX LOD0"},"realm":"Shared","args":{"arg":[{"text":"The entity to follow the bone of. If unset, removes the FollowBone effect.","name":"parent","type":"Entity","default":"NULL"},{"text":"The bone to follow","name":"boneid","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ForcePlayerDrop","parent":"Entity","type":"classfunc","description":"Forces the Entity to be dropped, when it is being held by a player's gravitygun or physgun.","realm":"Shared"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"FrameAdvance","parent":"Entity","type":"classfunc","description":{"text":"Advances the cycle of an animated entity.\n\nAnimations that loop will automatically reset the cycle so you don't have to - ones that do not will stop animating once you reach the end of their sequence.","warning":"Do not call this function multiple times a frame, as it can cause unexpected results, such as animations playing at increased rate, etc.\n\nNextBot:BodyMoveXY calls this internally, so do not call this function before or after NextBot:BodyMoveXY."},"realm":"Shared"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetAbsVelocity","parent":"Entity","type":"classfunc","description":{"text":"Returns the entity's velocity.","note":"Actually binds to CBaseEntity::GetLocalVelocity() which retrieves the velocity of the entity due to its movement in the world from forces such as gravity. Does not include velocity from entity-on-entity collision."},"realm":"Shared","rets":{"ret":{"text":"The velocity of the entity.","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetAnimInfo","parent":"Entity","type":"classfunc","description":{"text":"Returns a table containing the number of frames, flags, name, and FPS of an entity's animation ID.","note":"Animation ID is not the same as sequence ID."},"realm":"Shared","args":{"arg":{"text":"The animation ID to look up","name":"animIndex","type":"number"}},"rets":{"ret":{"text":"Information about the animation, or nil if the index is out of bounds","name":"","type":"table"}}},"example":{"description":"A function that finds an entity sequence's corresponding animation and returns the animation info.","code":"function GetAnimInfoSequence( ent, seq )\n\n\tif( !IsValid( ent ) ) then return nil end\n\n\tlocal seqname = ent:GetSequenceName( seq )\n\t\n\tif( seqname == \"Unknown\" ) then return nil end\n\n\tlocal info = nil\n\tlocal done = ent:GetAnimInfo(0).label\t-- this is how we know when to stop\n\tlocal i = 1\n\n\t-- We don't want to increment too high or we will run into errors or possibly crashes\n\twhile(i < 1600) do    -- arbitrary failsafe\n\t\n\t\tinfo = ent:GetAnimInfo(i)\n\t\t\n\t\tif(string.find(info.label, \"@\"..seqname) or string.find(info.label, \"a_\"..seqname)) then\n\t\t\treturn info\n\t\tend\n\t\t\n\t\t-- the first animation info is repeated when there are no animations left in the model\n\t\tif(info.label == done) then break end\n\t\t\n\t\ti = i + 1\n\t\t\n\tend\n\n\treturn nil\n\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetAnimTime","parent":"Entity","type":"classfunc","description":"Returns the last time the entity had an animation update. Returns 0 if the entity doesn't animate.","realm":"Client","rets":{"ret":{"text":"The last time the entity had an animation update.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetAnimTimeInterval","parent":"Entity","type":"classfunc","description":"Returns the amount of time since last animation.\n\nWorks only on `CBaseAnimating` entities.","added":"2021.03.31","realm":"Shared","rets":{"ret":{"text":"The amount of time since last animation.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetAngles","parent":"Entity","type":"classfunc","description":{"text":"Gets the angles of given entity.","bug":[{"text":"This returns incorrect results for the local player clientside.","issue":"2764"},{"text":"This will return the local player's Global.EyeAngles in .","issue":"3106","page":",rendering hooksCategory:3D_Rendering_Hooks"},{"text":"This will return Global.Angle(0,0,0) in  while paused in single-player.","issue":"3107","page":",rendering hooksCategory:3D_Rendering_Hooks"}]},"realm":"Shared","rets":{"ret":{"text":"The angles of the entity.","name":"","type":"Angle"}}},"example":{"description":"Prints the 1st player's angles.","code":"print( Entity( 1 ):GetAngles() )","output":"Something like \"0.000 34.529 0.000\" in console."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetAttachment","parent":"Entity","type":"classfunc","description":{"text":"Gets the orientation and position of the attachment by its ID, returns nothing if the attachment does not exist.","note":"The update rate of this function is limited by the setting of ENT.AutomaticFrameAdvance for Scripted Entities!","bug":{"text":"This will return improper values for viewmodels if used in GM:CalcView.","issue":"1255"}},"realm":"Shared","args":{"arg":{"text":"The internal ID of the attachment.","name":"attachmentId","type":"number"}},"rets":{"ret":{"text":"The angle and position of the attachment. See the Structures/AngPos. Most notably, the table contains the keys \"Ang\" and \"Pos\".","name":"","type":"table"}}},"example":[{"description":"Grabs the muzzle position of a player's view model.","code":"local vm = ply:GetViewModel()\nlocal obj = vm:LookupAttachment( \"muzzle\" )\n\nif (obj < 1) then\n\tlocal muzzle = vm:GetAttachment( obj )\n\tprint( muzzle.Pos, muzzle.Ang )\nend"},{"description":"Draws a green cube at the player's view model muzzle if the model has a \"muzzle\" attachment. This properly translates the attachment into the view model projection space.","code":"-- FIXME: The nFOV parameter should be replaced with ViewModelFOV() when it's binded\nlocal function FormatViewModelAttachment(nFOV, vOrigin, bFrom --[[= false]])\n\tlocal vEyePos = EyePos()\n\tlocal aEyesRot = EyeAngles()\n\tlocal vOffset = vOrigin - vEyePos\n\tlocal vForward = aEyesRot:Forward()\n\n\tlocal nViewX = math.tan(nFOV * math.pi / 360)\n\n\tif (nViewX == 0) then\n\t\tvForward:Mul(vForward:Dot(vOffset))\n\t\tvEyePos:Add(vForward)\n\t\t\n\t\treturn vEyePos\n\tend\n\n\t-- FIXME: LocalPlayer():GetFOV() should be replaced with EyeFOV() when it's binded\n\tlocal nWorldX = math.tan(LocalPlayer():GetFOV() * math.pi / 360)\n\n\tif (nWorldX == 0) then\n\t\tvForward:Mul(vForward:Dot(vOffset))\n\t\tvEyePos:Add(vForward)\n\t\t\n\t\treturn vEyePos\n\tend\n\n\tlocal vRight = aEyesRot:Right()\n\tlocal vUp = aEyesRot:Up()\n\n\tif (bFrom) then\n\t\tlocal nFactor = nWorldX / nViewX\n\t\tvRight:Mul(vRight:Dot(vOffset) * nFactor)\n\t\tvUp:Mul(vUp:Dot(vOffset) * nFactor)\n\telse\n\t\tlocal nFactor = nViewX / nWorldX\n\t\tvRight:Mul(vRight:Dot(vOffset) * nFactor)\n\t\tvUp:Mul(vUp:Dot(vOffset) * nFactor)\n\tend\n\n\tvForward:Mul(vForward:Dot(vOffset))\n\n\tvEyePos:Add(vRight)\n\tvEyePos:Add(vUp)\n\tvEyePos:Add(vForward)\n\n\treturn vEyePos\nend\n\nSWEP.BoxAttachment = \"muzzle\"\nSWEP.BoxMins = Vector(-2, -2, -2)\nSWEP.BoxMaxs = Vector(2, 2, 2)\nSWEP.BoxColor = Color(0, 255, 0)\n\nfunction SWEP:ViewModelDrawn()\n\tlocal pOwner = self:GetOwner()\n\tif (not pOwner:IsValid()) then return end\n\n\tlocal pViewModel = pOwner:GetViewModel()\n\tif (not pViewModel:IsValid()) then return end\n\n\tlocal uAttachment = pViewModel:LookupAttachment(self.BoxAttachment)\n\tif (uAttachment < 1) then return end\n\n\tlocal tAttachment = pViewModel:GetAttachment(uAttachment)\n\tif (tAttachment == nil) then return end\n\n\t-- FIXME: This should be removed when ViewModelFOV() is binded\n\tlocal nFOV = self.ViewModelFOV\n\tif (not isnumber(nFOV)) then nFOV = 62 end\n\n\trender.DrawWireframeBox(FormatViewModelAttachment(nFOV, tAttachment.Pos, false), tAttachment.Ang, self.BoxMins, self.BoxMaxs, self.BoxColor, true)\nend"}],"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetAttachments","parent":"Entity","type":"classfunc","description":{"text":"Returns a table containing all attachments of the given entitys model.\n\nReturns an empty table or **nil** in case it's model has no attachments.","bug":{"text":"This can have inconsistent results in single-player.","issue":"3167"}},"realm":"Shared","rets":{"ret":{"text":"Attachment data. See Structures/AttachmentData.","name":"","type":"table"}}},"example":{"description":"All the attachments present on the Kliener player model","code":"PrintTable(LocalPlayer():GetAttachments())","output":"```\n1:\n\t\tid\t=\t1\n\t\tname\t=\teyes\n2:\n\t\tid\t=\t2\n\t\tname\t=\tlefteye\n3:\n\t\tid\t=\t3\n\t\tname\t=\trighteye\n4:\n\t\tid\t=\t4\n\t\tname\t=\tnose\n5:\n\t\tid\t=\t5\n\t\tname\t=\tmouth\n6:\n\t\tid\t=\t6\n\t\tname\t=\ttie\n7:\n\t\tid\t=\t7\n\t\tname\t=\tpen\n8:\n\t\tid\t=\t8\n\t\tname\t=\tchest\n9:\n\t\tid\t=\t9\n\t\tname\t=\thips\n10:\n\t\tid\t=\t10\n\t\tname\t=\tlefthand\n11:\n\t\tid\t=\t11\n\t\tname\t=\trighthand\n12:\n\t\tid\t=\t12\n\t\tname\t=\tforward\n13:\n\t\tid\t=\t13\n\t\tname\t=\tanim_attachment_RH\n14:\n\t\tid\t=\t14\n\t\tname\t=\tanim_attachment_LH\n15:\n\t\tid\t=\t15\n\t\tname\t=\tanim_attachment_head\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetBaseVelocity","parent":"Entity","type":"classfunc","description":"Returns the entity's base velocity which is their velocity due to forces applied by other entities. This includes entity-on-entity collision or riding a treadmill.","realm":"Shared","rets":{"ret":{"text":"The base velocity of the entity.","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetBodygroup","parent":"Entity","type":"classfunc","description":"Gets the exact value for specific bodygroup of given entity.","realm":"Shared","args":{"arg":{"text":"The id of bodygroup to get value of. Starts from 0.","name":"id","type":"number"}},"rets":{"ret":{"text":"Current bodygroup. Starts from 0.","name":"","type":"number"}}},"example":{"description":"Gets the value of bodygroup 2 of entity player 1 is aiming at.","code":"print( Entity(1):GetEyeTrace().Entity:GetBodygroup(2) )","output":"\"1\" in console, if player 1 is aiming at airboat."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetBloodColor","parent":"Entity","type":"classfunc","description":"Returns the blood color of this entity. This can be set with Entity:SetBloodColor.","realm":"Server","rets":{"ret":{"text":"Color from Enums/BLOOD_COLOR","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetBodygroupCount","parent":"Entity","type":"classfunc","description":"Returns the count of possible values for this bodygroup.\n\nThis is **not** the maximum value, since the bodygroups start with 0, not 1.","realm":"Shared","args":{"arg":{"text":"The ID of bodygroup to retrieve count of.","name":"bodygroup","type":"number"}},"rets":{"ret":{"text":"Count of values of passed bodygroup.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetBodygroupName","parent":"Entity","type":"classfunc","description":"Gets the name of specific bodygroup for given entity.","realm":"Shared","args":{"arg":{"text":"The id of bodygroup to get the name of.","name":"id","type":"number"}},"rets":{"ret":{"text":"The name of the bodygroup","name":"","type":"string"}}},"example":{"description":"Demonstrates the use of this function.","code":"print( Entity( 1 ):GetEyeTrace().Entity:GetBodygroupName( 1 ) )","output":"\"Weapon\" in console, if player 1 is aiming at airboat."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetBoneContents","parent":"Entity","type":"classfunc","description":"Returns the contents of the specified bone.","realm":"Shared","args":{"arg":{"text":"The bone id, starting at index 0. See Entity:LookupBone.","name":"bone","type":"number"}},"rets":{"ret":{"text":"The contents as a Enums/CONTENTS or 0 on failure.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetBodyGroups","parent":"Entity","type":"classfunc","description":"Returns a list of all bodygroups of the entity.","realm":"Shared","rets":{"ret":{"text":"Bodygroups as a table of Structures/BodyGroupDatas if the entity can have bodygroups.","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetBoneController","parent":"Entity","type":"classfunc","description":{"text":"Returns the value of the bone controller with the specified ID.","note":"This is the precursor of pose parameters, and only works for Half Life 1: Source models supporting it."},"realm":"Shared","args":{"arg":{"text":"ID of the bone controller. Goes from 0 to 3.","name":"boneID","type":"number"}},"rets":{"ret":{"text":"The value set on the bone controller.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetBoneCount","parent":"Entity","type":"classfunc","description":{"text":"Returns the amount of bones in the entity.","note":"Will return -1 for Global.ClientsideModel or undrawn entities until Entity:SetupBones is called on the entity."},"realm":"Shared","rets":{"ret":{"text":"The amount of bones in given entity; -1 on failure.","name":"","type":"number"}}},"example":{"description":"Prints amount of bones in player 1","code":"print( Entity(1):GetBoneCount() )","output":"The amount of bones in player 1, which normally would be 68."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetBoneName","parent":"Entity","type":"classfunc","description":"Returns name of given bone id.","realm":"Shared","args":{"arg":{"text":"ID of bone to lookup name of, starting at index 0.","name":"index","type":"number"}},"rets":{"ret":{"text":"The name of given bone.\n\n* `nil` in case we failed or entity doesn't have a model.\n* `__INVALIDBONE__` in case the name cannot be read or the index is out of range.","name":"","type":"string"}}},"example":[{"description":"Will print name of bone name with id 0 for first player.","code":"print( Entity( 1 ):GetBoneName( 0 ) )","output":"```\nValveBiped.Bip01_Pelvis\n```"},{"description":"Prints all the bones of an entity.","code":"function PrintBones( entity )\n    for i = 0, entity:GetBoneCount() - 1 do\n        print( i, entity:GetBoneName( i ) )\n    end\nend","output":"```\n0\tValveBiped.Bip01_Pelvis\n1\tValveBiped.Bip01_Spine\n2\tValveBiped.Bip01_Spine1\n3\tValveBiped.Bip01_Spine2\n4\tValveBiped.Bip01_Spine4\n5\tValveBiped.Bip01_Neck1\n6\tValveBiped.Bip01_Head1\n7\tValveBiped.forward\n8\tValveBiped.Bip01_R_Clavicle\n9\tValveBiped.Bip01_R_UpperArm\n10\tValveBiped.Bip01_R_Forearm\n11\tValveBiped.Bip01_R_Hand\n12\tValveBiped.Anim_Attachment_RH\n13\tValveBiped.Bip01_L_Clavicle\n14\tValveBiped.Bip01_L_UpperArm\n15\tValveBiped.Bip01_L_Forearm\n16\tValveBiped.Bip01_L_Hand\n17\tValveBiped.Anim_Attachment_LH\n18\tValveBiped.Bip01_R_Thigh\n19\tValveBiped.Bip01_R_Calf\n20\tValveBiped.Bip01_R_Foot\n21\tValveBiped.Bip01_R_Toe0\n22\tValveBiped.Bip01_L_Thigh\n23\tValveBiped.Bip01_L_Calf\n24\tValveBiped.Bip01_L_Foot\n25\tValveBiped.Bip01_L_Toe0\n26\tValveBiped.Bip01_L_Finger4\n27\tValveBiped.Bip01_L_Finger41\n28\tValveBiped.Bip01_L_Finger42\n29\tValveBiped.Bip01_L_Finger3\n30\tValveBiped.Bip01_L_Finger31\n31\tValveBiped.Bip01_L_Finger32\n32\tValveBiped.Bip01_L_Finger2\n33\tValveBiped.Bip01_L_Finger21\n34\tValveBiped.Bip01_L_Finger22\n35\tValveBiped.Bip01_L_Finger1\n36\tValveBiped.Bip01_L_Finger11\n37\tValveBiped.Bip01_L_Finger12\n38\tValveBiped.Bip01_L_Finger0\n39\tValveBiped.Bip01_L_Finger01\n40\tValveBiped.Bip01_L_Finger02\n41\tValveBiped.Bip01_R_Finger4\n42\tValveBiped.Bip01_R_Finger41\n43\tValveBiped.Bip01_R_Finger42\n44\tValveBiped.Bip01_R_Finger3\n45\tValveBiped.Bip01_R_Finger31\n46\tValveBiped.Bip01_R_Finger32\n47\tValveBiped.Bip01_R_Finger2\n48\tValveBiped.Bip01_R_Finger21\n49\tValveBiped.Bip01_R_Finger22\n50\tValveBiped.Bip01_R_Finger1\n51\tValveBiped.Bip01_R_Finger11\n52\tValveBiped.Bip01_R_Finger12\n53\tValveBiped.Bip01_R_Finger0\n54\tValveBiped.Bip01_R_Finger01\n55\tValveBiped.Bip01_R_Finger02\n56\tValveBiped.Bip01_L_Elbow\n57\tValveBiped.Bip01_L_Ulna\n58\tValveBiped.Bip01_R_Ulna\n59\tValveBiped.Bip01_R_Shoulder\n60\tValveBiped.Bip01_L_Shoulder\n61\tValveBiped.Bip01_R_Trapezius\n62\tValveBiped.Bip01_R_Wrist\n63\tValveBiped.Bip01_R_Bicep\n64\tValveBiped.Bip01_L_Bicep\n65\tValveBiped.Bip01_L_Trapezius\n66\tValveBiped.Bip01_L_Wrist\n67\tValveBiped.Bip01_R_Elbow\n```"}],"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetBoneParent","parent":"Entity","type":"classfunc","description":{"text":"Returns parent bone of given bone.","note":"Will return -1 for Global.ClientsideModel until Entity:SetupBones is called on the entity."},"realm":"Shared","args":{"arg":{"text":"The bode ID of the bone to get parent of, starting at index 0.","name":"bone","type":"number"}},"rets":{"ret":{"text":"Parent bone ID or -1 if we failed for some reason.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetBoneMatrix","parent":"Entity","type":"classfunc","description":{"text":"Returns the transformation matrix of a given bone on the entity's model. The matrix contains the transformation used to position the bone in the world. It is not relative to the parent bone.\n\nThis is equivalent to constructing a VMatrix using Entity:GetBonePosition.","bug":[{"text":"This can return the server's matrix during server lag.","issue":"884"},{"text":"This can return garbage serverside or a 0,0,0 fourth column (represents position) for v49 models.","issue":"3285"}]},"realm":"Shared","args":{"arg":{"text":"The bone ID to retrieve matrix of, starting at index 0.\n* Bones clientside and serverside will differ","name":"boneID","type":"number"}},"rets":{"ret":{"text":"The matrix\n\n* Some entities don't update animation every frame such as prop_physics and won't have accurate bone matrix.","name":"","type":"VMatrix"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetBoneSurfaceProp","parent":"Entity","type":"classfunc","description":"Returns the surface property of the specified bone.","realm":"Shared","args":{"arg":{"text":"The bone id, starting at index 0. See Entity:LookupBone.","name":"bone","type":"number"}},"rets":{"ret":{"text":"The surface property of the bone to be used with util.GetSurfaceIndex or an empty string on failure.","name":"","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetBrushPlaneCount","parent":"Entity","type":"classfunc","description":"Returns the amount of planes of non-nodraw brush model surfaces of the entity's model.","realm":"Shared","rets":{"ret":{"text":"The amount of brush model planes of the entity's model. This will be 0 for any non-brush model.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetBrushPlane","parent":"Entity","type":"classfunc","description":{"text":"Returns info about given plane of non-nodraw brush model surfaces of the entity's model. Works on worldspawn as well.","warning":"This only works on entities with brush models."},"realm":"Shared","args":{"arg":{"text":"The index of the plane to get info of. Starts from 0.","name":"id","type":"number"}},"rets":{"ret":[{"text":"The origin of the plane.\n\nThis will be either the first vertex's position (if available) or the plane's normal multiplied by the plane's distance.","name":"","type":"Vector"},{"text":"The normal of the plane.","name":"","type":"Vector"},{"text":"The \"distance\" of the plane.\n\nThe distance is the dot product of the plane's normal and the point it was initialized with.","name":"","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetBonePosition","parent":"Entity","type":"classfunc","description":{"text":"Returns the position and angle of the given attachment, relative to the world.","warning":"This function can return entity's `GetPos()` instead if the entity doesn't have it's bone cache set up.\n\nTo ensure the bone position is correct use this:\n```lua\nlocal pos = ent:GetBonePosition(0)\nif pos == ent:GetPos() then\n\tpos = ent:GetBoneMatrix(0):GetTranslation()\nend\n```","note":"This function returns the bone position from the last tick, so if your framerate is higher than the server's tickrate it may appear to lag behind if used on a fast moving entity. You can fix this by using the bone's matrix instead:\n```lua\nlocal matrix = entity:GetBoneMatrix(0)\nlocal pos = matrix:GetTranslation()\nlocal ang = matrix:GetAngles()\n```","bug":[{"text":"This can return the server's position during server lag.","issue":"884"},{"text":"This can return garbage serverside or Global.Vector(0,0,0) for v49 models.","issue":"3285"},{"text":"This can return garbage if a trace passed through the target bone during bone matrix access.","issue":"3739"}]},"realm":"Shared","args":{"arg":{"text":"The bone index of the bone to get the position of, starting at index 0. See Entity:LookupBone.","name":"boneIndex","type":"number"}},"rets":{"ret":[{"text":"The bone's position relative to the world. It can return nothing if the requested bone is out of bounds, or the entity has no model.","name":"","type":"Vector"},{"text":"The bone's angle relative to the world.","name":"","type":"Angle"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetBrushSurfaces","parent":"Entity","type":"classfunc","description":"Returns a table of brushes surfaces for brush model entities.","realm":"Shared","rets":{"ret":{"text":"Table of SurfaceInfos if the entity has a brush model, or no value otherwise.","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetChildBones","parent":"Entity","type":"classfunc","description":"Returns ids of child bones of given bone.","realm":"Shared","file":{"text":"lua/includes/extensions/entity.lua","line":"153-L167"},"args":{"arg":{"text":"Bone id to lookup children of","name":"boneid","type":"number"}},"rets":{"ret":{"text":"A table of bone ids","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetCallbacks","parent":"Entity","type":"classfunc","description":"Returns the specified hook callbacks for this entity added with Entity:AddCallback\n\nThe callbacks can then be removed with Entity:RemoveCallback.","realm":"Shared","args":{"arg":{"text":"The hook to retrieve the callbacks from, see Entity Callbacks for the possible hooks.","name":"hook","type":"string"}},"rets":{"ret":{"text":"A table containing the callbackid and function of all the callbacks for the specified hook","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetChildren","parent":"Entity","type":"classfunc","description":{"text":"Gets the children of the entity - that is, every entity whose move parent is this entity.","note":"This function returns Entity:SetMoveParent children, **NOT** Entity:SetParent!\n\nEntity:SetParent however also calls Entity:SetMoveParent.\n\n\n\nThis means that some entities in the returned list might have a NULL Entity:GetParent.\n\nThis also means that using this function on players will return their weapons on the client but not the server."},"realm":"Shared","rets":{"ret":{"text":"A list of movement children entities","name":"","type":"table"}}},"example":{"description":"Example usage and output","code":"-- ent is a prop_effect entity\nPrintTable( ent:GetChildren() )","output":"```\n1\t=\tEntity [184][prop_dynamic]\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetClass","parent":"Entity","type":"classfunc","description":"Returns the classname of a entity. This is often the name of the Lua file or folder containing the files for the entity","realm":"Shared","rets":{"ret":{"text":"The entity's classname","name":"","type":"string"}}},"example":{"description":"Prints the classname of the weapon that the player is holding.","code":"print( LocalPlayer( ):GetActiveWeapon( ):GetClass( ) )","output":"Prints the classname of the weapon that the player is holding. (ie weapon_crowbar)"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetCollisionBounds","parent":"Entity","type":"classfunc","description":{"text":"Returns an entity's collision bounding box. In most cases, this will return the same bounding box as Entity:GetModelBounds unless the entity does not have a physics mesh or it has a PhysObj different from the default.","bug":{"text":"This can be out-of-sync between the client and server for weapons.","issue":"223"}},"realm":"Shared","rets":{"ret":[{"text":"The minimum vector of the collision bounds","name":"","type":"Vector"},{"text":"The maximum vector of the collision bounds","name":"","type":"Vector"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetCollisionGroup","parent":"Entity","type":"classfunc","description":"Returns the entity's collision group","realm":"Shared","rets":{"ret":{"text":"The collision group. See Enums/COLLISION_GROUP","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetColor","parent":"Entity","type":"classfunc","description":{"text":"Returns the color the entity is set to.","bug":{"text":"The returned color will not have the color metatable.","issue":"2407"}},"realm":"Shared","rets":{"ret":{"text":"The color of the entity as a Color.","name":"","type":"table"}}},"example":{"code":"for key, ply in ipairs( player.GetAll() ) do -- Loop through all players on the server\n\tlocal col = ply:GetColor() -- Gets the players color and assigns it to local variable col\n \n\tprint( \"Printing \" .. ply:Nick() .. \"'s color!\" ) -- Say we are printing the players name's color\n\tPrintTable( col ) -- Pass col into PrintTable to print to contents of col\nend","output":"Loop through all players, and print their color."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetCreationID","parent":"Entity","type":"classfunc","description":"Returns entity's creation ID. Unlike Entity:EntIndex or  Entity:MapCreationID, it will always increase and old values won't be reused.","realm":"Server","rets":{"ret":{"text":"The creation ID","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetConstrainedEntities","parent":"Entity","type":"classfunc","description":"Returns the two entities involved in a constraint ent, or nil if the entity is not a constraint.","realm":"Server","rets":{"ret":[{"text":"ent1","name":"","type":"Entity"},{"text":"ent2","name":"","type":"Entity"}]}},"example":{"description":"From gmsave/constraints.lua","code":"function gmsave.ConstraintSave( ent )\n\tlocal t = {}\n\tt.EntOne, t.EntTwo = ent:GetConstrainedEntities()\n\tlocal PhysA, PhysB = ent:GetConstrainedPhysObjects()\n\n\tt.BoneOne = GetPhysicsObjectNum( t.EntOne, PhysA )\n\tt.BoneTwo = GetPhysicsObjectNum( t.EntTwo, PhysB )\n\tt.EntOne = gmsave.EntityEncode( t.EntOne )\n\tt.EntTwo = gmsave.EntityEncode( t.EntTwo )\n\treturn t\n\nend"},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetConstrainedPhysObjects","parent":"Entity","type":"classfunc","description":"Returns the two entities physobjects involved in a constraint ent, or no value if the entity is not a constraint.","realm":"Server","rets":{"ret":[{"text":"phys1","name":"","type":"PhysObj"},{"text":"phys2","name":"","type":"PhysObj"}]}},"example":{"description":"From gmsave/constraints.lua","code":"function gmsave.ConstraintSave( ent )\n\tlocal t = {}\n\tt.EntOne, t.EntTwo = ent:GetConstrainedEntities()\n\tlocal PhysA, PhysB = ent:GetConstrainedPhysObjects()\n\n\tt.BoneOne = GetPhysicsObjectNum( t.EntOne, PhysA )\n\tt.BoneTwo = GetPhysicsObjectNum( t.EntTwo, PhysB )\n\tt.EntOne = gmsave.EntityEncode( t.EntOne )\n\tt.EntTwo = gmsave.EntityEncode( t.EntTwo )\n\treturn t\nend"},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetCreationTime","parent":"Entity","type":"classfunc","description":"Returns the time the entity was created on, relative to Global.CurTime.","realm":"Shared","rets":{"ret":{"text":"The time the entity was created on.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetCreator","parent":"Entity","type":"classfunc","description":"Gets the creator of the SENT.","realm":"Server","file":{"text":"lua/includes/extensions/entity.lua","line":"69-L71"},"rets":{"ret":{"text":"The creator, NULL for no creator.","name":"","type":"Player"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetCustomCollisionCheck","parent":"Entity","type":"classfunc","description":"Returns whether this entity uses custom collision check set by Entity:SetCustomCollisionCheck.","realm":"Shared","rets":{"ret":{"text":"Whether this entity uses custom collision check or not","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetDTAngle","parent":"Entity","type":"classfunc","description":{"text":"This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.\n\nGet an angle stored in the datatable of the entity.","internal":""},"realm":"Shared","args":{"arg":{"text":"Goes from 0 to 31.\nSpecifies what key to grab from datatable.","name":"key","type":"number"}},"rets":{"ret":{"text":"Requested angle.","name":"","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetCycle","parent":"Entity","type":"classfunc","description":"Returns the frame of the currently played sequence. This will be a number between 0 and 1 as a representation of sequence progress.","realm":"Shared","rets":{"ret":{"text":"The frame of the currently played sequence","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetDTEntity","parent":"Entity","type":"classfunc","description":{"text":"This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.\n\nReturns an entity stored in the datatable of the entity.","internal":""},"realm":"Shared","args":{"arg":{"text":"Goes from 0 to 31.\nSpecifies what key to grab from datatable.","name":"key","type":"number"}},"rets":{"ret":{"text":"Requested entity.","name":"","type":"Entity"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetDTBool","parent":"Entity","type":"classfunc","description":{"text":"This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.\n\nGet a boolean stored in the datatable of the entity.","internal":""},"realm":"Shared","args":{"arg":{"text":"Goes from 0 to 31.\nSpecifies what key to grab from datatable.","name":"key","type":"number"}},"rets":{"ret":{"text":"Requested boolean.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetDTFloat","parent":"Entity","type":"classfunc","description":{"text":"This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.\n\nGet a float stored in the datatable of the entity.","internal":""},"realm":"Shared","args":{"arg":{"text":"Goes from 0 to 31.\nSpecifies what key to grab from datatable.","name":"key","type":"number"}},"rets":{"ret":{"text":"Requested float.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetDTInt","parent":"Entity","type":"classfunc","description":{"text":"This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.\n\nGet an integer stored in the datatable of the entity.","internal":""},"realm":"Shared","args":{"arg":{"text":"Goes from 0 to 31.\nSpecifies what key to grab from datatable.","name":"key","type":"number"}},"rets":{"ret":{"text":"32-bit signed integer","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetDTVector","parent":"Entity","type":"classfunc","description":{"text":"This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.\n\nGet a vector stored in the datatable of the entity.","internal":""},"realm":"Shared","args":{"arg":{"text":"Goes from 0 to 31.\nSpecifies what key to grab from datatable.","name":"key","type":"number"}},"rets":{"ret":{"text":"Requested vector.","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetEditingData","parent":"Entity","type":"classfunc","description":{"text":"Returns internal data about editable Entity:NetworkVars.\n\n\t\tThis is used internally by DEntityProperties and Editable Entities system.","note":"This function will only work on entities which had Entity:InstallDataTable called on them, which is done automatically for players and all Scripted Entities"},"realm":"Shared","rets":{"ret":{"text":"The internal data","name":"data","type":"table"}}},"example":{"description":"Example output, if used on a `edit_sun`.","code":"local ent = ents.FindByClass(\"edit_sun\")[ 1 ]\nPrintTable( ent:GetNetworkVars() )","output":"```\noverlaycolor:\n\t\torder\t=\t4\n\t\ttitle\t=\tOverlayColor\n\t\ttype\t=\tVectorColor\noverlaysize:\n\t\tmax\t=\t200\n\t\tmin\t=\t0\n\t\torder\t=\t2\n\t\ttitle\t=\tOverlaySize\n\t\ttype\t=\tFloat\nsuncolor:\n\t\torder\t=\t3\n\t\ttitle\t=\tSunColor\n\t\ttype\t=\tVectorColor\nsunsize:\n\t\tmax\t=\t100\n\t\tmin\t=\t0\n\t\torder\t=\t1\n\t\ttitle\t=\tSunSize\n\t\ttype\t=\tFloat\n\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetDTString","parent":"Entity","type":"classfunc","description":{"text":"This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.\n\nGet a string stored in the datatable of the entity.","internal":""},"realm":"Shared","args":{"arg":{"text":"Goes from 0 to 3.\nSpecifies what key to grab from datatable.","name":"key","type":"number"}},"rets":{"ret":{"text":"Requested string.","name":"","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetEffects","parent":"Entity","type":"classfunc","description":"Returns a bit flag of all engine effect flags of the entity.","realm":"Shared","rets":{"ret":{"text":"Engine effect flags, see Enums/EF","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetEFlags","parent":"Entity","type":"classfunc","description":"Returns a bit flag of all engine flags of the entity.","realm":"Shared","rets":{"ret":{"text":"Engine flags, see Enums/EFL","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetElasticity","parent":"Entity","type":"classfunc","description":"Returns the elasticity of this entity, used by some flying entities such as the Helicopter NPC to determine how much it should bounce around when colliding.","realm":"Shared","rets":{"ret":{"text":"elasticity","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetFlexName","parent":"Entity","type":"classfunc","description":"Returns flex name.","realm":"Shared","args":{"arg":{"text":"The flex id to look up name of","name":"id","type":"number"}},"rets":{"ret":{"text":"The flex name","name":"","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetFlexBounds","parent":"Entity","type":"classfunc","description":"Returns acceptable value range for the flex.","realm":"Shared","args":{"arg":{"text":"The ID of the flex to look up bounds of","name":"flex","type":"number"}},"rets":{"ret":[{"text":"The minimum value for this flex","name":"","type":"number"},{"text":"The maximum value for this flex","name":"","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetFlexIDByName","parent":"Entity","type":"classfunc","description":"Returns the ID of the flex based on given name.","realm":"Shared","args":{"arg":{"text":"The name of the flex to get the ID of. Case sensitive.","name":"name","type":"string"}},"rets":{"ret":{"text":"The ID of flex\n* nil if no flex with given name was found","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetFlags","parent":"Entity","type":"classfunc","description":"Returns all flags of given entity.","realm":"Shared","rets":{"ret":{"text":"Flags of given entity as a bitflag, see Enums/FL","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetFlexNum","parent":"Entity","type":"classfunc","description":"Returns the number of flexes this entity has.","realm":"Shared","rets":{"ret":{"text":"The number of flexes.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetFlexScale","parent":"Entity","type":"classfunc","description":"Returns the flex scale of the entity.","realm":"Shared","rets":{"ret":{"text":"The flex scale","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetForward","parent":"Entity","type":"classfunc","description":"Returns the forward vector of the entity, as a normalized direction vector","realm":"Shared","rets":{"ret":{"text":"forwardDir","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetFlexWeight","parent":"Entity","type":"classfunc","description":"Returns current weight ( value ) of the flex.","realm":"Shared","args":{"arg":{"text":"The ID of the flex to get weight of","name":"flex","type":"number"}},"rets":{"ret":{"text":"The current weight of the flex","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetGravity","parent":"Entity","type":"classfunc","description":"Gets the gravity multiplier of the entity.","realm":"Shared","rets":{"ret":{"text":"gravityMultiplier","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetGroundSpeedVelocity","parent":"Entity","type":"classfunc","description":"Returns the entity's ground speed velocity, which is based on the entity's walk/run speed and/or the ground speed of their sequence ( Entity:GetSequenceGroundSpeed ). Will return an empty Vector if the entity isn't moving on the ground.","realm":"Server","rets":{"ret":{"text":"The ground speed velocity.","name":"","type":"Vector"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetFriction","parent":"Entity","type":"classfunc","description":"Returns how much friction an entity has. Entities default to 1 (100%) and can be higher or even negative.","realm":"Server","rets":{"ret":{"text":"friction","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetGroundEntity","parent":"Entity","type":"classfunc","description":"Returns the object the entity is standing on.","realm":"Shared","rets":{"ret":{"text":"The ground entity.","name":"","type":"Entity"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetHitBoxBounds","parent":"Entity","type":"classfunc","description":"Gets the bounds (min and max corners) of a hit box.","realm":"Shared","args":{"arg":[{"text":"The number of the hit box.","name":"hitbox","type":"number"},{"text":"The group of the hit box. This should be 0 in most cases.","name":"group","type":"number"}]},"rets":{"ret":[{"text":"Hit box mins. Will be nil if the hit box index was out of range.","name":"","type":"Vector"},{"text":"Hit box maxs. Will be nil if the hit box index was out of range.","name":"","type":"Vector"}]}},"example":{"description":"Displays the mins and maxs for the client's first hitbox in the first group, which is generally the head.","code":"local mins, maxs = LocalPlayer():GetHitBoxBounds(0, 0)\nprint(mins, maxs)","output":"-1.250000 -6.500000 -3.190000\t8.250000 3.500000 3.310000"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetHitBoxBone","parent":"Entity","type":"classfunc","description":"Gets the bone the hit box is attached to.","realm":"Shared","args":{"arg":[{"text":"The number of the hit box.","name":"hitbox","type":"number"},{"text":"The number of the hit box set. This should be 0 in most cases.\n\nNumbering for these sets start from 0. The total amount of sets can be found with Entity:GetHitBoxSetCount.","name":"hboxset","type":"number"}]},"rets":{"ret":{"text":"The number of the bone. Will be nil if the hit box index was out of range.","name":"","type":"number"}}},"example":{"code":"local ply = LocalPlayer()\nlocal numHitBoxSets = ply:GetHitBoxSetCount()\n\nfor hboxset=0, numHitBoxSets - 1 do\n  local numHitBoxes = ply:GetHitBoxCount( hboxset )\n    \n  for hitbox=0, numHitBoxes - 1 do\n    local bone = ply:GetHitBoxBone(hitbox, hboxset )\n\n    print( \"Hit box set \" .. hboxset .. \", hitbox \" .. hitbox .. \" is attached to bone \" .. ply:GetBoneName(bone) )\n  end\nend","output":"Hit box set 0, hit box 0 is attached to bone ValveBiped.Bip01_Head1, etc."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetHitBoxHitGroup","parent":"Entity","type":"classfunc","description":"Gets the hit group of a given hitbox in a given hitbox set.","realm":"Shared","added":"2020.03.17","args":{"arg":[{"text":"The number of the hit box.","name":"hitbox","type":"number"},{"text":"The number of the hit box set. This should be 0 in most cases.\n\nNumbering for these sets start from 0. The total group count can be found with Entity:GetHitBoxSetCount.","name":"hitboxset","type":"number"}]},"rets":{"ret":{"text":"The hitbox group of given hitbox. See Enums/HITGROUP","name":"group","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetHitBoxCount","parent":"Entity","type":"classfunc","description":"Gets how many hit boxes are in a given hit box group.","realm":"Shared","args":{"arg":{"text":"The number of the hit box group.","name":"group","type":"number"}},"rets":{"ret":{"text":"The number of hit boxes.","name":"","type":"number"}}},"example":{"description":"Will print out how many hit boxes the client has in each of their hit box groups.","code":"local numHitBoxGroups = LocalPlayer():GetHitboxSetCount()\n\nfor i = 0, numHitBoxGroups - 1 do\n\tlocal numHitBoxes = LocalPlayer():GetHitBoxCount( i )\n\tprint( \"Hit box group \" .. i .. \" has \" .. numHitBoxes .. \" hit boxes!\" )\nend","output":"Hit box group 0 has 17 hit boxes!"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetHitBoxCount","parent":"Entity","type":"classfunc","description":"Gets how many hit boxes are in a given hit box group.","realm":"Shared","args":{"arg":{"text":"The number of the hit box group.","name":"group","type":"number"}},"rets":{"ret":{"text":"The number of hit boxes.","name":"","type":"number"}}},"example":{"description":"Will print out how many hit boxes the client has in each of their hit box groups.","code":"local numHitBoxGroups = LocalPlayer():GetHitboxSetCount()\n\nfor i = 0, numHitBoxGroups - 1 do\n\tlocal numHitBoxes = LocalPlayer():GetHitBoxCount( i )\n\tprint( \"Hit box group \" .. i .. \" has \" .. numHitBoxes .. \" hit boxes!\" )\nend","output":"Hit box group 0 has 17 hit boxes!"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetHitBoxGroupCount","parent":"Entity","type":"classfunc","description":{"text":"Returns the number of hit box sets that an entity has. Functionally identical to Entity:GetHitboxSetCount","deprecated":"You should use Entity:GetHitboxSetCount instead."},"realm":"Shared","rets":{"ret":{"text":"number of hit box sets","name":"","type":"number"}}},"example":{"description":"Prints how many hit box sets the client has","code":"local numHitBoxGroups = LocalPlayer():GetHitBoxGroupCount()\nprint(numHitBoxGroups)"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetKeyValues","parent":"Entity","type":"classfunc","description":{"text":"Returns a table containing all key values the entity has.\n\nSingle key values can usually be retrieved with Entity:GetInternalVariable.\n\n\n\nHere's a list of keyvalues that will not appear in this list, as they are not stored/defined as actual keyvalues internally:\n* rendercolor - Entity:GetColor (Only RGB)\n* rendercolor32 - Entity:GetColor (RGBA)\n* renderamt - Entity:GetColor (Alpha)\n* disableshadows - EF_NOSHADOW\n* mins - Entity:GetCollisionBounds\n* maxs - Entity:GetCollisionBounds\n* disablereceiveshadows - EF_NORECEIVESHADOW\n* nodamageforces - EFL_NO_DAMAGE_FORCES\n* angle - Entity:GetAngles\n* angles - Entity:GetAngles\n* origin - Entity:GetPos\n* targetname - Entity:GetName","note":"This only includes engine defined key values. For custom key values, use GM:EntityKeyValue or ENTITY:KeyValue to capture and store them."},"realm":"Server","rets":{"ret":{"text":"A table of key values.","name":"","type":"table"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetInternalVariable","parent":"Entity","type":"classfunc","description":"An interface for accessing internal key values on entities.\n\nSee Entity:GetSaveTable for a more detailed explanation. See Entity:SetSaveValue for the opposite of this function.","realm":"Shared","args":{"arg":{"text":"Name of variable corresponding to an entity save value.","name":"variableName","type":"string"}},"rets":{"ret":{"text":"The internal variable value.","name":"","type":"any"}}},"example":[{"description":"Get how long it has been since the player was damaged.","code":"local meta = FindMetaTable( \"Player\" )\n\nfunction meta:GetLastDamageTime()\n\n\treturn self:GetInternalVariable( \"m_flLastDamageTime\" )\n\nend\n\nprint( Entity( 1 ):GetLastDamageTime() )","output":"```\n-31.965000152588\n```"},{"description":"Determine if a door is locked or not (**server side**).","code":"function IsDoorLocked( entity )\n\n\treturn ( entity:GetInternalVariable( \"m_bLocked\" ) )\n\nend","output":"Returns `true` if the door is locked."},{"description":"Determines whether the door is open or not (**server side**).","code":"function DoorIsOpen( door )\n\t\n\tlocal doorClass = door:GetClass()\n\n\tif ( doorClass == \"func_door\" or doorClass == \"func_door_rotating\" ) then\n\n\t\treturn self:GetInternalVariable( \"m_toggle_state\" ) == 0\n\n\telseif ( doorClass == \"prop_door_rotating\" ) then\n\n\t\treturn self:GetInternalVariable( \"m_eDoorState\" ) ~= 0\n\n\telse\n\n\t\treturn false\n\n\tend\n\nend","output":"Returns `true` if the door is open."}],"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetLayerCycle","parent":"Entity","type":"classfunc","description":{"text":"Returns the animation cycle/frame for given layer.","note":"This function only works on BaseAnimatingOverlay entities."},"realm":"Shared","args":{"arg":{"text":"The Layer ID","name":"layerID","type":"number"}},"rets":{"ret":{"text":"The animation cycle/frame for given layer.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetHitboxSetCount","parent":"Entity","type":"classfunc","description":"Returns the amount of hitbox sets in the entity.","realm":"Shared","rets":{"ret":{"text":"The amount of hitbox sets in the entity.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetLayerPlaybackRate","parent":"Entity","type":"classfunc","description":{"text":"Returns the layer playback rate. See also Entity:GetLayerDuration.","note":"This function only works on BaseAnimatingOverlay entities."},"added":"2020.03.17","realm":"Shared","args":{"arg":{"text":"The Layer ID","name":"layerID","type":"number"}},"rets":{"ret":{"text":"The current playback rate.","name":"rate","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetLayerDuration","parent":"Entity","type":"classfunc","description":{"text":"Returns the duration of given layer.","note":"This function only works on BaseAnimatingOverlay entities."},"realm":"Shared","args":{"arg":{"text":"The Layer ID","name":"layerID","type":"number"}},"rets":{"ret":{"text":"The duration of the layer","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetLayerWeight","parent":"Entity","type":"classfunc","description":{"text":"Returns the current weight of the layer. See Entity:SetLayerWeight for more information.","note":"This function only works on BaseAnimatingOverlay entities."},"realm":"Shared","args":{"arg":{"text":"The Layer ID","name":"layerID","type":"number"}},"rets":{"ret":{"text":"The current weight of the layer","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetLayerSequence","parent":"Entity","type":"classfunc","description":{"text":"Returns the sequence id of given layer.","note":"This function only works on BaseAnimatingOverlay entities."},"added":"2020.06.24","realm":"Shared","args":{"arg":{"text":"The Layer ID.","name":"layerID","type":"number"}},"rets":{"ret":{"text":"The sequenceID of the layer.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetLocalAngles","parent":"Entity","type":"classfunc","description":"Returns the rotation of the entity relative to its parent entity.","realm":"Shared","rets":{"ret":{"text":"Relative angle","name":"","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetLocalPos","parent":"Entity","type":"classfunc","description":"Returns entity's position relative to it's parent.","realm":"Shared","rets":{"ret":{"text":"Relative position","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetLocalAngularVelocity","parent":"Entity","type":"classfunc","description":"Returns the non-VPhysics angular velocity of the entity relative to its parent entity.","realm":"Shared","rets":{"ret":{"text":"The velocity","name":"","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetManipulateBoneAngles","parent":"Entity","type":"classfunc","description":"Gets the entity's angle manipulation of the given bone. This is relative to the default angle, so the angle is zero when unmodified.","realm":"Shared","args":{"arg":{"text":"The bone's ID","name":"boneID","type":"number"}},"rets":{"ret":{"text":"The entity's angle manipulation of the given bone.","name":"","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetLightingOriginEntity","parent":"Entity","type":"classfunc","description":"Returns the entity that is being used as the light origin position for this entity.","realm":"Server","rets":{"ret":{"text":"The lighting entity. This will usually be NULL.","name":"","type":"Entity"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetManipulateBoneJiggle","parent":"Entity","type":"classfunc","description":"Returns the jiggle amount of the entity's bone.\n\nSee Entity:ManipulateBoneJiggle for more info.","realm":"Shared","args":{"arg":{"text":"The bone ID","name":"boneID","type":"number"}},"rets":{"ret":{"text":"Returns a value ranging from 0 to 255 depending on the value set with Entity:ManipulateBoneJiggle.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetManipulateBonePosition","parent":"Entity","type":"classfunc","description":"Gets the entity's position manipulation of the given bone. This is relative to the default position, so it is zero when unmodified.","realm":"Shared","args":{"arg":{"text":"The bone's ID","name":"boneId","type":"number"}},"rets":{"ret":{"text":"The entity's position manipulation of the given bone.","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetMaterial","parent":"Entity","type":"classfunc","description":{"text":"Returns the material override for this entity. \n\nReturns an empty string if no material override exists. Use Entity:GetMaterials to list it's default materials.","bug":{"text":"The server's value takes priority on the client.","issue":"3362"}},"realm":"Shared","rets":{"ret":{"text":"material","name":"","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetManipulateBoneScale","parent":"Entity","type":"classfunc","description":"Gets the entity's scale manipulation of the given bone. Normal scale is Vector( 1, 1, 1 )","realm":"Shared","args":{"arg":{"text":"The bone's ID","name":"boneID","type":"number"}},"rets":{"ret":{"text":"The entity's scale manipulation of the given bone","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetMaterialType","parent":"Entity","type":"classfunc","description":"Returns the surface material of this entity.","realm":"Server","rets":{"ret":{"text":"Surface material. See Enums/MAT","name":"","type":"number"}}},"example":{"description":"Prints the MAT_ enum name for every prop on the map.","code":"local function BackwardsEnums( enumname ) -- Helper function to build our table of values.\n\tlocal backenums = {}\n\n\tfor k, v in pairs( _G ) do\n\t\tif isstring(k) and string.find( k, \"^\" .. enumname ) then\n\t\t\tbackenums[ v ] = k\n\t\tend\n\tend\n\n\treturn backenums\nend\n\nlocal MAT = BackwardsEnums( \"MAT_\" )\nlocal validClasses = { prop_physics = true, prop_physics_multiplayer = true, prop_dynamic = true }\n\nfor _, v in ipairs( ents.GetAll() ) do\n\tif validClasses[ v:GetClass() ] then\n\t\tprint( v:GetModel(), MAT[ v:GetMaterialType() ] or \"UNKNOWN\" )\n\tend\nend","output":"```\nmodels/props_interiors/furniture_couch01a.mdl\tMAT_DIRT\nmodels/props/cs_office/offinspd.mdl\tMAT_GLASS\nmodels/props/cs_office/offinspf.mdl\tMAT_GLASS\nmodels/props_wasteland/controlroom_desk001b.mdl\tMAT_METAL\nmodels/props_junk/wood_crate002a.mdl\tMAT_WOOD\nmodels/props_junk/wood_crate002a.mdl\tMAT_WOOD\nmodels/props_junk/wood_crate001a_damaged.mdl\tMAT_WOOD\nmodels/props_wasteland/controlroom_desk001a.mdl\tMAT_METAL\nmodels/props_wasteland/controlroom_chair001a.mdl\tMAT_METAL\nmodels/props_c17/tools_wrench01a.mdl\tMAT_METAL\nmodels/props/cs_office/radio.mdl\tMAT_COMPUTER\nmodels/props_junk/pushcart01a.mdl\tMAT_METAL\nmodels/props_wasteland/kitchen_shelf001a.mdl\tMAT_METAL\nmodels/props_wasteland/cafeteria_table001a.mdl\tMAT_WOOD\nmodels/props_c17/furniturecouch001a.mdl\tMAT_DIRT\nmodels/props_c17/furnituretable003a.mdl\tMAT_WOOD\nmodels/combine_gate_vehicle.mdl\tUNKNOWN\nmodels/props_junk/sawblade001a.mdl\tMAT_METAL\nmodels/props/cs_office/offinspf.mdl\tMAT_GLASS\nmodels/props_junk/wood_crate001a.mdl\tMAT_WOOD\n...\n```"},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetMaxHealth","parent":"Entity","type":"classfunc","description":"Returns the max health that the entity was given. It can be set via Entity:SetMaxHealth.","realm":"Shared","rets":{"ret":{"text":"Max health.","name":"","type":"number"}}},"example":{"description":"Prints the maximum health set for player 1.","code":"print( Entity( 1 ):GetMaxHealth() )","output":"By default, 100."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetMaterials","parent":"Entity","type":"classfunc","description":{"text":"Returns all materials of the entity's model.\n\nThis function is unaffected by Entity:SetSubMaterial as it returns the original materials.","bug":["The table returned by this function will not contain materials if they are missing from the disk/repository. This means that if you are attempting to find the ID of a material to replace with Entity:SetSubMaterial and there are missing materials on the model, all subsequent materials will be offset in the table, meaning that the ID you are trying to get will be incorrect.",{"text":"This function causes performance issues and can produce stuttering when using complex models. A workaround is available on its github page. **This is fixed in the next update.**","issue":"4853"}]},"realm":"Shared","rets":{"ret":{"text":"A table containing full paths to the materials of the model.","name":"","type":"table","note":"**[NEXT UPDATE](https://github.com/Facepunch/garrysmod-issues/issues/3216#issuecomment-833389872)**: If used on a brush model (including the map), it will return complete list of materials. For a model, it's limited to 128 materials.","bug":{"text":"This table is limited to 127 materials, even if the entity has more. **This is fixed in the next update.**","issue":"3216"}}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetModel","parent":"Entity","type":"classfunc","description":{"text":"Gets the model of given entity.","bug":{"text":"This does not necessarily return the model's path, as is the case for brush and virtual models. This is intentional behaviour, however, there is currently no way to retrieve the actual file path.","issue":"2246"}},"realm":"Shared","rets":{"ret":{"text":"The entity's model. Will be a filesystem path for most models.\n\nThis will be nil for entities which cannot have models, such as point entities.","name":"","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetModelBounds","parent":"Entity","type":"classfunc","description":"Returns the entity's model bounds. This is different than the collision bounds/hull. This is not scaled with Entity:SetModelScale, and will return the model's original, unmodified mins and maxs. This can be used to get world bounds.","realm":"Shared","rets":{"ret":[{"text":"The minimum vector of the bounds","name":"","type":"Vector"},{"text":"The maximum vector of the bounds","name":"","type":"Vector"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetModelContents","parent":"Entity","type":"classfunc","description":"Returns the contents of the entity's current model.","realm":"Shared","rets":{"ret":{"text":"The contents of the entity's model. See Enums/CONTENTS.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetModelRadius","parent":"Entity","type":"classfunc","description":"Gets the models radius.","realm":"Shared","rets":{"ret":{"text":"The radius of the model","name":"","type":"number"}}},"example":{"description":"Example usage of the function, tested on player.","code":"print( Entity(1):GetModelRadius() )","output":"72"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetModelPhysBoneCount","parent":"Entity","type":"classfunc","description":"Gets the physics bone count of the entity's model. This is only applicable to `anim` type Scripted Entities with ragdoll models.","realm":"Client","rets":{"ret":{"text":"How many physics bones exist on the model.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetModelScale","parent":"Entity","type":"classfunc","description":"Gets the selected entity's model scale.","realm":"Shared","rets":{"ret":{"text":"Scale of that entity's model.","name":"","type":"number"}}},"example":{"description":"This example shows how one can get the model scale of their self.","code":"print( Entity(1):GetModelScale() )","output":"```\n1\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetModelRenderBounds","parent":"Entity","type":"classfunc","description":"Returns the entity's model render bounds. By default this will return the same bounds as Entity:GetModelBounds.","realm":"Shared","rets":{"ret":[{"text":"The minimum vector of the bounds","name":"","type":"Vector"},{"text":"The maximum vector of the bounds","name":"","type":"Vector"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetMomentaryRotButtonPos","parent":"Entity","type":"classfunc","description":{"text":"Returns the amount a momentary_rot_button entity is turned based on the given angle. 0 meaning completely turned closed, 1 meaning completely turned open.","warning":"This only works on momentary_rot_button entities."},"realm":"Server","args":{"arg":{"text":"The angle of rotation to compare - usually should be Entity:GetAngles.","name":"turnAngle","type":"Angle"}},"rets":{"ret":{"text":"The amount the momentary_rot_button is turned, ranging from 0 to 1, or nil if the entity is not a momentary_rot_button.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetMoveParent","parent":"Entity","type":"classfunc","description":"Returns the movement parent of this entity.\n\nSee Entity:SetMoveParent for more info.","realm":"Shared","rets":{"ret":{"text":"The movement parent of this entity.","name":"","type":"Entity"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetMoveCollide","parent":"Entity","type":"classfunc","description":"Returns the move collide type of the entity. The move collide is the way a physics object reacts to hitting an object - will it bounce, slide?","realm":"Shared","rets":{"ret":{"text":"The move collide type, see Enums/MOVECOLLIDE","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetMoveType","parent":"Entity","type":"classfunc","description":"Returns the entity's movetype","realm":"Shared","rets":{"ret":{"text":"Move type. See Enums/MOVETYPE","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetMoveType","parent":"Entity","type":"classfunc","description":"Returns the entity's movetype","realm":"Shared","rets":{"ret":{"text":"Move type. See Enums/MOVETYPE","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetNetworkAngles","parent":"Entity","type":"classfunc","description":"Gets networked angles for entity.","realm":"Client","rets":{"ret":{"text":"angle","name":"","type":"Angle"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetNetworkedBool","parent":"Entity","type":"classfunc","description":{"text":"Retrieves a networked boolean value at specified index on the entity that is set by Entity:SetNetworkedBool.","deprecated":"You should use Entity:GetNWBool instead."},"realm":"Shared","args":{"arg":[{"text":"The key that is associated with the value","name":"key","type":"string"},{"text":"The value to return if we failed to retrieve the value. ( If it isn't set )","name":"fallback","type":"boolean","default":"false"}]},"rets":{"ret":{"text":"The retrieved value","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetNetworkedAngle","parent":"Entity","type":"classfunc","description":{"text":"Retrieves a networked angle value at specified index on the entity that is set by Entity:SetNetworkedAngle.","deprecated":"You should use Entity:GetNWAngle instead."},"realm":"Shared","args":{"arg":[{"text":"The key that is associated with the value","name":"key","type":"string"},{"text":"The value to return if we failed to retrieve the value. ( If it isn't set )","name":"fallback","type":"Angle","default":"Angle( 0, 0, 0 )"}]},"rets":{"ret":{"text":"The retrieved value","name":"","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetNetworkedEntity","parent":"Entity","type":"classfunc","description":{"text":"Retrieves a networked float value at specified index on the entity that is set by Entity:SetNetworkedEntity.","deprecated":"You should use Entity:GetNWEntity instead."},"realm":"Shared","args":{"arg":[{"text":"The key that is associated with the value","name":"key","type":"string"},{"text":"The value to return if we failed to retrieve the value. ( If it isn't set )","name":"fallback","type":"Entity","default":"NULL"}]},"rets":{"ret":{"text":"The retrieved value","name":"","type":"Entity"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetNetworkedFloat","parent":"Entity","type":"classfunc","description":{"text":"Retrieves a networked float value at specified index on the entity that is set by Entity:SetNetworkedFloat.\n\nSeems to be the same as Entity:GetNetworkedInt.","deprecated":"You should use Entity:GetNWFloat instead."},"realm":"Shared","args":{"arg":[{"text":"The key that is associated with the value","name":"key","type":"string"},{"text":"The value to return if we failed to retrieve the value. ( If it isn't set )","name":"fallback","type":"number","default":"0"}]},"rets":{"ret":{"text":"The retrieved value","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetNetworkedString","parent":"Entity","type":"classfunc","description":{"text":"Retrieves a networked string value at specified index on the entity that is set by Entity:SetNetworkedString.","deprecated":"You should use Entity:GetNWString instead."},"realm":"Shared","args":{"arg":[{"text":"The key that is associated with the value","name":"key","type":"string"},{"text":"The value to return if we failed to retrieve the value. ( If it isn't set )","name":"fallback","type":"string","default":""}]},"rets":{"ret":{"text":"The retrieved value","name":"","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetNetworkedInt","parent":"Entity","type":"classfunc","description":{"text":"Retrieves a networked integer value at specified index on the entity that is set by Entity:SetNetworkedInt.","deprecated":"You should use Entity:GetNWInt instead."},"realm":"Shared","args":{"arg":[{"text":"The key that is associated with the value","name":"key","type":"string"},{"text":"The value to return if we failed to retrieve the value. ( If it isn't set )","name":"fallback","type":"number","default":"0"}]},"rets":{"ret":{"text":"The retrieved value","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetNetworkedVarProxy","parent":"Entity","type":"classfunc","description":{"text":"Returns callback function for given NWVar of this entity.","deprecated":"You should be using Entity:GetNWVarProxy instead."},"realm":"Shared","file":{"text":"lua/includes/extensions/entity.lua","line":"495-L506"},"args":{"arg":{"text":"The name of the NWVar to get callback of.","name":"name","type":"string"}},"rets":{"ret":{"text":"The callback of given NWVar, if any.","name":"","type":"function"}}},"example":{"description":"Prints callback function of a NWVar called \"Key\" of Player 1.","code":"print( Entity(1):GetNetworkedVarProxy( \"Key\" ) )\nEntity(1):SetNetworkedVarProxy( \"Key\", print )\nprint( Entity(1):GetNetworkedVarProxy( \"Key\" ) )","output":"```\nnil\nfunction: builtin#25\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetNetworkedVarTable","parent":"Entity","type":"classfunc","description":{"text":"Returns all the networked variables in an entity.","deprecated":"You should be using Entity:GetNWVarTable instead."},"realm":"Shared","rets":{"ret":{"text":"Key-Value table of all networked variables.","name":"","type":"table"}}},"example":{"description":"Prints all NWVars that exist for Player 1.","code":"PrintTable( Entity(1):GetNWVarTable() )","output":"```\nUserGroup\t=\towner\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetNetworkOrigin","parent":"Entity","type":"classfunc","description":"Gets networked origin for entity.","realm":"Shared","rets":{"ret":{"text":"origin","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetNetworkVars","parent":"Entity","type":"classfunc","description":{"text":"Returns all network vars created by Entity:NetworkVar and Entity:NetworkVarElement and their current values.\n\n\t\tThis is used internally by the duplicator.\n\n\t\tFor NWVars see Entity:GetNWVarTable.","note":"This function will only work on entities which had Entity:InstallDataTable called on them, which is done automatically for players and all Scripted Entities"},"realm":"Shared","rets":{"ret":{"text":"The Key-Value formatted table of network var names and their current values","name":"data","type":"table"}}},"example":{"description":"Example output, if used on a `env_skypaint`.","code":"local ent = ents.FindByClass(\"env_skypaint\")[ 1 ]\nPrintTable( ent:GetNetworkVars() )","output":"```\nBottomColor\t=\t0.919000 0.929000 0.992000\nDrawStars\t=\ttrue\nDuskColor\t=\t1.000000 1.000000 1.000000\nDuskIntensity\t=\t2\nDuskScale\t=\t0.5\nFadeBias\t=\t0.10000000149012\nHDRScale\t=\t0.56000000238419\nStarFade\t=\t0.5\nStarLayers\t=\t1\nStarScale\t=\t2\nStarSpeed\t=\t0.029999999329448\nStarTexture\t=\tskybox/clouds\nSunColor\t=\t0.000000 0.000000 0.000000\nSunNormal\t=\t-0.377821 0.520026 0.766044\nSunSize\t=\t0\nTopColor\t=\t0.220000 0.510000 1.000000\n\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetNoDraw","parent":"Entity","type":"classfunc","description":{"text":"Returns if the entity's rendering and transmitting has been disabled.","note":"This is equivalent to calling Entity:IsEffectActive( EF_NODRAW )"},"realm":"Shared","rets":{"ret":{"text":"Whether the entity's rendering and transmitting has been disabled.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetNumBodyGroups","parent":"Entity","type":"classfunc","description":"Returns the body group count of the entity.","realm":"Shared","rets":{"ret":{"text":"Amount of bodygroups the entitys model has","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetNetworkedVector","parent":"Entity","type":"classfunc","description":{"text":"Retrieves a networked vector value at specified index on the entity that is set by Entity:SetNetworkedVector.","deprecated":"You should use Entity:GetNWVector instead."},"realm":"Shared","args":{"arg":[{"text":"The key that is associated with the value","name":"key","type":"string"},{"text":"The value to return if we failed to retrieve the value. ( If it isn't set )","name":"fallback","type":"Vector","default":"Vector( 0, 0, 0 )"}]},"rets":{"ret":{"text":"The retrieved value","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetNWAngle","parent":"Entity","type":"classfunc","description":"Retrieves a networked angle value at specified index on the entity that is set by Entity:SetNWAngle.","realm":"Shared","args":{"arg":[{"text":"The key that is associated with the value","name":"key","type":"string"},{"text":"The value to return if we failed to retrieve the value. (If it isn't set)","name":"fallback","type":"any","default":"Angle( 0, 0, 0 )"}]},"rets":{"ret":{"text":"The value associated with the key","name":"","type":"any"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetNumPoseParameters","parent":"Entity","type":"classfunc","description":"Returns the number of pose parameters this entity has.","realm":"Shared","rets":{"ret":{"text":"Amount of pose parameters the entity has","name":"","type":"number"}}},"example":{"description":"Prints all the entities poses.\n\nThe entity used to generate the output is a model of the combine helicopter.","code":"for i=0, ent:GetNumPoseParameters() - 1 do\n\tlocal min, max = ent:GetPoseParameterRange( i )\n\tprint( ent:GetPoseParameterName( i ) .. ' ' .. min .. \" / \" .. max )\nend","output":"```\nweapon_pitch -90 / 20\nweapon_yaw -40 / 40\nrudder -45 / 45\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetNWBool","parent":"Entity","type":"classfunc","description":"Retrieves a networked boolean value at specified index on the entity that is set by Entity:SetNWBool.","realm":"Shared","args":{"arg":[{"text":"The key that is associated with the value","name":"key","type":"string"},{"text":"The value to return if we failed to retrieve the value. (If it isn't set)","name":"fallback","type":"any","default":"false"}]},"rets":{"ret":{"text":"The value associated with the key","name":"","type":"any"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetNWEntity","parent":"Entity","type":"classfunc","description":"Retrieves a networked entity value at specified index on the entity that is set by Entity:SetNWEntity.","realm":"Shared","args":{"arg":[{"text":"The key that is associated with the value","name":"key","type":"string"},{"text":"The value to return if we failed to retrieve the value. (If it isn't set)","name":"fallback","type":"any","default":"NULL"}]},"rets":{"ret":{"text":"The value associated with the key","name":"","type":"any"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetNWFloat","parent":"Entity","type":"classfunc","description":"Retrieves a networked float value at specified index on the entity that is set by Entity:SetNWFloat.","realm":"Shared","args":{"arg":[{"text":"The key that is associated with the value","name":"key","type":"string"},{"text":"The value to return if we failed to retrieve the value. (If it isn't set)","name":"fallback","type":"any","default":"0"}]},"rets":{"ret":{"text":"The value associated with the key","name":"","type":"any"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetNWInt","parent":"Entity","type":"classfunc","description":{"text":"Retrieves a networked integer (whole number) value that was previously set by Entity:SetNWInt.","bug":{"text":"This function will not round decimal values as it actually networks a float internally.","issue":"3374"}},"realm":"Shared","args":{"arg":[{"text":"The key that is associated with the value","name":"key","type":"string"},{"text":"The value to return if we failed to retrieve the value (If it isn't set).","name":"fallback","type":"any","default":"0"}]},"rets":{"ret":{"text":"The value associated with the key","name":"","type":"any"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetNWVarProxy","parent":"Entity","type":"classfunc","description":"Returns callback function for given NWVar of this entity.","realm":"Shared","file":{"text":"lua/includes/extensions/entity.lua","line":"509"},"args":{"arg":{"text":"The key of the NWVar to get callback of.","name":"key","type":"any"}},"rets":{"ret":{"text":"The callback of given NWVar, or nil if not found.","name":"","type":"function"}}},"example":{"description":"Prints callback function of a NWVar called \"Key\" of Player 1.","code":"print( Entity(1):GetNWVarProxy( \"Key\" ) )\nEntity(1):SetNWVarProxy( \"Key\", print )\nprint( Entity(1):GetNWVarProxy( \"Key\" ) )","output":"```\nnil\nfunction: builtin#25\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetNWString","parent":"Entity","type":"classfunc","description":"Retrieves a networked string value at specified index on the entity that is set by Entity:SetNWString.","realm":"Shared","args":{"arg":[{"text":"The key that is associated with the value","name":"key","type":"string"},{"text":"The value to return if we failed to retrieve the value. (If it isn't set)","name":"fallback","type":"any","default":""}]},"rets":{"ret":{"text":"The value associated with the key","name":"","type":"any"}}},"example":{"description":"Prints the player's rank","code":"print( Entity(1):GetNWString( \"usergroup\" ) )","output":"\"superadmin\" in single-player"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetNWVector","parent":"Entity","type":"classfunc","description":"Retrieves a networked vector value at specified index on the entity that is set by Entity:SetNWVector.","realm":"Shared","args":{"arg":[{"text":"The key that is associated with the value","name":"key","type":"string"},{"text":"The value to return if we failed to retrieve the value. (If it isn't set)","name":"fallback","type":"any","default":"Vector( 0, 0, 0 )"}]},"rets":{"ret":{"text":"The value associated with the key","name":"","type":"any"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetNWVarTable","parent":"Entity","type":"classfunc","description":"Returns all the networked variables in an entity.","realm":"Shared","rets":{"ret":{"text":"Key-Value table of all networked variables.","name":"","type":"table"}}},"example":{"description":"Prints all NWVars that exist for Player 1.","code":"PrintTable( Entity(1):GetNWVarTable() )","output":"```\nUserGroup\t=\towner\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetParent","parent":"Entity","type":"classfunc","description":"Returns the parent entity of this entity.","realm":"Shared","rets":{"ret":{"text":"parentEntity","name":"","type":"Entity"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetOwner","parent":"Entity","type":"classfunc","description":"Returns the owner entity of this entity. See Entity:SetOwner for more info.","realm":"Shared","rets":{"ret":{"text":"The owner entity of this entity.","name":"","type":"Entity"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetParentAttachment","parent":"Entity","type":"classfunc","description":"Returns the attachment index of the entity's parent. Returns 0 if the entity is not parented to a specific attachment or if it isn't parented at all.\n\nThis is set by second argument of Entity:SetParent or the **SetParentAttachment** input.","realm":"Shared","rets":{"ret":{"text":"The parented attachment index","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetParentPhysNum","parent":"Entity","type":"classfunc","description":"If the entity is parented to an entity that has a model with multiple physics objects (like a ragdoll), this is used to retrieve what physics object number the entity is parented to on it's parent.","realm":"Shared","rets":{"ret":{"text":"The physics object id, or nil if the entity has no parent","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetParentWorldTransformMatrix","parent":"Entity","type":"classfunc","description":"Returns the position and angle of the entity's move parent as a 3x4 matrix (VMatrix is 4x4 so the fourth row goes unused). The first three columns store the angle as a [rotation matrix](https://en.wikipedia.org/wiki/Rotation_matrix), and the fourth column stores the position vector.","realm":"Shared","rets":{"ret":{"text":"The position and angle matrix.\n\nIf the entity has no move parent, an identity matrix will be returned.\nIf the entity is  0 or the parent isn't a BaseAnimating entity, the equivalent of Entity:: will be returned.","name":"","type":"VMatrix","page":[",parented to attachmentEntity:GetParentAttachment",",GetMoveParent()Entity:GetMoveParent",",GetWorldTransformMatrix()Entity:GetWorldTransformMatrix"]}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetPersistent","parent":"Entity","type":"classfunc","description":"Returns whether the entity is persistent or not.\n\nSee Entity:SetPersistent for more information on persistence.","realm":"Shared","rets":{"ret":{"text":"True if the entity is set to be persistent.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetPhysicsAttacker","parent":"Entity","type":"classfunc","description":"Returns player who is claiming kills of physics damage the entity deals.","realm":"Server","args":{"arg":{"text":"The time to check if the entity was still a proper physics attacker.","name":"timeLimit","type":"number","default":"1","note":"Some entities such as the Combine Ball disregard the time limit and always return the physics attacker."}},"rets":{"ret":{"text":"The player. If entity that was set is not a player, it will return NULL entity.","name":"","type":"Player"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetPhysicsObject","parent":"Entity","type":"classfunc","description":{"text":"Returns the entity's physics object, if the entity has physics.","note":"Entities don't have clientside physics objects by default, so this will return [NULL PHYSOBJ] on the client in most cases."},"realm":"Shared","rets":{"ret":{"text":"The entity's physics object.","name":"","type":"PhysObj"}}},"example":{"description":"Gets the mass of an entity.","code":"local phys = ent:GetPhysicsObject()\nif ( IsValid( phys ) ) then -- Always check with IsValid! The ent might not have physics!\n\treturn phys:GetMass()\nelse\n\treturn 0\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetPhysicsObjectCount","parent":"Entity","type":"classfunc","description":"Returns the number of physics objects an entity has (usually 1 for non-ragdolls)","realm":"Shared","rets":{"ret":{"text":"numObjects","name":"","type":"number"}}},"example":{"description":"Finds all the Physics Objects in a ragdoll and applies an upward force","code":"for i=0, ragdoll:GetPhysicsObjectCount() - 1 do -- \"ragdoll\" being a ragdoll entity\n \n\tlocal phys = ragdoll:GetPhysicsObjectNum(i)\n\tphys:ApplyForceCenter( Vector( 0, 0, 10000 ) )\n\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetPlaybackRate","parent":"Entity","type":"classfunc","description":"Returns the playback rate of the main sequence on this entity, with 1.0 being the default speed.","realm":"Shared","rets":{"ret":{"text":"The playback rate.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetPhysicsObjectNum","parent":"Entity","type":"classfunc","description":"Returns a specific physics object from an entity with multiple PhysObjects (like ragdolls)\n\nSee also Entity:TranslateBoneToPhysBone.","realm":"Shared","args":{"arg":{"text":"The number corresponding to the PhysObj to grab. Starts at 0.","name":"physNum","type":"number"}},"rets":{"ret":{"text":"The physics object","name":"","type":"PhysObj"}}},"example":[{"description":"When run, if the player is dead it will throw their ragdoll up in the air by their head.","code":"if ( !LocalPlayer():Alive() && LocalPlayer():GetRagdollEntity() ) then\n\tlocal ent = LocalPlayer():GetRagdollEntity()\n\tlocal head = ent:GetPhysicsObjectNum( 10 ) // 10 is usually the bone number of the head.\n\thead:ApplyForceCenter( Vector( 0, 0, 6000 ) )\nend"},{"description":"Example function that applies force to all physics objects of given entity.","code":"function ApplySomeForce( ent )\n\tfor i = 0, ent:GetPhysicsObjectCount() - 1 do\n\t\tlocal phys = ent:GetPhysicsObjectNum( i )\n\t\tphys:ApplyForceCenter( Vector( 0, 0, 10000 ) )\n\tend\nend"}],"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetPos","parent":"Entity","type":"classfunc","description":"Gets the position of entity in world.","realm":"Shared","rets":{"ret":{"text":"The position of the entity.","name":"","type":"Vector"}}},"example":{"description":"Utility command that would give you the position of the entity you are looking at.","code":"concommand.Add( \"entity_pos\", function( ply )\n\tlocal tr = ply:GetEyeTrace()\n\tif ( IsValid( tr.Entity ) ) then\n\t\tprint( \"Entity position:\", tr.Entity:GetPos() )\n\telse\n\t\tprint( \"Crosshair position:\", tr.HitPos )\n\tend\nend )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetPoseParameterName","parent":"Entity","type":"classfunc","description":"Returns name of given pose parameter","realm":"Shared","args":{"arg":{"text":"Id of the pose paremeter","name":"id","type":"number"}},"rets":{"ret":{"text":"Name of given pose parameter","name":"","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetPoseParameter","parent":"Entity","type":"classfunc","description":"Returns the pose parameter value","realm":"Shared","args":{"arg":{"text":"Pose parameter name to look up","name":"name","type":"string"}},"rets":{"ret":{"text":"Value of given pose parameter.","name":"","type":"number","warning":{"text":"This value will be from 0 - 1 on the client and from minimum range to maximum range on the server! You'll have to  this value clientside to Entity:GetPoseParameterRange's returns if you want get the actual pose parameter value. See Entity:SetPoseParameter's example.","page":",remapmath.Remap"}}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetPoseParameterRange","parent":"Entity","type":"classfunc","description":"Returns pose parameter range","realm":"Shared","args":{"arg":{"text":"Pose parameter ID to look up","name":"id","type":"number"}},"rets":{"ret":[{"text":"The minimum value","name":"","type":"number"},{"text":"The maximum value","name":"","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetPredictable","parent":"Entity","type":"classfunc","description":"Returns whether this entity is predictable or not.\n\nSee Entity:SetPredictable for more information","realm":"Client","rets":{"ret":{"text":"Whether this entity is predictable or not.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetPreferredCarryAngles","parent":"ENTITY","type":"classfunc","description":{"text":"Called to override the preferred carry angles of this object.","note":"This callback is only called for `anim` type entities."},"realm":"Server","added":"2021.01.27","args":{"arg":{"text":"The player who is holding the object.","name":"ply","type":"Player"}},"rets":{"ret":{"text":"Return an angle to override the carry angles.","name":"","type":"Angle"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetRagdollOwner","parent":"Entity","type":"classfunc","description":"Returns the entity which the ragdoll came from. The opposite of Player:GetRagdollEntity.","realm":"Shared","rets":{"ret":{"text":"The entity who owns the ragdoll.","name":"","type":"Entity"}}},"example":{"description":"Loop through all player ragdolls and print their owners (clientside).","code":"for _, ent in ipairs( ents.FindByClass( \"class C_HL2MPRagdoll\" ) ) do\n\tif ( IsValid( ent:GetRagdollOwner() ) ) then\n\t\tprint( ent:GetRagdollOwner() )\n\tend\nend","output":"While a player is dead and their ragdoll is spawned this returns: \n\nPlayer [1][PlayerName]"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetRenderAngles","parent":"Entity","type":"classfunc","description":"Returns the entity's render angles, set by Entity:SetRenderAngles in a drawing hook.","realm":"Client","rets":{"ret":{"text":"The entitys render angles","name":"","type":"Angle"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetRenderBounds","parent":"Entity","type":"classfunc","description":"Returns render bounds of the entity. Can be overridden by Entity:SetRenderBounds.\n\nIf the render bounds are not inside players view, the entity will not be drawn!","realm":"Client","rets":{"ret":[{"text":"The minimum vector of the bounds","name":"","type":"Vector"},{"text":"The maximum vector of the bounds.","name":"","type":"Vector"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetRenderMode","parent":"Entity","type":"classfunc","description":"Returns the render mode of the entity.","realm":"Shared","rets":{"ret":{"text":"The render Mode. See Enums/RENDERMODE","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetRenderGroup","parent":"Entity","type":"classfunc","description":"Returns the render group of the entity.","realm":"Client","rets":{"ret":{"text":"The render group. See Enums/RENDERGROUP","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetRenderFX","parent":"Entity","type":"classfunc","description":"Returns current render FX of the entity.","realm":"Shared","rets":{"ret":{"text":"The current render FX of the entity. See Enums/kRenderFx","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetRenderOrigin","parent":"Entity","type":"classfunc","description":"Returns the entity's render origin, set by Entity:SetRenderOrigin in a drawing hook.","realm":"Client","rets":{"ret":{"text":"The entitys render origin","name":"","type":"Vector"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetSaveTable","parent":"Entity","type":"classfunc","description":"Returns a table of save values for an entity.\n\nThese tables are not the same between the client and the server, and different entities may have different fields.\n\nYou can get the list different fields an entity has by looking at it's source code (the 2013 SDK can be found [online](https://github.com/ValveSoftware/source-sdk-2013)). Accessible fields are defined by each `DEFINE_FIELD` and `DEFINE_KEYFIELD` inside the `DATADESC` block.\n\nTake the headcrab, for example:\n\n```\nBEGIN_DATADESC( CBaseHeadcrab )\n\t// m_nGibCount - don't save\n\tDEFINE_FIELD( m_bHidden, FIELD_BOOLEAN ),\n\tDEFINE_FIELD( m_flTimeDrown, FIELD_TIME ),\n\tDEFINE_FIELD( m_bCommittedToJump, FIELD_BOOLEAN ),\n\tDEFINE_FIELD( m_vecCommittedJumpPos, FIELD_POSITION_VECTOR ),\n\tDEFINE_FIELD( m_flNextNPCThink, FIELD_TIME ),\n\tDEFINE_FIELD( m_flIgnoreWorldCollisionTime, FIELD_TIME ),\n\t\n\tDEFINE_KEYFIELD( m_bStartBurrowed, FIELD_BOOLEAN, \"startburrowed\" ),\n\tDEFINE_FIELD( m_bBurrowed, FIELD_BOOLEAN ),\n\tDEFINE_FIELD( m_flBurrowTime, FIELD_TIME ),\n\tDEFINE_FIELD( m_nContext, FIELD_INTEGER ),\n\tDEFINE_FIELD( m_bCrawlFromCanister, FIELD_BOOLEAN ),\n\tDEFINE_FIELD( m_bMidJump, FIELD_BOOLEAN ),\n\tDEFINE_FIELD( m_nJumpFromCanisterDir, FIELD_INTEGER ),\n\tDEFINE_FIELD( m_bHangingFromCeiling, FIELD_BOOLEAN ),\n\tDEFINE_FIELD( m_flIlluminatedTime, FIELD_TIME ),\n\t\t\n\tDEFINE_INPUTFUNC( FIELD_VOID, \"Burrow\", InputBurrow ),\n\tDEFINE_INPUTFUNC( FIELD_VOID, \"BurrowImmediate\", InputBurrowImmediate ),\n\tDEFINE_INPUTFUNC( FIELD_VOID, \"Unburrow\", InputUnburrow ),\n\tDEFINE_INPUTFUNC( FIELD_VOID, \"StartHangingFromCeiling\", InputStartHangingFromCeiling ),\n\tDEFINE_INPUTFUNC( FIELD_VOID, \"DropFromCeiling\", InputDropFromCeiling ),\n\t\n\t// Function Pointers\n\tDEFINE_THINKFUNC( EliminateRollAndPitch ),\n\tDEFINE_THINKFUNC( ThrowThink ),\n\tDEFINE_ENTITYFUNC( LeapTouch ),\nEND_DATADESC()\n```\n\n* For each **DEFINE_FIELD**, the save table will have a key with name of **first** argument.\n* For each **DEFINE_KEYFIELD**, the save table will have a key with name of the **third** argument.\n\nSee Entity:GetInternalVariable for only retrieving one key of the save table.","realm":"Shared","args":{"arg":{"text":"If set, shows all variables, not just the ones for save.","name":"showAll","type":"boolean"}},"rets":{"ret":{"text":"A table containing all save values in key/value format.\n\nThe value may be a sequential table (starting to **1**) if the field in question is an array in engine.","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetRotatedAABB","parent":"Entity","type":"classfunc","description":"Returns the min and max of the entity's axis-aligned bounding box.","realm":"Shared","args":{"arg":[{"text":"Minimum extent of the bounding box.","name":"min","type":"Vector"},{"text":"Maximum extent of the bounding box.","name":"max","type":"Vector"}]},"rets":{"ret":[{"text":"Minimum extent of the AABB","name":"","type":"Vector"},{"text":"Maximum extent of the AABB","name":"","type":"Vector"}]}},"example":{"description":"The entity's AABB center (regardless of model origin) is stored in 'pos'.","code":"local a, b = ent:GetRotatedAABB( v:OBBMins(), v:OBBMaxs() )\nlocal pos = ( ent:GetPos() + ( a + b ) / 2 )","output":"pos has the coordinates of the AABB center."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetRight","parent":"Entity","type":"classfunc","description":"Returns the rightward vector of the entity, as a normalized direction vector","realm":"Shared","rets":{"ret":{"text":"rightDir","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetSequence","parent":"Entity","type":"classfunc","description":"Return the index of the model sequence that is currently active for the entity.","realm":"Shared","rets":{"ret":{"text":"The index of the model sequence.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetSequenceActivity","parent":"Entity","type":"classfunc","description":"Return activity id out of sequence id. Opposite of Entity:SelectWeightedSequence.","realm":"Shared","args":{"arg":{"text":"The sequence ID","name":"seq","type":"number"}},"rets":{"ret":{"text":"The activity ID, ie Enums/ACT","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetSequenceActivityName","parent":"Entity","type":"classfunc","description":"Returns the activity name for the given sequence id.","realm":"Shared","args":{"arg":{"text":"The sequence id.","name":"sequenceId","type":"number"}},"rets":{"ret":{"text":"The Enums/ACT as a string, returns \"Not Found!\" with an invalid sequence and \"No model!\" when no model is set.","name":"","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetSequenceCount","parent":"Entity","type":"classfunc","description":"Returns the amount of sequences ( animations ) the entity's model has.","realm":"Shared","rets":{"ret":{"text":"The amount of sequences ( animations ) the entity's model has.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetSequenceGroundSpeed","parent":"Entity","type":"classfunc","description":"Returns the ground speed of the entity's sequence.","realm":"Shared","args":{"arg":{"text":"The sequence ID.","name":"sequenceId","type":"number"}},"rets":{"ret":{"text":"The ground speed of this sequence.","name":"","type":"number"}}},"example":{"description":{"text":"Move the NextBot based on the ground speed of its walking animation (within its coroutine).","note":"In most cases it's better to use NextBot:BodyMoveXY instead."},"code":"local sequence = self:LookupSequence( \"walk_all\" )\n\nif ( sequence ) then\n\tself:StartActivity( ACT_WALK )\n\tself:SetSequence( sequence )\n\tself.loco:SetDesiredSpeed( self:GetSequenceGroundSpeed( sequence ) )\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetSequenceMoveDist","parent":"Entity","type":"classfunc","description":"Returns an entity's sequence move distance (the change in position over the course of the entire sequence).","realm":"Server","args":{"arg":{"text":"The sequence index.","name":"sequenceId","type":"number"}},"rets":{"ret":{"text":"The move distance of the sequence.","name":"","type":"number"}}},"example":{"description":"Experiment which demonstrates that dividing the sequence move distance by Entity:SequenceDuration results in a value extremely close to Entity:GetSequenceGroundSpeed.","code":"local ply, seq, move_dist, seq_dur, ground_speed = nil, nil, nil, nil, nil\n\nfunction GM:Think()\n\n\t-- Player 1\n\tply = Entity(1)\n\t\n\t-- Current sequence\n\tseq = ply:GetSequence()\n\t\n\t-- The move distance\n\tmove_dist = ply:GetSequenceMoveDist(seq)\n\t\n\tif(move_dist == 0) then return end\t-- If it doesn't move, don't bother\n\t\n\t-- The sequence duration\n\tseq_dur = ply:SequenceDuration(seq)\n\t\n\t-- Actual sequence ground speed\n\tground_speed = ply:GetSequenceGroundSpeed(seq)\n\t\n\t-- Compare the calculated value to the actual value\n\tprint(tostring(ground_speed-(move_dist/seq_dur)))\n\nend","output":"A sample of some of the calculated vs. actual value differences during a sprint forward followed by an abrupt stop.\n\n```\n-3.3345255872064e-006\n3.3614563506035e-006\n0\n1.557984873557e-006\n```"},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetSequenceMovement","parent":"Entity","type":"classfunc","description":"Returns the delta movement and angles of a sequence of the entity's model.","realm":"Shared","args":{"arg":[{"text":"The sequence index. See Entity:GetSequenceName.","name":"sequenceId","type":"number"},{"text":"The sequence start cycle. 0 is the start of the animation, 1 is the end.","name":"startCycle","type":"number","default":"0"},{"text":"The sequence end cycle. 0 is the start of the animation, 1 is the end. Values like 2, etc are allowed.","name":"endCyclnde","type":"number","default":"1"}]},"rets":{"ret":[{"text":"Whether the operation was successful","name":"","type":"boolean"},{"text":"The delta vector of the animation, how much the model's origin point moved.","name":"","type":"Vector"},{"text":"The delta angle of the animation.","name":"","type":"Angle"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetSequenceList","parent":"Entity","type":"classfunc","description":"Returns a list of all sequences ( animations ) the model has.","realm":"Shared","rets":{"ret":{"text":"The list of all sequences ( animations ) the model has. The indices start with 0!","name":"","type":"table"}}},"example":{"description":"Example showing table structure. Prints a list of player model sequences.","code":"PrintTable( Entity(1):GetSequenceList() )","output":"```\n0\t=\tragdoll\n1\t=\treference\n2\t=\tidle_all_01\n3\t=\tidle_all_02\n4\t=\tidle_all_angry\n5\t=\tidle_all_scared\n6\t=\tidle_all_cower\n7\t=\tcidle_all\n8\t=\tswim_idle_all\n9\t=\tsit\n10\t=\tmenu_walk\n11\t=\tmenu_combine\n12\t=\tmenu_gman\n13\t=\twalk_all\n-- The rest of the sequences\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetSequenceInfo","parent":"Entity","type":"classfunc","description":"Returns a table of information about an entity's sequence.","realm":"Shared","args":{"arg":{"text":"The sequence id of the entity.","name":"sequenceId","type":"number"}},"rets":{"ret":{"text":"Table of information about the entity's sequence, or nil is ID is out of range. See Structures/SequenceInfo","name":"","type":"table"}}},"example":{"description":"Draw each player's current sequence bounding box with sequence name, activity number, and activity name above their head.","code":"function GM:PostPlayerDraw( ply )\n\n\tseqinfo = ply:GetSequenceInfo( ply:GetSequence() )\n\tseqinfo.player = ply\n\t\n\trender.DrawWireframeBox( ply:GetPos(), ply:GetAngles(), seqinfo.bbmin, seqinfo.bbmax, color_white, true )\n\t\nend\n\nfunction GM:HUDPaint()\n\n\tlocal seqinfo, textpos = nil, nil\n\n\tfor i, ply in ipairs( player.GetAll() ) do\n\t\n\t\tseqinfo = ply:GetSequenceInfo( ply:GetSequence() )\n\t\ttextpos = ( ply:GetPos() + Vector( 0, 0, seqinfo.bbmax.z + 10 ) ):ToScreen()\n\t\n\t\tif ( textpos.visible ) then\n\t\t\tdraw.SimpleText( seqinfo.label, \"GModNotify\", textpos.x, textpos.y, color_white, TEXT_ALIGN_CENTER )\n\t\t\tdraw.SimpleText( seqinfo.activity..\": \"..seqinfo.activityname, \"GModNotify\", textpos.x, textpos.y+20, color_white, TEXT_ALIGN_CENTER )\n\t\tend\n\t\n\tend\n\nend","output":{"image":{"src":"GetSequenceInfo_Example.jpg"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetSequenceMoveYaw","parent":"Entity","type":"classfunc","description":"Returns the change in heading direction in between the start and the end of the sequence.","realm":"Server","args":{"arg":{"text":"The sequence index. See Entity:LookupSequence.","name":"seq","type":"number"}},"rets":{"ret":{"text":"The yaw delta. Returns 99999 for no movement.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetShouldPlayPickupSound","parent":"Entity","type":"classfunc","description":{"text":"Checks if the entity plays a sound when picked up by a player.","bug":{"text":"This will return nil if Entity:SetShouldPlayPickupSound has not been called.","pull":"1488"}},"realm":"Shared","rets":{"ret":{"text":"True if it plays the pickup sound, false otherwise.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetShouldServerRagdoll","parent":"Entity","type":"classfunc","description":"Returns if entity should create a server ragdoll on death or a client one.","realm":"Shared","rets":{"ret":{"text":"Returns true if ragdoll will be created on server, false if on client","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetSequenceName","parent":"Entity","type":"classfunc","description":"Return the name of the sequence for the index provided.\nRefer to Entity:GetSequence to find the current active sequence on this entity.","realm":"Shared","args":{"arg":{"text":"The index of the sequence to look up.","name":"index","type":"number"}},"rets":{"ret":{"text":"Name of the sequence.","name":"","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetSkin","parent":"Entity","type":"classfunc","description":"Returns the skin index of the current skin.","realm":"Shared","rets":{"ret":{"text":"skinIndex","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetSolid","parent":"Entity","type":"classfunc","description":"Returns solid type of an entity.","realm":"Shared","rets":{"ret":{"text":"The solid type. See the Enums/SOLID.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetSolidFlags","parent":"Entity","type":"classfunc","description":"Returns solid flag(s) of an entity.","realm":"Shared","rets":{"ret":{"text":"The flag(s) of the entity, see Enums/FSOLID.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetSpawnEffect","parent":"Entity","type":"classfunc","description":"Returns if we should show a spawn effect on spawn on this entity.","realm":"Shared","rets":{"ret":{"text":"The flag to allow or disallow the spawn effect.","name":"","type":"boolean"}}},"example":{"description":"Taken from sandbox's cl_init.lua","code":"function GM:NetworkEntityCreated( ent )\n\n\t--\n\t-- If the entity wants to use a spawn effect\n\t-- then create a propspawn effect if the entity was\n\t-- created within the last second (this function gets called\n\t-- on every entity when joining a server)\n\t--\n\n\tif ( ent:GetSpawnEffect() && ent:GetCreationTime() > ( CurTime() - 1.0 ) ) then\n\t\n\t\tlocal ed = EffectData()\n\t\ted:SetEntity( ent )\n\t\tutil.Effect( \"propspawn\", ed, true, true )\n\n\tend\n\nend","output":"Checks if the entity has the spawnEffect flag set to true and checks if it was created in the last second, and then shows the propspawn effect."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetSpawnFlags","parent":"Entity","type":"classfunc","description":"Returns the bitwise spawn flags used by the entity.","realm":"Shared","rets":{"ret":{"text":"The spawn flags of the entity, see .","name":"","type":"number","page":",SF_EnumsEnums/SF"}}},"example":{"description":"An alternative to Entity:HasSpawnFlags","code":"local sf = ent:GetSpawnFlags()\n\nif( bit.band( sf, SF_PHYSPROP_PREVENT_PICKUP ) > 0 ) then\n\tprint( \"This prop cannot be picked up.\" )\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetSubMaterial","parent":"Entity","type":"classfunc","description":{"text":"Returns the material override for the given index. \n\nReturns \"\" if no material override exists. Use Entity:GetMaterials to list it's default materials.","bug":{"text":"The server's value takes priority on the client.","issue":"3362"}},"realm":"Shared","args":{"arg":{"text":"The index of the sub material. Acceptable values are from 0 to 31.","name":"index","type":"number"}},"rets":{"ret":{"text":"The material that overrides this index, if any.","name":"","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetSubModels","parent":"Entity","type":"classfunc","description":"Returns a list of models included into the entity's model in the .qc file.","realm":"Shared","rets":{"ret":{"text":"The list of models included into the entity's model in the .qc file.","name":"","type":"table"}}},"example":{"description":"Example structure of the  table. Prints into console sub models of a player model.","code":"PrintTable(Entity(1):GetSubModels() )","output":"```\n1:\n\t\tname\t=\tmodels/m_anm.mdl\n\t\tid\t=\t0\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetTouchTrace","parent":"Entity","type":"classfunc","description":{"text":"Returns the last trace used in the collision callbacks such as ENTITY:StartTouch, ENTITY:Touch and ENTITY:EndTouch.","note":"This returns the last collision trace used, regardless of the entity that caused it. As such, it's only reliable when used in the hooks mentioned above"},"realm":"Shared","rets":{"ret":{"text":"The Structures/TraceResult","name":"","type":"table"}}},"example":{"description":"Dispatches an explosion at the point of impact with another entity.","code":"function ENT:Touch( otherEntity )\n\tlocal tr = self:GetTouchTrace()\n\tlocal hitPos = tr.HitPos\n\n\tlocal effectdata = EffectData()\n\teffectdata:SetOrigin( hitPos )\n\tutil.Effect( \"Explosion\", effectdata )\n\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetTransmitWithParent","parent":"Entity","type":"classfunc","description":"Returns true if the TransmitWithParent flag is set or not.","realm":"Shared","file_name":"src/garrysmod/Objects/lua_entity.cpp","file_line":"5377","rets":{"ret":{"text":"Is the TransmitWithParent flag is set or not","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetTable","parent":"Entity","type":"classfunc","description":"Returns the table that contains all values saved within the entity.","realm":"Shared","rets":{"ret":{"text":"entTable","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetUp","parent":"Entity","type":"classfunc","description":"Returns the upward vector of the entity, as a normalized direction vector","realm":"Shared","rets":{"ret":{"text":"upDir","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetVar","parent":"Entity","type":"classfunc","description":"Retrieves a value from entity's Entity:GetTable. Set by Entity:SetVar.","realm":"Shared","file":{"text":"lua/includes/extensions/entity.lua","line":"39-L49"},"args":{"arg":[{"text":"Key of the value to retrieve","name":"key","type":"any"},{"text":"A default value to fallback to if we couldn't retrieve the value from entity","name":"default","type":"any","default":"nil"}]},"rets":{"ret":{"text":"Retrieved value","name":"","type":"any"}}},"example":{"description":"The 2 lines of code are functionally identical.","code":"print( Entity( 1 ):GetVar( \"Test\" ) )\n\nprint( Entity( 1 ).Test )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetUnFreezable","parent":"Entity","type":"classfunc","description":{"text":"Returns if the entity is unfreezable, meaning it can't be frozen with the physgun. By default props are freezable, so this function will typically return false.","bug":{"text":"This will return nil if Entity:SetUnFreezable has not been called.","pull":"1488"}},"realm":"Server","file":{"text":"lua/includes/extensions/entity.lua","line":"478"},"rets":{"ret":{"text":"True if the entity is unfreezable, false otherwise.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetVelocity","parent":"Entity","type":"classfunc","description":{"text":"Returns the entity's velocity.","note":"Actually binds to CBaseEntity::GetAbsVelocity() on the server and C_BaseEntity::EstimateAbsVelocity() on the client. This returns the total velocity of the entity and is equal to local velocity + base velocity.","bug":{"text":"This can become out-of-sync on the client if the server has been up for a long time.","issue":"774"}},"realm":"Shared","rets":{"ret":{"text":"The velocity of the entity.","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetWorkshopID","parent":"Entity","type":"classfunc","description":{"text":"Returns ID of workshop addon that the entity is from.","deprecated":"","warning":"The function **currently** does nothing and always returns nil"},"realm":"Server","rets":{"ret":{"text":"The workshop ID","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetWorldTransformMatrix","parent":"Entity","type":"classfunc","description":{"text":"Returns the position and angle of the entity as a 3x4 matrix (VMatrix is 4x4 so the fourth row goes unused). The first three columns store the angle as a [rotation matrix](https://en.wikipedia.org/wiki/Rotation_matrix), and the fourth column stores the position vector.","bug":[{"text":"This returns incorrect results for the angular component (columns 1-3) for the local player clientside.","issue":"2764"},{"text":"This will use the local player's Global.EyeAngles in .","issue":"3106","page":",rendering hooksCategory:3D_Rendering_Hooks"},{"text":"Columns 1-3 will be all 0 (angular component) in  while paused in single-player.","issue":"3107","page":",rendering hooksCategory:3D_Rendering_Hooks"}]},"realm":"Shared","rets":{"ret":{"text":"The position and angle matrix.","name":"","type":"VMatrix"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GibBreakClient","parent":"Entity","type":"classfunc","description":"Causes the entity to break into its current models gibs, if it has any.\n\nYou must call Entity:PrecacheGibs on the entity before using this function, or it will not create any gibs.\n\nIf called on server, the gibs will be spawned on the currently connected clients and will not be synchronized. Otherwise the gibs will be spawned only for the client the function is called on.\n\nNote, that this function will not remove or hide the entity it is called on.\n\nFor more expensive version of this function see Entity:GibBreakServer.","realm":"Shared","args":{"arg":[{"text":"The force to apply to the created gibs.","name":"force","type":"Vector"},{"text":"If set, this will be color of the broken gibs instead of the entity's color.","name":"clr","type":"table","default":"nil"}]}},"example":{"description":"A console command that breaks the prop the player is aiming at when they runt he command.","code":"concommand.Add( \"break\", function( ply )\n\tlocal tr = ply:GetEyeTrace()\n\tlocal ent = tr.Entity\n\tif ( !IsValid( ent ) ) then return end -- playing not looking at any entity, bail\n\n\tent:PrecacheGibs()\n\tent:GibBreakClient( tr.HitNormal * 100 ) -- Break in some direction\nend )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GibBreakServer","parent":"Entity","type":"classfunc","description":{"text":"Causes the entity to break into its current models gibs, if it has any.\n\nYou must call Entity:PrecacheGibs on the entity before using this function, or it will not create any gibs.\n\nThe gibs will be spawned on the server and be synchronized with all clients.\n\nNote, that this function will not remove or hide the entity it is called on.\n\nThis function is affected by `props_break_max_pieces_perframe` and `props_break_max_pieces` console variables.","warning":"Large numbers of serverside gibs will cause lag.\n\nYou can avoid this cost by spawning the gibs on the client using Entity:GibBreakClient","note":"Despite existing on client, it doesn't actually do anything on client."},"realm":"Shared","args":{"arg":{"text":"The force to apply to the created gibs","name":"force","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"HasFlexManipulatior","parent":"Entity","type":"classfunc","description":"Returns whether or not the the entity has had flex manipulations performed with Entity:SetFlexWeight or Entity:SetFlexScale.","realm":"Shared","rets":{"ret":{"text":"True if the entity has flex manipulations, false otherwise.","name":"","type":"boolean"}}},"example":{"description":"Defines server-side function which manipulates all of an entity's flexes and prints true if the entity has flex manipulations.","code":"function FlexExample(ent)\n\n\tif(!IsValid(ent)) then return end\n\t\n\t-- Loop through all flexes\n\tfor i = 0, ent:GetFlexNum()-1 do\n\t\n\t\t-- Set each flex to number ranging from 0.0 to 2.0\n\t\tent:SetFlexWeight(i, math.random()*2)\n\t\t\n\tend\n\t\n\t-- Print whether or not we have flex manipulations\n\tprint(ent:HasFlexManipulatior())\n\nend","output":{"text":"```\ntrue\n```","image":{"src":"Entity_HasFlexManipulatior_example1.jpg"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"HasSpawnFlags","parent":"Entity","type":"classfunc","description":"Returns whether this entity has the specified spawnflags bits set.","realm":"Shared","args":{"arg":{"text":"The spawnflag bits to check, see Enums/SF.","name":"spawnFlags","type":"number"}},"rets":{"ret":{"text":"Whether the entity has that spawnflag set or not.","name":"","type":"boolean"}}},"example":{"description":"As seen in sandbox's PhysgunPickup hook.","code":"function GM:PhysgunPickup( ply, ent )\n\n\t-- Don't move physboxes if the mapper logic says no\n\tif ( ent:GetClass() == \"func_physbox\" && ent:HasSpawnFlags( SF_PHYSBOX_MOTIONDISABLED ) ) then return false end\n\n\treturn true\n\t\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"HeadTarget","parent":"Entity","type":"classfunc","description":{"text":"Returns the position of the head of this entity, NPCs use this internally to aim at their targets.","note":"This only works on players and NPCs."},"realm":"Server","args":{"arg":{"text":"The vector of where the attack comes from.","name":"origin","type":"Vector"}},"rets":{"ret":{"text":"The head position.","name":"","type":"Vector"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"HasBoneManipulations","parent":"Entity","type":"classfunc","description":{"text":"Returns whether or not the bone manipulation functions have ever been called on given  entity.\n\nRelated functions are Entity:ManipulateBonePosition, Entity:ManipulateBoneAngles, Entity:ManipulateBoneJiggle, and Entity:ManipulateBoneScale.","bug":{"text":"This will return true if the entity's bones have ever been manipulated. Resetting the position/angles/jiggle/scaling to 0,0,0 will not affect this function.","issue":"3131"}},"realm":"Shared","rets":{"ret":{"text":"True if the entity has been bone manipulated, false otherwise.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Health","parent":"Entity","type":"classfunc","description":"Returns the health of the entity.","realm":"Shared","rets":{"ret":{"text":"health","name":"","type":"number"}}},"example":{"description":"Prints if the entity's health is at full or more.","code":"print( Entity( 1 ):Health() >= Entity( 1 ):GetMaxHealth() )","output":"\"true\" entity's health is greater than or equal to their max health, or \"false\" otherwise."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Ignite","parent":"Entity","type":"classfunc","description":{"text":"Sets the entity on fire.\n\nSee also Entity:Extinguish.","bug":{"text":"Under some conditions, a player who was previously on fire can still emit a burning sound when he is no longer on fire. A workaround is available on the github page. **This is fixed in the next update.**","issue":"3358"}},"realm":"Server","args":{"arg":[{"text":"How long to keep the entity ignited, in seconds.","name":"length","type":"number"},{"text":"The radius of the ignition, will ignite everything around the entity that is in this radius.","name":"radius","type":"number","default":"0"}]}},"example":{"description":"Ignite all props on the map for 30 seconds.","code":"for _, ent in ipairs( ents.FindByClass( \"prop_physics\" ) ) do\n   ent:Ignite(30)\nend"},"realms":["Server"],"type":"Function"},
{"function":{"name":"InitializeAsClientEntity","parent":"Entity","type":"classfunc","description":{"text":"Initializes this entity as being clientside only.\n\nOnly works on entities fully created clientside, and as such it has currently no use due this being automatically called by ents.CreateClientProp, ents.CreateClientside, Global.ClientsideModel and Global.ClientsideScene.","deprecated":"","bug":{"text":"Calling this on a clientside entity will crash the game.","issue":"3368"}},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"Input","parent":"Entity","type":"classfunc","description":"Fires input to the entity with the ability to make another entity responsible, bypassing the event queue system.\n\nYou should only use this function over Entity:Fire if you know what you are doing.\n\nSee also Entity:Fire for a function that conforms to the internal map IO event queue and GM:AcceptInput for a hook that can intercept inputs.","realm":"Server","args":{"arg":[{"text":"The name of the input to fire","name":"input","type":"string"},{"text":"The entity that caused this input (i.e. the player who pushed a button)","name":"activator","type":"Entity","default":"nil"},{"text":"The entity that is triggering this input (i.e. the button that was pushed)","name":"caller","type":"Entity","default":"nil"},{"text":"The value to give to the input. Can be either a string, a number or a boolean.","name":"param","type":"any","default":"nil"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"InstallDataTable","parent":"Entity","type":"classfunc","description":{"text":"Sets up Data Tables from entity to use with Entity:NetworkVar.","internal":""},"realm":"Shared","file":{"text":"lua/includes/extensions/entity.lua","line":"187-L511"}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"InvalidateBoneCache","parent":"Entity","type":"classfunc","description":"Resets the entity's bone cache values in order to prepare for a model change.\n\nThis should be called after calling Entity:SetPoseParameter.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsConstrained","parent":"Entity","type":"classfunc","description":{"text":"Returns true if the entity has constraints attached to it","bug":{"text":"This will only update clientside if the server calls it first. This only checks constraints added through the constraint so this will not react to map constraints.","issue":"3837"}},"realm":"Shared","file":{"text":"lua/includes/extensions/entity.lua","line":"63-L85"},"rets":{"ret":{"text":"Whether the entity is constrained or not.","name":"","type":"boolean"}}},"example":{"description":"From entities/prop_effect.lua","code":"function ENT:PhysicsUpdate( physobj )\n\n\tif ( CLIENT ) then return end\n\n\t-- Don't do anything if the player isn't holding us\n\tif ( !self:IsPlayerHolding() && !self:IsConstrained() ) then\n\t\tphysobj:SetVelocity( Vector(0,0,0) )\n\t\tphysobj:Sleep() \n\tend\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsConstraint","parent":"Entity","type":"classfunc","description":"Returns if entity is constraint or not","realm":"Server","rets":{"ret":{"text":"Is the entity a constraint or not","name":"","type":"boolean"}}},"example":{"description":"Returns true if player 1 is aiming at constraint.","code":"print( Entity(1):GetEyeTrace().Entity:IsConstraint() )","output":"false"},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsDormant","parent":"Entity","type":"classfunc","description":"Returns whether the entity is dormant or not. Client/server entities become dormant when they leave the PVS on the server. Client side entities can decide for themselves whether to become dormant. This mainly applies to PVS.","realm":"Shared","rets":{"ret":{"text":"Whether the entity is dormant or not.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsEffectActive","parent":"Entity","type":"classfunc","description":"Returns whether an entity has engine effect applied or not.","realm":"Shared","args":{"arg":{"text":"The effect to check for, see Enums/EF.","name":"effect","type":"number"}},"rets":{"ret":{"text":"Whether the entity has the engine effect applied or not.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsEFlagSet","parent":"Entity","type":"classfunc","description":"Checks if given flag is set or not.","realm":"Shared","args":{"arg":{"text":"The engine flag to test, see Enums/EFL","name":"flag","type":"number"}},"rets":{"ret":{"text":"Is set or not","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsInWorld","parent":"Entity","type":"classfunc","description":{"text":"Returns whether the entity is inside a wall or outside of the map.","note":"Internally this function uses util.IsInWorld, that means that this function only checks Entity:GetPos of the entity. If an entity is only partially inside a wall, or has a weird GetPos offset, this function may not give reliable output."},"realm":"Server","rets":{"ret":{"text":"Is the entity in world","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsLagCompensated","parent":"Entity","type":"classfunc","description":"Returns whether the entity is lag compensated or not.","realm":"Server","rets":{"ret":{"text":"Whether the entity is lag compensated or not.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsLineOfSightClear","parent":"Entity","type":"classfunc","description":{"text":"Returns true if the target is in line of sight.","note":"This will only work when called on CBaseCombatCharacter entities. This includes players, NPCs, grenades, RPG rockets, crossbow bolts, and physics cannisters."},"realm":"Shared","file_name":"src/garrysmod/Objects/lua_entity.cpp","file_line":"5337","args":{"arg":{"text":"The target to test. You can also supply an Entity instead of a Vector","name":"target","type":"Vector"}},"rets":{"ret":{"text":"Returns true if the line of sight is clear","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsFlagSet","parent":"Entity","type":"classfunc","description":"Checks if given flag(s) is set or not.","realm":"Shared","args":{"arg":{"text":"The engine flag(s) to test, see Enums/FL","name":"flag","type":"number"}},"rets":{"ret":{"text":"Is set or not","name":"","type":"boolean"}}},"example":{"description":"Checks if the player is on the ground.","code":"print( Entity( 1 ):IsFlagSet( FL_ONGROUND ))","output":"`true`"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsNextBot","parent":"Entity","type":"classfunc","description":"Checks if the entity is a NextBot or not.","realm":"Shared","rets":{"ret":{"text":"Whether the entity is an NextBot entity or not.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsMarkedForDeletion","parent":"Entity","type":"classfunc","description":"Returns if the entity is going to be deleted in the next frame.","realm":"Shared","rets":{"ret":{"text":"If the entity is going to be deleted.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsPlayer","parent":"Entity","type":"classfunc","description":"Checks if the entity is a player or not.","realm":"Shared","rets":{"ret":{"text":"Whether the entity is a player.","name":"","type":"boolean"}}},"example":{"description":"Checks if two entities are players.","code":"print( Entity( 1 ):IsPlayer() )\nprint( ents.FindByClass( \"prop_physics\" )[ 1 ]:IsPlayer() )","output":"```\ntrue\nfalse\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsOnGround","parent":"Entity","type":"classfunc","description":{"text":"Returns whether the entity is on ground or not.\n\nInternally, this checks if  is set on the entity.\n\nThis function is an alias of Entity:OnGround.","page":",FL_ONGROUNDEnums/FL"},"realm":"Shared","rets":{"ret":{"text":"Whether the entity is on ground or not.","name":"","type":"boolean"}}},"example":{"description":"Demonstrates the use of this function.","code":"print( Entity( 1 ):IsOnGround() )\nprint( IsValid( Entity( 1 ):GetGroundEntity() ) ) -- This should give the exact output as the first line","output":"Outputs 'true' to the console if the player 1 is on ground."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsNPC","parent":"Entity","type":"classfunc","description":"Checks if the entity is an NPC or not.\n\nThis will return false for NextBots, see Entity:IsNextBot for that.","realm":"Shared","rets":{"ret":{"text":"Whether the entity is an NPC.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsOnFire","parent":"Entity","type":"classfunc","description":"Returns whether the entity is on fire.","realm":"Shared","rets":{"ret":{"text":"Whether the entity is on fire or not.","name":"","type":"boolean"}}},"example":{"description":"Demonstrates the use of this function.","code":"print( Entity(1):IsOnFire() )","output":"Outputs 'true' to the console if the player 1 is on fire."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsPlayerHolding","parent":"Entity","type":"classfunc","description":{"text":"Returns true if the entity is being held by a player. Either by physics gun, gravity gun or use-key (+use).","bug":{"text":"If multiple players are holding an object and one drops it, this will return false despite the object still being held.","issue":"2046"}},"realm":"Server","rets":{"ret":{"text":"IsBeingHeld","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsPlayingGesture","parent":"Entity","type":"classfunc","description":{"text":"Returns whether there's a gesture is given activity being played.","note":"This function only works on BaseAnimatingOverlay entites!"},"realm":"Server","args":{"arg":{"text":"The activity to test. See Enums/ACT.","name":"activity","type":"number"}},"rets":{"ret":{"text":"Whether there's a gesture is given activity being played.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsRagdoll","parent":"Entity","type":"classfunc","description":"Checks if the entity is a ragdoll.","realm":"Shared","rets":{"ret":{"text":"Is ragdoll or not","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsScripted","parent":"Entity","type":"classfunc","description":"Checks if the entity is a SENT or a built-in entity.","realm":"Shared","rets":{"ret":{"text":"Returns true if entity is scripted ( SENT ), false if not ( A built-in engine entity )","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsSolid","parent":"Entity","type":"classfunc","description":"Returns if the entity is solid or not.\nVery useful for determining if the entity is a trigger or not.","realm":"Shared","rets":{"ret":{"text":"Whether the entity is solid or not.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsValid","parent":"Entity","type":"classfunc","description":{"text":"Returns whether the entity is a valid entity or not.\n\nAn entity is valid if:\n* It is not a  entity\n* It is not the worldspawn entity (game.GetWorld)\n\n\n\nIt will check whether the given variable contains an object (an Entity) or nothing at all for you. See examples.\n\n\nThis might be a cause for a lot of headache. Usually happening during networking etc., when completely valid entities suddenly become invalid on the client, but are never filtered with IsValid(). See GM:InitPostEntity for more details.","page":",NULLGlobal_Variables","note":"Instead of calling this method directly, it's a good idea to call the global Global.IsValid instead, however if you're sure the variable you're using is always an entity object it's better to use this method","warning":"NULL entities can still be assigned with key/value pairs, but they will be instantly negated. See example 3"},"realm":"Shared","rets":{"ret":{"text":"true if the entity is valid, false otherwise","name":"","type":"boolean"}}},"example":[{"description":"Shows how to use the global Global.IsValid function instead of using this method directly.","code":"if ( entity && entity:IsValid() ) then\n\t-- Do stuff\nend\n\n-- The above can be replaced with the following for the same effect (and cleaner code)\n\nif ( IsValid( entity ) ) then\n\t-- Do stuff\nend"},{"code":"print( LocalPlayer():IsValid() )","output":"Outputs 'true' to the console if the player is in-game."},{"code":"local newPlayer = net.ReadEntity() --server found a new player on the server and sent it to us after \nprint( \"1/4\" )              -- it determined it was valid (newPlayer is NULL in this realm)\n\nif not isnumber(newPlayer.ImportantGameData) then --If it doesn't have a specific field, assign a value to it\n\tprint( \"2/4\" )\n\tnewPlayer.ImportantGameData = 42 \nend\nprint( \"3/4\" )\n\nprint( newPlayer.ImportantGameData * 69 ) --Attempting to do arithmetics on the new field\nprint( \"4/4\" )","output":"1/4 ... 3/4\n* A lua error telling us 'ImportantGameData' is a nil value and thus can't perform math on it\n----\nBut this shouldn't be possible, because we just created a value there. No red flags are present up until this point; all code up until this will run fine. Make sure to add an IsValid() check when the seemingly impossible happens."}],"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsSequenceFinished","parent":"Entity","type":"classfunc","description":"Returns whether the entity's current sequence is finished or not.","realm":"Shared","added":"2020.04.29","rets":{"ret":{"text":"Whether the entity's sequence is finished or not.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsValidLayer","parent":"Entity","type":"classfunc","description":{"text":"Returns whether the given layer ID is valid and exists on this entity.","note":"This function only works on BaseAnimatingOverlay entities."},"realm":"Shared","args":{"arg":{"text":"The Layer ID","name":"layerID","type":"number"}},"rets":{"ret":{"text":"Whether the given layer ID is valid and exists on this entity.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsVehicle","parent":"Entity","type":"classfunc","description":"Checks if the entity is a vehicle or not.","realm":"Shared","rets":{"ret":{"text":"Whether the entity is a vehicle.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsWidget","parent":"Entity","type":"classfunc","description":"Returns whether the entity is a widget or not.\n\nThis is used by the \"Edit Bones\" context menu property.","realm":"Shared","file":{"text":"lua/includes/modules/widget.lua","line":"158"},"rets":{"ret":{"text":"Whether the entity is a widget or not.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsWorld","parent":"Entity","type":"classfunc","description":"Returns if the entity is the map's Entity[0] worldspawn","realm":"Shared","rets":{"ret":{"text":"isWorld","name":"","type":"boolean"}}},"example":{"description":"Stool boilerplate for the ignite tool","code":"function TOOL:LeftClick( trace )\n local ent = trace.Entity\n if !ent or !ent:IsValid() or ent:IsPlayer() or ent:IsWorld() then return false end\n ...","output":"LeftClick will not run for no ent, invalid ents, players, or worldspawn."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsWeapon","parent":"Entity","type":"classfunc","description":"Checks if the entity is a weapon or not.","realm":"Shared","rets":{"ret":{"text":"Whether the entity is a weapon","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"LocalToWorld","parent":"Entity","type":"classfunc","description":"Converts a vector local to an entity into a worldspace vector","realm":"Shared","args":{"arg":{"text":"The local vector","name":"lpos","type":"Vector"}},"rets":{"ret":{"text":"The translated to world coordinates vector","name":"","type":"Vector"}}},"example":{"description":"Produces a worldvector 100 units in front of the center of the entity, taking into account the entity's angle","code":"return ent:LocalToWorld(Vector(100,0,0))"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"LocalToWorldAngles","parent":"Entity","type":"classfunc","description":"Converts a local angle (local to the entity) to a world angle.","realm":"Shared","args":{"arg":{"text":"The local angle","name":"ang","type":"Angle"}},"rets":{"ret":{"text":"The world angle","name":"","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"LookupBone","parent":"Entity","type":"classfunc","description":"Gets the bone index of the given bone name, returns nothing if the bone does not exist.","realm":"Shared","args":{"arg":{"text":"The name of the bone.\n\nCommon generic bones ( for player models and some HL2 models ): \n* ValveBiped.Bip01_Head1\n* ValveBiped.Bip01_Spine\n* ValveBiped.Anim_Attachment_RH\n\nCommon hand bones (left hand equivalents also available, replace _R_ with _L_)\n* ValveBiped.Bip01_R_Hand\n* ValveBiped.Bip01_R_Forearm\n* ValveBiped.Bip01_R_Foot\n* ValveBiped.Bip01_R_Thigh\n* ValveBiped.Bip01_R_Calf\n* ValveBiped.Bip01_R_Shoulder\n* ValveBiped.Bip01_R_Elbow","name":"boneName","type":"string"}},"rets":{"ret":{"text":"Index of the given bone name","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"LookupAttachment","parent":"Entity","type":"classfunc","description":"Returns the attachment index of the given attachment name.","realm":"Shared","args":{"arg":{"text":"The name of the attachment.","name":"attachmentName","type":"string"}},"rets":{"ret":{"text":"The attachment index, or 0 if the attachment does not exist and -1 if the model is invalid.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"LookupPoseParameter","parent":"Entity","type":"classfunc","description":"Returns pose parameter ID from its name.","realm":"Shared","added":"2020.03.17","args":{"arg":{"text":"Pose parameter name","name":"name","type":"string"}},"rets":{"ret":{"text":"The ID of the given pose parameter name, if it exists, -1 otherwise","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"LookupSequence","parent":"Entity","type":"classfunc","description":"Returns sequence ID from its name.","realm":"Shared","args":{"arg":{"text":"Sequence name","name":"name","type":"string"}},"rets":{"ret":[{"text":"Sequence ID for that name. This **will** differ for models with same sequence names. Will be -1 whether the sequence is invalid.","name":"","type":"number"},{"text":"The sequence duration\n* 0 if the sequence is invalid","name":"","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"MakePhysicsObjectAShadow","parent":"Entity","type":"classfunc","description":{"text":"Turns the Entity:GetPhysicsObject into a physics shadow.\nIt's used internally for the Player's and NPC's physics object, and certain HL2 entities such as the crane.\n\nA physics shadow can be used to have static entities that never move by setting both arguments to false.","note":"Unlike Entity:PhysicsInitShadow, this function doesn't remove the current physics object."},"realm":"Shared","args":{"arg":[{"text":"Whether to allow the physics shadow to move under stress.","name":"allowPhysicsMovement","type":"boolean","default":"true"},{"text":"Whether to allow the physics shadow to rotate under stress.","name":"allowPhysicsRotation","type":"boolean","default":"true"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ManipulateBoneJiggle","parent":"Entity","type":"classfunc","description":"Manipulates the bone's jiggle status. This allows non jiggly bones to become jiggly.","realm":"Shared","args":{"arg":[{"text":"Index of the bone you want to manipulate.","name":"boneID","type":"number"},{"text":"0 = No Jiggle\n1 = Jiggle","name":"enabled","type":"number"}]}},"example":{"description":"Turn everyone into jelly mode","code":{"text":"for k, ply in ipairs( player.GetAll() ) do\n\tlocal i = 0\n\n\twhile i","ply:getbonecount":{"do":"","ply:manipulatebonejigglei":"","i":"i","end":"","ode":"ode"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ManipulateBonePosition","parent":"Entity","type":"classfunc","description":"Sets custom bone offsets.","realm":"Shared","args":{"arg":[{"text":"Index of the bone you want to manipulate","name":"boneID","type":"number"},{"text":"Position vector to apply\n\n\n\n\nNote that the position is relative to the original bone position, not relative to the world or the entity.","name":"pos","type":"Vector"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ManipulateBoneScale","parent":"Entity","type":"classfunc","description":{"text":"Sets custom bone scale.","warning":"When used serverside, this method produces a huge network consumption!","bug":{"text":"This does not scale procedural bones.","issue":"3502"}},"realm":"Shared","args":{"arg":[{"text":"Index of the bone you want to manipulate","name":"boneID","type":"number"},{"text":"Scale vector to apply. Note that the scale is relative to the original bone scale, not relative to the world or the entity.","name":"scale","type":"Vector","bug":{"text":"The vector will be normalised if its longer than 32 units.","issue":"1249"}}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ManipulateBoneAngles","parent":"Entity","type":"classfunc","description":{"text":"Sets custom bone angles.","note":"The repeated use of bone manipulation in multiplayer games is highly discouraged due to the huge produced network traffic."},"realm":"Shared","args":{"arg":[{"text":"Index of the bone you want to manipulate","name":"boneID","type":"number"},{"text":"Angle to apply.\n\nThe angle is relative to the original bone angle, not relative to the world or the entity.","name":"ang","type":"Angle"}]}},"example":{"description":"This example shows the network usage impact of repeatedly using bone manipulation serverside.\n\nTo see the difference, type in client's console: **net_graph 3**\n\nThe rotation is not smooth when using Entity:SetNWFloat() because it does not update the value on every frame.","code":"local server_only = true -- Change the value!\n\nif server_only then\n\tif SERVER then\n\t\thook.Add( \"Think\", \"bone_manipulation_test\", function()\n\t\t\tfor _,ent in ipairs( ents.FindByModel( \"models/buggy.mdl\" ) ) do\n\t\t\t\tent:ManipulateBoneAngles( 28, Angle( 0,0,RealTime()*180 ) )\n\t\t\tend\n\t\tend )\n\telse\n\t\thook.Add( \"Think\", \"bone_manipulation_test\", function()\n\t\tend )\n\tend\nelse\n\tif SERVER then\n\t\thook.Add( \"Think\", \"bone_manipulation_test\", function()\n\t\t\tfor _,ent in ipairs( ents.FindByModel( \"models/buggy.mdl\" ) ) do\n\t\t\t\tent:SetNWFloat( \"bone_manipulation_test\", RealTime()*180 ) -- Entity:SetNW....() do not broadcast new values instantly\n\t\t\tend\n\t\tend )\n\telse\n\t\thook.Add( \"Think\", \"bone_manipulation_test\", function()\n\t\t\tfor _,ent in ipairs( ents.GetAll() ) do\n\t\t\t\tif ent:GetModel() == \"models/buggy.mdl\" then\n\t\t\t\t\tent:ManipulateBoneAngles( 28, Angle( 0,0,ent:GetNWFloat( \"bone_manipulation_test\" ) ) )\n\t\t\t\tend\n\t\t\tend\n\t\tend )\n\tend\nend","output":"Rotation of the ammo box of all HL2 buggies."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"MapCreationID","parent":"Entity","type":"classfunc","description":"Returns entity's map creation ID. Unlike Entity:EntIndex or Entity:GetCreationID, it will always be the same on same map, no matter how much you clean up or restart it.\n\nTo be used in conjunction with ents.GetMapCreatedEntity.","realm":"Server","rets":{"ret":{"text":"The map creation ID or -1 if the entity is not compiled into the map.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"MarkShadowAsDirty","parent":"Entity","type":"classfunc","description":"Refreshes the shadow of the entity.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"NearestPoint","parent":"Entity","type":"classfunc","description":"Performs a Ray-Orientated Bounding Box intersection from the given position to the origin of the OBBox with the entity and returns the hit position on the OBBox.\n\nThis relies on the entity having a collision mesh (not a physics object) and will be affected by `SOLID_NONE`","realm":"Shared","args":{"arg":{"text":"The vector to start the intersection from.","name":"position","type":"Vector"}},"rets":{"ret":{"text":"The nearest hit point of the entity's bounding box in world coordinates.","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"MuzzleFlash","parent":"Entity","type":"classfunc","description":"Fires the muzzle flash effect of the weapon the entity is carrying. This only creates a light effect and is often called alongside Weapon:SendWeaponAnim","realm":"Shared"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"NetworkVarNotify","parent":"Entity","type":"classfunc","description":{"text":"Creates a callback that will execute when the given network variable changes - that is, when the `Set","name":{"text":"()` function is run.","note":{"text":"The callback is executed **before** the value is changed, and is called even if the new and old values are the same.\n\nThis function does not exist on entities in which Entity:InstallDataTable has not been called. By default, this means this function only exists on SENTs (both serverside and clientside) and on players with a  (serverside and clientside Global.LocalPlayer only). It's therefore safest to only use this in ENTITY:SetupDataTables.","page":",Player ClassPlayer_Classes"},"bug":{"text":"The callback will not be called clientside if the var is changed right after entity spawn.","request":"324"}}},"realm":"Shared","file":{"text":"lua/includes/extensions/entity.lua","line":"315-L325"},"args":{"arg":[{"text":"Name of variable to track changes of.","name":"name","type":"string"},{"text":"The function to call when the variable changes. It is passed 4 arguments:\n* Entity entity - Entity whos variable changed.\n* string name - Name of changed variable.\n* any old - Old/current variable value.\n* any new - New variable value that it was set to.","name":"callback","type":"function"}]}},"example":{"description":"Example usage.","code":"function ENT:SetupDataTables()\n\tself:NetworkVar( \"Float\", 0, \"Amount\" )\n\tself:NetworkVar( \"Vector\", 1, \"StartPos\" )\n\tself:NetworkVar( \"Vector\", 2, \"EndPos\" )\n\n\tif ( SERVER ) then\n\t\tself:NetworkVarNotify( \"EndPos\", self.OnVarChanged )\n\tend\nend\n\nfunction ENT:OnVarChanged( name, old, new )\n\tprint( name, old, new )\nend","output":"Prints variable name, old value and new value whenever SetEndPos function is called."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"NextThink","parent":"Entity","type":"classfunc","description":{"text":"In the case of a scripted entity, this will cause the next ENTITY:Think event to be run at the given time.\n\nDoes not work clientside! Use Entity:SetNextClientThink instead.","bug":{"text":"This does not work with SWEPs or Nextbots.","issue":"3269"}},"realm":"Shared","args":{"arg":{"text":"The relative to Global.CurTime timestamp, at which the next think should occur.","name":"timestamp","type":"number"}}},"example":{"description":"Prints 'Hello, World!' in console and sleeps for a second.","code":"function ENT:Think()\n    print(\"Hello, World!\")\n\n    self:NextThink( CurTime() + 1 )\n    return true -- Note: You need to return true to override the default next think time\nend","output":"Hello, World! every second the entity exists in the world."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"OBBMaxs","parent":"Entity","type":"classfunc","description":"Returns the highest corner of an entity's bounding box as a local vector.","realm":"Shared","rets":{"ret":{"text":"The local position of the highest corner of the entity's oriented bounding box.","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"NetworkVarElement","parent":"Entity","type":"classfunc","description":{"text":"Similarly to Entity:NetworkVar, creates a network variable on the entity and adds Set/Get functions for it. This method stores it's value as a member value of a vector or an angle. This allows to go beyond the normal variable limit of Entity:NetworkVar for `Int` and `Float` types, at the expense of `Vector` and `Angle` limit.\n\nThis function should only be called in ENTITY:SetupDataTables.","warning":"Make sure to not call the SetDT* and your custom set methods on the client realm unless you know exactly what you are doing."},"realm":"Shared","args":{"arg":[{"text":"Supported choices:\n* `Vector`\n* `Angle`","name":"type","type":"string"},{"text":"The slot for this `Vector` or `Angle`, from `0` to `31`. See Entity:NetworkVar for more detailed explanation.","name":"slot","type":"number"},{"text":"Which element of a `Vector` or an `Angle` to store the value on. This can be `p`, `y`, `r` for Angles, and `x`, `y`, `z` for Vectors","name":"element","type":"string"},{"text":"The name will affect how you access it. If you call it `Foo` you would add two new functions on your entity - `SetFoo()` and `GetFoo()`. So be careful that what you call it won't collide with any existing functions (don't call it \"Pos\" for example).","name":"name","type":"string"},{"text":"A table of extra information. See Entity:NetworkVar for details.","name":"extended","type":"table","default":"nil"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"NetworkVar","parent":"Entity","type":"classfunc","description":{"text":"Creates a network variable on the entity and adds Set/Get functions for it. This function should only be called in ENTITY:SetupDataTables.\n\nSee Entity:NetworkVarNotify for a function to hook NetworkVar changes.","warning":["Make sure to not call the SetDT* and your custom set methods on the client realm unless you know exactly what you are doing.","Entity NetworkVars may briefly be incorrect due to how PVS networking and entity indexes work."]},"realm":"Shared","args":{"arg":[{"text":"Supported choices:\n\n* `String`\n* `Bool`\n* `Float`\n* `Int` (32-bit signed integer)\n* `Vector`\n* `Angle`\n* `Entity`","name":"type","type":"string"},{"text":"Each network variable has to have a unique slot. The slot is per type - so you can have an int in slot `0`, a bool in slot `0` and a float in slot `0` etc. You can't have two ints in slot `0`, instead you would do a int in slot `0` and another int in slot `1`.\n\nThe max slots right now are `32` - so you should pick a number between `0` and `31`. An exception to this is strings which has a max slots of `4`.","name":"slot","type":"number"},{"text":"The name will affect how you access it. If you call it `Foo` you would add two new functions on your entity - `SetFoo()` and `GetFoo()`. So be careful that what you call it won't collide with any existing functions (don't call it `Pos` for example).","name":"name","type":"string"},{"text":"A table of extended information.\n\n`KeyName`\n* Allows the NetworkVar to be set using Entity:SetKeyValue. This is useful if you're making an entity that you want to be loaded in a map. The sky entity uses this.\n\n`Edit`\n* The edit key lets you mark this variable as editable. See Editable Entities for more information.","name":"extended","type":"table","default":"nil"}]}},"example":{"description":"Setting up data tables","code":"function ENT:SetupDataTables()\n\n\tself:NetworkVar( \"Float\", 0, \"Amount\" )\n\tself:NetworkVar( \"Vector\", 0, \"StartPos\" )\n\tself:NetworkVar( \"Vector\", 1, \"EndPos\" )\n\nend\n\n-- Code...\n\n-- Setting values on the entity\nself:SetStartPos( Vector( 1, 0, 0 ) )\nself:SetAmount( 100 )\n\n-- Code...\n\n-- Getting values\nlocal startpos = self:GetStartPos()"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"OBBCenter","parent":"Entity","type":"classfunc","description":"Returns the center of an entity's bounding box as a local vector.","realm":"Shared","rets":{"ret":{"text":"OBBCenter","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"OBBMins","parent":"Entity","type":"classfunc","description":"Returns the lowest corner of an entity's bounding box as a local vector.","realm":"Shared","rets":{"ret":{"text":"The local position of the lowest corner of the entity's oriented bounding box.","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ObjectCaps","parent":"Entity","type":"classfunc","description":{"text":"Returns the entity's capabilities as a bitfield.\n\nIn the engine this function is mostly used to check the use type, the save/restore system and level transitions flags.\n\nEven though the function is defined shared, it is not guaranteed to return the same value across states.","note":"The enums for this are not currently implemented in Lua, however you can access the defines [here](https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/shared/baseentity_shared.h#L21-L38)."},"realm":"Shared","rets":{"ret":{"text":"The bitfield, a combination of the [FCAP_](https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/shared/baseentity_shared.h#L21-L38) flags.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"OnGround","parent":"Entity","type":"classfunc","description":{"text":"Returns true if the entity is on the ground, and false if it isn't.\n\nInternally, this checks if  is set on the entity. This is only updated for players and NPCs, and thus won't inherently work for other entities.","page":",FL_ONGROUNDEnums/FL"},"realm":"Shared","rets":{"ret":{"text":"Whether the entity is on the ground or not.","name":"","type":"boolean"}}},"example":{"description":"Prints if Entity(1) is on the ground or not.","code":"print( Entity( 1 ):OnGround() )\nprint( Entity( 1 ):IsFlagSet( FL_ONGROUND ) ) -- This should give exact same output as the first line","output":"In most cases, true."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"PassesDamageFilter","parent":"Entity","type":"classfunc","description":{"text":"Tests whether the damage passes the entity filter.\n\nThis will call ENTITY:PassesDamageFilter on scripted entities of the type \"filter\".","note":"This function only works on entities of the type \"filter\". ( filter_* entities, including base game filter entites )"},"realm":"Server","args":{"arg":{"text":"The damage info to test","name":"dmg","type":"CTakeDamageInfo"}},"rets":{"ret":{"text":"Whether the damage info passes the entity filter.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"PassesFilter","parent":"Entity","type":"classfunc","description":{"text":"Tests whether the entity passes the entity filter.\n\nThis will call ENTITY:PassesFilter on scripted entities of the type \"filter\".","note":"This function only works on entities of the type \"filter\". ( filter_* entities, including base game filter entites )"},"realm":"Server","args":{"arg":[{"text":"The initiator of the test.\n\nFor example the trigger this filter entity is used in.","name":"caller","type":"Entity"},{"text":"The entity to test against the entity filter.","name":"ent","type":"Entity"}]},"rets":{"ret":{"text":"Whether the entity info passes the entity filter.","name":"","type":"boolean"}}},"example":{"description":"Ready-to-use entity for controlling Hammer entities through Lua (for example for `trigger_teleport`). This entity works like a CRecipientFilter: filter has a list of allowed and not allowed entities for each trigger. Note, you can add not only players.","code":"-- entities/filter_lua.lua\nENT.Type = \"filter\" -- This should be set or the entity won't work\nENT.Base = \"base_filter\" -- Base\n\nfunction ENT:Initialize()\n\tself.Lists = {} -- Creating lists\nend\n\nfunction ENT:AttachToEntity(ent) -- Attaches filter to the entity\n\tent:SetSaveValue(\"m_hFilter\", self)\n\tself.Lists[ent] = {}\nend\n\nfunction ENT:AddPlayer(ent, ply, shouldTrigger) -- Adds player to the list. `shouldTrigger` decides if the player can use this entity\n\tif not self.Lists[ent] then\n\t\terror(\"Attach filter to the entity first\")\n\tend\n\n\tself.Lists[ent][ply] = not shouldTrigger\nend\n\nfunction ENT:AddAllPlayers(ent, shouldTrigger) -- Adds all players. Same as ENT:AddPlayer\n\tif not self.Lists[ent] then\n\t\terror(\"Attach filter to the entity first\")\n\tend\n\n\tfor k, v in ipairs(player.GetAll()) do\n\t\tself.Lists[ent][v] = not shouldTrigger\n\tend\nend\n\nfunction ENT:PassesFilter(trigger, ent) -- The core of the entity. This decides if the entity is able to use the trigger.\n\treturn not self.Lists[trigger][ent]\nend\n\n-- autorun/server/filter.lua (this is just an example of usage)\nlocal function CreateLuaFilter()\n\tif LuaFilter then\n\t\tLuaFilter:Remove() -- If we have our entity, remove it\n\tend\n\n\tLuaFilter = ents.Create(\"filter_lua\") -- Creates the entity\n\tLuaFilter:Spawn()\n\n\tfor k, v in ipairs(ents.FindByClass(\"trigger_teleport\")) do -- Attaching all trigger_teleport's on the map to our entity\n\t\tLuaFilter:AttachToEntity(v) -- Attach\n\t\tLuaFilter:AddAllPlayers(v, false) -- Add all players and set the filter to `false` for them. So all players won't trigger the teleport\n\t\tLuaFilter:AddPlayer(v, Entity(1), true) -- Exclude first player. This makes the first player to be able to use teleport.\n\tend\nend\n\nhook.Add(\"InitPostEntity\", \"CreateLuaFilter\", CreateLuaFilter) -- This automatically creates the entity when map is loaded\nhook.Add(\"PostCleanupMap\", \"CreateLuaFilter\", CreateLuaFilter) -- This automatically creates the entity after map cleanup"},"realms":["Server"],"type":"Function"},
{"function":{"name":"PhysicsFromMesh","parent":"Entity","type":"classfunc","description":"Initializes the physics mesh of the entity from a triangle soup defined by a table of vertices. The resulting mesh is hollow, may contain holes, and always has a volume of 0.\n\nWhile this is very useful for static geometry such as terrain displacements, it is advised to use Entity:PhysicsInitConvex or Entity:PhysicsInitMultiConvex for moving solid objects instead.\n\nEntity:EnableCustomCollisions needs to be called if you want players to collide with the entity correctly.","realm":"Shared","args":{"arg":{"text":"A table consisting of Structures/MeshVertex (only the `pos` element is taken into account). Every 3 vertices define a triangle in the physics mesh.","name":"vertices","type":"table"}},"rets":{"ret":{"text":"Returns true on success, nil otherwise.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"PhysicsDestroy","parent":"Entity","type":"classfunc","description":{"text":"Destroys the current physics object of an entity.","note":"Cannot be used on a ragdoll or the world entity."},"realm":"Shared"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"PhysicsInit","parent":"Entity","type":"classfunc","description":{"text":"Initializes the  of the entity using its current . Deletes the previous physics object if it existed and the new object creation was successful.\n\nIf the entity's current model has no physics mesh associated to it, no physics object will be created and the previous object will still exist, if applicable.","page":[",physics objectEntity:GetPhysicsObject",",modelEntity:GetModel"],"note":{"text":"When called clientside, this will not create a valid PhysObj if the model hasn't been  serverside.\n\nIf successful, this function will automatically call Entity:SetSolid( solidType ) and Entity:SetSolidFlags( 0 ).","page":",precachedutil.PrecacheModel"},"bug":"Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior."},"realm":"Shared","args":{"arg":{"text":"The solid type of the physics object to create, see Enums/SOLID. Should be `SOLID_VPHYSICS` in most cases.","name":"solidType","type":"number","note":"Using SOLID_NONE will only delete the current physics object - it does not create a new one."}},"rets":{"ret":{"text":"Returns `true` on success, `false` otherwise.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"PhysicsInitBox","parent":"Entity","type":"classfunc","description":{"text":"Makes the physics object of the entity a AABB.\n\nThis function will automatically destroy any previous physics objects and do the following:\n* Entity:SetSolid( SOLID_BBOX )\n* Entity:SetMoveType( MOVETYPE_VPHYSICS )\n* Entity:SetCollisionBounds( mins, maxs )","note":"If the volume of the resulting box is 0 (the mins and maxs are the same), the mins and maxs will be changed to Global.Vector( -1, -1, -1 ) and Global.Vector( 1, 1, 1 ), respectively.","bug":"Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior."},"realm":"Shared","args":{"arg":[{"text":"The minimum position of the box. This is automatically ordered with the maxs.","name":"mins","type":"Vector"},{"text":"The maximum position of the box. This is automatically ordered with the mins.","name":"maxs","type":"Vector"}]},"rets":{"ret":{"text":"Returns `true` on success, `nil` otherwise. This fails when the game cannot create any more PhysCollides.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"PhysicsInitConvex","parent":"Entity","type":"classfunc","description":{"text":"Initializes the physics mesh of the entity with a convex mesh defined by a table of points. The resulting mesh is the  of all the input points. If successful, the previous physics object will be removed.\n\nThis is the standard way of creating moving physics objects with a custom convex shape. For more complex, concave shapes, see Entity:PhysicsInitMultiConvex.","bug":[{"text":"This will crash if given all Global.Vector(0,0,0)s.","issue":"3301"},"Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior."]},"realm":"Shared","args":{"arg":{"text":"A table of eight Vectors, in local coordinates, to be used in the computation of the convex mesh. Order does not matter.","name":"points","type":"table"}},"rets":{"ret":{"text":"Returns true on success, nil otherwise.","name":"","type":"boolean"}}},"example":{"description":"Creates a \"box\" physics mesh for the entity.","code":"function ENT:Initialize()\n\tif ( CLIENT ) then return end -- We only want to run this code serverside\n\n\tlocal x0 = -20 -- Define the min corner of the box\n\tlocal y0 = -10\n\tlocal z0 = -5\n\n\tlocal x1 = 20 -- Define the max corner of the box\n\tlocal y1 = 10\n\tlocal z1 = 5\n\n\tself:PhysicsInitConvex( {\n\t\tVector( x0, y0, z0 ),\n\t\tVector( x0, y0, z1 ),\n\t\tVector( x0, y1, z0 ),\n\t\tVector( x0, y1, z1 ),\n\t\tVector( x1, y0, z0 ),\n\t\tVector( x1, y0, z1 ),\n\t\tVector( x1, y1, z0 ),\n\t\tVector( x1, y1, z1 )\n\t} )\n\n\t-- Set up solidity and movetype\n\tself:SetMoveType( MOVETYPE_VPHYSICS )\n\tself:SetSolid( SOLID_VPHYSICS )\n\n\t-- Enable custom collisions on the entity\n\tself:EnableCustomCollisions( true )\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"PhysicsInitMultiConvex","parent":"Entity","type":"classfunc","description":{"text":"An advanced version of Entity:PhysicsInitConvex which initializes a physics object from multiple convex meshes. This should be used for physics objects with a custom shape which cannot be represented by a single convex mesh.\n\nIf successful, the previous physics object will be removed.","bug":"Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.\n\nYou can use the following work-around for movement, though clientside collisions will still be broken.\n\n\n```\nfunction ENT:Think()\n\tif ( CLIENT ) then\n\t\tlocal physobj = self:GetPhysicsObject()\n\n\t\tif ( IsValid( physobj ) ) then\n\t\t\tphysobj:SetPos( self:GetPos() )\n\t\t\tphysobj:SetAngles( self:GetAngles() )\n\t\tend\n\tend\nend\n```"},"realm":"Shared","args":{"arg":{"text":"A table consisting of tables of Vectors. Each sub-table defines a set of points to be used in the computation of one convex mesh.","name":"vertices","type":"table"}},"rets":{"ret":{"text":"Returns true on success, nil otherwise","name":"","type":"boolean"}}},"example":{"description":"Creates a physics mesh for the entity which consists of two boxes.","code":"local min1 = Vector( -30, -10, 0 ) -- Box1 minimum corner\nlocal max1 = Vector( -10, 10, 20 ) -- Box1 maximum corner\n\nlocal min2 = Vector( 10, -5, 10 ) -- Box2 minimum corner\nlocal max2 = Vector( 30, 5, 40 ) -- Box2 maximum corner\n\nif SERVER then\n\tfunction ENT:Initialize()\n\t\tself:SetModel( \"models/props_c17/oildrum001.mdl\" )\n\n\t\t-- Initializing the multi-convex physics mesh\n\t\tself:PhysicsInitMultiConvex( {\n\t\t\t{ -- Each sub-table is a set of vertices of a convex piece, order doesn't matter\n\t\t\t\tVector( min1.x, min1.y, min1.z ), -- The first box vertices\n\t\t\t\tVector( min1.x, min1.y, max1.z ),\n\t\t\t\tVector( min1.x, max1.y, min1.z ),\n\t\t\t\tVector( min1.x, max1.y, max1.z ),\n\t\t\t\tVector( max1.x, min1.y, min1.z ),\n\t\t\t\tVector( max1.x, min1.y, max1.z ),\n\t\t\t\tVector( max1.x, max1.y, min1.z ),\n\t\t\t\tVector( max1.x, max1.y, max1.z ),\n\t\t\t},\n\t\t\t{ -- All these tables together form a concave collision mesh\n\t\t\t\tVector( min2.x, min2.y, min2.z ), -- The second box vertices\n\t\t\t\tVector( min2.x, min2.y, max2.z ),\n\t\t\t\tVector( min2.x, max2.y, min2.z ),\n\t\t\t\tVector( min2.x, max2.y, max2.z ),\n\t\t\t\tVector( max2.x, min2.y, min2.z ),\n\t\t\t\tVector( max2.x, min2.y, max2.z ),\n\t\t\t\tVector( max2.x, max2.y, min2.z ),\n\t\t\t\tVector( max2.x, max2.y, max2.z ),\n\t\t\t},\n\t\t} )\n\n\t\tself:SetSolid( SOLID_VPHYSICS ) -- Setting the solidity\n\t\tself:SetMoveType( MOVETYPE_VPHYSICS ) -- Setting the movement type\n\n\t\tself:EnableCustomCollisions( true ) -- Enabling the custom collision mesh\n\n\t\tself:PhysWake() -- Enabling the physics motion\n\tend\nelse\n\tlocal col = Color( 0, 0, 255, 255 )\n\n\t-- Drawing collision boxes on the client\n\tfunction ENT:Draw()\n\t\tself:DrawModel()\n\n\t\tlocal pos, ang = self:GetPos(), self:GetAngles()\n\n\t\trender.DrawWireframeBox( pos, ang, min1, max1, col ) -- Drawing the first collision box\n\t\trender.DrawWireframeBox( pos, ang, min2, max2, col ) -- Drawing the second collision box\n\tend\nend","output":{"image":{"src":"PhysicsInitMultiConvexExample.gif"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"PhysicsInitSphere","parent":"Entity","type":"classfunc","description":{"text":"Makes the physics object of the entity a sphere.\n\nThis function will automatically destroy any previous physics objects and do the following:\n* Entity:SetSolid( SOLID_BBOX )\n* Entity:SetMoveType( MOVETYPE_VPHYSICS )","bug":"Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior."},"realm":"Shared","args":{"arg":[{"text":"The radius of the sphere.","name":"radius","type":"number"},{"text":"Physical material from [surfaceproperties.txt](https://github.com/Facepunch/garrysmod/blob/master/garrysmod/scripts/surfaceproperties.txt) or added with physenv.AddSurfaceData.","name":"physmat","type":"string"}]},"rets":{"ret":{"text":"Returns true on success, false otherwise","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"PhysicsInitShadow","parent":"Entity","type":"classfunc","description":{"text":"Initializes the entity's physics object as a physics shadow. Removes the previous physics object if successful. This is used internally for the Player's and NPC's physics object, and certain HL2 entities such as the crane.\n\nA physics shadow can be used to have static entities that never move by setting both arguments to false.","bug":"Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior."},"realm":"Shared","args":{"arg":[{"text":"Whether to allow the physics shadow to move under stress.","name":"allowPhysicsMovement","type":"boolean","default":"true"},{"text":"Whether to allow the physics shadow to rotate under stress.","name":"allowPhysicsRotation","type":"boolean","default":"true"}]},"rets":{"ret":{"text":"Return true on success, nil otherwise.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"PhysWake","parent":"Entity","type":"classfunc","description":"Wakes up the entity's physics object","realm":"Shared","file":{"text":"lua/includes/extensions/entity.lua","line":"144-L151"}},"example":{"description":"This is what the function does internally.","code":"local phys = self:GetPhysicsObject()\nif (phys:IsValid()) then\n\tphys:Wake()\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"PointAtEntity","parent":"Entity","type":"classfunc","description":"Changes an entities angles so that it faces the target entity.","realm":"Server","args":{"arg":{"text":"The entity to face.","name":"target","type":"Entity"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"PlayScene","parent":"Entity","type":"classfunc","description":"Makes the entity play a .vcd scene. [All scenes from Half-Life 2](https://developer.valvesoftware.com/wiki/Half-Life_2_Scenes_List).","realm":"Server","args":{"arg":[{"text":"Filepath to scene.","name":"scene","type":"string"},{"text":"Delay in seconds until the scene starts playing.","name":"delay","type":"number","default":"0"}]},"rets":{"ret":[{"text":"Estimated length of the scene.","name":"","type":"number"},{"text":"The scene entity, removing which will stop the scene from continuing to play.","name":"","type":"Entity"}]}},"example":{"description":"Makes the NPC that the player 1 is looking at play the `Welcome to City 17` speech.","code":"local entity = Entity( 1 ):GetEyeTrace().Entity\n\nif ( entity:IsValid() and entity:IsNPC() ) then\n\tentity:PlayScene( \"scenes/breencast/welcome.vcd\" )\nend","output":"The entity plays the scene."},"realms":["Server"],"type":"Function"},
{"function":{"name":"PhysicsInitStatic","parent":"Entity","type":"classfunc","description":{"text":"Initializes a static physics object of the entity using its . If successful, the previous physics object is removed.\n\nThis is what used by entities such as func_breakable, prop_dynamic, item_suitcharger, prop_thumper and npc_rollermine while it is in its \"buried\" state in the Half-Life 2 Campaign.\n\nIf the entity's current model has no physics mesh associated to it, no physics object will be created.","page":",current modelEntity:GetModel","note":"This function will automatically call Entity:SetSolid( solidType ).","bug":"Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior."},"realm":"Shared","args":{"arg":{"text":"The solid type of the physics object to create, see Enums/SOLID. Should be SOLID_VPHYSICS in most cases.","name":"solidType","type":"number"}},"rets":{"ret":{"text":"Returns true on success, false otherwise. This will fail if the entity's current model has no associated physics mesh.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"PrecacheGibs","parent":"Entity","type":"classfunc","description":"Precaches gibs for the entity's model.\n\nNormally this function should be ran when the entity is spawned, for example the ENTITY:Initialize, after Entity:SetModel is called.\n\nThis is required for Entity:GibBreakServer and Entity:GibBreakClient to work.","realm":"Server","rets":{"ret":{"text":"The amount of gibs the prop has","name":"gibCount","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"RagdollUpdatePhysics","parent":"Entity","type":"classfunc","description":"Makes the physics objects follow the set bone positions. This is used alongside Kinect in Entity:SetRagdollBuildFunction, for more info see ragdoll_motion entity.","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"RagdollSolve","parent":"Entity","type":"classfunc","description":"Normalizes the ragdoll. This is used alongside Kinect in Entity:SetRagdollBuildFunction, for more info see ragdoll_motion entity.","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"Remove","parent":"Entity","type":"classfunc","description":"Removes the entity it is used on. The entity will be removed at the start of next tick.","realm":"Shared"},"example":{"description":"","code":"ents.FindByClass( \"prop_physics\" )[1]:Remove()","output":"Removes whichever prop is first found or errors if no entity was found."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"RagdollStopControlling","parent":"Entity","type":"classfunc","description":"Sets the function to build the ragdoll. This is used alongside Kinect in Entity:SetRagdollBuildFunction, for more info see ragdoll_motion entity.","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"RemoveAllDecals","parent":"Entity","type":"classfunc","description":"Removes all decals from the entities surface.","realm":"Shared"},"example":{"description":"Removes all decals from all props in world.","code":"for i, ent in ipairs( ents.FindByClass( \"prop_physics\" ) ) do\n\tent:RemoveAllDecals()\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"RemoveAllGestures","parent":"Entity","type":"classfunc","description":{"text":"Removes and stops all gestures.","note":"This function only works on BaseAnimatingOverlay entites!"},"realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"RemoveCallOnRemove","parent":"Entity","type":"classfunc","description":"Removes a function previously added via Entity:CallOnRemove.","realm":"Shared","file":{"text":"lua/includes/extensions/entity.lua","line":"110-L120"},"args":{"arg":{"text":"Identifier of the function within CallOnRemove","name":"identifier","type":"string"}}},"example":{"description":"Removes the call to stop an engine's sounds when the entity is removed","code":"Entity:RemoveCallOnRemove(\"StopEngineSound\")"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"RemoveCallback","parent":"Entity","type":"classfunc","description":"Removes a callback previously added with Entity:AddCallback","realm":"Shared","args":{"arg":[{"text":"The hook name to remove. See Entity Callbacks","name":"hook","type":"string"},{"text":"The callback id previously retrieved with the return of Entity:AddCallback or Entity:GetCallbacks","name":"callbackid","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"RemoveEffects","parent":"Entity","type":"classfunc","description":"Removes an engine effect applied to an entity.","realm":"Shared","args":{"arg":{"text":"The effect to remove, see Enums/EF.","name":"effect","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"RemoveEFlags","parent":"Entity","type":"classfunc","description":"Removes specified engine flag","realm":"Shared","args":{"arg":{"text":"The flag to remove, see Enums/EFL","name":"flag","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"RemoveFromMotionController","parent":"Entity","type":"classfunc","description":{"text":"Removes a PhysObject from the entity's motion controller so that ENTITY:PhysicsSimulate will no longer be called for given PhysObject.\n\nYou must first create a motion controller with Entity:StartMotionController.","note":"Only works on a scripted Entity of anim type"},"realm":"Shared","args":{"arg":{"text":"The PhysObj to remove from the motion controller.","name":"physObj","type":"PhysObj"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"RemoveFlags","parent":"Entity","type":"classfunc","description":"Removes specified flag(s) from the entity","realm":"Shared","args":{"arg":{"text":"The flag(s) to remove, see Enums/FL","name":"flag","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"RemoveGesture","parent":"Entity","type":"classfunc","description":{"text":"Removes and stops the gesture with given activity.","note":"This function only works on BaseAnimatingOverlay entites!"},"realm":"Server","args":{"arg":{"text":"The activity remove. See Enums/ACT.","name":"activity","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"RemoveInternalConstraint","parent":"Entity","type":"classfunc","description":"Breaks internal Ragdoll constrains, so you can for example separate an arm from the body of a ragdoll and preserve all physics.\n\nThe visual mesh will still stretch as if it was properly connected unless the ragdoll model is specifically designed to avoid that.","realm":"Shared","added":"2020.03.17","args":{"arg":{"text":"Which constraint to break, values below 0 mean break them all","name":"num","type":"number","default":"-1"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"RemoveSolidFlags","parent":"Entity","type":"classfunc","description":"Removes solid flag(s) from the entity.","realm":"Shared","args":{"arg":{"text":"The flag(s) to remove, see Enums/FSOLID.","name":"flags","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ResetSequenceInfo","parent":"Entity","type":"classfunc","description":"Reset entity sequence info such as playback rate, ground speed, last event check, etc.","realm":"Shared"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Respawn","parent":"Entity","type":"classfunc","description":"Makes the entity/weapon respawn.\n\nOnly usable on HL2 pickups and any weapons. Seems to be buggy with weapons.\nVery unreliable.","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"ResetSequence","parent":"Entity","type":"classfunc","description":{"text":"Plays an animation on the entity. This may not always work on engine entities.","warning":"This will not reset the animation on viewmodels, use Entity:SendViewModelMatchingSequence instead.","note":"This will not work properly if called directly after calling Entity:SetModel. Consider waiting until the next Tick.\n\nWill not work on players due to the animations being reset every frame by the base gamemode animation system. See GM:CalcMainActivity.\n\nFor custom scripted entities you will want to apply example from ENTITY:Think to make animations work."},"realm":"Shared","args":{"arg":{"text":"The sequence to play. Also accepts strings.","name":"sequence","type":"number","note":"If set to a string, the function will automatically call Entity:LookupSequence to retrieve the sequence ID as a number."}}},"example":{"description":"Minimal code needed to make sequences work as expected on custom \"anim\" type entities.\n\nIn this example, when the player uses the crate, it will open, and when they use it again, it will close.","code":"ENT.Base = \"base_anim\"\nENT.Spawnable = true\nENT.AutomaticFrameAdvance = true\n\nENT.PrintName = \"Animation Test\"\nENT.Category = \"My Entity Category\"\n\nfunction ENT:Initialize()\n\tif ( SERVER ) then -- Only set this stuff on the server, it is networked to clients automatically\n\t\tself:SetModel( \"models/items/ammocrate_ar2.mdl\" ) -- Set the model\n\t\tself:PhysicsInit( SOLID_VPHYSICS ) -- Initialize physics\n\t\tself:SetUseType( SIMPLE_USE ) -- Make sure ENT:Use is ran only once per use ( per press of the use button on the entity, by default the E key )\n\tend\nend\n\nfunction ENT:Think()\n\tif ( SERVER ) then -- Only set this stuff on the server\n\t\tself:NextThink( CurTime() ) -- Set the next think for the serverside hook to be the next frame/tick\n\t\treturn true -- Return true to let the game know we want to apply the self:NextThink() call\n\tend\nend\n\nif ( SERVER ) then -- This hook is only available on the server\n\tfunction ENT:Use( activator, caller ) -- If a player uses this entity, play an animation\n\t\tif ( !self.Opened ) then -- If we are not \"opened\"\n\t\t\tself:ResetSequence( \"open\" ) -- Play the open sequence\n\t\t\tself.Opened = true -- We are now opened\n\t\telse\n\t\t\tself:ResetSequence( \"close\" ) -- Play the close sequence\n\t\t\tself.Opened = false -- We are now closed\n\t\tend\n\tend\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"RestartGesture","parent":"Entity","type":"classfunc","description":{"text":"Restarts the entity's animation gesture. If the given gesture is already playing, it will reset it and play it from the beginning.","note":"This function only works on BaseAnimatingOverlay entites."},"realm":"Server","args":{"arg":[{"text":"The activity number to send to the entity. See Enums/ACT and Entity:GetSequenceActivity","name":"activity","type":"number"},{"text":"Add/start the gesture to if it has not been yet started.","name":"addIfMissing","type":"boolean","default":"true"},{"name":"autokill","type":"boolean","default":"true"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SelectWeightedSequenceSeeded","parent":"Entity","type":"classfunc","description":"Returns the sequence ID corresponding to given activity ID, and uses the provided seed for random selection. The seed should be the same server-side and client-side if used in a predicted environment.\n\nSee Entity:SelectWeightedSequence for a provided-seed version of this function.","realm":"Shared","args":{"arg":[{"text":"The activity ID, see Enums/ACT.","name":"act","type":"number"},{"text":"The seed to use for randomly selecting a sequence in the case the activity ID has multiple sequences bound to it. Entity:SelectWeightedSequence uses the same seed as util.SharedRandom internally for this.","name":"seed","type":"number"}]},"rets":{"ret":{"text":"The sequence ID","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SendViewModelMatchingSequence","parent":"Entity","type":"classfunc","description":{"text":"Sends sequence animation to the view model. It is recommended to use this for view model animations, instead of Entity:ResetSequence.\n\nThis function is only usable on view models.","bug":{"text":"Sequences 0-6 will not be looped regardless if they're marked as a looped animation or not.","issue":"3229"}},"realm":"Shared","args":{"arg":{"text":"The sequence ID returned by Entity:LookupSequence or  Entity:SelectWeightedSequence.","name":"seq","type":"number"}}},"example":{"description":"Converting an ACT_VM_* enumeration to a sequence usable by the function.","code":"local VModel = self.Owner:GetViewModel( )\nlocal EnumToSeq = VModel:SelectWeightedSequence( ACT_VM_PRIMARYATTACK )\n\nVModel:SendViewModelMatchingSequence( EnumToSeq )","output":"Sends the primary attack enumeration sequence to the view model and plays it."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetAbsVelocity","parent":"Entity","type":"classfunc","description":{"text":"Sets the entity's velocity.","note":"Actually binds to CBaseEntity::SetLocalVelocity() which sets the entity's velocity due to movement in the world from forces such as gravity. Does not include velocity from entity-on-entity collision or other world movement."},"realm":"Shared","args":{"arg":{"text":"The new velocity to set.","name":"velocity","type":"Vector"}}},"example":{"description":"Makes Entity(1) fly upwards.","code":"Entity( 1 ):SetAbsVelocity( Vector( 0, 0, 500 ) )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SelectWeightedSequence","parent":"Entity","type":"classfunc","description":"Returns sequence ID corresponding to given activity ID.\n\nOpposite of Entity:GetSequenceActivity.\n\nSimilar to Entity:LookupSequence.\n\nSee also Entity:SelectWeightedSequenceSeeded.","realm":"Shared","args":{"arg":{"text":"The activity ID, see Enums/ACT.","name":"act","type":"number"}},"rets":{"ret":{"text":"The sequence ID","name":"","type":"number"}}},"example":{"description":"Use this hook to check if the model has a certain ACT_* enumeration, and if it does, play it.","code":"local VModel = self.Owner:GetViewModel()\n\nif ( self:Clip1() == 0 and VModel:SelectWeightedSequence( ACT_VM_RELOAD_EMPTY ) ) then\n\n\tlocal SEQ = self:LookupSequence( ACT_VM_RELOAD_EMPTY )\n\n\tif ( SEQ == -1 ) then\n\n\t\tprint( \"reload\" )\n\n\t\tlocal EnumToSeq = VModel:SelectWeightedSequence( ACT_VM_RELOAD )\n\n\t\t--\tPlay the normal reload animation\n\t\tVModel:SendViewModelMatchingSequence( EnumToSeq )\n\n\telse\n\n\t\tprint( \"reload empty\" )\n\n\t\tlocal EnumToSeq = VModel:SelectWeightedSequence( ACT_VM_RELOAD_EMPTY )\n\n\t\t-- Play the empty reload animation\n\t\tVModel:SendViewModelMatchingSequence( EnumToSeq )\n\t\t\n\tend\n\nend","output":"Will play the ACT_VM_RELOAD_EMPTY enumeration if the model has it. If not, it will play the normal reload enum."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetAngles","parent":"Entity","type":"classfunc","description":{"text":"Sets the angles of the entity.","note":"To set a player's angles, use Player:SetEyeAngles instead."},"realm":"Shared","args":{"arg":{"text":"The new angles.","name":"angles","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetAnimTime","parent":"Entity","type":"classfunc","description":"Sets the start time (relative to Global.CurTime) of the current animation, which is used to determine Entity:GetCycle. Should be less than CurTime to play an animation from the middle.","realm":"Client","args":{"arg":{"text":"The time the animation was supposed to begin.","name":"time","type":"number"}}},"example":{"description":"Sets each player's animation time to 1 second in the future, which causes their animations to freeze in place.","code":"function GM:PrePlayerDraw(ply)\n\n\tply:SetAnimTime(CurTime()+1)\n\nend","output":{"image":{"src":"Entity_SetAnimTime_example1.gif"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SequenceDuration","parent":"Entity","type":"classfunc","description":{"text":"Returns length of currently played sequence.","bug":{"text":"This will return incorrect results for weapons and viewmodels clientside in thirdperson.","issue":"2783"}},"realm":"Shared","args":{"arg":{"text":"A sequence ID to return the length specific sequence of instead of the entity's main/currently playing sequence.","name":"seqid","type":"number","default":"nil"}},"rets":{"ret":{"text":"The length of the sequence","name":"","type":"number"}}},"example":{"description":"Example usage for the argument. Retrieve length of animation on specific gesture slot.","code":"local ply = Entity( 1 )\nlocal seq = ply:SelectWeightedSequence( ACT_GMOD_TAUNT_CHEER )\nlocal len = ply:SequenceDuration( seq )\nprint( ply, seq, len )","output":"Player [1][Rubat]\t303\t2.7499999180436"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetAnimation","parent":"Entity","type":"classfunc","description":"Sets a player's third-person animation. Mainly used by Weapons to start the player's weapon attack and reload animations.","realm":"Shared","args":{"arg":{"text":"Player animation, see Enums/PLAYER.","name":"playerAnim","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetAttachment","parent":"Entity","type":"classfunc","description":{"text":"Parents the sprite to an attachment on another model.\n\nWorks only on env_sprite.\n\nDespite existing on client, it doesn't actually do anything on client.","deprecated":"You should be using Entity:SetParent instead."},"realm":"Shared","args":{"arg":[{"text":"The entity to attach/parent to","name":"ent","type":"Entity"},{"text":"The attachment ID to parent to","name":"attachment","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetBodygroup","parent":"Entity","type":"classfunc","description":"Sets an entities' bodygroup.","realm":"Shared","args":{"arg":[{"text":"The id of the bodygroup you're setting. Starts from 0.","name":"bodygroup","type":"number"},{"text":"The value you're setting the bodygroup to. Starts from 0.","name":"value","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetBloodColor","parent":"Entity","type":"classfunc","description":"Sets the blood color this entity uses.","realm":"Server","args":{"arg":{"text":"An integer corresponding to Enums/BLOOD_COLOR.","name":"bloodColor","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetBoneMatrix","parent":"Entity","type":"classfunc","description":{"text":"Sets the bone matrix of given bone to given matrix. See also Entity:GetBoneMatrix.","note":"Despite existing serverside, it does nothing."},"realm":"Shared","args":{"arg":[{"text":"The ID of the bone","name":"boneid","type":"number"},{"text":"The matrix to set.","name":"matrix","type":"VMatrix"}]}},"example":{"description":"Example usage of the function.\n\nAim at an NPC and enter \"bones_cl\" into your console.","code":"if ( CLIENT ) then\n\tconcommand.Add( \"bones_cl\", function( ply )\n\t\tlocal ent = ply:GetEyeTrace().Entity\n\t\tif ( !IsValid( ent ) ) then return end\n\n\t\tent:AddCallback( \"BuildBonePositions\", function( ent, numbones )\n\t\t\tfor i = 0, numbones - 1 do\n\t\t\t\tlocal mat = ent:GetBoneMatrix( i )\n\t\t\t\tif ( !mat ) then continue end\n\n\t\t\t\tlocal scale = mat:GetScale()\n\t\t\t\tmat:Scale( Vector( 1, 1, 1 ) * 0.5 )\n\t\t\t\tent:SetBoneMatrix( i, mat )\n\t\t\tend\n\t\tend )\n\tend )\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetBodyGroups","parent":"Entity","type":"classfunc","description":"Sets the bodygroups from a string. A convenience function for Entity:SetBodygroup.","realm":"Shared","args":{"arg":{"text":"Body groups to set. Each single-digit number in the string represents a separate bodygroup. **This makes it impossible to set any bodygroup to a value higher than 9!** For that you need to use Entity:SetBodygroup.","name":"bodygroups","type":"string"}}},"example":{"description":"Example of the format","code":"Entity(1):SetBodyGroups( \"021\" )","output":"Sets first bodygroup value to 0, second to 2 and third to 1."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetBonePosition","parent":"Entity","type":"classfunc","description":"Sets the bone position and angles.","realm":"Client","args":{"arg":[{"text":"The bone ID to manipulate","name":"bone","type":"number"},{"text":"The position to set","name":"pos","type":"Vector"},{"text":"The angles to set","name":"ang","type":"Angle"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetBoneController","parent":"Entity","type":"classfunc","description":{"text":"Sets the specified value on the bone controller with the given ID of this entity, it's used in HL1 to change the head rotation of NPCs, turret aiming and so on.","note":"This is the precursor of pose parameters, and only works for Half Life 1: Source models supporting it."},"realm":"Shared","args":{"arg":[{"text":"The ID of the bone controller to set the value to.\nGoes from 0 to 3.","name":"boneControllerID","type":"number"},{"text":"The value to set on the specified bone controller.","name":"value","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetCollisionGroup","parent":"Entity","type":"classfunc","description":"Sets the entity's collision group.","realm":"Shared","args":{"arg":{"text":"Collision group of the entity, see Enums/COLLISION_GROUP","name":"group","type":"number"}}},"example":{"description":"Showcase function that produces reliable player-player nocollision for targets.\nFirst argument is any player entity, second is an optional number for min time.\nAfter min time elapsed, no-collision will turn off once we are not penetrating any players.\n\nContains no fail-saves or checks.","code":"function ActivateNoCollision(target, min)\n\n\tlocal oldCollision = target:GetCollisionGroup() or COLLISION_GROUP_PLAYER\n\ttarget:SetCollisionGroup(COLLISION_GROUP_PASSABLE_DOOR) -- Players can walk through target\n\n\tif (min and (tonumber(min) > 0)) then \n\n\t\ttimer.Simple(min, function() --after 'min' seconds\n\t\t\ttimer.Create(target:SteamID64()..\"_checkBounds_cycle\", 0.5, 0, function() -- check every half second\n\t\t\t\tlocal penetrating = ( self:GetPhysicsObject() and self:GetPhysicsObject():IsPenetrating() ) or false --if we are penetrating an object\n\t\t\t\tlocal tooNearPlayer = false --or inside a player's hitbox\n\t\t\t\tfor i, ply in ipairs( player.GetAll() ) do\n\t\t\t\t\tif target:GetPos():DistToSqr(ply:GetPos()) <= (80*80) then\n\t\t\t\t\t\ttooNearPlayer = true\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\tif not (penetrating and tooNearPlayer) then --if both false then \n\t\t\t\t\ttarget:SetCollisionGroup(oldCollision) -- Stop no-colliding by returning the original collision group (or default player collision)\n\t\t\t\t\ttimer.Destroy(target:SteamID64()..\"_checkBounds_cycle\")\n\t\t\t\tend\n\t\t\tend)\n\t\tend)\n\tend\nend\nActivateNoCollision(Entity( 1 ), 10)","output":"You can walk through the player for 10 seconds"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetCollisionBoundsWS","parent":"Entity","type":"classfunc","description":{"text":"Sets the collision bounds for the entity, which are used for triggers ( Entity:SetTrigger, ENTITY:Touch ), determining if rendering is necessary clientside, and collision ( If Entity:SetSolid set as  ).\n\nInput bounds are in world coordinates!\nSee also Entity:SetCollisionBounds.","page":",SOLID_BBOXEnums/SOLID"},"realm":"Shared","args":{"arg":[{"text":"The first vector of the bounds.","name":"vec1","type":"Vector"},{"text":"The second vector of the bounds.","name":"vec2","type":"Vector"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetColor","parent":"Entity","type":"classfunc","description":{"text":"Sets the color of an entity.\n\nSome entities may need a custom [render mode](Enums/RENDERMODE) set for transparency to work. See example 2.\nEntities also must have a proper [render group](Enums/RENDERGROUP) set for transparency to work.","br":""},"realm":"Shared","args":{"arg":{"text":"The color to set. Uses the Color.","name":"color","type":"table","default":"Color(255, 0, 255, 255)"}}},"example":[{"description":"Loop through all players, make them black","code":"local colBlack = Color( 0, 0, 0, 255 ) -- Creates a black color\nfor key, ply in ipairs(player.GetAll()) do -- Loop through all players on the server\n\tply:SetColor(colBlack) -- Sets the players color to colBlack\nend"},{"description":"Creates a wooden crate at 0,0,0 and turns it a transparent green","code":"local ent = ents.Create(\"prop_physics\")\nent:SetPos(Vector(0,0,0))\nent:SetModel(\"models/props_junk/wood_crate001a.mdl\")\nent:Spawn()\n\nent:SetColor( Color( 0, 255, 0, 230 ) ) \nent:SetRenderMode( RENDERMODE_TRANSCOLOR ) -- You need to set the render mode on some entities in order for the color to change"}],"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetCollisionBounds","parent":"Entity","type":"classfunc","description":{"text":"Sets the collision bounds for the entity, which are used for triggers ( Entity:SetTrigger, ENTITY:Touch ), and collision ( If Entity:SetSolid set as  ).\n\nInput bounds are relative to Entity:GetPos! \nSee also Entity:SetCollisionBoundsWS.","page":",SOLID_BBOXEnums/SOLID","note":"Player collision bounds are reset every frame to player's Player:SetHull values."},"realm":"Shared","args":{"arg":[{"text":"The minimum vector of the bounds. The vector must be smaller than second argument on all axises.","name":"mins","type":"Vector"},{"text":"The maximum vector of the bounds. The vector must be bigger than first argument on all axises.","name":"maxs","type":"Vector"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetCreator","parent":"Entity","type":"classfunc","description":"Sets the creator of the Entity. This is set automatically in Sandbox gamemode when spawning SENTs, but is never used/read by default.","realm":"Server","file":{"text":"lua/includes/extensions/entity.lua","line":"53-L55"},"args":{"arg":{"text":"The creator","name":"ply","type":"Player"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetCustomCollisionCheck","parent":"Entity","type":"classfunc","description":"Marks the entity to call GM:ShouldCollide. Not to be confused with Entity:EnableCustomCollisions.","realm":"Shared","args":{"arg":{"text":"Enable or disable the custom collision check","name":"enable","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetCycle","parent":"Entity","type":"classfunc","description":{"text":"Sets the progress of the current animation to a specific value between 0 and 1.","bug":{"text":"This does not work with viewmodels.","issue":"3038"}},"realm":"Shared","args":{"arg":{"text":"The desired cycle value","name":"value","type":"number"}}},"example":{"description":"Set the entity to be half way through its current sequence","code":"ent:SetCycle( .5 )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetDTAngle","parent":"Entity","type":"classfunc","description":{"text":"This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.\n\nSets the specified angle on the entity's datatable.","internal":""},"realm":"Shared","args":{"arg":[{"text":"Goes from 0 to 31.","name":"key","type":"number"},{"text":"The angle to write on the entity's datatable.","name":"ang","type":"Angle"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetDTBool","parent":"Entity","type":"classfunc","description":{"text":"This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.\n\nSets the specified bool on the entity's datatable.","internal":""},"realm":"Shared","args":{"arg":[{"text":"Goes from 0 to 31.","name":"key","type":"number"},{"text":"The boolean to write on the entity's metatable.","name":"bool","type":"boolean"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetDTEntity","parent":"Entity","type":"classfunc","description":{"text":"This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.\n\nSets the specified entity on this entity's datatable.","internal":""},"realm":"Shared","args":{"arg":[{"text":"Goes from 0 to 31.","name":"key","type":"number"},{"text":"The entity to write on this entity's datatable.","name":"ent","type":"Entity"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetDTInt","parent":"Entity","type":"classfunc","description":{"text":"This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.\n\nSets the specified integer on the entity's datatable.","internal":""},"realm":"Shared","args":{"arg":[{"text":"Goes from 0 to 31.","name":"key","type":"number"},{"text":"The integer to write on the entity's datatable. This will be cast to a 32-bit signed integer internally.","name":"integer","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetDTVector","parent":"Entity","type":"classfunc","description":{"text":"This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.\n\nSets the specified vector on the entity's datatable.","internal":""},"realm":"Shared","args":{"arg":[{"text":"Goes from 0 to 31.","name":"key","type":"number"},{"text":"The vector to write on the entity's datatable.","name":"vec","type":"Vector"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetDTFloat","parent":"Entity","type":"classfunc","description":{"text":"This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.\n\nSets the specified float on the entity's datatable.","internal":""},"realm":"Shared","args":{"arg":[{"text":"Goes from 0 to 31.","name":"key","type":"number"},{"text":"The float to write on the entity's datatable.","name":"float","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetElasticity","parent":"Entity","type":"classfunc","description":"Sets the elasticity of this entity, used by some flying entities such as the Helicopter NPC to determine how much it should bounce around when colliding.","realm":"Shared","args":{"arg":{"text":"The elasticity to set.","name":"elasticity","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetEntity","parent":"Entity","type":"classfunc","description":"Allows you to set the Start or End entity attachment for the rope.","realm":"Shared","args":{"arg":[{"text":"The name of the variable to modify.\nAccepted names are StartEntity and EndEntity.","name":"name","type":"string"},{"text":"The entity to apply to the specific attachment.","name":"entity","type":"Entity"}]}},"example":{"description":"As seen in the constraints module.","code":"local rope = ents.Create( \"keyframe_rope\" )\n\n-- Attachment point 1\nrope:SetEntity( \"StartEntity\", \tEntity(1) )\n-- Attachment point 2\nrope:SetEntity( \"EndEntity\", \tEntity(2) )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetDTString","parent":"Entity","type":"classfunc","description":{"text":"This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.\n\nSets the specified string on the entity's datatable.","internal":"","note":"The length of these strings are capped at 512 characters."},"realm":"Shared","args":{"arg":[{"text":"Goes from 0 to 3.","name":"key","type":"number"},{"text":"The string to write on the entity's datatable, can't be more than 512 characters per string.","name":"str","type":"string"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetEyeTarget","parent":"Entity","type":"classfunc","description":"Sets the position an entity's eyes look toward.","realm":"Shared","args":{"arg":{"text":"The world position the entity is looking toward.","name":"pos","type":"Vector"}}},"example":[{"description":"Makes an NPC (self) look into a nearby player's eyes.","code":"for p, ply in ipairs(player.GetAll()) do\n    if(ply:EyePos():Distance(self:EyePos()) <= 60) then\n        self:SetEyeTarget(ply:EyePos())\n        break\n    end\nend"},{"description":"Makes an entity look at a vector the way the eyeposer does it","code":"local lookat = Vector( 0, 0, 0 )\n\nlocal attachment = ent:GetAttachment( ent:LookupAttachment( \"eyes\" ) )\nlocal LocalPos, LocalAng = WorldToLocal( lookat, Angle( 0, 0, 0 ), attachment.Pos, attachment.Ang )\nent:SetEyeTarget( LocalPos )"}],"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetFlexScale","parent":"Entity","type":"classfunc","description":{"text":"Sets the flex scale of the entity.","bug":{"text":"This does not work on Global.ClientsideModels or Global.ClientsideRagdolls.","issue":"1779"}},"realm":"Shared","args":{"arg":{"text":"The new flex scale to set to","name":"scale","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetFlexWeight","parent":"Entity","type":"classfunc","description":"Sets the flex weight.","realm":"Shared","args":{"arg":[{"text":"The ID of the flex to modify weight of","name":"flex","type":"number"},{"text":"The new weight to set","name":"weight","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetGroundEntity","parent":"Entity","type":"classfunc","description":"Sets the ground the entity is standing on.","realm":"Shared","args":{"arg":{"text":"The ground entity.","name":"ground","type":"Entity"}}},"example":{"description":"Gives all players the ability to (sort of) walk on water.","code":"-- shared.lua tick\nfunction GM:Tick()\n\t\n\tlocal trace = {}\n\tlocal world = Entity( 0 )\n\t\n\tfor p, ply in ipairs( player.GetAll() ) do\n\t\n\t\ttrace = util.TraceLine( {\n\t\t\tstart = ply:GetPos() + Vector( 0, 0, 72),\n\t\t\tendpos = ply:GetPos() + Vector( 0, 0, -3 ),\n\t\t\tmask = MASK_WATER,\n\t\t\tfilter = function( ent ) return true end\n\t\t} )\n\t\t\n\t\tif( trace.Hit ) then\n\t\t\tply:SetGravity( 0.0001 )\n\t\t\tply:SetGroundEntity( world )\n\t\telse\n\t\t\tply:SetGravity( 1.0 )\n\t\tend\n\t\t\n\tend\n\t\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetGravity","parent":"Entity","type":"classfunc","description":{"text":"Sets the gravity multiplier of the entity.","bug":{"text":"This function is not predicted.","issue":"3648"}},"realm":"Shared","args":{"arg":{"text":"Value which specifies the gravity multiplier.","name":"gravityMultiplier","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetFriction","parent":"Entity","type":"classfunc","description":{"text":"Sets how much friction an entity has when sliding against a surface. Entities default to 1 (100%) and can be higher or even negative.","note":["This only multiplies the friction of the entity, to change the value itself use PhysObj:SetMaterial.","Works only for MOVETYPE_STEP entities."],"bug":{"text":"This has no effect on players.","issue":"1395"}},"realm":"Server","args":{"arg":{"text":"Friction multiplier","name":"friction","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetHealth","parent":"Entity","type":"classfunc","description":{"text":"Sets the health of the entity.","note":"You may want to take Entity:GetMaxHealth into account when calculating what to set health to, in case a gamemode has a different max health than 100."},"realm":"Server","args":{"arg":{"text":"New health value.","name":"newHealth","type":"number"}}},"example":[{"description":"Sets the entity's health to their maximum health.","code":"Entity( 1 ):SetHealth( Entity( 1 ):GetMaxHealth() )","output":"The entity's health is now full."},{"description":"Deducts 50 points of health from the entity.","code":"Entity( 1 ):SetHealth( Entity( 1 ):Health() - 50 )","output":"The entity now has 50 less health."}],"realms":["Server"],"type":"Function"},
{"function":{"name":"SetHitboxSet","parent":"Entity","type":"classfunc","description":"Sets the current Hitbox set for the entity.","realm":"Shared","args":{"arg":{"text":"The new hitbox set to set. Can be a name as a string, or the ID as a number.\n\nIf the operation failed, the function will silently fail.","name":"id","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetIK","parent":"Entity","type":"classfunc","description":"Enables or disable the inverse kinematic usage of this entity.","realm":"Client","args":{"arg":{"text":"The state of the IK.","name":"useIK","type":"boolean","default":"false"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetKeyValue","parent":"Entity","type":"classfunc","description":"Sets Hammer key values on an entity.\n\nYou can look up which entities have what key values on the [Valve Developer Community](https://developer.valvesoftware.com/wiki/) on entity pages.\n\n\nA  list of basic entities can be found [here](https://developer.valvesoftware.com/wiki/List_of_entities).\n\nAlternatively you can look at the .fgd files shipped with Garry's Mod in the bin/ folder with a text editor to see the key values as they appear in Hammer.","realm":"Shared","args":{"arg":[{"text":"The internal key name","name":"key","type":"string"},{"text":"The value to set","name":"value","type":"string"}]}},"example":{"description":{"text":"Makes an NPC not drop his weapon and drop a healthkit on death, using  on a Combine Soldier.\n\nA list of spawnflags a Combine Soldier has can be found [here](https://developer.valvesoftware.com/wiki/Npc_combine_s#Flags).","page":",SF EnumerationsEnums/SF"},"code":"npc:SetKeyValue( \"spawnflags\", bit.bor( SF_NPC_NO_WEAPON_DROP, SF_NPC_DROP_HEALTHKIT ) )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetLagCompensated","parent":"Entity","type":"classfunc","description":{"text":"This allows the entity to be lag compensated during Player:LagCompensation.\n\n\n\nAs a side note for parented entities, if your entity can be shot at, keep in mind that its collision bounds need to be bigger than the bone's hitbox the entity is parented to, or hull/line traces ( such as the crowbar attack or bullets ) might not hit at all.","note":"Players are lag compensated by default and there's no need to call this function for them.\n\nIt's best to not enable lag compensation on parented entities, as the system does not handle it that well ( they will be moved back but then the entity will lag behind ).\nParented entities move back with the parent if it's lag compensated, so if you are making some kind of armor piece you shouldn't do anything."},"realm":"Server","args":{"arg":{"text":"Whether the entity should be lag compensated or not.","name":"enable","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetLayerBlendIn","parent":"Entity","type":"classfunc","description":{"note":"This function only works on BaseAnimatingOverlay entites!"},"realm":"Shared","args":{"arg":[{"text":"The Layer ID","name":"layerID","type":"number"},{"name":"blendIn","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetLayerBlendOut","parent":"Entity","type":"classfunc","description":{"note":"This function only works on BaseAnimatingOverlay entites!"},"realm":"Shared","args":{"arg":[{"text":"The Layer ID","name":"layerID","type":"number"},{"name":"blendOut","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetLayerCycle","parent":"Entity","type":"classfunc","description":{"text":"Sets the animation cycle/frame of given layer.","note":"This function only works on BaseAnimatingOverlay entities."},"realm":"Shared","args":{"arg":[{"text":"The Layer ID","name":"layerID","type":"number"},{"text":"The new animation cycle/frame for given layer.","name":"cycle","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetLayerDuration","parent":"Entity","type":"classfunc","description":{"text":"Sets the duration of given layer. This internally overrides the Entity:SetLayerPlaybackRate.","note":"This function only works on BaseAnimatingOverlay entities."},"realm":"Shared","args":{"arg":[{"text":"The Layer ID","name":"layerID","type":"number"},{"text":"The new duration of the layer in seconds.","name":"duration","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetLayerLooping","parent":"Entity","type":"classfunc","description":{"text":"Sets whether the layer should loop or not.","note":"This function only works on BaseAnimatingOverlay entites!"},"realm":"Server","args":{"arg":[{"text":"The Layer ID","name":"layerID","type":"number"},{"text":"Whether the layer should loop or not.","name":"loop","type":"boolean"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetLayerPlaybackRate","parent":"Entity","type":"classfunc","description":{"text":"Sets the layer playback rate. See also Entity:SetLayerDuration.","note":"This function only works on BaseAnimatingOverlay entities."},"realm":"Shared","args":{"arg":[{"text":"The Layer ID","name":"layerID","type":"number"},{"text":"The new playback rate.","name":"rate","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetLayerPriority","parent":"Entity","type":"classfunc","description":{"text":"Sets the priority of given layer.","note":"This function only works on BaseAnimatingOverlay entites!"},"realm":"Server","args":{"arg":[{"text":"The Layer ID","name":"layerID","type":"number"},{"text":"The new priority of the layer.","name":"priority","type":"number"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetLayerWeight","parent":"Entity","type":"classfunc","description":{"text":"Sets the layer weight. This influences how strongly the animation should be overriding the normal animations of the entity.","note":"This function only works on BaseAnimatingOverlay entities."},"realm":"Shared","args":{"arg":[{"text":"The Layer ID","name":"layerID","type":"number"},{"text":"The new layer weight.","name":"weight","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetLegacyTransform","parent":"Entity","type":"classfunc","description":"This forces an entity to use the bone transformation behaviour from versions prior to **8 July 2014**.\n\nThis behaviour affects Entity:EnableMatrix and Entity:SetModelScale and is incorrect, therefore this function be used exclusively as a quick fix for old scripts that rely on it.","realm":"Client","args":{"arg":{"text":"Whether the entity should use the old bone transformation behaviour or not.","name":"enabled","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetLayerSequence","parent":"Entity","type":"classfunc","description":{"text":"Sets the sequence of given layer.","note":"This function only works on BaseAnimatingOverlay entities."},"added":"2020.06.24","realm":"Shared","args":{"arg":[{"text":"The Layer ID.","name":"layerID","type":"number"},{"text":"The sequenceID to set. See Entity:LookupSequence.","name":"seq","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetLightingOriginEntity","parent":"Entity","type":"classfunc","description":"Sets the entity to be used as the light origin position for this entity.","realm":"Server","args":{"arg":{"text":"The lighting entity.","name":"lightOrigin","type":"Entity"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetLocalPos","parent":"Entity","type":"classfunc","description":"Sets local position relative to the parented position. This is for use with Entity:SetParent to offset position.","realm":"Shared","args":{"arg":{"text":"The local position","name":"pos","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetLocalAngles","parent":"Entity","type":"classfunc","description":"Sets angles relative to angles of Entity:GetParent","realm":"Shared","args":{"arg":{"text":"The local angle","name":"ang","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetLocalAngularVelocity","parent":"Entity","type":"classfunc","description":"Sets the entity's angular velocity (rotation speed).","realm":"Shared","args":{"arg":{"text":"The angular velocity to set.","name":"angVel","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetLocalVelocity","parent":"Entity","type":"classfunc","description":{"text":"Sets the entity's local velocity which is their velocity due to movement in the world from forces such as gravity. Does not include velocity from entity-on-entity collision or other world movement.","warning":"Same as Entity:SetAbsVelocity, but clamps the given velocity, and is not recommended to be used because of that."},"realm":"Shared","args":{"arg":{"text":"The new velocity to set.","name":"velocity","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetMaxYawSpeed","parent":"ENTITY","type":"classfunc","description":{"text":"Sets the NPC max yaw speed. Internally sets the `m_fMaxYawSpeed` variable which is polled by the engine.","note":"This is a helper function only available if your SENT is based on `base_ai`"},"realm":"Server","args":{"arg":{"text":"The new max yaw value to set","name":"maxyaw","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetLOD","parent":"Entity","type":"classfunc","description":"Sets the Level Of Detail model to use with this entity. This may not work for all models if the model doesn't include any LOD sub models.\n\nThis function works exactly like the clientside r_lod convar and takes priority over it.","realm":"Client","args":{"arg":{"text":"The Level Of Detail model ID to use. -1 leaves the engine to automatically set the Level of Detail.\n\nThe Level Of Detail may range from 0 to 8, with 0 being the highest quality and 8 the lowest.","name":"lod","type":"number","default":"-1"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetMaterial","parent":"Entity","type":"classfunc","description":{"text":"Sets the rendering material override of the entity.\n\nTo set a Lua material created with Global.CreateMaterial, just prepend a \"!\" to the material name.\n\nIf you wish to override a single material on the model, use Entity:SetSubMaterial instead.","note":"To apply materials to models, that material **must** have **VertexLitGeneric** shader. For that reason you cannot apply map textures onto models, map textures use a different material shader - **LightmappedGeneric**, which can be used on brush entities.","bug":{"text":"The server's value takes priority on the client.","issue":"3362"}},"realm":"Shared","args":{"arg":{"text":"New material name. Use an empty string (\"\") to reset to the default materials.","name":"materialName","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetMaxHealth","parent":"Entity","type":"classfunc","description":"Sets the maximum health for entity. Note, that you can still set entity's health above this amount with Entity:SetHealth.","realm":"Server","args":{"arg":{"text":"What the max health should be","name":"maxhealth","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetModel","parent":"Entity","type":"classfunc","description":{"text":"Sets the model of the entity.\n\nThis does not update the physics of the entity - see Entity:PhysicsInit.","warning":"This silently fails when given an empty string."},"realm":"Shared","args":{"arg":{"text":"New model value.","name":"modelName","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetModelName","parent":"Entity","type":"classfunc","description":"Alter the model name returned by Entity:GetModel. Does not affect the entity's actual model.","realm":"Shared","args":{"arg":{"text":"The new model name.","name":"modelname","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetModelScale","parent":"Entity","type":"classfunc","description":{"text":"Scales the model of the entity, if the entity is a Player or an NPC the hitboxes will be scaled as well.\n\nFor some entities, calling Entity:Activate after this will scale the collision bounds and PhysObj as well; be wary as there's no optimization being done internally and highly complex collision models might crash the server.\n\nThis is the same system used in TF2 for the Mann Vs Machine robots.\n\nTo resize the entity along any axis, use Entity:EnableMatrix instead.\n\nIf your old scales are wrong, use Entity:SetLegacyTransform as a quick fix.","note":"If you do not want the physics to be affected by Entity:Activate, you can use Entity:ManipulateBoneScale`( 0, Vector( scale, scale, scale ) )` instead.","bug":{"text":"This does not scale procedural bones and disables IK.","issue":"3502"}},"realm":"Shared","args":{"arg":[{"text":"A float to scale the model by. 0 will not draw anything. A number less than 0 will draw the model inverted.","name":"scale","type":"number"},{"text":"Transition time of the scale change, set to 0 to modify the scale right away.","name":"deltaTime","type":"number","default":"0"}]}},"example":{"description":"From the \"Biggify\" option of right clicking an npc","code":"ent:SetModelScale( ent:GetModelScale() * 1.25, 1 )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetMoveCollide","parent":"Entity","type":"classfunc","description":"Sets the move collide type of the entity. The move collide is the way a physics object reacts to hitting an object - will it bounce, slide?","realm":"Shared","args":{"arg":{"text":"The move collide type, see Enums/MOVECOLLIDE","name":"moveCollideType","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetMoveType","parent":"Entity","type":"classfunc","description":"Sets the entity's move type. This should be called before initializing the physics object on the entity, unless it will override SetMoveType such as Entity:PhysicsInitBox.\n\nDespite existing on client, it doesn't actually do anything on client.","realm":"Shared","args":{"arg":{"text":"The new movetype, see Enums/MOVETYPE","name":"movetype","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetName","parent":"Entity","type":"classfunc","description":"Sets the mapping name of the entity.","realm":"Server","args":{"arg":{"text":"The name to set for the entity.","name":"mappingName","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetName","parent":"Entity","type":"classfunc","description":"Sets the mapping name of the entity.","realm":"Server","args":{"arg":{"text":"The name to set for the entity.","name":"mappingName","type":"string"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetNetworkAngles","parent":"Entity","type":"classfunc","description":"Alters the entity's perceived serverside angle on the client.","realm":"Client","args":{"arg":{"text":"Networked angle.","name":"angle","type":"Angle"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetNetworkedEntity","parent":"Entity","type":"classfunc","description":{"text":"Sets a networked entity value at specified index on the entity.\n\nThe value then can be accessed with Entity:GetNetworkedEntity both from client and server.","deprecated":"You should use Entity:SetNWEntity instead.","note":"Running this function clientside will only set it clientside for the client it is called on."},"realm":"Shared","args":{"arg":[{"text":"The key to associate the value with","name":"key","type":"string"},{"text":"The value to set","name":"value","type":"Entity","default":"NULL"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetNetworkedAngle","parent":"Entity","type":"classfunc","description":{"text":"Sets a networked angle value at specified index on the entity.\n\nThe value then can be accessed with Entity:GetNetworkedAngle both from client and server.","deprecated":"You should use Entity:SetNWAngle instead.","note":"Running this function clientside will only set it clientside for the client it is called on."},"realm":"Shared","args":{"arg":[{"text":"The key to associate the value with","name":"key","type":"string"},{"text":"The value to set","name":"value","type":"Angle","default":"Angle( 0, 0, 0 )"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetNetworkedBool","parent":"Entity","type":"classfunc","description":{"text":"Sets a networked boolean value at specified index on the entity.\n\nThe value then can be accessed with Entity:GetNetworkedBool both from client and server.","deprecated":"You should use Entity:SetNWBool instead.","note":"Running this function clientside will only set it clientside for the client it is called on."},"realm":"Shared","args":{"arg":[{"text":"The key to associate the value with","name":"key","type":"string"},{"text":"The value to set","name":"value","type":"boolean","default":"false"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetNetworkedInt","parent":"Entity","type":"classfunc","description":{"text":"Sets a networked integer value at specified index on the entity.\n\nThe value then can be accessed with Entity:GetNetworkedInt both from client and server.","deprecated":"You should use Entity:SetNWInt instead.","note":"Running this function clientside will only set it clientside for the client it is called on."},"realm":"Shared","args":{"arg":[{"text":"The key to associate the value with","name":"key","type":"string"},{"text":"The value to set","name":"value","type":"number","default":"0"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetNetworkedFloat","parent":"Entity","type":"classfunc","description":{"text":"Sets a networked float value at specified index on the entity.\n\nThe value then can be accessed with Entity:GetNetworkedFloat both from client and server.\n\nSeems to be the same as Entity:GetNetworkedInt.","deprecated":"You should use Entity:SetNWFloat instead.","note":"Running this function clientside will only set it clientside for the client it is called on."},"realm":"Shared","args":{"arg":[{"text":"The key to associate the value with","name":"key","type":"string"},{"text":"The value to set","name":"value","type":"number","default":"0"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetNetworkedNumber","parent":"Entity","type":"classfunc","description":{"text":"Sets a networked number at the specified index on the entity.","deprecated":"You should be using Entity:SetNWFloat instead."},"realm":"Shared","args":{"arg":[{"text":"The index that the value is stored in.","name":"index","type":"any"},{"text":"The value to network.","name":"number","type":"number"}]}},"example":{"description":"This will set the networked number 'score' on all clients to 3.","code":"for i, ply in ipairs( player.GetAll() ) do\n    ply:SetNetworkedNumber( 'score', 3 )\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetNetworkedVarProxy","parent":"Entity","type":"classfunc","description":{"text":"Sets callback function to be called when given NWVar changes.","deprecated":"You should be using Entity:SetNWVarProxy instead."},"realm":"Shared","file":{"text":"lua/includes/extensions/entity.lua","line":"485-L493"},"args":{"arg":[{"text":"The name of the NWVar to add callback for.","name":"name","type":"string"},{"text":"The function to be called when the NWVar changes.","name":"callback","type":"function"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetNetworkedString","parent":"Entity","type":"classfunc","description":{"text":"Sets a networked string value at specified index on the entity.\n\nThe value then can be accessed with Entity:GetNetworkedString both from client and server.","deprecated":"You should use Entity:SetNWString instead.","note":"Running this function clientside will only set it clientside for the client it is called on."},"realm":"Shared","args":{"arg":[{"text":"The key to associate the value with","name":"key","type":"string"},{"text":"The value to set","name":"value","type":"string","default":""}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetNetworkedVector","parent":"Entity","type":"classfunc","description":{"text":"Sets a networked vector value at specified index on the entity.\n\nThe value then can be accessed with Entity:GetNetworkedVector both from client and server.","deprecated":"You should use Entity:SetNWVector instead.","note":"Running this function clientside will only set it clientside for the client it is called on."},"realm":"Shared","args":{"arg":[{"text":"The key to associate the value with","name":"key","type":"string"},{"text":"The value to set","name":"value","type":"Vector","default":"Vector( 0, 0, 0 )"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetNetworkOrigin","parent":"Entity","type":"classfunc","description":"Virtually changes entity position for clients. Does the same thing as Entity:SetPos when used serverside.","realm":"Shared","args":{"arg":{"text":"The position to make clients think this entity is at.","name":"origin","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetNextClientThink","parent":"Entity","type":"classfunc","description":"Sets the next time the clientside ENTITY:Think is called.","realm":"Client","args":{"arg":{"text":"The next time, relative to Global.CurTime, to execute the ENTITY:Think clientside.","name":"nextthink","type":"number"}}},"example":{"description":"Prints 'Hello, World!' in console and sleeps for a second.","code":"function ENT:Think()\n    print(\"Hello, World!\")\n\n    self:SetNextClientThink( CurTime() + 1 )\n    return true -- Note: You need to return true to override the default next think time\nend","output":"Hello, World! every second the entity exists in the world."},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetNoDraw","parent":"Entity","type":"classfunc","description":"Sets if the entity's model should render at all.\n\nIf set on the server, this entity will no longer network to clients, and for all intents and purposes cease to exist clientside.","realm":"Shared","args":{"arg":{"text":"true disables drawing","name":"shouldNotDraw","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetNotSolid","parent":"Entity","type":"classfunc","description":"Sets whether the entity is solid or not.","realm":"Shared","args":{"arg":{"text":"True will make the entity not solid, false will make it solid.","name":"IsNotSolid","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetNPCClass","parent":"ENTITY","type":"classfunc","description":{"text":"Sets the NPC classification. Internally sets the `m_iClass` variable which is polled by the engine.","note":"This is a helper function only available if your SENT is based on `base_ai`"},"realm":"Server","args":{"arg":{"text":"The","name":"classification","type":"number","page":",CLASS EnumEnums/CLASS"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetNWBool","parent":"Entity","type":"classfunc","description":{"text":"Sets a networked boolean value on the entity.\n\nThe value can then be accessed with Entity:GetNWBool both from client and server.","note":"Running this function clientside will only set it for the client it is called on."},"realm":"Shared","args":{"arg":[{"text":"The key to associate the value with","name":"key","type":"string"},{"text":"The value to set","name":"value","type":"boolean"}]}},"example":{"description":"Sets a networked boolean with a key of `VIP` and a value of true on a player.","code":"print( Entity(1):GetNWBool( \"VIP\", false ) )\nEntity(1):SetNWBool( \"VIP\", true )\nprint( Entity(1):GetNWBool( \"VIP\" ) )","output":"```\nfalse\ntrue\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetNWEntity","parent":"Entity","type":"classfunc","description":{"text":"Sets a networked entity value on the entity.\n\nThe value can then be accessed with Entity:GetNWEntity both from client and server.","note":"Running this function clientside will only set it for the client it is called on."},"realm":"Shared","args":{"arg":[{"text":"The key to associate the value with","name":"key","type":"string"},{"text":"The value to set","name":"value","type":"Entity"}]}},"example":{"description":"This will set the networked entity 'owner' on all clients to themselves.","code":"for i, ply in ipairs( player.GetAll() ) do\n    ply:SetNWEntity( \"owner\", ply )\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetNWFloat","parent":"Entity","type":"classfunc","description":{"text":"Sets a networked float (number) value on the entity.\n\nThe value can then be accessed with Entity:GetNWFloat both from client and server.\n\nUnlike Entity:SetNWInt, floats don't have to be whole numbers.","note":"Running this function clientside will only set it for the client it is called on."},"realm":"Shared","args":{"arg":[{"text":"The key to associate the value with","name":"key","type":"string"},{"text":"The value to set","name":"value","type":"number"}]}},"example":{"description":"This will set the networked float 'money' on all clients to 10.5.","code":"for k, v in ipairs( player.GetAll() ) do\n    v:SetNWFloat( 'money', 10.5 )\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetNWAngle","parent":"Entity","type":"classfunc","description":{"text":"Sets a networked angle value on the entity.\n\nThe value can then be accessed with Entity:GetNWAngle both from client and server.","note":"Running this function clientside will only set it for the client it is called on."},"realm":"Shared","args":{"arg":[{"text":"The key to associate the value with","name":"key","type":"string"},{"text":"The value to set","name":"value","type":"Angle"}]}},"example":{"description":"This will set the networked angle 'direction' on all clients that is pointing straight up.","code":"for i, ply in ipairs( player.GetAll() ) do\n    ply:SetNWAngle( 'direction', Angle( -90, 0, 0 ) )\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetNWString","parent":"Entity","type":"classfunc","description":{"text":"Sets a networked string value on the entity.\n\nThe value can then be accessed with Entity:GetNWString both from client and server.","note":"Running this function clientside will only set it for the client it is called on."},"realm":"Shared","args":{"arg":[{"text":"The key to associate the value with","name":"key","type":"string"},{"text":"The value to set, up to 199 characters.","name":"value","type":"string"}]}},"example":{"description":"Sets a networked string with a key of \"Nickname\" and a value of \n\"John\" on a player.","code":"player:SetNWString( \"Nickname\", \"John\" )\nprint( player:GetNWString( \"Nickname\" ) )","output":"\"John\""},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetNWInt","parent":"Entity","type":"classfunc","description":{"text":"Sets a networked integer (whole number) value on the entity.\n\nThe value can then be accessed with Entity:GetNWInt both from client and server.\n\nSee Entity:SetNWFloat for numbers that aren't integers.","note":"Running this function clientside will only set it for the client it is called on.","bug":{"text":"This function will not round decimal values as it actually networks a float internally.","issue":"3374"}},"realm":"Shared","args":{"arg":[{"text":"The key to associate the value with","name":"key","type":"string"},{"text":"The value to set","name":"value","type":"number"}]}},"example":{"description":"This will set the networked integer 'money' on all clients to 100.","code":"for i, ply in ipairs( player.GetAll() ) do\n    ply:SetNWInt( 'money', 100 )\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetNWVector","parent":"Entity","type":"classfunc","description":{"text":"Sets a networked vector value on the entity.\n\nThe value can then be accessed with Entity:GetNWVector both from client and server.","note":"Running this function clientside will only set it for the client it is called on."},"realm":"Shared","args":{"arg":[{"text":"The key to associate the value with","name":"key","type":"string"},{"text":"The value to set","name":"value","type":"Vector"}]}},"example":{"description":"This will set the networked vector 'positionzero' on all clients to Vector( 0, 0, 0 ).","code":"for i, ply in ipairs( player.GetAll() ) do\n    ply:SetNWVector( 'positionzero', Vector( 0, 0, 0 ) )\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetNWVarProxy","parent":"Entity","type":"classfunc","description":{"text":"Sets a function to be called when the NWVar changes.","note":"Only one NWVarProxy can be set per-var"},"realm":"Shared","file":{"text":"lua/includes/extensions/entity.lua","line":"508"},"args":{"arg":[{"text":"The key of the NWVar to add callback for.","name":"key","type":"any"},{"text":"The function to be called when the NWVar changes. It has 4 arguments:\n* Entity ent - The entity\n* string name - Name of the NWVar that has changed\n* any oldval - The old value\n* any newval - The new value","name":"callback","type":"function"}]}},"example":{"description":"Prints all changes to a NWVar called \"Key\" of Player 1.","code":"Entity( 1 ):SetNWVarProxy( \"Key\", print )\nEntity( 1 ):SetNWString( \"Key\", \"Value\" )\nEntity( 1 ):SetNWString( \"Key\", \"Table\" )","output":"```\nPlayer [1][Player1]\tKey\tnil\tValue\nPlayer [1][Player1]\tKey\tValue\tTable\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetOwner","parent":"Entity","type":"classfunc","description":{"text":"Sets the owner of this entity, disabling all physics interaction with it.","note":"This function is generally used to disable physics interactions on projectiles being fired by their owner, but can also be used for normal ownership in case physics interactions are not involved at all. The Gravity gun will be able to pick up the entity even if the owner can't collide with it, the Physics gun however will not."},"realm":"Shared","args":{"arg":{"text":"The entity to be set as owner.","name":"owner","type":"Entity","default":"NULL"}}},"example":{"description":"Taken from Garry's Flechette gun , shoots a hunter's flechette and sets the owner of the flechette to the player using the weapon.","code":"function SWEP:PrimaryAttack()\n\tself:SetNextPrimaryFire( CurTime() + 0.1 )\n\t\n\tif (!SERVER) then return end\n\n\tlocal Forward = self.Owner:EyeAngles():Forward()\n\n\tlocal ent = ents.Create( \"hunter_flechette\" )\n\t\n\tif ( IsValid( ent ) ) then\n\n\t\tent:SetPos( self.Owner:GetShootPos() + Forward * 32 )\n\t\tent:SetAngles( self.Owner:EyeAngles() )\n\t\tent:Spawn()\n\t\tent:SetVelocity( Forward * 2000 )\n\t\tent:SetOwner( self.Owner )\n\tend\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetParent","parent":"Entity","type":"classfunc","description":{"text":"Sets the parent of this entity, making it move with its parent. This will make the child entity non solid, nothing can interact with them, including traces.","note":{"text":"This does not work on .","page":",the worldgame.GetWorld"},"warning":"This can cause undefined physics behaviour when used on entities that don't support parenting. See the [Valve developer wiki](https://developer.valvesoftware.com/wiki/Entity_Hierarchy_(parenting)) for more information."},"realm":"Shared","args":{"arg":[{"text":"The entity to parent to. Setting this to nil will clear the parent.","name":"parent","type":"Entity","default":"NULL"},{"text":"The attachment id to use when parenting, defaults to -1 or whatever the parent had set previously.","name":"attachmentId","type":"number","default":"-1","note":"You must call Entity:SetMoveType( MOVETYPE_NONE ) on the child for this argument to have any effect!"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetPersistent","parent":"Entity","type":"classfunc","description":{"text":"Sets whether or not the given entity is persistent. A persistent entity will be saved on server shutdown and loaded back when the server starts up. Additionally, by default persistent entities cannot be grabbed with the physgun and tools cannot be used on them.\n\nIn sandbox, this can be set on an entity by opening the context menu, right clicking the entity, and choosing \"Make Persistent\".","note":"Persistence can only be enabled with the sbox_persist convar, which works as an identifier for the current set of persistent entities. An empty identifier (which is the default value) disables this feature."},"realm":"Shared","args":{"arg":{"text":"Whether or not the entity should be persistent.","name":"persist","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetParentPhysNum","parent":"Entity","type":"classfunc","description":{"text":"Sets the parent of an entity to another entity with the given physics bone number. Similar to Entity:SetParent, except it is parented to a physbone. This function is useful mainly for ragdolls.","note":"Despite this function being available server side, it doesn't actually do anything server side."},"realm":"Shared","args":{"arg":{"text":"Physics bone number to attach to. Use 0 for objects with only one physics bone. (See Entity:GetPhysicsObjectNum)","name":"bone","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetPhysicsAttacker","parent":"Entity","type":"classfunc","description":{"text":"Sets the player who gets credit if this entity kills something with physics damage within the time limit.","note":"This can only be called on props, \"anim\" type SENTs and vehicles."},"realm":"Server","args":{"arg":[{"text":"Player who gets the kills. Setting this to a non-player entity will not work.","name":"ent","type":"Player"},{"text":"Time in seconds until the entity forgets its physics attacker and prevents it from getting the kill credit.","name":"timeLimit","type":"number","default":"5"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetPhysConstraintObjects","parent":"Entity","type":"classfunc","description":"When called on a constraint entity, sets the two physics objects to be constrained.\n\nUsage is not recommended as the Constraint library provides easier ways to deal with constraints.","realm":"Server","args":{"arg":[{"text":"The first physics object to be constrained.","name":"Phys1","type":"PhysObj"},{"text":"The second physics object to be constrained.","name":"Phys2","type":"PhysObj"}]}},"example":{"description":"From constraint.lua","code":"Constraint = ents.Create(\"phys_lengthconstraint\")\n\tConstraint:SetPos( WPos1 )\n\tConstraint:SetKeyValue( \"attachpoint\", tostring(WPos2) )\n\tConstraint:SetKeyValue( \"minlength\", \"0.0\" )\n\tConstraint:SetKeyValue( \"length\", length + addlength )\n\tif ( forcelimit ) then Constraint:SetKeyValue( \"forcelimit\", forcelimit ) end\n\tif ( rigid ) then Constraint:SetKeyValue( \"spawnflags\", 2 ) end\n\tConstraint:SetPhysConstraintObjects( Phys1, Phys2 )\nConstraint:Spawn()\nConstraint:Activate()"},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetPlaybackRate","parent":"Entity","type":"classfunc","description":"Allows you to set how fast an entity's animation will play, with 1.0 being the default speed.","realm":"Shared","args":{"arg":{"text":"How fast the animation will play.","name":"fSpeed","type":"number"}}},"example":{"description":"Makes Entity(1)'s viewmodel play animations 50% slower.","code":"Entity(1):GetViewModel():SetPlaybackRate(0.5)","output":"Entity(1)'s viewmodel now plays animations 50% slower."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetPoseParameter","parent":"Entity","type":"classfunc","description":{"text":"Sets the specified pose parameter to the specified value.\n\nYou should call Entity:InvalidateBoneCache after calling this function.","note":"Avoid calling this in draw hooks, especially when animating things, as it might cause visual artifacts."},"realm":"Shared","args":{"arg":[{"text":"Name of the pose parameter. Entity:GetPoseParameterName might come in handy here.","name":"poseName","type":"string"},{"text":"The value to set the pose to.","name":"poseValue","type":"number"}]}},"example":{"description":"Copies pose parameters from one entity to another. Since Entity:GetPoseParameter returns pose parameter values 0-1 on the client, they have to be remapped to the range returned by Entity:GetPoseParameterRange before being set on the target entity.","code":"local function CopyPoseParams(pEntityFrom, pEntityTo)\n\tif (SERVER) then\n\t\tfor i = 0, pEntityFrom:GetNumPoseParameters() - 1 do\n\t\t\tlocal sPose = pEntityFrom:GetPoseParameterName(i)\n\t\t\tpEntityTo:SetPoseParameter(sPose, pEntityFrom:GetPoseParameter(sPose))\n\t\tend\n\telse\n\t\tfor i = 0, pEntityFrom:GetNumPoseParameters() - 1 do\n\t\t\tlocal flMin, flMax = pEntityFrom:GetPoseParameterRange(i)\n\t\t\tlocal sPose = pEntityFrom:GetPoseParameterName(i)\n\t\t\tpEntityTo:SetPoseParameter(sPose, math.Remap(pEntityFrom:GetPoseParameter(sPose), 0, 1, flMin, flMax))\n\t\tend\n\tend\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetPos","parent":"Entity","type":"classfunc","description":{"text":"Moves the entity to the specified position.","note":["If the new position doesn't take effect right away, you can use Entity:SetupBones to force it to do so. This issue is especially common when trying to render the same entity twice or more in a single frame at different positions.","Some entities, such as ragdolls, will appear unaffected by this function in the next frame. Consider PhysObj:SetPos if necessary."],"warning":"Entities with Entity:GetSolid of SOLID_BBOX will have their angles reset!","bug":{"text":"This will fail inside of predicted functions called during player movement processing. This includes WEAPON:PrimaryAttack and WEAPON:Think.","issue":"2447"}},"realm":"Shared","args":{"arg":{"text":"The position to move the entity to.","name":"position","type":"Vector"}}},"example":{"description":"Sets the player's position to (0, 0, 0)","code":"Entity( 1 ):SetPos( Vector( 0, 0, 0 ) )","output":"The player is now located at Vector(0, 0, 0)"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetPredictable","parent":"Entity","type":"classfunc","description":{"text":"Sets whether an entity should be predictable or not.\nWhen an entity is set as predictable, its DT vars can be changed during predicted hooks. This is useful for entities which can be controlled by player input.\n\nAny datatable value that mismatches from the server will be overridden and a prediction error will be spewed.\n\nWeapons are predictable by default, and the drive system uses this function to make the controlled prop predictable as well.\n\nVisit  for a list of all predicted hooks, and the Prediction page.\nFor further technical information on the subject, visit [valve's wiki](https://developer.valvesoftware.com/wiki/Prediction).","note":["This function resets the datatable variables everytime it's called, it should ideally be called when a player starts using the entity and when he stops","Entities set as predictable with this function will be unmarked when the user lags and receives a full packet update, to handle such case visit GM:NotifyShouldTransmit"]},"realm":"Client","args":{"arg":{"text":"whether to make this entity predictable or not.","name":"setPredictable","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetPreventTransmit","parent":"Entity","type":"classfunc","description":{"text":"Prevents the server from sending any further information about the entity to a player.","note":"You must also call this function on a player's children if you would like to prevent transmission for players. See Entity:GetChildren.","bug":{"text":"This does not work for nextbots unless you recursively loop their children and update them too.","issue":"1736"},"validate":"When using this function, Entity:SetFlexScale will conflict with this function. Instead, consider using Entity:SetFlexScale on the client."},"realm":"Server","args":{"arg":[{"text":"The player to stop networking the entity to.","name":"player","type":"Player"},{"text":"true to stop the entity from networking, false to make it network again.","name":"stopTransmitting","type":"boolean"}]}},"example":{"description":"This will loop through all children entities of the ent passed and stop networking them too. Works with nextbots/players","code":"function RecursiveSetPreventTransmit(ent, ply, stopTransmitting)\n    if ent ~= ply and IsValid(ent) and IsValid(ply) then\n        ent:SetPreventTransmit(ply, stopTransmitting)\n        local tab = ent:GetChildren()\n        for i = 1, #tab do\n            RecursiveSetPreventTransmit(tab[ i ], ply, stopTransmitting)\n        end\n    end\nend"},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetRagdollAng","parent":"Entity","type":"classfunc","description":"Sets the bone angles. This is used alongside Kinect in Entity:SetRagdollBuildFunction, for more info see ragdoll_motion entity.","realm":"Server","args":{"arg":[{"text":"Bone ID","name":"boneid","type":"number"},{"text":"Angle to set","name":"pos","type":"Angle"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetRenderAngles","parent":"Entity","type":"classfunc","description":"Sets the render angles of the Entity.","realm":"Client","args":{"arg":{"text":"The new render angles to be set to.","name":"newAngles","type":"Angle"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetRagdollPos","parent":"Entity","type":"classfunc","description":"Sets the bone position. This is used alongside Kinect in Entity:SetRagdollBuildFunction, for more info see ragdoll_motion entity.","realm":"Server","args":{"arg":[{"text":"Bone ID","name":"boneid","type":"number"},{"text":"Position to set","name":"pos","type":"Vector"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetRagdollBuildFunction","parent":"Entity","type":"classfunc","description":"Sets the function to build the ragdoll. This is used alongside Kinect, for more info see ragdoll_motion entity.","realm":"Server","args":{"arg":{"text":"The build function. This function has one argument:\n* Entity ragdoll - The ragdoll to build","name":"func","type":"function"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetRenderBounds","parent":"Entity","type":"classfunc","description":"Sets the render bounds for the entity. For world space coordinates see Entity:SetRenderBoundsWS.","realm":"Client","args":{"arg":[{"text":"The minimum corner of the bounds, relative to origin of the entity.","name":"mins","type":"Vector"},{"text":"The maximum corner of the bounds, relative to origin of the entity.","name":"maxs","type":"Vector"},{"text":"If defined, adds this vector to maxs and subtracts this vector from mins.","name":"add","type":"Vector","default":"Vector( 0, 0, 0 )"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetRenderClipPlane","parent":"Entity","type":"classfunc","description":"Used to specify a plane, past which an object will be visually clipped.","realm":"Client","args":{"arg":[{"text":"The normal of the plane. Anything behind the normal will be clipped.","name":"planeNormal","type":"Vector"},{"text":"The position of the plane.","name":"planePosition","type":"number"}]}},"example":{"description":"Creates a blue barrel at Vector(0, 0, 0), freezes it, and will visually clip the barrel's lower half.","code":"local ent = ents.CreateClientProp( \"prop_physics\" )\nent:SetModel( \"models/props_borealis/bluebarrel001.mdl\" )\nent:SetPos( Vector(0, 0, 0) )\nent:Spawn()\nent:GetPhysicsObject():EnableMotion(false)\n\nlocal normal = ent:GetUp()\nlocal position = normal:Dot( ent:GetPos() )\nent:SetRenderClipPlaneEnabled( true )\nent:SetRenderClipPlane( normal, position )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetRenderBoundsWS","parent":"Entity","type":"classfunc","description":"Sets the render bounds for the entity in world space coordinates. For relative coordinates see Entity:SetRenderBounds.","realm":"Client","args":{"arg":[{"text":"The minimum corner of the bounds, relative to origin of the world/map.","name":"mins","type":"Vector"},{"text":"The maximum corner of the bounds, relative to origin of the world/map.","name":"maxs","type":"Vector"},{"text":"If defined, adds this vector to maxs and subtracts this vector from mins.","name":"add","type":"Vector","default":"Vector( 0, 0, 0 )"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetRenderClipPlaneEnabled","parent":"Entity","type":"classfunc","description":"Enables the use of clipping planes to \"cut\" objects.","realm":"Client","args":{"arg":{"text":"Enable or disable clipping planes","name":"enabled","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetRenderFX","parent":"Entity","type":"classfunc","description":"Sets entity's render FX.","realm":"Shared","args":{"arg":{"text":"The new render FX to set, see Enums/kRenderFx","name":"renderFX","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetRenderMode","parent":"Entity","type":"classfunc","description":"Sets the render mode of the entity.","realm":"Shared","args":{"arg":{"text":"New render mode to set, see Enums/RENDERMODE.","name":"renderMode","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetSaveValue","parent":"Entity","type":"classfunc","description":{"text":"Sets a save value for an entity. You can see a full list of an entity's save values by creating it and printing Entity:GetSaveTable().\n\nSee Entity:GetInternalVariable for the opposite of this function.","bug":{"text":"This does not type-check entity keys. Setting an entity key to a non-entity value will treat it as NULL.","issue":"4065"}},"realm":"Shared","args":{"arg":[{"text":"Name of the save value to set","name":"name","type":"string"},{"text":"Value to set","name":"value","type":"any"}]},"rets":{"ret":{"text":"Key successfully set","name":"","type":"boolean"}}},"example":{"description":"Make all rollermines currently on the map friendly","code":"for i, mine in ipairs( ents.FindByClass( \"npc_rollermine\" ) ) do\n   mine:SetSaveValue( \"m_bHackedByAlyx\", true )\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetRenderOrigin","parent":"Entity","type":"classfunc","description":"Set the origin in which the Entity will be drawn from.","realm":"Client","args":{"arg":{"text":"The new origin in world coordinates where the Entity's model will now be rendered from.","name":"newOrigin","type":"Vector"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetSequence","parent":"Entity","type":"classfunc","description":{"text":"Sets the entity's model sequence.\n\nIf the specified sequence is already active, the animation will not be restarted. See Entity:ResetSequence for a function that restarts the animation even if it is already playing.\n\nIn some cases you want to run Entity:ResetSequenceInfo to make this function run.","note":"This will not work properly if called directly after calling Entity:SetModel. Consider waiting until the next Tick.\n\nWill not work on players due to the animations being reset every frame by the base gamemode animation system. See GM:CalcMainActivity.\n\nFor custom scripted entities you will want to apply example from ENTITY:Think to make animations work."},"realm":"Shared","args":{"arg":{"text":"The sequence to play. Also accepts strings.","name":"sequenceId","type":"number","note":"If set to a string, the function will automatically call Entity:LookupSequence to retrieve the sequence ID as a number."}}},"example":[{"description":"Set the entity to play the \"idle\" sequence.","code":"self:SetSequence( \"idle\" )"},{"description":"Set the entity to play the first sequence defined on the model (usually idle).","code":"self:SetSequence( 0 )"}],"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetShouldPlayPickupSound","parent":"Entity","type":"classfunc","description":"Sets whether or not the entity should make a physics contact sound when it's been picked up by a player.","realm":"Shared","args":{"arg":{"text":"True to play the pickup sound, false otherwise.","name":"playsound","type":"boolean","default":"false"}}},"example":{"description":"Enable pickup sound on all entities.","code":"function GM:OnEntityCreated(ent)\n    ent:SetShouldPlayPickupSound(true)\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetSkin","parent":"Entity","type":"classfunc","description":"Sets the skin of the entity.","realm":"Shared","args":{"arg":{"text":"0-based index of the skin to use.","name":"skinIndex","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetShouldServerRagdoll","parent":"Entity","type":"classfunc","description":{"text":"Sets if entity should create a server ragdoll on death or a client one.","note":"Player ragdolls created with this enabled will have an owner set, see Entity:SetOwner for more information on what effects this has.\n\nThis is reset for players when they respawn (Entity:Spawn)."},"realm":"Shared","args":{"arg":{"text":"Set `true` if ragdoll should be created on server, `false` if on client.","name":"serverragdoll","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetSolid","parent":"Entity","type":"classfunc","description":"Sets the solidity of an entity.","realm":"Shared","args":{"arg":{"text":"The solid type. See the Enums/SOLID.","name":"solid_type","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetSolidFlags","parent":"Entity","type":"classfunc","description":"Sets solid flag(s) for the entity.\n\nThis overrides any other flags the entity might have had. See Entity:AddSolidFlags for adding flags.","realm":"Shared","args":{"arg":{"text":"The flag(s) to set, see Enums/FSOLID.","name":"flags","type":"number"}}},"example":{"description":"Mimics Entity:SetTrigger call on the entity and adds FSOLID_USE_TRIGGER_BOUNDS flag to it.","code":"ent:SetSolidFlags( bit.bor( FSOLID_TRIGGER, FSOLID_USE_TRIGGER_BOUNDS ) )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetSubMaterial","parent":"Entity","type":"classfunc","description":{"text":"Overrides a single material on the model of this entity.\n\nTo set a Lua material created with Global.CreateMaterial, just prepend a \"!\" to the material name.","bug":{"text":"The server's value takes priority on the client.","issue":"3362"}},"realm":"Shared","args":{"arg":[{"text":"Index of the material to override, acceptable values are from 0 to 31.\n\nIndexes are by Entity:GetMaterials, but you have to subtract 1 from them.\n\nIf called with no arguments, all sub materials will be reset.","name":"index","type":"number","default":"nil"},{"text":"The material to override the default one with. Set to nil to revert to default material.","name":"material","type":"string","default":"nil"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetTable","parent":"Entity","type":"classfunc","description":{"text":"Changes the table that can be accessed by indexing an entity. Each entity starts with its own table by default.","internal":""},"realm":"Shared","args":{"arg":{"text":"Table for the entity to use","name":"tab","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetTransmitWithParent","parent":"Entity","type":"classfunc","description":{"text":"When this flag is set the entity will only transmit to the player when its parent is transmitted. This is useful for things like viewmodel attachments since without this flag they will transmit to everyone (and cause the viewmodels to transmit to everyone too).","note":"In the case of scripted entities, this will override ENTITY:UpdateTransmitState"},"realm":"Shared","file_name":"src/garrysmod/Objects/lua_entity.cpp","file_line":"5390","args":{"arg":{"text":"Will set the TransmitWithParent flag on or off","name":"onoff","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetTrigger","parent":"Entity","type":"classfunc","description":{"text":"Marks the entity as a trigger, so it will generate ENTITY:StartTouch, ENTITY:Touch and ENTITY:EndTouch callbacks.\n\nInternally this is stored as  flag.","page":",FSOLID_TRIGGEREnums/FSOLID"},"realm":"Server","args":{"arg":{"text":"Make the entity trigger or not","name":"maketrigger","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetSpawnEffect","parent":"Entity","type":"classfunc","description":{"text":"Sets whether the entity should use a spawn effect when it is created on the client.\n\nSee Entity:GetSpawnEffect for more information on how the effect is applied.","note":"This function will only have an effect when the entity spawns. After that it will do nothing even is set to true."},"realm":"Shared","args":{"arg":{"text":"Sets if we should show a spawn effect.","name":"spawnEffect","type":"boolean"}}},"example":{"description":"Simplified code taken from sandbox's commands.lua","code":"local function MakeRagdoll( Player, Pos, Ang, Model, PhysicsObjects, Data )\n\n\tlocal Ent = ents.Create( \"prop_ragdoll\" )\n\tduplicator.DoGeneric( Ent, Data )\n\tEnt:Spawn()\n\t\n\tduplicator.DoGenericPhysics( Ent, Player, Data )\n\tEnt:Activate()\n\n\tEnt:SetSpawnEffect( true )\n\treturn Ent\t\nend","output":"Spawns the ragdoll and then sets the spawnEffect flag to true."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetupPhonemeMappings","parent":"Entity","type":"classfunc","description":{"text":"Initializes the class names of an entity's phoneme mappings (mouth movement data). This is called by default with argument \"phonemes\" when a flex-based entity (such as an NPC) is created.","note":"TF2 phonemes can be accessed by using a path such as \"player/scout/phonemes/phonemes\" , check TF2's \"tf2_misc_dir.vpk\" with GCFScape for other paths, however it seems that TF2 sounds don't contain phoneme definitions anymore after being converted to mp3 and only rely on VCD animations, this needs to be further investigated"},"realm":"Client","args":{"arg":{"text":"The file prefix of the phoneme mappings (relative to \"garrysmod/expressions/\").","name":"fileRoot","type":"string"}}},"example":{"description":"Defines a function that can enable or disable phoneme mappings on an entity.","code":"-- Turn phoneme mappings on or off\nfunction EnablePhonemes(ent, on)\n\n\tif(!IsValid(ent)) then return end\n\t\n\tif(!on) then\n\t\t-- Disable mouth movement\n\t\tent:SetupPhonemeMappings(\"\")\n\telse\n\t\t-- Enable mouth movement\n\t\tent:SetupPhonemeMappings(\"phonemes\")\n\tend\n\nend"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetupBones","parent":"Entity","type":"classfunc","description":{"text":"Forces the entity to reconfigure its bones. You might need to call this after changing your model's scales or when manually drawing the entity multiple times at different positions.","note":"This calls the BuildBonePositions callback added via Entity:AddCallback, so avoid calling this function inside it to prevent an infinite loop."},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetUnFreezable","parent":"Entity","type":"classfunc","description":"Sets whether an entity can be unfrozen, meaning that it cannot be unfrozen using the physgun.","realm":"Server","file":{"text":"lua/includes/extensions/entity.lua","line":"478"},"args":{"arg":{"text":"True to make the entity unfreezable, false otherwise.","name":"freezable","type":"boolean","default":"false"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetUseType","parent":"Entity","type":"classfunc","description":"Sets the use type of an entity, affecting how often ENTITY:Use will be called for Lua entities.","realm":"Server","args":{"arg":{"text":"The use type to apply to the entity. Uses Enums/_USE.","name":"useType","type":"number"}}},"example":{"description":"Makes the ENTITY:Use hook only get called once at every use.","code":"Entity:SetUseType( SIMPLE_USE )"},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetVar","parent":"Entity","type":"classfunc","description":{"text":"Allows to quickly set variable to entity's Entity:GetTable.","note":"This will not network the variable to client(s). You want Entity:SetNWString and similar functions for that"},"realm":"Shared","file":{"text":"lua/includes/extensions/entity.lua","line":"102-L106"},"args":{"arg":[{"text":"Key of the value to set","name":"key","type":"any"},{"text":"Value to set the variable to","name":"value","type":"any"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetVelocity","parent":"Entity","type":"classfunc","description":{"text":"Sets the entity's velocity. For entities with physics, consider using PhysObj:SetVelocity on the PhysObj of the entity.","note":"Actually binds to CBaseEntity::SetBaseVelocity() which sets the entity's velocity due to forces applied by other entities.","warning":"If applied to a player, this will actually **ADD** velocity, not set it."},"realm":"Shared","args":{"arg":{"text":"The new velocity to set.","name":"velocity","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetWeaponModel","parent":"Entity","type":"classfunc","description":{"text":"Sets the model and associated weapon to this viewmodel entity.\n\nThis is used internally when the player switches weapon.","note":"View models are not drawn without a weapons associated to them.","warning":"This will silently fail if the entity is not a viewmodel."},"realm":"Shared","args":{"arg":[{"text":"The model string to give to this viewmodel.\nExample: \"models/weapons/c_smg1.mdl\"","name":"viewModel","type":"string"},{"text":"The weapon entity to associate this viewmodel to.","name":"weapon","type":"Weapon","default":"NULL"}]}},"example":[{"description":"Sets the model of the second viewmodel to the smg and associates it with the player's current weapon.","code":"Entity( 1 ):GetViewModel( 1 ):SetWeaponModel( \"models/weapons/c_smg1.mdl\", Entity( 1 ):GetActiveWeapon() )"},{"description":"Initializes the extra viewmodel in Deploy and hides it again on Holster, also plays the attack animation on left and right click.","code":"SWEP.ViewModel = \"models/weapons/v_pistol.mdl\"\nSWEP.UseHands = false\nSWEP.ViewModelFlip = false\t--the default viewmodel won't be flipped\nSWEP.ViewModelFlip1 = true\t--the second viewmodel will\n\n\nfunction SWEP:Deploy()\n\t--get the second viewmodel\n\tlocal viewmodel1 = self.Owner:GetViewModel( 1 )\n\tif ( IsValid( viewmodel1 ) ) then\n\t\t--associate its weapon to us\n\t\tviewmodel1:SetWeaponModel( self.ViewModel , self )\n\tend\n\t\n\tself:SendViewModelAnim( ACT_VM_DEPLOY , 1 )\n\t\n\treturn true\nend\n\nfunction SWEP:Holster()\n\tlocal viewmodel1 = self.Owner:GetViewModel( 1 )\n\tif ( IsValid( viewmodel1 ) ) then\n\t\t--set its weapon to nil, this way the viewmodel won't show up again\n\t\tviewmodel1:SetWeaponModel( self.ViewModel , nil )\n\tend\n\t\n\treturn true\nend\n\n--since self:SendWeaponAnim always sends the animation to the first viewmodel, we need this as a replacement\nfunction SWEP:SendViewModelAnim( act , index , rate )\n\t\n\tif ( not game.SinglePlayer() and not IsFirstTimePredicted() ) then\n\t\treturn\n\tend\n\t\n\tlocal vm = self.Owner:GetViewModel( index )\n\t\n\tif ( not IsValid( vm ) ) then\n\t\treturn\n\tend\n\t\n\tlocal seq = vm:SelectWeightedSequence( act )\n\t\n\tif ( seq == -1 ) then\n\t\treturn\n\tend\n\t\n\tvm:SendViewModelMatchingSequence( seq )\n\tvm:SetPlaybackRate( rate or 1 )\nend\n\nfunction SWEP:PrimaryAttack()\n\t\n\tself:SendViewModelAnim( ACT_VM_PRIMARYATTACK , 0 )--target the first viewmodel\n\tself:SetNextPrimaryFire( CurTime() + 0.25 )\n\t\nend\n\nfunction SWEP:SecondaryAttack()\n\t\n\tself:SendViewModelAnim( ACT_VM_PRIMARYATTACK , 1 )--target the second\n\tself:SetNextSecondaryFire( CurTime() + 0.25 )\n\t\nend","output":{"image":{"src":"SetWeaponModelExample.jpg","alt":"thumb|center"}}}],"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SkinCount","parent":"Entity","type":"classfunc","description":"Returns the amount of skins the entity has.","realm":"Shared","rets":{"ret":{"text":"The amount of skins the entity's model has.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Spawn","parent":"Entity","type":"classfunc","description":"Initializes the entity and starts its networking. If called on a player, it will respawn them.\n\nThis calls ENTITY:Initialize on Lua-defined entities.","realm":"Shared"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SnatchModelInstance","parent":"Entity","type":"classfunc","description":"Moves the model instance from the source entity to this entity. This can be used to transfer decals that have been applied on one entity to another.\n\nBoth entities must have the same model.","realm":"Client","args":{"arg":{"text":"Entity to move the model instance from.","name":"srcEntity","type":"Entity"}},"rets":{"ret":{"text":"Whether the operation was successful or not","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"StartMotionController","parent":"Entity","type":"classfunc","description":{"text":"Starts a motion controller in the physics engine tied to this entity's PhysObj, which enables the use of ENTITY:PhysicsSimulate.\n\nThe motion controller can later be destroyed via Entity:StopMotionController.\n\nMotion controllers are used internally to control other Entities' PhysObjects, such as the Gravity Gun, +use pickup and the Physics Gun.\n\nThis function should be called every time you recreate the Entity's PhysObj. Or alternatively you should call Entity:AddToMotionController on the new PhysObj.\n\nAlso see Entity:AddToMotionController and Entity:RemoveFromMotionController.","note":"Only works on a scripted Entity of anim type."},"realm":"Shared"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"StartLoopingSound","parent":"Entity","type":"classfunc","description":"Starts a \"looping\" sound. As with any other sound playing methods, this function expects the sound file to be looping itself and will not automatically loop a non looping sound file as one might expect.\n\nThis function is almost identical to Global.CreateSound, with the exception of the sound being created in the STATIC channel and with normal attenuation.\n\nSee also Entity:StopLoopingSound","realm":"Shared","args":{"arg":{"text":"Sound to play. Can be either a sound script or a filepath.","name":"sound","type":"string"}},"rets":{"ret":{"text":"The ID number of started sound starting with 0, or -1 if we failed for some reason.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"StopAndDestroyParticles","parent":"Entity","type":"classfunc","description":"Stops all particle effects parented to the entity and immediately destroys them.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"StopLoopingSound","parent":"Entity","type":"classfunc","description":"Stops a sound created by Entity:StartLoopingSound.","realm":"Shared","args":{"arg":{"text":"The sound ID returned by Entity:StartLoopingSound","name":"id","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"StopMotionController","parent":"Entity","type":"classfunc","description":"Stops the motion controller created with Entity:StartMotionController.","realm":"Shared"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"StopParticleEmission","parent":"Entity","type":"classfunc","description":"Stops all particle effects parented to the entity.\n\nThis is ran automatically on every client by Entity:StopParticles if called on the server.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"StopParticlesNamed","parent":"Entity","type":"classfunc","description":"Stops all particle effects parented to the entity with given name.","realm":"Client","args":{"arg":{"text":"The name of the particle to stop.","name":"name","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"StopParticles","parent":"Entity","type":"classfunc","description":"Stops any attached to the entity .pcf particles using Global.ParticleEffectAttach.\n\nOn client, this is the same as Entity:StopParticleEmission. ( and you should use StopParticleEmission instead )\n\n\nOn server, this is the same as running Entity:StopParticleEmission on every client.","realm":"Shared"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"StopParticlesWithNameAndAttachment","parent":"Entity","type":"classfunc","description":"Stops all particle effects parented to the entity with given name on given attachment.","realm":"Client","args":{"arg":[{"text":"The name of the particle to stop.","name":"name","type":"string"},{"text":"The attachment of the entity to stop particles on.","name":"attachment","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"StopSound","parent":"Entity","type":"classfunc","description":"Stops emitting the given sound from the entity, especially useful for looping sounds.","realm":"Shared","args":{"arg":{"text":"The name of the sound script or the filepath to stop playback of.","name":"sound","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"TakeDamage","parent":"Entity","type":"classfunc","description":{"text":"Applies the specified amount of damage to the entity with  flag.","page":",DMG_GENERICEnums/DMG","warning":"Calling this function on the victim entity in ENTITY:OnTakeDamage can cause infinite loops."},"realm":"Server","args":{"arg":[{"text":"The amount of damage to be applied.","name":"damageAmount","type":"number"},{"text":"The entity that initiated the attack that caused the damage.","name":"attacker","type":"Entity"},{"text":"The entity that applied the damage, eg. a weapon.","name":"inflictor","type":"Entity"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"TakeDamageInfo","parent":"Entity","type":"classfunc","description":{"text":"Applies the damage specified by the damage info to the entity.","warning":"Calling this function on the victim entity in ENTITY:OnTakeDamage can cause infinite loops."},"realm":"Server","args":{"arg":{"text":"The damage to apply.","name":"damageInfo","type":"CTakeDamageInfo"}}},"example":{"description":"Dissolve the target into oblivion.\n\nIf you just want to dissolve your SENT, you may need to use [env_entity_dissolver](https://developer.valvesoftware.com/wiki/Env_entity_dissolver) for this.","code":"function DissolveIt( ent, ply )\n\tlocal d = DamageInfo()\n\td:SetDamage( ent:Health() )\n\td:SetAttacker( ply or ent )\n\td:SetDamageType( DMG_DISSOLVE ) \n\n\tent:TakeDamageInfo( d )\nend\nconcommand.Add( \"dissolve_it\", function( ply, cmd, arg )\n\tlocal ent = ply:GetEyeTrace().Entity\n\tif ( !IsValid( ent ) ) then return end -- Not looking at a valid entity\n\n\tDissolveIt( ent, ply )\nend )"},"realms":["Server"],"type":"Function"},
{"function":{"name":"TakePhysicsDamage","parent":"Entity","type":"classfunc","description":"Applies forces to our physics object in response to damage.","realm":"Server","args":{"arg":{"text":"The damageinfo to apply. Only CTakeDamageInfo:GetDamageForce and CTakeDamageInfo:GetDamagePosition are used.","name":"dmginfo","type":"CTakeDamageInfo"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"TestPVS","parent":"Entity","type":"classfunc","description":{"text":"Check if the given position or entity is within this entity's PVS.\n\nSee also Entity:IsDormant.","note":"The function won't take in to account Global.AddOriginToPVS and the like."},"realm":"Server","args":{"arg":{"text":"Entity or Vector to test against. If an entity is given, this function will test using its bounding box.","name":"testPoint","type":"any"}},"rets":{"ret":{"text":"True if the testPoint is within our PVS.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"TranslateBoneToPhysBone","parent":"Entity","type":"classfunc","description":"Returns the ID of a PhysObj attached to the given bone. To be used with Entity:GetPhysicsObjectNum.\n\nSee Entity:TranslatePhysBoneToBone for reverse function.","realm":"Shared","args":{"arg":{"text":"The ID of a bone to look up the \"physics root\" bone of.","name":"boneID","type":"number"}},"rets":{"ret":{"text":"The PhysObj ID of the given bone.\n\n* -1 if we somehow cannot translate","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"UpdateBoneFollowers","parent":"Entity","type":"classfunc","description":{"text":"Updates positions of bone followers created by Entity:CreateBoneFollowers.\n\nThis should be called every tick.","note":"This function only works on `anim` type entities."},"realm":"Server","added":"2021.01.27"},"realms":["Server"],"type":"Function"},
{"function":{"name":"TranslatePhysBoneToBone","parent":"Entity","type":"classfunc","description":"Returns the boneID of the bone the given PhysObj is attached to.\n\nSee Entity:TranslateBoneToPhysBone for reverse function.","realm":"Shared","args":{"arg":{"text":"The PhysObj number on the entity","name":"physNum","type":"number"}},"rets":{"ret":{"text":"The boneID of the bone the PhysObj is attached to.","name":"","type":"number"}}},"example":{"description":"Does a trace, gets the physics bone from the trace, converts the physics bone number into the bone number and prints the result","code":"concommand.Add( \"boneid\", function( ply )\n\tlocal tr = ply:GetEyeTrace()\n\tlocal bone = tr.Entity:TranslatePhysBoneToBone( tr.PhysicsBone )\n\tprint( bone )\n\tply:ChatPrint( bone )\nend )","output":"The bone number of what the client is looking at"},"realms":["Server","Client"],"type":"Function"},
{"ambig":{"text":"You might be looking for the \"ENTITY:Use\" hook, which has the same name as this method.","page":"ENTITY:Use"},"function":{"name":"Use","parent":"Entity","type":"classfunc","ishook":false,"description":"Simulates a `+use` action on an entity.","realm":"Server","predicted":"No","args":{"arg":[{"text":"The entity that caused this input. This will usually be the player who pressed their use key","name":"activator","type":"Entity"},{"text":"The entity responsible for the input. This will typically be the same as `activator` unless some other entity is acting as a proxy","name":"caller","type":"Entity","default":"NULL"},{"text":"Use type, see Enums/USE.","name":"useType","type":"number","default":"USE_ON"},{"text":"Any value.","name":"value","type":"number","default":"0"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"UseClientSideAnimation","parent":"Entity","type":"classfunc","description":{"text":"Animations will be handled purely clientside instead of a fixed animtime, enabling interpolation. This does not affect layers and gestures.","note":"Does nothing on server."},"realm":"Shared"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"UseTriggerBounds","parent":"Entity","type":"classfunc","description":{"text":"Enables or disables trigger bounds.\n\nThis will give the entity a \"trigger box\" that extends around its bounding box by boundSize units in X/Y and (boundSize / 2) in +Z (-Z remains the same).\nThe trigger box is world aligned and will work regardless of the object's solidity and collision group.\n\nValve use trigger boxes for all pickup items. Their bloat size is 24, a surprisingly large figure.","note":"The trigger boxes can be made visible as a light blue box by using the **ent_bbox** console command while looking at the entity. Alternatively a classname or entity index can be used as the first argument.\n\nThis requires **developer** to be set to **1**."},"realm":"Shared","args":{"arg":[{"text":"Enable or disable the bounds.","name":"enable","type":"boolean"},{"text":"The distance/size of the trigger bounds.","name":"boundSize","type":"number","default":"0"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ViewModelIndex","parent":"Entity","type":"classfunc","description":"Returns the index of this view model, it can be used to identify which one of the player's view models this entity is.","realm":"Shared","rets":{"ret":{"text":"View model index, ranges from 0 to 2, nil if the entity is not a view model","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Visible","parent":"Entity","type":"classfunc","description":"Returns whether the target/given entity is visible from the this entity.\n\nThis is meant to be used only with NPCs.\n\nDifferences from a simple trace include:\n* If target has **FL_NOTARGET**, returns false\n* If **ai_ignoreplayers** is turned on and target is a player, returns false\n* Reacts to **ai_LOS_mode**:\n* * If 1, does a simple trace with **COLLISION_GROUP_NONE** and **MASK_BLOCKLOS**\n* * If not, does a trace with **MASK_BLOCKLOS_AND_NPCS** ( - **CONTENTS_BLOCKLOS** is target is player ) and a custom LOS filter ( **CTraceFilterLOS** )\n* Returns true if hits a vehicle the target is driving","realm":"Server","args":{"arg":{"text":"Entity to check for visibility to.","name":"target","type":"Entity"}},"rets":{"ret":{"text":"If the entities can see each other.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Weapon_TranslateActivity","parent":"Entity","type":"classfunc","description":"Calls and returns WEAPON:TranslateActivity on the weapon the entity ( player or NPC ) carries.\n\nDespite existing on client, it doesn't actually do anything on client.","realm":"Shared","args":{"arg":{"text":"The activity to translate","name":"act","type":"number"}},"rets":{"ret":{"text":"The translated activity","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"VisibleVec","parent":"Entity","type":"classfunc","description":"Returns true if supplied vector is visible from the entity's line of sight.\n\nThis is achieved similarly to a trace.","realm":"Server","args":{"arg":{"text":"The position to check for visibility","name":"pos","type":"Vector"}},"rets":{"ret":{"text":"Within line of sight","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Weapon_SetActivity","parent":"Entity","type":"classfunc","description":{"text":"Sets the activity of the entity's active weapon.","note":["This does nothing on the client.","Only works for CBaseCombatCharacter entities, which includes players and NPCs."]},"realm":"Shared","args":{"arg":[{"text":"Activity number. See Enums/ACT.","name":"act","type":"number"},{"text":"How long the animation should take in seconds.","name":"duration","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"WaterLevel","parent":"Entity","type":"classfunc","description":"Returns an integer that represents how deep in water the entity is.\n\n\n* **0** - The entity isn't in water.\n\n* **1** - Slightly submerged (at least to the feet).\n\n* **2** - The majority of the entity is submerged (at least to the waist).\n\n* **3** - Completely submerged.","realm":"Shared","rets":{"ret":{"text":"The water level.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"WorldToLocal","parent":"Entity","type":"classfunc","description":"Converts a worldspace vector into a vector local to an entity","realm":"Shared","args":{"arg":{"text":"The world vector","name":"wpos","type":"Vector"}},"rets":{"ret":{"text":"The local vector","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"WorldToLocalAngles","parent":"Entity","type":"classfunc","description":"Converts world angles to local angles ( local to the entity )","realm":"Shared","args":{"arg":{"text":"The world angles","name":"ang","type":"Angle"}},"rets":{"ret":{"text":"The local angles","name":"","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"WorldSpaceAABB","parent":"Entity","type":"classfunc","description":"Returns two vectors representing the minimum and maximum extent of the entity's bounding box.","realm":"Shared","rets":{"ret":[{"text":"The minimum vector for the entity's bounding box.","name":"","type":"Vector"},{"text":"The maximum vector for the entity's bounding box.","name":"","type":"Vector"}]}},"example":{"description":"Prints Entity(1)'s maximum bounding box vector.","code":"local min, max = Entity(1):WorldSpaceAABB()\nprint( max )","output":"-496.828125 11730.426758 5189.393066"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"WorldSpaceCenter","parent":"Entity","type":"classfunc","description":"Returns the center of the entity according to its collision model.","realm":"Shared","file_name":"src/garrysmod/Objects/lua_entity.cpp","file_line":"5322","rets":{"ret":{"text":"The center of the entity","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Flush","parent":"File","type":"classfunc","description":"Dumps the file changes to disk and saves the file.","realm":"Shared and Menu"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Read","parent":"File","type":"classfunc","args":{"arg":{"text":"Reads the specified amount of chars.","name":"length","type":"number"}},"rets":{"ret":{"name":"data","type":"string"}},"description":"Reads the specified amount of chars and returns them as a binary string.","realm":"Shared and Menu"},"example":{"description":"Adapted from extensions/file.lua","code":"function file.Read( filename, path )\n\n\tif ( path == true ) then path = \"GAME\" end\n\tif ( path == nil || path == false ) then path = \"DATA\" end\n\n\tlocal f = file.Open( filename, \"rb\", path )\n\tif ( !f ) then return end\n\n\tlocal str = f:Read( f:Size() )\n\n\tf:Close()\n\n\tif ( !str ) then str = \"\" end\n\treturn str\n\nend"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Close","parent":"File","type":"classfunc","description":"Dumps the file changes to disk and closes the file handle which makes the handle useless.","realm":"Shared and Menu"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"EndOfFile","parent":"File","type":"classfunc","description":"Returns whether the File object has reached the end of file or not.","realm":"Shared and Menu","added":"2020.03.17","rets":{"ret":{"text":"Whether the file has reached end or not.","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"ReadDouble","parent":"File","type":"classfunc","description":"Reads an 8-byte little-endian IEEE-754 floating point double from the file.","realm":"Shared and Menu","rets":{"ret":{"text":"The double-precision floating point value read from the file.","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"ReadBool","parent":"File","type":"classfunc","description":"Reads one byte of the file and returns whether that byte was not 0.","realm":"Shared and Menu","rets":{"ret":{"text":"val","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"ReadFloat","parent":"File","type":"classfunc","description":"Reads an IEEE 754 little-endian 4-byte float from the file.","realm":"Shared and Menu","rets":{"ret":{"text":"The read value","name":"","type":"number"}}},"example":{"code":"local f = file.Open( \"test.txt\", \"w\", \"DATA\" )\nf:WriteFloat( math.pi )\nf:WriteFloat( 66.99 )\nf:Close()\n\nlocal f = file.Open( \"test.txt\", \"r\", \"DATA\" )\nf:Seek( 4 )\nprint( f:ReadFloat() ) -- Prints 66.98999786377\nf:Close()"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"ReadByte","parent":"File","type":"classfunc","description":"Reads one unsigned 8-bit integer from the file.","realm":"Shared and Menu","rets":{"ret":{"text":"The unsigned 8-bit integer from the file.","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"ReadLine","parent":"File","type":"classfunc","description":{"text":"Returns the contents of the file from the current position up until the end of the current line.","note":["This function will look specifically for `Line Feed` characters `\\n` and will **completely ignore `Carriage Return` characters** `\\r`.","This function will not return more than 8192 characters."]},"realm":"Shared and Menu","rets":{"ret":{"text":"The string of data from the read line.","name":"","type":"string"}}},"example":{"description":"Open a file in read only mode, reads a line, tells where the current file pointer is at and then closes the file handle.","code":"local f = file.Open( \"cfg/mapcycle.txt\", \"r\", \"MOD\" )\nprint( f:ReadLine() )\nprint( f:ReadLine() )\nprint( f:Tell() )\nf:Close()","output":"```\n\n// Default mapcycle file for Garry's Mod.\n45\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"ReadLong","parent":"File","type":"classfunc","description":"Reads a signed little-endian 32-bit integer from the file.","realm":"Shared and Menu","rets":{"ret":{"text":"A signed 32-bit integer","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"ReadULong","parent":"File","type":"classfunc","description":"Reads an unsigned little-endian 32-bit integer from the file.","realm":"Shared and Menu","rets":{"ret":{"text":"An unsigned 32-bit integer","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"ReadShort","parent":"File","type":"classfunc","description":"Reads a signed little-endian 16-bit integer from the file.","realm":"Shared and Menu","rets":{"ret":{"text":"int16","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Size","parent":"File","type":"classfunc","rets":{"ret":{"name":"size","type":"number"}},"description":"Returns the size of the file in bytes.","realm":"Shared and Menu"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"ReadUShort","parent":"File","type":"classfunc","description":"Reads an unsigned little-endian 16-bit integer from the file.","realm":"Shared and Menu","rets":{"ret":{"text":"The 16-bit integer","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Seek","parent":"File","type":"classfunc","description":"Sets the file pointer to the specified position.","realm":"Shared and Menu","args":{"arg":{"text":"Pointer position, in bytes.","name":"pos","type":"number"}}},"example":{"code":"local f = file.Open( \"test.txt\", \"w\", \"DATA\" )\nf:WriteFloat( math.pi )\nf:WriteFloat( 66.99 )\nf:Close()\n\nlocal f = file.Open( \"test.txt\", \"r\", \"DATA\" )\nf:Seek( 4 )\nprint( f:ReadFloat() ) -- Prints 66.98999786377\nf:Close()"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Skip","parent":"File","type":"classfunc","description":"Moves the file pointer by the specified amount of chars.","realm":"Shared and Menu","args":{"arg":{"text":"The amount of chars to skip, can be negative to skip backwards.","name":"amount","type":"number"}},"rets":{"ret":{"text":"amount","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Tell","parent":"File","type":"classfunc","description":"Returns the current position of the file pointer.","realm":"Shared and Menu","rets":{"ret":{"text":"pos","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Write","parent":"File","type":"classfunc","args":{"arg":{"text":"Binary data to write to the file.","name":"data","type":"string"}},"description":"Writes the given string into the file.","realm":"Shared and Menu"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"WriteBool","parent":"File","type":"classfunc","description":"Writes a boolean value to the file as one **byte**.","realm":"Shared and Menu","args":{"arg":{"text":"The bool to be written to the file.","name":"bool","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"WriteByte","parent":"File","type":"classfunc","description":"Write an 8-bit unsigned integer to the file.","realm":"Shared and Menu","args":{"arg":{"text":"The 8-bit unsigned integer to be written to the file.","name":"uint8","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"WriteFloat","parent":"File","type":"classfunc","description":"Writes an IEEE 754 little-endian 4-byte float to the file.","realm":"Shared and Menu","args":{"arg":{"text":"The float to be written to the file.","name":"float","type":"number"}}},"example":{"code":"local f = file.Open( \"test.txt\", \"w\", \"DATA\" )\nf:WriteFloat( math.pi )\nf:WriteFloat( 66.99 )\nf:Close()\n\nlocal f = file.Open( \"test.txt\", \"r\", \"DATA\" )\nf:Seek( 4 )\nprint( f:ReadFloat() ) -- Prints 66.98999786377\nf:Close()"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"WriteDouble","parent":"File","type":"classfunc","description":"Writes an 8-byte little-endian IEEE-754 floating point double to the file.","realm":"Shared and Menu","args":{"arg":{"text":"The double to be written to the file.","name":"double","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"WriteShort","parent":"File","type":"classfunc","description":"Writes a signed little-endian 16-bit integer to the file.","realm":"Shared and Menu","args":{"arg":{"text":"The 16-bit signed integer to be written to the file.","name":"int16","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"WriteLong","parent":"File","type":"classfunc","description":"Writes a signed little-endian 32-bit integer to the file.","realm":"Shared and Menu","args":{"arg":{"text":"The 32-bit signed integer to be written to the file.","name":"int32","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"WriteULong","parent":"File","type":"classfunc","description":"Writes an unsigned little-endian 32-bit integer to the file.","realm":"Shared and Menu","args":{"arg":{"text":"The unsigned 32-bit integer to be written to the file.","name":"uint32","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"WriteUShort","parent":"File","type":"classfunc","description":"Writes an unsigned little-endian 16-bit integer to the file.","realm":"Shared and Menu","args":{"arg":{"text":"The unsigned 16-bit integer to the file.","name":"uint16","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"EnableLooping","parent":"IGModAudioChannel","type":"classfunc","description":"Enables or disables looping of audio channel, requires noblock flag.","realm":"Client","args":{"arg":{"text":"Enable or disable looping of this audio channel.","name":"enable","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"FFT","parent":"IGModAudioChannel","type":"classfunc","description":"Computes the [DFT (discrete Fourier transform)](https://en.wikipedia.org/wiki/Discrete_Fourier_transform) of the sound channel.\n\nThe size parameter specifies the number of consecutive audio samples to use as the input to the DFT and is restricted to a power of two. A [Hann window](https://en.wikipedia.org/wiki/Hann_function) is applied to the input data.\n\nThe computed DFT has the same number of frequency bins as the number of samples. Only half of this DFT is returned, since [the DFT magnitudes are symmetric for real input data](https://en.wikipedia.org/wiki/Discrete_Fourier_transform#The_real-input_DFT). The magnitudes of the DFT (values from 0 to 1) are used to fill the output table, starting at index 1.\n\n**Visualization protip:** For a size N DFT, bin k (1-indexed) corresponds to a frequency of (k - 1) / N * sampleRate.\n\n**Visualization protip:** Sound energy is proportional to the square of the magnitudes. Adding magnitudes together makes no sense physically, but adding energies does.\n\n**Visualization protip:** The human ear works on a logarithmic amplitude scale. You can convert to [decibels](https://en.wikipedia.org/wiki/Decibel) by taking 20 * math.log10 of frequency magnitudes, or 10 * math.log10 of energy. The decibel values will range from -infinity to 0.","realm":"Client","args":{"arg":[{"text":"The table to output the DFT magnitudes (numbers between 0 and 1) into. Indices start from 1.","name":"tbl","type":"table"},{"text":"The number of samples to use. See Enums/FFT","name":"size","type":"number"}]},"rets":{"ret":{"text":"The number of frequency bins that have been filled in the output table.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Get3DCone","parent":"IGModAudioChannel","type":"classfunc","description":"Returns 3D cone of the sound channel. See IGModAudioChannel:Set3DCone.","realm":"Client","rets":{"ret":[{"text":"The angle of the inside projection cone in degrees.","name":"","type":"number"},{"text":"The angle of the outside projection cone in degrees.","name":"","type":"number"},{"text":"The delta-volume outside the outer projection cone.","name":"","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetAverageBitRate","parent":"IGModAudioChannel","type":"classfunc","description":"Returns the average bit rate of the sound channel.","realm":"Client","rets":{"ret":{"text":"The average bit rate of the sound channel.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Get3DEnabled","parent":"IGModAudioChannel","type":"classfunc","description":"Returns if the sound channel is currently in 3D mode or not. This value will be affected by IGModAudioChannel:Set3DEnabled.","realm":"Client","added":"2020.04.29","rets":{"ret":{"text":"Is currently 3D or not.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetBitsPerSample","parent":"IGModAudioChannel","type":"classfunc","description":"Retrieves the number of bits per sample of the sound channel.\n\nDoesn't work for mp3 and ogg files.","realm":"Client","rets":{"ret":{"text":"Number of bits per sample, or 0 if unknown.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetFileName","parent":"IGModAudioChannel","type":"classfunc","description":"Returns the filename for the sound channel.","realm":"Client","rets":{"ret":{"text":"The file name. This will not be always what you have put into the sound.PlayURL as first argument.","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetLength","parent":"IGModAudioChannel","type":"classfunc","description":"Returns the length of sound played by the sound channel.","realm":"Client","rets":{"ret":{"text":"The length of the sound. This value seems to be less then 0 for continuous radio streams.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Get3DFadeDistance","parent":"IGModAudioChannel","type":"classfunc","description":"Returns 3D fade distances of a sound channel.","realm":"Client","rets":{"ret":[{"text":"The minimum distance. The channel's volume is at maximum when the listener is within this distance","name":"","type":"number"},{"text":"The maximum distance. The channel's volume stops decreasing when the listener is beyond this distance","name":"","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetLevel","parent":"IGModAudioChannel","type":"classfunc","description":"Returns the right and left levels of sound played by the sound channel.","realm":"Client","rets":{"ret":[{"text":"The left sound level. The value is between 0 and 1.","name":"","type":"number"},{"text":"The right sound level. The value is between 0 and 1.","name":"","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetPlaybackRate","parent":"IGModAudioChannel","type":"classfunc","description":"Returns the playback rate of the sound channel.","realm":"Client","rets":{"ret":{"text":"The current playback rate of the sound channel","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetPos","parent":"IGModAudioChannel","type":"classfunc","description":"Returns position of the sound channel","realm":"Client","rets":{"ret":{"text":"The position of the sound channel, previously set by IGModAudioChannel:SetPos","name":"","type":"Vector"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetPan","parent":"IGModAudioChannel","type":"classfunc","description":"Gets the relative volume of the left and right channels.","realm":"Client","added":"2020.04.29","rets":{"ret":{"text":"Relative volume between the left and right channels. `-1` means only in left channel, `0` is center and `1` is only in the right channel. `0` by default.","name":"pan","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetSamplingRate","parent":"IGModAudioChannel","type":"classfunc","description":"Returns the sample rate for currently playing sound.","realm":"Client","rets":{"ret":{"text":"The sample rate in Hz. This should always be 44100.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetTagsHTTP","parent":"IGModAudioChannel","type":"classfunc","description":"Retrieves HTTP headers from a bass stream channel created by sound.PlayURL, if available.","realm":"Client","added":"2020.04.29","rets":{"ret":{"text":"Returns a table of HTTP headers.Returns nil if no information is available.","name":"info","type":"table","br":""}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetState","parent":"IGModAudioChannel","type":"classfunc","description":"Returns the state of a sound channel","realm":"Client","rets":{"ret":{"text":"The state of the sound channel, see Enums/GMOD_CHANNEL","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetTagsID3","parent":"IGModAudioChannel","type":"classfunc","added":"2020.04.29","description":"Retrieves the ID3 version 1 info from a bass channel created by sound.PlayFile or sound.PlayURL, if available.\n\nID3v2 is not supported.","realm":"Client","rets":{"ret":{"text":"Returns a table containing the information.\nReturns nil if no information is available.","name":"info","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetTagsVendor","parent":"IGModAudioChannel","type":"classfunc","description":"Retrieves OGG Vendor tag, usually containing the application that created the file, from a bass channel created by sound.PlayURL or sound.PlayFile, if available.","realm":"Client","added":"2020.04.29","rets":{"ret":{"text":"Returns a string containing the information.\nReturns nil if no information is available.","name":"info","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetTagsOGG","parent":"IGModAudioChannel","type":"classfunc","added":"2020.04.29","description":"Retrieves OGG media info tag, from a bass channel created by sound.PlayURL or sound.PlayFile, if available.","realm":"Client","rets":{"ret":{"text":"Returns a table containing the information.\nReturns nil if no information is available.","name":"info","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetTagsMeta","parent":"IGModAudioChannel","type":"classfunc","description":"Retrieves meta stream info from a bass stream channel created by sound.PlayURL, if available.","realm":"Client","added":"2020.04.29","rets":{"ret":{"text":"Returns a string containing the information.\nReturns nil if no information is available.","name":"info","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetVolume","parent":"IGModAudioChannel","type":"classfunc","description":"Returns volume of a sound channel","realm":"Client","rets":{"ret":{"text":"The volume of the sound channel","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetTime","parent":"IGModAudioChannel","type":"classfunc","description":"Returns the current time of the sound channel","realm":"Client","rets":{"ret":{"text":"The current time of the stream","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Is3D","parent":"IGModAudioChannel","type":"classfunc","description":"Returns if the sound channel is in 3D mode or not.","realm":"Client","rets":{"ret":{"text":"Is 3D or not.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsBlockStreamed","parent":"IGModAudioChannel","type":"classfunc","description":"Returns whether the audio stream is block streamed or not.","realm":"Client","rets":{"ret":{"text":"Is the audio stream block streamed or not.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsLooping","parent":"IGModAudioChannel","type":"classfunc","description":"Returns if the sound channel is looping or not.","realm":"Client","rets":{"ret":{"text":"Is looping or not.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsValid","parent":"IGModAudioChannel","type":"classfunc","description":"Returns if the sound channel is valid or not.","realm":"Client","rets":{"ret":{"text":"Is the sound channel valid or not","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsOnline","parent":"IGModAudioChannel","type":"classfunc","description":"Returns if the sound channel is streamed from the Internet or not.","realm":"Client","rets":{"ret":{"text":"Is online or not.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Pause","parent":"IGModAudioChannel","type":"classfunc","description":"Pauses the stream. It can be started again using IGModAudioChannel:Play","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"Play","parent":"IGModAudioChannel","type":"classfunc","description":"Starts playing the stream.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"Set3DCone","parent":"IGModAudioChannel","type":"classfunc","description":"Sets 3D cone of the sound channel.","realm":"Client","args":{"arg":[{"text":"The angle of the inside projection cone in degrees.\n\n\n\n\nRange is from 0 (no cone) to 360 (sphere), -1 = leave current.","name":"innerAngle","type":"number"},{"text":"The angle of the outside projection cone in degrees.\n\n\n\n\nRange is from 0 (no cone) to 360 (sphere), -1 = leave current.","name":"outerAngle","type":"number"},{"text":"The delta-volume outside the outer projection cone.\n\n\n\n\nRange is from 0 (silent) to 1 (same as inside the cone), less than 0 = leave current.","name":"outerVolume","type":"number"}]}},"example":{"description":"The default values","code":"Channel:Set3DCone( 360, 360, 0 )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"Set3DFadeDistance","parent":"IGModAudioChannel","type":"classfunc","description":"Sets 3D fade distances of a sound channel.","realm":"Client","args":{"arg":[{"text":"The minimum distance. The channel's volume is at maximum when the listener is within this distance.\n\n\n\n\n0 or less = leave current.","name":"min","type":"number"},{"text":"The maximum distance. The channel's volume stops decreasing when the listener is beyond this distance.\n\n\n\n\n0 or less = leave current.","name":"max","type":"number"}]}},"example":{"description":"The default values.","code":"Channel:Set3DFadeDistance( 200, 1000000000 )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"Set3DEnabled","parent":"IGModAudioChannel","type":"classfunc","description":"Sets the 3D mode of the channel. This will affect IGModAudioChannel:Get3DEnabled but not IGModAudioChannel:Is3D.\n\nThis feature **requires** the channel to be initially created in 3D mode, i.e. IGModAudioChannel:Is3D should return true or this function will do nothing.","realm":"Client","added":"2020.04.29","args":{"arg":{"text":"true to enable, false to disable 3D.","name":"enable","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetPan","parent":"IGModAudioChannel","type":"classfunc","description":"Sets the relative volume of the left and right channels.","realm":"Client","added":"2020.04.29","args":{"arg":{"text":"Relative volume between the left and right channels. -1 means only in left channel, 0 is center and 1 is only in the right channel.","name":"pan","type":"number"}}},"example":{"description":"Plays the a Half-Life 1 sound track in the left channel.","code":"sound.PlayFile( \"sound/music/hl1_song20.mp3\", \"\", function( channel )\n\tif ( IsValid( channel ) ) then\n\t\tchannel:Play()\n\t\tchannel:SetPan( -1 )\n\tend\nend )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetPlaybackRate","parent":"IGModAudioChannel","type":"classfunc","description":"Sets the playback rate of the sound channel. May not work with high values for radio streams.","realm":"Client","args":{"arg":{"text":"Playback rate to set to. 1 is normal speed, 0.5 is half the normal speed, etc.","name":"rate","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetPos","parent":"IGModAudioChannel","type":"classfunc","description":"Sets position of sound channel in case the sound channel has a 3d option set.","realm":"Client","args":{"arg":[{"text":"The position to put the sound into","name":"pos","type":"Vector"},{"text":"The direction of the sound","name":"dir","type":"Vector","default":"Vector( 0, 0, 0 )"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetTime","parent":"IGModAudioChannel","type":"classfunc","description":"Sets the sound channel to specified time ( Rewind to that position of the song ). Does not work on online radio streams.\n\nStreamed sounds must have \"noblock\" parameter for this to work and IGModAudioChannel:IsBlockStreamed must return false.","realm":"Client","args":{"arg":[{"text":"The time to set the stream to, in seconds.","name":"secs","type":"number"},{"text":"Set to true to skip decoding to set time, and instead just seek to it which is faster. Certain streams do not support seeking and have to decode to the given position.","name":"dont_decode","type":"boolean","default":"false"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetVolume","parent":"IGModAudioChannel","type":"classfunc","description":"Sets the volume of a sound channel","realm":"Client","args":{"arg":{"text":"Volume to set. 1 meaning 100% volume, 0.5 is 50% and 3 is 300%, etc.","name":"volume","type":"number"}}},"example":{"description":"Plays the a Half-Life 1 sound track at 300% volume","code":"sound.PlayFile( \"sound/music/hl1_song20.mp3\", \"\", function( channel )\n\tif ( IsValid( channel ) ) then\n\t\tchannel:Play()\n\t\tchannel:SetVolume( 3 )\n\tend\nend )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"Stop","parent":"IGModAudioChannel","type":"classfunc","description":{"text":"Stop the stream. It can be started again using IGModAudioChannel:Play.","bug":{"text":"Calling this invalidates the IGModAudioChannel object rendering it unusable for further functions.","issue":"1497"}},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetColor","parent":"IMaterial","type":"classfunc","description":{"text":"Returns the color of the specified pixel of the $basetexture, only works for materials created from PNG files.\n\nBasically identical to ITexture:GetColor used on IMaterial:GetTexture( \"$basetexture\" ).","bug":{"text":"The returned color will not have the color metatable.","issue":"2407"}},"realm":"Shared","args":{"arg":[{"text":"The X coordinate.","name":"x","type":"number"},{"text":"The Y coordinate.","name":"y","type":"number"}]},"rets":{"ret":{"text":"The color of the pixel as a Color.","name":"","type":"table"}}},"example":{"description":"Identical functionality.","code":"local m = Material( \"gui/colors_dark.png\" )\nlocal t = m:GetTexture(\"$basetexture\")\n\nPrintTable( t:GetColor( 5, 5 ) )\nPrintTable( m:GetColor( 5, 5 ) )","output":"Both printouts will return identical color, which at the time of testing is RGBA - 255, 244, 242, 255."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetInt","parent":"IMaterial","type":"classfunc","description":{"text":"Returns the specified material value as a int, rounds the value if its a float, or nil if the value is not set.","note":"Please note that certain material flags such as `$model` are stored in the `$flags` variable and cannot be directly retrieved with this function. See the full list here: Material Flags"},"realm":"Shared","args":{"arg":{"text":"The name of the material integer.","name":"materialInt","type":"string"}},"rets":{"ret":{"text":"The retrieved value as an integer","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetFloat","parent":"IMaterial","type":"classfunc","description":"Returns the specified material value as a float, or nil if the value is not set.","realm":"Shared","args":{"arg":{"text":"The name of the material value.","name":"materialFloat","type":"string"}},"rets":{"ret":{"text":"float","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetMatrix","parent":"IMaterial","type":"classfunc","description":"Returns the specified material matrix as a int, or nil if the value is not set or is not a matrix.","realm":"Shared","args":{"arg":{"text":"The name of the material matrix.","name":"materialMatrix","type":"string"}},"rets":{"ret":{"text":"matrix","name":"","type":"VMatrix"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetKeyValues","parent":"IMaterial","type":"classfunc","description":"Gets all the key values defined for the material.","realm":"Shared","rets":{"ret":{"text":"The material's key values.","name":"","type":"table"}}},"example":{"description":"Example output of this function","code":"PrintTable( Material( \"pp/add\" ):GetKeyValues() )","output":"```\n$alpha=1\n$alphatestreference=0\n$basetexture=userdata: 0x2e13fc18\n$basetexturetransform=[1.00000,0.00000,0.00000,0.00000]\n[0.00000,1.00000,0.00000,0.00000]\n[0.00000,0.00000,1.00000,0.00000]\n[0.00000,0.00000,0.00000,1.00000]\n$color=1.000000 1.000000 1.000000\n$color2=1.000000 1.000000 1.000000\n$depthblend=0\n$depthblendscale=50\n$detailblendfactor=1\n$detailblendmode=0\n$detailframe=0\n$detailscale=4\n$detailtexturetransform=[1.00000,0.00000,0.00000,0.00000]\n[0.00000,1.00000,0.00000,0.00000]\n[0.00000,0.00000,1.00000,0.00000]\n[0.00000,0.00000,0.00000,1.00000]\n$distancealpha=0\n$distancealphafromdetail=0\n$edgesoftnessend=0.5\n$edgesoftnessstart=0.5\n$envmapcontrast=0\n$envmapframe=0\n$envmapmaskframe=0\n$envmapmasktransform=[1.00000,0.00000,0.00000,0.00000]\n[0.00000,1.00000,0.00000,0.00000]\n[0.00000,0.00000,1.00000,0.00000]\n[0.00000,0.00000,0.00000,1.00000]\n$envmapsaturation=1\n$envmaptint=1.000000 1.000000 1.000000\n$flags=32896\n$flags2=262144\n$flags_defined=32896\n$flags_defined2=0\n$flashlighttexture=userdata: 0x2e13fe68\n$flashlighttextureframe=0\n$frame=0\n$gammacolorread=0\n$glow=0\n$glowalpha=1\n$glowcolor=1.000000 1.000000 1.000000\n$glowend=0\n$glowstart=0\n$glowx=0\n$glowy=0\n$hdrcolorscale=1\n$linearwrite=0\n$outline=0\n$outlinealpha=1\n$outlinecolor=1.000000 1.000000 1.000000\n$outlineend0=0\n$outlineend1=0\n$outlinestart0=0\n$outlinestart1=0\n$phong=0\n$phongalbedotint=0\n$phongboost=0\n$phongexponent=0\n$phongfresnelranges=0.000000 0.000000 0.000000\n$phongtint=0.000000 0.000000 0.000000\n$receiveflashlight=0\n$scaleedgesoftnessbasedonscreenres=0\n$scaleoutlinesoftnessbasedonscreenres=0\n$separatedetailuvs=0\n$softedges=0\n$srgbtint=1.000000 1.000000 1.000000\n$vertexalphatest=0\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetShader","parent":"IMaterial","type":"classfunc","description":{"text":"Returns the name of the materials shader.","bug":{"text":"This function does not work serverside on Linux SRCDS.","issue":"3256"}},"realm":"Shared","rets":{"ret":{"text":"shaderName","name":"","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetName","parent":"IMaterial","type":"classfunc","description":"Returns the name of the material, in most cases the path.","realm":"Shared","rets":{"ret":{"text":"Material name/path","name":"","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetTexture","parent":"IMaterial","type":"classfunc","description":"Returns an ITexture based on the passed shader parameter.","realm":"Shared","args":{"arg":{"text":"The [shader parameter](https://developer.valvesoftware.com/wiki/Category:List_of_Shader_Parameters) to retrieve. This should normally be `$basetexture`.","name":"param","type":"string"}},"rets":{"ret":{"text":"The value of the shader parameter. Returns nothing if the param doesn't exist.","name":"","type":"ITexture"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetString","parent":"IMaterial","type":"classfunc","description":"Returns the specified material string, or nil if the value is not set or if the value can not be converted to a string.","realm":"Shared","args":{"arg":{"text":"The name of the material string.","name":"materialString","type":"string"}},"rets":{"ret":{"text":"The value as a string","name":"","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetVector4D","parent":"IMaterial","type":"classfunc","description":"Returns the specified material vector as a 4 component vector.","realm":"Shared","added":"2020.08.12","args":{"arg":{"text":"The name of the material vector to retrieve.","name":"name","type":"string"}},"rets":{"ret":[{"text":"The x component of the vector.","name":"x","type":"number"},{"text":"The y component of the vector.","name":"y","type":"number"},{"text":"The z component of the vector.","name":"z","type":"number"},{"text":"The w component of the vector.","name":"w","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetVector","parent":"IMaterial","type":"classfunc","description":"Returns the specified material vector, or nil if the value is not set.\n\nSee also IMaterial:GetVectorLinear","realm":"Shared","args":{"arg":{"text":"The name of the material vector.","name":"materialVector","type":"string"}},"rets":{"ret":{"text":"The color vector","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Height","parent":"IMaterial","type":"classfunc","description":"Returns the height of the member texture set for $basetexture.","realm":"Shared","rets":{"ret":{"text":"height","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetVectorLinear","parent":"IMaterial","type":"classfunc","description":"Returns the specified material linear color vector, or nil if the value is not set.\n\nSee https://en.wikipedia.org/wiki/Gamma_correction\n\nSee also IMaterial:GetVector","realm":"Shared","args":{"arg":{"text":"The name of the material vector.","name":"materialVector","type":"string"}},"rets":{"ret":{"text":"The linear color vector","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Recompute","parent":"IMaterial","type":"classfunc","description":"Recomputes the material's snapshot. This needs to be called if you have changed variables on your material and it isn't changing. \n\nBe careful though - this function is slow - so try to call it only when needed!","realm":"Shared","file_name":"src/garrysmod/Objects/lua_material.cpp","file_line":"517"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsError","parent":"IMaterial","type":"classfunc","description":"Returns whenever the material is valid, i.e. whether it was not loaded successfully from disk or not.","realm":"Shared","rets":{"ret":{"text":"Is this material the error material? (___error)","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetFloat","parent":"IMaterial","type":"classfunc","description":"Sets the specified material float to the specified float, does nothing on a type mismatch.","realm":"Shared","args":{"arg":[{"text":"The name of the material float.","name":"materialFloat","type":"string"},{"text":"The new float value.","name":"float","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetInt","parent":"IMaterial","type":"classfunc","description":{"text":"Sets the specified material value to the specified int, does nothing on a type mismatch.","note":"Please note that certain material flags such as `$model` are stored in the `$flags` variable and cannot be directly set with this function. See the full list here: Material Flags"},"realm":"Shared","args":{"arg":[{"text":"The name of the material int.","name":"materialInt","type":"string"},{"text":"The new int value.","name":"int","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetMatrix","parent":"IMaterial","type":"classfunc","description":"Sets the specified material value to the specified matrix, does nothing on a type mismatch.","realm":"Shared","args":{"arg":[{"text":"The name of the material int.","name":"materialMatrix","type":"string"},{"text":"The new matrix.","name":"matrix","type":"VMatrix"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetShader","parent":"IMaterial","type":"classfunc","description":{"text":"The functionality of this function was removed due to the amount of crashes it caused.","deprecated":"This function does nothing"},"realm":"Shared","args":{"arg":{"text":"Name of the shader","name":"shaderName","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetString","parent":"IMaterial","type":"classfunc","description":"Sets the specified material value to the specified string, does nothing on a type mismatch.","realm":"Shared","args":{"arg":[{"text":"The name of the material string.","name":"materialString","type":"string"},{"text":"The new string.","name":"string","type":"string"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetTexture","parent":"IMaterial","type":"classfunc","description":"Sets the specified material texture to the specified texture, does nothing on a type mismatch.","realm":"Shared","args":{"arg":[{"text":"The name of the keyvalue on the material to store the texture on.","name":"materialTexture","type":"string"},{"text":"The new texture. This can also be a string, the name of the new texture.","name":"texture","type":"ITexture"}]}},"example":[{"description":"Example usage of this function.","code":"local blur_mat = Material( \"pp/bokehblur\" )\n\nblur_mat:SetTexture( \"$basetexture\", render.GetScreenEffectTexture() )"},{"description":"Equivalent of Example 1, demonstrating the use of a texture's name.","code":"local blur_mat = Material( \"pp/bokehblur\" )\n\nblur_mat:SetTexture( \"$basetexture\", \"_rt_fullframefb\" )"}],"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetVector","parent":"IMaterial","type":"classfunc","description":"Sets the specified material vector to the specified vector, does nothing on a type mismatch.","realm":"Shared","args":{"arg":[{"text":"The name of the material vector.","name":"MaterialVector","type":"string"},{"text":"The new vector.","name":"vec","type":"Vector"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Width","parent":"IMaterial","type":"classfunc","description":"Returns the width of the member texture set for $basetexture.","realm":"Shared","rets":{"ret":{"text":"width","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetUndefined","parent":"IMaterial","type":"classfunc","description":"Unsets the value for the specified material value.","realm":"Shared","args":{"arg":{"text":"The name of the material value to be unset.","name":"materialValueName","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetVector4D","parent":"IMaterial","type":"classfunc","description":"Sets the specified material vector to the specified 4 component vector, does nothing on a type mismatch.","realm":"Shared","added":"2020.08.12","args":{"arg":[{"text":"The name of the material vector.","name":"name","type":"string"},{"text":"The x component of the new vector.","name":"x","type":"number"},{"text":"The y component of the new vector.","name":"y","type":"number"},{"text":"The z component of the new vector.","name":"z","type":"number"},{"text":"The w component of the new vector.","name":"w","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"BuildFromTriangles","parent":"IMesh","type":"classfunc","description":"Builds the mesh from a table mesh vertexes.\n\nSee Global.Mesh and util.GetModelMeshes for examples.","realm":"Client","args":{"arg":{"text":"A table consisting of Structures/MeshVertexs.","name":"vertexes","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Destroy","parent":"IMesh","type":"classfunc","description":"Deletes the mesh and frees the memory used by it.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"EndBlock","parent":"IRestore","type":"classfunc","description":"Ends current data block started with IRestore:StartBlock and returns to the parent block.\n\nTo avoid all sorts of errors, you **must** end all blocks you start.","realm":"Shared"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsValid","parent":"IMesh","type":"classfunc","description":"Returns whether this IMesh is valid or not.","realm":"Client","added":"2020.04.29","rets":{"ret":{"text":"Whether this IMesh is valid or not.","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Draw","parent":"IMesh","type":"classfunc","description":"Renders the mesh with the active matrix.","realm":"Client"},"bug":"If this function is paired with VertexLitGeneric material, this function will reuse light parameters calculated on previously drawn model unless other are specified using render library (such as render.ResetModelLighting). If you experience lighting issues or you want engine to calculate light for you, draw a dummy (invisible) model in origin of mesh, then draw the mesh.\n\nIf utilized inside ENTITY:Draw, drawing entity's model (if it has one) should be enough.","example":{"description":"Properly renders the mesh using the SENT's model matrix.\n\n`self.Mesh` in this case is the IMesh.","code":"local myMaterial = Material( \"models/wireframe\" ) -- models/debug/debugwhite\n\nfunction ENT:Draw()\n\t-- Code containing self:DrawModel()\n\n\tif ( self.Mesh ) then\n\t\trender.SetMaterial( myMaterial )\n\t\tcam.PushModelMatrix( self:GetWorldTransformMatrix() )\n\t\t\tself.Mesh:Draw()\n\t\tcam.PopModelMatrix()\n\tend\n\n\t-- Probably other code\nend"},"realms":["Client"],"type":"Function"},
{"function":{"name":"ReadAngle","parent":"IRestore","type":"classfunc","description":"Reads next bytes from the restore object as an Angle.","realm":"Shared","rets":{"ret":{"text":"The angle that has been read","name":"","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ReadEntity","parent":"IRestore","type":"classfunc","description":"Reads next bytes from the restore object as an Entity.","realm":"Shared","rets":{"ret":{"text":"The entity that has been read.","name":"","type":"Entity"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ReadBool","parent":"IRestore","type":"classfunc","description":"Reads next bytes from the restore object as a boolean.","realm":"Shared","rets":{"ret":{"text":"The boolean that has been read","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ReadString","parent":"IRestore","type":"classfunc","description":"Reads next bytes from the restore object as a string.","realm":"Shared","rets":{"ret":{"text":"The read string. Maximum length is 1024.","name":"","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ReadFloat","parent":"IRestore","type":"classfunc","description":"Reads next bytes from the restore object as a floating point number.","realm":"Shared","rets":{"ret":{"text":"The read floating point number.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ReadVector","parent":"IRestore","type":"classfunc","description":"Reads next bytes from the restore object as a Vector.","realm":"Shared","rets":{"ret":{"text":"The read vector.","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ReadInt","parent":"IRestore","type":"classfunc","description":"Reads next bytes from the restore object as an integer number.","realm":"Shared","rets":{"ret":{"text":"The read integer number.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"EndBlock","parent":"ISave","type":"classfunc","description":"Ends current data block started with ISave:StartBlock and returns to the parent block.\n\nTo avoid all sorts of errors, you **must** end all blocks you start.","realm":"Shared"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"StartBlock","parent":"IRestore","type":"classfunc","description":"Loads next block of data to be read inside current block. Blocks **must** be ended with IRestore:EndBlock.","realm":"Shared","rets":{"ret":{"text":"The name of the next data block to be read.","name":"","type":"string"}}},"example":{"description":"Example usage.","code":"saverestore.AddRestoreHook( \"HookNameHere\", function( save )\n\tlocal name = save:StartBlock()\n\tlocal myval = save:ReadString()\n\tsave:EndBlock()\n\n\tprint( name, myval )\nend )","output":"With example from ISave:StartBlock\n\n```\nTest myawesomestring\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"StartBlock","parent":"ISave","type":"classfunc","description":"Starts a new block of data that you can write to inside current block. Blocks **must** be ended with ISave:EndBlock.","realm":"Shared","args":{"arg":{"text":"Name of the new block. Used for determining which block is which, returned by IRestore:StartBlock during game load.","name":"name","type":"string"}}},"example":{"description":"Example usage","code":"saverestore.AddSaveHook( \"HookNameHere\", function( save )\n\tsave:StartBlock( \"Test\" )\n\t\tsave:WriteString( \"myawesomestring\" )\n\tsave:EndBlock()\nend )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"WriteAngle","parent":"ISave","type":"classfunc","description":"Writes an Angle to the save object.","realm":"Shared","args":{"arg":{"text":"The angle to write.","name":"ang","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"WriteEntity","parent":"ISave","type":"classfunc","description":"Writes an Entity to the save object.","realm":"Shared","args":{"arg":{"text":"The entity to write.","name":"ent","type":"Entity"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"WriteFloat","parent":"ISave","type":"classfunc","description":"Writes a floating point number to the save object.","realm":"Shared","args":{"arg":{"text":"The floating point number to write.","name":"float","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"WriteBool","parent":"ISave","type":"classfunc","description":"Writes a boolean to the save object.","realm":"Shared","args":{"arg":{"text":"The boolean to write.","name":"bool","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"WriteInt","parent":"ISave","type":"classfunc","description":"Writes an integer number to the save object.","realm":"Shared","args":{"arg":{"text":"The integer number to write.","name":"int","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"WriteString","parent":"ISave","type":"classfunc","description":"Writes a string to the save object.","realm":"Shared","args":{"arg":{"text":"The string to write. Maximum length is 1024.","name":"str","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetColor","parent":"ITexture","type":"classfunc","description":{"text":"Returns the color of the specified pixel, only works for textures created from PNG files.","bug":{"text":"The returned color will not have the color metatable.","issue":"2407"}},"realm":"Shared","args":{"arg":[{"text":"The X coordinate.","name":"x","type":"number"},{"text":"The Y coordinate.","name":"y","type":"number"}]},"rets":{"ret":{"text":"The color of the pixel as a Color.","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Download","parent":"ITexture","type":"classfunc","description":"Invokes the generator of the texture. Reloads file based textures from disk and clears render target textures.","realm":"Shared"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"WriteVector","parent":"ISave","type":"classfunc","description":"Writes a Vector to the save object.","realm":"Shared","args":{"arg":{"text":"The vector to write.","name":"vec","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetNumAnimationFrames","parent":"ITexture","type":"classfunc","description":"Returns the number of animation frames in this texture.","realm":"Shared","added":"2021.01.27","rets":{"ret":{"text":"The number of animation frames in this texture.","name":"","type":"number"}}},"example":{"code":"local m = Material( \"effects/prisonmap_disp\" )\nlocal t = m:GetTexture( \"$basetexture\" )\nprint( t:GetNumAnimationFrames() )","output":"`39`"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetMappingWidth","parent":"ITexture","type":"classfunc","description":"Returns the true unmodified width of the texture.","realm":"Shared","rets":{"ret":{"text":"width","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetMappingHeight","parent":"ITexture","type":"classfunc","description":"Returns the true unmodified height of the texture.","realm":"Shared","rets":{"ret":{"text":"height","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetName","parent":"ITexture","type":"classfunc","description":"Returns the name of the texture, in most cases the path.","realm":"Shared","rets":{"ret":{"text":"name","name":"","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsError","parent":"ITexture","type":"classfunc","description":{"text":"Returns whenever the texture is valid. (i.e. was loaded successfully or not)","note":"The \"error\" texture is a valid texture, and therefore this function will return false when used on it. Use ITexture:IsErrorTexture, instead."},"realm":"Shared","rets":{"ret":{"text":"Whether the texture was loaded successfully or not.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Height","parent":"ITexture","type":"classfunc","description":"Returns the modified height of the texture, this value may be affected by mipmapping and other factors.","realm":"Shared","rets":{"ret":{"text":"height","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsErrorTexture","parent":"ITexture","type":"classfunc","description":"Returns whenever the texture is the error texture (pink and black checkerboard pattern).","realm":"Shared","rets":{"ret":{"text":"Whether the texture is the error texture or not.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Finish","parent":"IVideoWriter","type":"classfunc","description":"Ends the video recording and dumps it to disk.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddFrame","parent":"IVideoWriter","type":"classfunc","description":"Adds the current framebuffer to the video stream.","realm":"Client","args":{"arg":[{"text":"Usually set to what Global.FrameTime is, or simply 1/fps.","name":"frameTime","type":"number"},{"text":"If true it will downsample the whole screenspace to the videos width and height, otherwise it will just record from the top left corner to the given width and height and therefor not the whole screen.","name":"downsample","type":"boolean"}]}},"example":{"description":"If ActiveVideo was a IVideoWriter, it would record the screen every frame.","code":"--Taken from /lua/menu/video.lua\n\nhook.Add( \"DrawOverlay\", \"CaptureFrames\", function()\n\n\tif ( !ActiveVideo ) then return end\n\t\n\tActiveVideo:AddFrame( FrameTime(), true )\n\nend )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"Width","parent":"ITexture","type":"classfunc","description":"Returns the modified width of the texture, this value may be affected by mipmapping and other factors.","realm":"Shared","rets":{"ret":{"text":"width","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetRecordSound","parent":"IVideoWriter","type":"classfunc","description":"Sets whether to record sound or not.","realm":"Client","args":{"arg":{"text":"Record.","name":"record","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Draw","parent":"MarkupObject","type":"classfunc","description":"Draws the computed markupobject to the screen.","realm":"Client","args":{"arg":[{"text":"The X coordinate on the screen.","name":"xOffset","type":"number"},{"text":"The Y coordinate on the screen.","name":"yOffset","type":"number"},{"text":"The alignment of the x coordinate using Enums/TEXT_ALIGN","name":"xAlign","type":"number"},{"text":"The alignment of the y coordinate using Enums/TEXT_ALIGN","name":"yAlign","type":"number"},{"text":"Sets the alpha of all drawn objects to this.","name":"alphaoverride","type":"number","default":"255"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Height","parent":"IVideoWriter","type":"classfunc","description":"Returns the height of the video stream.","realm":"Client","rets":{"ret":{"text":"height","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Width","parent":"IVideoWriter","type":"classfunc","description":"Returns the width of the video stream.","realm":"Client","rets":{"ret":{"text":"width","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetHeight","parent":"MarkupObject","type":"classfunc","description":"Gets computed the height of the markupobject.","realm":"Client","rets":{"ret":{"text":"The computed height.","name":"Height","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetWidth","parent":"MarkupObject","type":"classfunc","description":"Gets computed the width of the markupobject.","realm":"Client","rets":{"ret":{"text":"The computed width.","name":"Width","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Size","parent":"MarkupObject","type":"classfunc","description":"Gets computed the width and height of the markupobject.","realm":"Client","rets":{"ret":[{"text":"The computed width.","name":"","type":"number"},{"text":"The computed height.","name":"","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"BecomeRagdoll","parent":"NextBot","type":"classfunc","description":"Become a ragdoll and remove the entity.","realm":"Server","file_name":"src/garrysmod/Objects/lua_nextbot.cpp","file_line":"111","args":{"arg":{"text":"Damage info passed from an onkilled event","name":"info","type":"CTakeDamageInfo"}},"rets":{"ret":{"text":"The created ragdoll, if any.","name":"","type":"Entity"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"FindSpots","parent":"NextBot","type":"classfunc","description":"Returns a table of hiding spots.","realm":"Server","file":{"text":"gamemodes/base/entities/entities/base_nextbot/sv_nextbot.lua","line":"189"},"args":{"arg":{"text":"This table should contain the search info.\n\n\n\n\n\nstring type - The type (optional, only 'hiding' supported)\n\nVector pos - the position to search.\n\nnumber radius - the radius to search.\n\nnumber stepup - the highest step to step up.\n\nnumber stepdown - the highest we can step down without being hurt.","name":"specs","type":"table"}},"rets":{"ret":{"text":"An unsorted table of tables containing:\n\n\n\n\nVector vector - The position of the hiding spot\n\nnumber distance - the distance to that position","name":"","type":"table"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"FindSpot","parent":"NextBot","type":"classfunc","description":"Like NextBot:FindSpots but only returns a vector.","realm":"Server","file":{"text":"gamemodes/base/entities/entities/base_nextbot/sv_nextbot.lua","line":"201"},"args":{"arg":[{"text":"Either \"random\", \"near\", \"far\"","name":"type","type":"string"},{"text":"This table should contain the search info.\n\n\n\n\n\nstring type - The type (Only'hiding' for now)\n\nVector pos - the position to search.\n\nnumber radius - the radius to search.\n\nnumber stepup - the highest step to step up.\n\nnumber stepdown - the highest we can step down without being hurt.","name":"options","type":"table"}]},"rets":{"ret":{"text":"If it finds a spot it will return a vector. If not it will return nil.","name":"","type":"Vector"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetActivity","parent":"NextBot","type":"classfunc","description":"Returns the currently running activity","realm":"Server","file_name":"src/garrysmod/Objects/lua_nextbot.cpp","file_line":"146","rets":{"ret":{"text":"The current activity","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"BodyMoveXY","parent":"NextBot","type":"classfunc","description":{"text":"Should only be called in NEXTBOT:BodyUpdate. This sets the `move_x` and `move_y` pose parameters of the bot to fit how they're currently moving, sets the animation speed (Entity:GetPlaybackRate) to suit the ground speed, and calls Entity:FrameAdvance.","bug":{"text":"This function might cause crashes with some activities.","issue":"3420"}},"realm":"Server","file_name":"src/garrysmod/Objects/lua_nextbot.cpp","file_line":"177"},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetFOV","parent":"NextBot","type":"classfunc","description":"Returns the Field of View of the Nextbot NPC, used for its vision functionality, such as NextBot:IsAbleToSee.","realm":"Server","added":"2020.08.12","rets":{"ret":{"text":"The current FOV of the nextbot","name":"fov","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetRangeSquaredTo","parent":"NextBot","type":"classfunc","description":"Returns squared distance to an entity or a position.\n\nSee also NextBot:GetRangeTo.","realm":"Server","file_name":"src/garrysmod/Objects/lua_nextbot.cpp","file_line":"80","args":{"arg":{"text":"The position to measure distance to. Can be an entity.","name":"to","type":"Vector"}},"rets":{"ret":{"text":"The squared distance","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetMaxVisionRange","parent":"NextBot","type":"classfunc","description":"Returns the maximum range the nextbot can see other nextbots/players at. See NextBot:IsAbleToSee.","realm":"Server","added":"2020.08.12","rets":{"ret":{"text":"The current vision range","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetRangeTo","parent":"NextBot","type":"classfunc","description":"Returns the distance to an entity or position.\n\nSee also NextBot:GetRangeSquaredTo.","realm":"Server","file_name":"src/garrysmod/Objects/lua_nextbot.cpp","file_line":"51","args":{"arg":{"text":"The position to measure distance to. Can be an entity.","name":"to","type":"Vector"}},"rets":{"ret":{"text":"The distance","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"HandleStuck","parent":"NextBot","type":"classfunc","description":"Called from Lua when the NPC is stuck. This should only be called from the behaviour coroutine - so if you want to override this function and do something special that yields - then go for it.\n\nYou should always call self.loco:ClearStuck() in this function to reset the stuck status - so it knows it's unstuck. See CLuaLocomotion:ClearStuck.","realm":"Server","file":{"text":"gamemodes/base/entities/entities/base_nextbot/sv_nextbot.lua","line":"265"}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetSolidMask","parent":"NextBot","type":"classfunc","description":"Returns the solid mask for given NextBot.","realm":"Server","rets":{"ret":{"text":"The solid mask, see Enums/CONTENTS and Enums/MASK","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"MoveToPos","parent":"NextBot","type":"classfunc","description":"To be called in the behaviour coroutine only! Will yield until the bot has reached the goal or is stuck","realm":"Server","file":{"text":"gamemodes/base/entities/entities/base_nextbot/sv_nextbot.lua","line":"281"},"args":{"arg":[{"text":"The position we want to get to","name":"pos","type":"Vector"},{"text":"A table containing a bunch of tweakable options.\n\n\n\n\n\nnumber lookahead - Minimum look ahead distance.\n\n\nnumber tolerance - How close we must be to the goal before it can be considered complete.\n\n\nboolean draw - Draw the path. Only visible on listen servers and single player.\n\n\nnumber maxage - Maximum age of the path before it times out.\n\n\nnumber repath - Rebuilds the path after this number of seconds.","name":"options","type":"table"}]},"rets":{"ret":{"text":"Either \"failed\", \"stuck\", \"timeout\" or \"ok\" - depending on how the NPC got on","name":"","type":"string"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"PlaySequenceAndWait","parent":"NextBot","type":"classfunc","description":"To be called in the behaviour coroutine only! Plays an animation sequence and waits for it to end before returning.","realm":"Server","file":{"text":"gamemodes/base/entities/entities/base_nextbot/sv_nextbot.lua","line":"298-317"},"args":{"arg":[{"text":"The sequence name","name":"name","type":"string"},{"text":"Playback Rate of that sequence","name":"speed","type":"number","default":"1"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsAbleToSee","parent":"NextBot","type":"classfunc","description":{"text":"Returns if the Nextbot NPC can see the give entity or not.","warning":"Using this function creates the nextbot vision interface which will cause a significant performance hit!"},"realm":"Server","added":"2020.08.12","args":{"arg":[{"text":"The entity to test if we can see","name":"ent","type":"Entity"},{"text":"Whether to use the Field of View of the Nextbot","name":"useFOV","type":"number","default":"true"}]},"rets":{"ret":{"text":"If the nextbot can see or not","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetFOV","parent":"NextBot","type":"classfunc","description":"Sets the Field of View for the Nextbot NPC, used for its vision functionality, such as NextBot:IsAbleToSee.","realm":"Server","added":"2020.08.12","args":{"arg":{"text":"The new FOV","name":"fov","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetMaxVisionRange","parent":"NextBot","type":"classfunc","description":"Sets the maximum range the nextbot can see other nextbots/players at. See NextBot:IsAbleToSee.","realm":"Server","added":"2020.08.12","args":{"arg":{"text":"The new vision range to set.","name":"range","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetSolidMask","parent":"NextBot","type":"classfunc","description":{"text":"Sets the solid mask for given NextBot.\n\nThe default solid mask of a NextBot is .","page":",MASK_NPCSOLIDEnums/MASK"},"realm":"Server","args":{"arg":{"text":"The new mask, see Enums/CONTENTS and Enums/MASK","name":"mask","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"StartActivity","parent":"NextBot","type":"classfunc","description":"Start doing an activity (animation)","realm":"Server","args":{"arg":{"text":"One of the Enums/ACT","name":"activity","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"AddEntityRelationship","parent":"NPC","type":"classfunc","description":{"text":"Makes the NPC like, hate, feel neutral towards, or fear the entity in question. If you want to setup relationship towards a certain entity `class`, use NPC:AddRelationship.","note":{"text":"NPCs do not see NextBots by default. This can be fixed by adding the  flag to the NextBot.","page":",FL_OBJECTEnums/FL"}},"realm":"Server","args":{"arg":[{"text":"The entity for the relationship to be applied to.","name":"target","type":"Entity"},{"text":"A Enums/D representing the relationship type.","name":"disposition","type":"number"},{"text":"How strong the relationship is.","name":"priority","type":"number"}]}},"example":[{"description":"Spawns a manhack and makes it fear player 1.","code":"local manhack = ents.Create( \"npc_manhack\" )\nmanhack:Spawn()\nmanhack:AddEntityRelationship( Entity(1), D_FR, 99 )"},{"description":"Make every NPC entity that touches our NPC an enemy.","code":"function ENT:StartTouch( entity )\n\tif entity:IsNPC() then -- if entity is an NPC then continue\n        entity:AddEntityRelationship( self, D_HT, 99 ) -- entity will hate self entity\n        self:AddEntityRelationship( entity, D_HT, 99 ) -- self entity will hate entity\n\tend\nend"}],"realms":["Server"],"type":"Function"},
{"function":{"name":"AlertSound","parent":"NPC","type":"classfunc","description":"Force an NPC to play his Alert sound.","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"AddRelationship","parent":"NPC","type":"classfunc","description":{"text":"Changes how an NPC feels towards another NPC.  If you want to setup relationship towards a certain `entity`, use NPC:AddEntityRelationship.","warning":"Avoid using this in GM:OnEntityCreated to prevent crashing due to infinite loops. This function may create an entity with given class and delete it immediately after."},"realm":"Server","args":{"arg":{"text":"A string representing how the relationship should be set up.\nShould be formatted as `\"npc_class `Enums/D` numberPriority\"`.","name":"relationstring","type":"string"}}},"example":{"description":"Spawns a manhack and makes it hate floor turrets.","code":"local manhack = ents.Create( \"npc_manhack\" )\nmanhack:Spawn()\nmanhack:AddRelationship( \"npc_turret_floor D_HT 99\" )"},"realms":["Server"],"type":"Function"},
{"function":{"name":"AutoMovement","parent":"NPC","type":"classfunc","description":"Executes any movement the current sequence may have.","realm":"Server","added":"2021.03.31","args":{"arg":[{"text":"This is a good place to use Entity:GetAnimTimeInterval.","name":"interval","type":"number"},{"name":"target","type":"Entity","default":"NULL"}]},"rets":{"ret":{"text":"`true` if any movement was performed.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"CapabilitiesClear","parent":"NPC","type":"classfunc","description":"Removes all of Capabilities the NPC has.","realm":"Server"},"example":{"description":"Removes all of the Capabilities that the NPC has.","code":"self:CapabilitiesClear()"},"realms":["Server"],"type":"Function"},
{"function":{"name":"CapabilitiesAdd","parent":"NPC","type":"classfunc","description":"Adds a capability to the NPC.","realm":"Server","args":{"arg":{"text":"Capabilities to add, see Enums/CAP.","name":"capabilities","type":"number"}}},"example":{"description":"Adds the `CAP_USE_SHOT_REGULATOR` to the NPC's capabilities.","code":"self:CapabilitiesAdd( CAP_USE_SHOT_REGULATOR )"},"realms":["Server"],"type":"Function"},
{"function":{"name":"CapabilitiesRemove","parent":"NPC","type":"classfunc","description":"Remove a certain capability.","realm":"Server","args":{"arg":{"text":"Capabilities to remove, see Enums/CAP","name":"capabilities","type":"number"}}},"example":{"description":"Removes the CAP_USE_SHOT_REGULATOR capability, if the NPC has it.","code":"self:CapabilitiesRemove(CAP_USE_SHOT_REGULATOR)"},"realms":["Server"],"type":"Function"},
{"function":{"name":"CapabilitiesGet","parent":"NPC","type":"classfunc","description":"Returns the NPC's capabilities along the ones defined on its weapon.","realm":"Server","rets":{"ret":{"text":"The capabilities as a bitflag.\nSee Enums/CAP","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Classify","parent":"NPC","type":"classfunc","description":"Returns the NPC class. Do not confuse with Entity:GetClass!","realm":"Server","rets":{"ret":{"text":"See Enums/CLASS","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"ClearBlockingEntity","parent":"NPC","type":"classfunc","description":"Resets the NPC:GetBlockingEntity.","realm":"Server","added":"2021.03.31"},"realms":["Server"],"type":"Function"},
{"function":{"name":"ClearCondition","parent":"NPC","type":"classfunc","description":"Clears out the specified Enums/COND on this NPC.","realm":"Server","args":{"arg":{"text":"The Enums/COND to clear out.","name":"condition","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"ClearGoal","parent":"NPC","type":"classfunc","description":"Clears the current NPC goal or target.","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"ClearExpression","parent":"NPC","type":"classfunc","description":"Clears the NPC's current expression which can be set with NPC:SetExpression.","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"ClearEnemyMemory","parent":"NPC","type":"classfunc","description":"Clears the Enemy from the NPC's memory, effectively forgetting it until met again with either the NPC vision or with NPC:UpdateEnemyMemory.","realm":"Server","args":{"arg":{"text":"The enemy to mark","name":"enemy","type":"Entity","default":"GetEnemy()","added":"2020.06.24"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"ClearSchedule","parent":"NPC","type":"classfunc","description":"Stops the current schedule that the NPC is doing.","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"Disposition","parent":"NPC","type":"classfunc","description":"Returns the way the NPC \"feels\" about the entity.","realm":"Server","args":{"arg":{"text":"The entity to get the disposition from.","name":"ent","type":"Entity"}},"rets":{"ret":{"text":"The NPCs disposition, see Enums/D.","name":"","type":"number"}}},"example":{"description":"If a player is hurt by a friendly NPC, announce it.","code":"function FriendlyFireAnnouncement( ply, atk )\n   if atk:IsNPC() and atk:Disposition(ply) == D_LI then --like\n      PrintMessage(\"A \"..atk:GetClass()..\" attacked \"..ply:Nick()..\"!\", HUD_PRINTTALK)\n   end\nend\n\nhook.Add( \"PlayerHurt\", \"FriendlyFire\", FriendlyFireAnnouncement )","output":"Prints \"A ____ attacked ____!\" to everyones chat."},"realms":["Server"],"type":"Function"},
{"function":{"name":"ConditionName","parent":"NPC","type":"classfunc","description":"Translates condition ID to a string.","realm":"Server","args":{"arg":{"text":"The NPCs condition ID, see Enums/COND","name":"cond","type":"number"}},"rets":{"ret":{"text":"A human understandable string equivalent of that condition.","name":"","type":"string"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"DropWeapon","parent":"NPC","type":"classfunc","description":"Forces the NPC to drop the specified weapon.","realm":"Server","args":{"arg":[{"text":"Weapon to be dropped. If unset, will default to the currently equipped weapon.","name":"weapon","type":"Weapon","default":"nil"},{"text":"If set, launches the weapon at given position. There is a limit to how far it is willing to throw the weapon. Overrides velocity argument.","name":"target","type":"Vector","default":"nil"},{"text":"If set and previous argument is unset, launches the weapon with given velocity. If the velocity is higher than 400, it will be clamped to 400.","name":"velocity","type":"Vector","default":"nil"}]}},"example":{"description":"A console command that makes all NPCs on the map throw their weapons at the player who executed the console command","code":"concommand.Add( \"dropall\",function( ply )\n\tfor id, ent in ipairs( ents.GetAll() ) do\n\t\tif ( ent:IsNPC() ) then\n\t\t\t-- Some NPCs on some maps delete their weapons when the weapon is dropped, we don't want that.\n\t\t\tent:SetKeyValue( \"spawnflags\", bit.band( ent:GetSpawnFlags(), bit.bnot( SF_NPC_NO_WEAPON_DROP ) ) )\n\t\t\tent:DropWeapon( nil, ply:GetPos() )\n\t\tend\n\tend\nend )"},"realms":["Server"],"type":"Function"},
{"function":{"name":"ExitScriptedSequence","parent":"NPC","type":"classfunc","description":"Makes an NPC exit a scripted sequence, if one is playing.","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"FearSound","parent":"NPC","type":"classfunc","description":"Force an NPC to play his Fear sound.","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"FoundEnemySound","parent":"NPC","type":"classfunc","description":"Force an NPC to play its FoundEnemy sound.","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetActiveWeapon","parent":"NPC","type":"classfunc","description":{"text":"Returns the weapon the NPC is currently carrying, or .","page":",NULLGlobal_Variables"},"realm":"Shared","rets":{"ret":{"text":"The NPCs current weapon","name":"","type":"Entity"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetAimVector","parent":"NPC","type":"classfunc","description":"Returns the aim vector of the NPC. NPC alternative of Player:GetAimVector.","realm":"Server","rets":{"ret":{"text":"The aim direction of the NPC.","name":"","type":"Vector"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetArrivalActivity","parent":"NPC","type":"classfunc","description":"Returns the activity to be played when the NPC arrives at its goal","realm":"Server","rets":{"ret":{"name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetActivity","parent":"NPC","type":"classfunc","description":"Returns the NPC's current activity.","realm":"Server","rets":{"ret":{"text":"Current activity, see Enums/ACT.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetArrivalSequence","parent":"NPC","type":"classfunc","description":"Returns the sequence to be played when the NPC arrives at its goal.","realm":"Server","rets":{"ret":{"text":"Sequence ID to be played, or -1 if there's no sequence.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetCurrentSchedule","parent":"NPC","type":"classfunc","description":"Returns the NPC's current schedule.","realm":"Server","rets":{"ret":{"text":"The NPCs schedule, see Enums/SCHED or -1 if we failed for some reason","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetBlockingEntity","parent":"NPC","type":"classfunc","description":"Returns the entity blocking the NPC along its path.","realm":"Server","rets":{"ret":{"text":"Blocking entity","name":"","type":"Entity"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetCurWaypointPos","parent":"NPC","type":"classfunc","description":"Gets the NPC's current waypoint position (where NPC is currently moving towards), if any is available.","realm":"Server","added":"2020.03.17","rets":{"ret":{"text":"The position of the current NPC waypoint.","name":"","type":"Vector"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetCurrentWeaponProficiency","parent":"NPC","type":"classfunc","description":"Returns how proficient (skilled) an NPC is with its current weapon.","realm":"Server","rets":{"ret":{"text":"NPC's proficiency for current weapon. See Enums/WEAPON_PROFICIENCY.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetEnemy","parent":"NPC","type":"classfunc","description":{"text":"Returns the entity that this NPC is trying to fight.","bug":{"text":"This returns nil if the NPC has no enemy. You should use Global.IsValid (which accounts for nil and NULL) on the return to verify validity of the enemy.","issue":"3132"}},"realm":"Server","rets":{"ret":{"text":"Enemy NPC.","name":"","type":"NPC"}}},"example":[{"description":"Kill any npc that sets the first player as its enemy.","code":"local function Think()\n\tfor i, ent in ipairs( ents.GetAll() ) do\n\t\tif ent:IsNPC() and ent:GetEnemy() == Entity( 1 ) then\n\t\t\tent:TakeDamage( 999 )\n\t\tend\n\tend\nend\n\nhook.Add( \"Think\", \"Kill My Enemies\", Think )","output":"Any npc that sets their enemy to Entity( 1 ) dies."},{"description":{"text":"Make every NPC that does not have an enemy (and preferably a  relationship agains Players) start attacking a random Player. This code is copied from the gamemode [My Base Defence](https://steamcommunity.com/sharedfiles/filedetails/?id=1647345157):","page":",D_HTEnums/D"},"code":"-- ...\nlocal function _SetRandomPlayerTargetForNPC(npc)\n\tif (npc:IsNPC()) then\n\t\tif (!IsValid(npc:GetEnemy())) then\n\t\t\tlocal _allPlayers\t= player.GetAll()\n\t\t\tlocal _winnerPlNr\t= math.random(1, #_allPlayers)\n\n\t\t\ttimer.Simple(0.15, function()\n\t\t\t\tlocal __Player = _allPlayers[_winnerPlNr]\n\t\t\t\t--\n\t\t\t\t--- Set the enemy for the NPC, so it does not just stand there doing nothing\n\t\t\t\t-- lika young lazy teen or something\n\t\t\t\tif (!npc:IsValid() or !__Player:IsValid()) then return end\n\t\t\t\tnpc:SetEnemy(__Player)\n\t\t\t\tnpc:UpdateEnemyMemory(__Player, __Player:GetPos())\n\t\t\t\tnpc:SetSchedule(SCHED_SHOOT_ENEMY_COVER)\n\t\t\tend)\n\t\tend\n\tend\nend\n-- - - ---\n-- --\n-- Make every NPC that might not have a target, recive one random Player..:>>\n-- (..you can place this loop inside an interval timer or something...)\nfor i, ent in ipairs( ents.GetAll('npc_*') ) do\n\tif ent:IsValid() then _SetRandomPlayerTargetForNPC( ent ) end\nend","output":"All NPCs on the SERVER will get their memory updated if they don't already have an enemy, and start moving to the last know position of the enemy and try to attack. This enemy will be a random Player. They will also try and shoot enemy cover."}],"realms":["Server"],"type":"Function"},
{"function":{"name":"GetEnemyFirstTimeSeen","parent":"NPC","type":"classfunc","description":"Returns the first time an NPC's enemy was seen by the NPC.","realm":"Server","added":"2020.06.24","args":{"arg":{"text":"The enemy to check.","name":"enemy","type":"Entity","default":"GetEnemy()"}},"rets":{"ret":{"text":"First time the given enemy was seen.","name":"time","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetEnemyLastSeenPos","parent":"NPC","type":"classfunc","description":"Returns the last seen position of an NPC's enemy.","realm":"Server","added":"2020.06.24","args":{"arg":{"text":"The enemy to check.","name":"enemy","type":"Entity","default":"GetEnemy()"}},"rets":{"ret":{"text":"The last seen position.","name":"pos","type":"Vector"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetEnemyLastKnownPos","parent":"NPC","type":"classfunc","description":"Returns the last known position of an NPC's enemy.","realm":"Server","added":"2020.06.24","args":{"arg":{"text":"The enemy to check.","name":"enemy","type":"Entity","default":"GetEnemy()"}},"rets":{"ret":{"text":"The last known position.","name":"pos","type":"Vector"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetEnemyLastTimeSeen","parent":"NPC","type":"classfunc","description":"Returns the last time an NPC's enemy was seen by the NPC.","realm":"Server","added":"2020.06.24","args":{"arg":{"text":"The enemy to check.","name":"enemy","type":"Entity","default":"GetEnemy()"}},"rets":{"ret":{"text":"Last time the given enemy was seen.","name":"time","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetExpression","parent":"NPC","type":"classfunc","description":"Returns the expression file the NPC is currently playing.","realm":"Server","rets":{"ret":{"text":"The file path of the expression.","name":"","type":"string"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetIdealActivity","parent":"NPC","type":"classfunc","description":"Returns the ideal activity the NPC currently wants to achieve.","realm":"Server","added":"2021.01.27","rets":{"ret":{"text":"The ideal activity. Enums/ACT.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetHullType","parent":"NPC","type":"classfunc","description":"Returns NPCs hull type set by NPC:SetHullType.","realm":"Server","rets":{"ret":{"text":"Hull type, see Enums/HULL","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetIdealMoveAcceleration","parent":"NPC","type":"classfunc","description":"Returns the ideal move acceleration of the NPC.","realm":"Server","added":"2021.03.31","rets":{"ret":{"text":"The ideal move acceleration.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetMinMoveStopDist","parent":"NPC","type":"classfunc","description":"Returns how far before the NPC can come to a complete stop.","realm":"Server","added":"2021.03.31","args":{"arg":{"text":"The minimum value that will be returned by this function.","name":"minResult ","type":"number","default":"10"}},"rets":{"ret":{"text":"The minimum stop distance.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetMoveInterval","parent":"NPC","type":"classfunc","description":"Returns the current timestep the internal NPC motor is working on.","realm":"Server","added":"2021.03.31","rets":{"ret":{"text":"The current timestep.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetIdealMoveSpeed","parent":"NPC","type":"classfunc","description":"Returns the ideal move speed of the NPC.","realm":"Server","added":"2021.03.31","rets":{"ret":{"text":"The ideal move speed.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetMinMoveCheckDist","parent":"NPC","type":"classfunc","description":"Returns how far should the NPC look ahead in its route.","realm":"Server","added":"2021.03.31","rets":{"ret":{"text":"How far the NPC checks ahead of its route.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetMovementActivity","parent":"NPC","type":"classfunc","description":"Returns the NPC's current movement activity.","realm":"Server","rets":{"ret":{"text":"Current NPC movement activity, see Enums/ACT.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetMovementSequence","parent":"NPC","type":"classfunc","description":"Returns the index of the sequence the NPC uses to move.","realm":"Server","rets":{"ret":{"text":"The movement sequence index","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetMoveVelocity","parent":"NPC","type":"classfunc","description":"Returns the current move velocity of the NPC.","realm":"Server","added":"2021.03.31","rets":{"ret":{"text":"The current move velocity of the NPC.","name":"","type":"Vector"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetNavType","parent":"NPC","type":"classfunc","description":"Returns the NPC's navigation type.","realm":"Server","added":"2021.03.31","rets":{"ret":{"text":"The nav type. See Enums/NAV.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetNearestSquadMember","parent":"NPC","type":"classfunc","description":"Returns the nearest member of the squad the NPC is in.","realm":"Server","added":"2021.01.27","rets":{"ret":{"text":"The nearest member of the squad the NPC is in.","name":"nearest_member","type":"NPC"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetNPCState","parent":"NPC","type":"classfunc","description":"Returns the NPC's state.","realm":"Server","rets":{"ret":{"text":"The NPC's current state, see Enums/NPC_STATE.","name":"","type":"number"}}},"example":{"description":"Function which prints out a list of idle NPCs to the server console.","code":"function ReportIdleNPCs()\n\tfor i, npc in ipairs( ents.FindByClass( \"npc_*\" ) ) do\n\t\tif IsValid( npc ) and npc:IsNPC() and npc:GetNPCState() == NPC_STATE_IDLE then\n\t\t\tprint( \"Ent #\" .. npc:EntIndex() .. \": \" .. npc:GetClass() .. \" is idle.\" )\n\t\tend\n\tend\nend","output":"(To server console)\n\n\nEnt #111: npc_citizen is idle.\n\n\nEnt #120: npc_citizen is idle.\n\n\nEnt #122: npc_citizen is idle.\n\n\nEnt #124: npc_citizen is idle."},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetPathDistanceToGoal","parent":"NPC","type":"classfunc","realm":"Server","description":"Returns the distance the NPC is from Target Goal.","rets":{"ret":{"text":"The number of hammer units the NPC is away from the Goal.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetNextWaypointPos","parent":"NPC","type":"classfunc","description":"Gets the NPC's next waypoint position, where NPC will be moving after reaching current waypoint, if any is available.","realm":"Server","added":"2020.03.17","rets":{"ret":{"text":"The position of the next NPC waypoint.","name":"","type":"Vector"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetShootPos","parent":"NPC","type":"classfunc","description":{"text":"Returns the shooting position of the NPC.","note":"This only works properly when called on an NPC that can hold weapons, otherwise it will return the same value as Entity:GetPos."},"realm":"Server","rets":{"ret":{"text":"The NPC's shooting position.","name":"","type":"Vector"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetPathTimeToGoal","parent":"NPC","type":"classfunc","realm":"Server","description":"Returns the amount of time it will take for the NPC to get to its Target Goal.","rets":{"ret":{"text":"The amount of time to get to the target goal.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetSquad","parent":"NPC","type":"classfunc","description":"Returns the current squad name of the NPC.","realm":"Server","added":"2021.01.27","rets":{"ret":{"text":"The new squad name to set.","name":"name","type":"string"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetTarget","parent":"NPC","type":"classfunc","description":{"text":"Returns the NPC's current target set by NPC:SetTarget.","bug":{"text":"This returns nil if the NPC has no target. You should use Global.IsValid (which accounts for nil and NULL) on the return to verify validity of the target.","issue":"3132"}},"realm":"Server","rets":{"ret":{"text":"Target entity","name":"","type":"Entity"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetWeapon","parent":"NPC","type":"classfunc","description":"Returns a specific weapon the NPC owns.","realm":"Server","added":"2020.06.24","args":{"arg":{"text":"A classname of the weapon to try to get.","name":"class","type":"string"}},"rets":{"ret":{"text":"The weapon for the specified class, or NULL of the NPC doesn't have given weapon.","name":"wep","type":"Weapon"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetTaskStatus","parent":"NPC","type":"classfunc","description":"Returns the status of the current task.","realm":"Server","added":"2021.03.31","rets":{"ret":{"text":"The status. See Enums/TASKSTATUS.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetWeapons","parent":"NPC","type":"classfunc","description":"Returns a table of the NPC's weapons.","realm":"Server","added":"2020.06.24","rets":{"ret":{"text":"A list of the weapons the NPC currently has.","name":"","type":"table"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"HasCondition","parent":"NPC","type":"classfunc","description":"Returns whether or not the NPC has the given condition.","realm":"Server","args":{"arg":{"text":"The condition index, see Enums/COND.","name":"condition","type":"number"}},"rets":{"ret":{"text":"True if the NPC has the given condition, false otherwise.","name":"","type":"boolean"}}},"example":{"description":"Function that prints a list of conditions an NPC has.","code":"function ListConditions(npc)\n\t\n\tif(!IsValid(npc)) then return end\n\t\n\tprint(npc:GetClass()..\" (\"..npc:EntIndex()..\") has conditions:\")\n\t\n\tfor c = 0, 100 do\n\t\n\t\tif(npc:HasCondition(c)) then\n\t\t\n\t\t\tprint(npc:ConditionName(c))\n\t\t\t\n\t\tend\n\t\t\n\tend\n\t\nend","output":"(To server console):\n\n\nnpc_antlion (120) has conditions:\n\n\nCOND_IN_PVS\n\n\nCOND_NO_WEAPON\n\n\nCOND_HAVE_ENEMY_LOS\n\n\nCOND_TOO_FAR_TO_ATTACK\n\n\nCOND_NO_HEAR_DANGER\n\n\nCOND_FLOATING_OFF_GROUND"},"realms":["Server"],"type":"Function"},
{"function":{"name":"Give","parent":"NPC","type":"classfunc","description":"Used to give a weapon to an already spawned NPC.","realm":"Server","args":{"arg":{"text":"Class name of the weapon to equip to the NPC.","name":"weapon","type":"string"}},"rets":{"ret":{"text":"The weapon entity given to the NPC.","name":"","type":"Weapon"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"HasEnemyEluded","parent":"NPC","type":"classfunc","description":"Polls the enemy memory to check if the given entity has eluded us or not.","realm":"Server","added":"2020.06.24","args":{"arg":{"text":"The enemy to test.","name":"enemy","type":"Entity","default":"GetEnemy()"}},"rets":{"ret":{"text":"If the enemy has eluded us.","name":"eluded","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"HasEnemyMemory","parent":"NPC","type":"classfunc","description":"Polls the enemy memory to check if the NPC has any memory of given enemy.","realm":"Server","added":"2020.06.24","args":{"arg":{"text":"The entity to test.","name":"enemy","type":"Entity","default":"GetEnemy()"}},"rets":{"ret":{"text":"If we have any memory on given enemy.","name":"eluded","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"HasEnemyMemory","parent":"NPC","type":"classfunc","description":"Polls the enemy memory to check if the NPC has any memory of given enemy.","realm":"Server","added":"2020.06.24","args":{"arg":{"text":"The entity to test.","name":"enemy","type":"Entity","default":"GetEnemy()"}},"rets":{"ret":{"text":"If we have any memory on given enemy.","name":"eluded","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsCurrentSchedule","parent":"NPC","type":"classfunc","description":"Returns whether or not the NPC is performing the given schedule.","realm":"Server","args":{"arg":{"text":"The schedule number, see Enums/SCHED.","name":"schedule","type":"number"}},"rets":{"ret":{"text":"True if the NPC is performing the given schedule, false otherwise.","name":"","type":"boolean"}}},"example":{"description":"Function which returns the schedule an NPC is performing.","code":"function GetNPCSchedule(npc)\n\n\tif(!IsValid(npc)) then return end\n\t\n\tfor s = 0, LAST_SHARED_SCHEDULE-1 do\n\t\tif(npc:IsCurrentSchedule(s)) then return s end\n\tend\n\t\n\treturn 0\n\t\nend"},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsMoveYawLocked","parent":"NPC","type":"classfunc","description":"Returns if the current movement is locked on the Yaw axis.","realm":"Server","added":"2021.03.31","rets":{"ret":{"text":"Whether the movement is yaw locked or not.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IdleSound","parent":"NPC","type":"classfunc","description":"Force an NPC to play his Idle sound.","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsGoalActive","parent":"NPC","type":"classfunc","description":"Returns whether the NPC has an active goal.","realm":"Server","added":"2021.03.31","rets":{"ret":{"text":"Whether the NPC has an active goal or not.","name":"act","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsMoving","parent":"NPC","type":"classfunc","description":"Returns whether the NPC is moving or not.","realm":"Server","rets":{"ret":{"text":"Whether the NPC is moving or not.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsRunningBehavior","parent":"NPC","type":"classfunc","realm":"Server","description":"Checks if the NPC is running an **ai_goal**. ( e.g. An npc_citizen NPC following the Player. )","rets":{"ret":{"text":"Returns true if running an ai_goal, otherwise returns false.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsSquadLeader","parent":"NPC","type":"classfunc","description":"Returns whether the current NPC is the leader of the squad it is in.","realm":"Server","added":"2021.01.27","rets":{"ret":{"text":"Whether the NPC is the leader of the squad or not.","name":"is_leader","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsUnreachable","parent":"NPC","type":"classfunc","description":"Returns true if the entity was remembered as unreachable. The memory is updated automatically from following engine tasks if they failed:\n* TASK_GET_CHASE_PATH_TO_ENEMY\n* TASK_GET_PATH_TO_ENEMY_LKP\n* TASK_GET_PATH_TO_INTERACTION_PARTNER\n* TASK_ANTLIONGUARD_GET_CHASE_PATH_ENEMY_TOLERANCE\n* SCHED_FAIL_ESTABLISH_LINE_OF_FIRE - Combine NPCs, also when failing to change their enemy","realm":"Server","args":{"arg":{"text":"The entity to test.","name":"testEntity","type":"Entity"}},"rets":{"ret":{"text":"If the entity is reachable or not.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"LostEnemySound","parent":"NPC","type":"classfunc","description":"Force an NPC to play his LostEnemy sound.","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"MarkEnemyAsEluded","parent":"NPC","type":"classfunc","description":"Causes the NPC to temporarily forget the current enemy and switch on to a better one.","realm":"Server","args":{"arg":{"text":"The enemy to mark","name":"enemy","type":"Entity","default":"GetEnemy()","added":"2020.06.24"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"MaintainActivity","parent":"NPC","type":"classfunc","description":"Tries to achieve our ideal animation state, playing any transition sequences that we need to play to get there.","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"MoveClimbExec","parent":"NPC","type":"classfunc","description":"Executes a climb move.\n\nRelated functions are NPC:MoveClimbStart and NPC:MoveClimbStop.","realm":"Server","added":"2021.03.31","args":{"arg":[{"text":"The destination of the climb.","name":"destination","type":"Vector"},{"text":"The direction of the climb.","name":"dir","type":"Vector"},{"text":"The distance.","name":"distance","type":"number"},{"text":"The yaw angle.","name":"yaw","type":"number"},{"text":"Amount of climb nodes left?","name":"left","type":"number"}]},"rets":{"ret":{"text":"The result. See Enums/AIMR.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"MoveClimbStart","parent":"NPC","type":"classfunc","description":"Starts a climb move.\n\nRelated functions are NPC:MoveClimbExec and NPC:MoveClimbStop.","realm":"Server","added":"2021.03.31","args":{"arg":[{"text":"The destination of the climb.","name":"destination","type":"Vector"},{"text":"The direction of the climb.","name":"dir","type":"Vector"},{"text":"The distance.","name":"distance","type":"number"},{"text":"The yaw angle.","name":"yaw","type":"number"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"MoveJumpExec","parent":"NPC","type":"classfunc","description":"Executes a jump move.\n\nRelated functions are NPC:MoveJumpStart and NPC:MoveJumpStop.","realm":"Server","added":"2021.03.31","rets":{"ret":{"text":"The result. See Enums/AIMR.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"MoveClimbStop","parent":"NPC","type":"classfunc","description":"Stops a climb move.\n\nRelated functions are NPC:MoveClimbExec and NPC:MoveClimbStart.","realm":"Server","added":"2021.03.31"},"realms":["Server"],"type":"Function"},
{"function":{"name":"MoveJumpStop","parent":"NPC","type":"classfunc","description":"Stops a jump move.\n\nRelated functions are NPC:MoveJumpExec and NPC:MoveJumpStart.","realm":"Server","added":"2021.03.31","rets":{"ret":{"text":"The result. See Enums/AIMR.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"MoveJumpStart","parent":"NPC","type":"classfunc","description":"Starts a jump move.\n\nRelated functions are NPC:MoveJumpExec and NPC:MoveJumpStop.","realm":"Server","added":"2021.03.31","args":{"arg":{"text":"The jump velocity.","name":"vel","type":"Vector"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"MoveOrder","parent":"NPC","type":"classfunc","description":"Makes the NPC walk toward the given position. The NPC will return to the player after amount of time set by **player_squad_autosummon_time** ConVar.\n\nOnly works on Citizens (npc_citizen) and is a part of the Half-Life 2 squad system.\n\nThe NPC **must** be in the player's squad for this to work.","realm":"Server","args":{"arg":{"text":"The target position for the NPC to walk to.","name":"position","type":"Vector"}}},"example":{"description":"A console command that makes all Citizens on the map (if they are in the player's squad) try to go to where the player is looking at.","code":"concommand.Add( \"movenpcs\", function( ply )\n\tfor id, npc in ipairs( ents.FindByClass( \"npc_citizen\" ) ) do\n\t\tnpc:MoveOrder( ply:GetEyeTrace().HitPos )\n\tend\nend )"},"realms":["Server"],"type":"Function"},
{"function":{"name":"NavSetGoal","parent":"NPC","type":"classfunc","description":"Works similarly to NPC:NavSetRandomGoal.","realm":"Server","args":{"arg":[{"text":"The origin to calculate a path from.","name":"pos","type":"Vector"},{"text":"The target length of the path to calculate.","name":"length","type":"number"},{"text":"The direction in which to look for a new path end goal.","name":"dir","type":"Vector"}]},"rets":{"ret":{"text":"Whether path generation was successful or not.","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"MovePause","parent":"NPC","type":"classfunc","description":"Pauses the NPC movement?\n\nRelated functions are NPC:MoveStart, NPC:MoveStop and NPC:ResetMoveCalc.","realm":"Server","added":"2021.03.31"},"realms":["Server"],"type":"Function"},
{"function":{"name":"MoveStart","parent":"NPC","type":"classfunc","description":"Starts NPC movement?\n\nRelated functions are NPC:MoveStop, NPC:MovePause and NPC:ResetMoveCalc.","realm":"Server","added":"2021.03.31"},"realms":["Server"],"type":"Function"},
{"function":{"name":"MoveStop","parent":"NPC","type":"classfunc","description":"Stops the NPC movement?\n\nRelated functions are NPC:MoveStart, NPC:MovePause and NPC:ResetMoveCalc.","realm":"Server","added":"2021.03.31"},"realms":["Server"],"type":"Function"},
{"function":{"name":"NavSetGoalTarget","parent":"NPC","type":"classfunc","description":"Set the goal target for an NPC.","realm":"Server","args":{"arg":[{"text":"The targeted entity to set the goal to.","name":"target","type":"Entity"},{"text":"The offset to apply to the targeted entity's position.","name":"offset","type":"Vector"}]},"rets":{"ret":{"text":"Whether path generation was successful or not","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"NavSetRandomGoal","parent":"NPC","type":"classfunc","description":"Creates a random path of specified minimum length between a closest start node and random node in the specified direction. This won't actually force the NPC to move.","realm":"Server","args":{"arg":[{"text":"Minimum length of path in units","name":"minPathLength","type":"number"},{"text":"Unit vector pointing in the direction of the target random node","name":"dir","type":"Vector"}]},"rets":{"ret":{"text":"Whether path generation was successful or not","type":"boolean"}}},"example":{"description":"Example usage. Keep in mind that non scriptable NPCs will override their tasks occasionally. This is meant for scriptable NPCs","code":"function MakeNPCGo( npc )\n\t-- Choose a random node to go to at least 200 units away from us in the direction we are looking\n\tnpc:NavSetRandomGoal( 200, npc:GetAimVector() )\n\t\n\t-- At this point npc:GetPathDistanceToGoal() will return a different value, if a new path was generated\n\n\t-- Force us to go there\n\t-- 48 is TASK_RUN_PATH\n\tnpc:StartEngineTask( 48, 0 )\nend"},"realms":["Server"],"type":"Function"},
{"function":{"name":"NavSetWanderGoal","parent":"NPC","type":"classfunc","description":"Sets a goal in x, y offsets for the NPC to wander to","realm":"Server","args":{"arg":[{"text":"X offset","name":"xOffset","type":"number"},{"text":"Y offset","name":"yOffset","type":"number"}]},"rets":{"ret":{"text":"Whether path generation was successful or not","type":"boolean"}}},"example":{"description":"Given an NPC makes them wander to a location 100 units in both the x and y directions","code":"if IsValid( npc ) then\n    npc:NavSetWanderGoal( 100, 100 )\n    npc:SetSchedule( SCHED_IDLE_WANDER )\nend"},"realms":["Server"],"type":"Function"},
{"function":{"name":"PickupWeapon","parent":"NPC","type":"classfunc","description":"Forces the NPC to pickup an existing weapon entity. The NPC will not pick up the weapon if they already own a weapon of given type, or if the NPC could not normally have this weapon in their inventory.","realm":"Server","added":"2020.06.24","args":{"arg":{"text":"The weapon to try to pick up.","name":"wep","type":"Weapon"}},"rets":{"ret":{"text":"Whether the NPC succeeded in picking up the weapon or not.","name":"result","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"PlaySentence","parent":"NPC","type":"classfunc","description":"Forces the NPC to play a sentence from scripts/sentences.txt","realm":"Server","args":{"arg":[{"text":"The sentence string to speak.","name":"sentence","type":"string"},{"text":"Delay in seconds until the sentence starts playing.","name":"delay","type":"number"},{"text":"The volume of the sentence, from 0 to 1.","name":"volume","type":"number"}]},"rets":{"ret":{"text":"Returns the sentence index, -1 if the sentence couldn't be played.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"RememberUnreachable","parent":"NPC","type":"classfunc","description":"Makes the NPC remember an entity or an enemy as unreachable, for a specified amount of time. Use NPC:IsUnreachable to check if an entity is still unreachable.","realm":"Server","added":"2020.06.24","args":{"arg":[{"text":"The entity to mark as unreachable.","name":"ent","type":"Entity"},{"text":"For how long to remember the entity as unreachable. Negative values will act as `3` seconds.","name":"time","type":"number","default":"3"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"RunEngineTask","parent":"NPC","type":"classfunc","description":"Starts an engine task.\n\nUsed internally by the ai_task.","realm":"Server","args":{"arg":[{"text":"The task ID, see [ai_task.h](https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/server/ai_task.h#L89-L502)","name":"taskID","type":"number"},{"text":"The task data.","name":"taskData","type":"number"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"RunEngineTask","parent":"NPC","type":"classfunc","description":"Starts an engine task.\n\nUsed internally by the ai_task.","realm":"Server","args":{"arg":[{"text":"The task ID, see [ai_task.h](https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/server/ai_task.h#L89-L502)","name":"taskID","type":"number"},{"text":"The task data.","name":"taskData","type":"number"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"ResetIdealActivity","parent":"NPC","type":"classfunc","description":"Resets the ideal activity of the NPC. See also NPC:SetIdealActivity.","realm":"Server","added":"2021.03.31","args":{"arg":{"text":"The new activity. See Enums/ACT.","name":"act","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"RemoveMemory","parent":"NPC","type":"classfunc","description":{"text":"This function crashes the game no matter how it is used and will be removed in a future update.\n\nUse NPC:ClearEnemyMemory instead.","deprecated":""},"realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"SentenceStop","parent":"NPC","type":"classfunc","description":"Stops any sounds (speech) the NPC is currently palying.\n\nEquivalent to `Entity:EmitSound( \"AI_BaseNPC.SentenceStop\" )`","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"SelectWeapon","parent":"NPC","type":"classfunc","description":"Forces the NPC to switch to a specific weapon the NPC owns. See NPC:GetWeapons.","realm":"Server","added":"2020.06.24","args":{"arg":{"text":"A classname of the weapon or a Weapon entity to switch to.","name":"class","type":"string"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetArrivalActivity","parent":"NPC","type":"classfunc","realm":"Server","args":{"arg":{"name":"act","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetArrivalDirection","parent":"NPC","type":"classfunc","description":"","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetActivity","parent":"NPC","type":"classfunc","description":"Sets the NPC's current activity.","realm":"Server","added":"2021.03.31","args":{"arg":{"text":"The new activity to set, see Enums/ACT.","name":"act","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetArrivalSpeed","parent":"NPC","type":"classfunc","description":"Sets the arrival speed? of the NPC","realm":"Server","args":{"arg":{"text":"The new arrival speed","name":"speed","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetCondition","parent":"NPC","type":"classfunc","description":"Sets an NPC condition.","realm":"Server","args":{"arg":{"text":"The condition index, see Enums/COND.","name":"condition","type":"number"}}},"example":{"description":"Freezes an NPC for a period of time.","code":"COND_NPC_UNFREEZE = 68\t-- Delete this line when COND_ enums are added\n\nfunction FreezeNPCTemporarily(npc, delay)\n\t\n\tif(!IsValid(npc)) then return end\n\t\n\tdelay = delay or 1\n\t\n\tnpc:SetSchedule(SCHED_NPC_FREEZE)\n\n\ttimer.Simple(delay, function()\n\t\tif(IsValid(npc)) then npc:SetCondition(COND_NPC_UNFREEZE) end\n\tend)\n\t\nend"},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetArrivalSequence","parent":"NPC","type":"classfunc","description":"","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetArrivalDistance","parent":"NPC","type":"classfunc","description":"Sets the distance to goal at which the NPC should stop moving and continue to other business such as doing the rest of their tasks in a schedule.","realm":"Server","args":{"arg":{"text":"The distance to goal that is close enough for the NPC","name":"dist","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetExpression","parent":"NPC","type":"classfunc","description":"Sets the NPC's .vcd expression. Similar to Entity:PlayScene except the scene is looped until it's interrupted by default NPC behavior or NPC:ClearExpression.","realm":"Server","args":{"arg":{"text":"The expression filepath.","name":"expression","type":"string"}},"rets":{"ret":{"name":"","type":"number"}}},"example":{"description":"Function which makes the NPC whom the player is looking at repeat an annoying scene.","code":"function GrenadesScene(ply)\n\n\tif(!IsValid(ply)) then return end\n\t\n\tlocal npc = ply:GetEyeTrace().Entity\n\t\n\tif(IsValid(npc) && npc:IsNPC()) then\n\t\tnpc:SetExpression(\"scenes/streetwar/sniper/ba_nag_grenade0\"..math.random(1, 5)..\".vcd\")\n\tend\n\t\nend"},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetEnemy","parent":"NPC","type":"classfunc","description":"Sets the target for an NPC.","realm":"Server","args":{"arg":[{"text":"The enemy that the NPC should target","name":"enemy","type":"Entity"},{"text":"Calls NPC:SetCondition(COND_NEW_ENEMY) if the new enemy is valid and not equal to the last enemy.","name":"newenemy","type":"boolean","default":"true"}]}},"example":{"description":"If an NPC has no specific target, they will start to target the closest player they are hostile to, or nothing if there are none. This is run every tick on the server and can be a bottleneck if player and/or entity counts are high, so consider adding a Global.CurTime cooldown if you plan on using this in-game.","code":{"text":"hook.Add( \"Think\", \"NPCAutoSeekPlayer\", function()\n\tlocal npcs = ents.GetAll()\n\tlocal plys = player.GetAll()\n\tlocal plyCount = #plys\n\n\t-- No point trying to give NPCs a player when there are none\n\tif ( plyCount == 0 ) then\n\t\treturn\n\tend\n\n\t-- Loop over all entities and check for NPCs\n\tfor i = 1, #npcs do\n\t\tlocal npc = npcs[ i ]\n\n\t\t-- If this entity is an NPC without an enemy, give them one\n\t\tif ( npc:IsNPC() && !IsValid( npc:GetEnemy() ) ) then\n\t\t\tlocal curPly = nil\t\t\t-- Closest player\n\t\t\tlocal curPlyPos = nil\t\t-- Position of closest player\n\t\t\tlocal curDist = math.huge\t-- Lowest distance between npc and player\n\t\t\t\n\t\t\tlocal npcPos = npc:GetPos()\t-- Position of the NPC\n\n\t\t\t-- Loop over all players to check their distance from the NPC\n\t\t\tfor i = 1, plyCount do\n\t\t\t\tlocal ply = plys[ i ]\n\n\t\t\t\t-- Only consider players that this NPC hates\n\t\t\t\tif ( npc:Disposition( ply ) == D_HT ) then\n\t\t\t\t\t-- TODO: You can optimise looking up each player's position (constant)\n\t\t\t\t\t-- for every NPC by generating a table of:\n\t\t\t\t\t--- key = player identifier (entity object, UserID, EntIndex, etc.)\n\t\t\t\t\t--- value = player's position vector\n\t\t\t\t\t-- for the first NPC that passes to this part of the code,\n\t\t\t\t\t-- then reuse it for other NPCs\n\t\t\t\t\tlocal plyPos = ply:GetPos()\n\t\t\t\t\t\n\t\t\t\t\t-- Use DistToSqr for distance comparisons since\n\t\t\t\t\t-- it's more efficient than Distance, and the\n\t\t\t\t\t-- non-squared distance isn't needed for anything\n\t\t\t\t\tlocal dist = npcPos:DistToSqr( plyPos )\n\n\t\t\t\t\t-- If the new distance is lower, update the player information\n\t\t\t\t\tif ( dist","curdist":{"then":"","curply":["ply",""],"curplypos":["plyPos",""],"curdist":"dist","end":"","is":"","guarenteed":"","to":"","be":"","valid":"","since":"","this":"","code":"","will":"","only":"","run":"","if":"","there":"","at":"","least":"","one":"","player":"","npc:setenemy":"","npc:updateenemymemory":"","ode":"ode"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetHullSizeNormal","parent":"NPC","type":"classfunc","description":"Updates the NPC's hull and physics hull in order to match its model scale. Entity:SetModelScale seems to take care of this regardless.","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetCurrentWeaponProficiency","parent":"NPC","type":"classfunc","description":"Sets the weapon proficiency of an NPC (how skilled an NPC is with its current weapon).","realm":"Server","args":{"arg":{"text":"The proficiency for the NPC's current weapon. See Enums/WEAPON_PROFICIENCY.","name":"proficiency","type":"number"}}},"example":{"description":"Makes all NPCs suck at using their current weapons.","code":"for i, npc in ipairs( ents.FindByClass( \"npc_*\" ) ) do\n    npc:SetCurrentWeaponProficiency( WEAPON_PROFICIENCY_POOR )\nend"},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetIdealActivity","parent":"NPC","type":"classfunc","description":"Sets the ideal activity the NPC currently wants to achieve. This is most useful for custom SNPCs.","realm":"Server","added":"2021.01.27","args":{"arg":{"text":"The ideal activity to set. Enums/ACT.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetHullType","parent":"NPC","type":"classfunc","description":"Sets the hull type for the NPC.","realm":"Server","args":{"arg":{"text":"Hull type. See Enums/HULL","name":"hullType","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetLastPosition","parent":"NPC","type":"classfunc","description":{"text":"Sets the last registered or memorized position for an npc. When using scheduling, the NPC will focus on navigating to the last position via nodes.","note":"The navigation requires ground nodes to function properly, otherwise the NPC could only navigate in a small area. (https://developer.valvesoftware.com/wiki/Info_node)"},"realm":"Server","args":{"arg":{"text":"Where the NPC's last position will be set.","name":"Position","type":"Vector"}}},"example":{"description":"Make an NPC chase a player","code":"function NPCGoGoRun(npc, ply)\n\tnpc:SetLastPosition( ply:GetPos() )\n\tnpc:SetSchedule( SCHED_FORCED_GO_RUN )\nend","output":"The NPC will chase the player."},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetMaxRouteRebuildTime","parent":"NPC","type":"classfunc","description":"Sets how long to try rebuilding path before failing task.","realm":"Server","args":{"arg":{"text":"How long to try rebuilding path before failing task","name":"time","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetIdealYawAndUpdate","parent":"NPC","type":"classfunc","description":"Sets the ideal yaw angle (left-right rotation) for the NPC and forces them to turn to that angle.","realm":"Server","added":"2020.06.24","args":{"arg":[{"text":"The aim direction to set, the `yaw` component.","name":"angle","type":"number"},{"text":"The turn speed. Special values are:\n* `-1` - Calculate automatically\n* `-2` - Keep the previous yaw speed","name":"speed","type":"number","default":"-1"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetMoveInterval","parent":"NPC","type":"classfunc","description":"Sets the timestep the internal NPC motor is working on.","realm":"Server","added":"2021.03.31","args":{"arg":{"text":"The new timestep.","name":"time","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetMovementSequence","parent":"NPC","type":"classfunc","description":"Sets the sequence the NPC navigation path uses for speed calculation. Doesn't seem to have any visible effect on NPC movement.","realm":"Server","args":{"arg":{"text":"The movement sequence index","name":"sequenceId","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetMovementActivity","parent":"NPC","type":"classfunc","description":"Sets the activity the NPC uses when it moves.","realm":"Server","args":{"arg":{"text":"The movement activity, see Enums/ACT.","name":"activity","type":"number"}}},"example":{"description":"Makes all NPCs walk instead of run.","code":"function GM:Think()\n\tfor i, npc in ipairs( ents.FindByClass( \"npc_*\" ) ) do\n\t\tif IsValid( npc ) and npc:IsNPC() and npc:GetMovementActivity() ~= ACT_WALK then\n\t\t\tnpc:SetMovementActivity( ACT_WALK )\n\t\tend\n\tend\nend"},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetMoveVelocity","parent":"NPC","type":"classfunc","description":"Sets the move velocity of the NPC","realm":"Server","added":"2021.03.31","args":{"arg":{"text":"The new movement velocity.","name":"vel","type":"Vector"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetMoveYawLocked","parent":"NPC","type":"classfunc","description":"Sets whether the current movement should locked on the Yaw axis or not.","realm":"Server","added":"2021.03.31","args":{"arg":{"text":"Whether the movement should yaw locked or not.","name":"lock","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetNPCState","parent":"NPC","type":"classfunc","description":"Sets the state the NPC is in to help it decide on a ideal schedule.","realm":"Server","args":{"arg":{"text":"New NPC state, see Enums/NPC_STATE","name":"state","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetNavType","parent":"NPC","type":"classfunc","description":"Sets the navigation type of the NPC.","realm":"Server","added":"2021.03.31","args":{"arg":{"text":"The new nav type. See Enums/NAV.","name":"navtype","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetSquad","parent":"NPC","type":"classfunc","description":"Assigns the NPC to a new squad. A squad can have up to 16 NPCs. NPCs in a single squad should be friendly to each other.","realm":"Server","added":"2021.01.27","args":{"arg":{"text":"The new squad name to set.","name":"name","type":"string"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetSchedule","parent":"NPC","type":"classfunc","description":"Sets the NPC's current schedule.","realm":"Server","args":{"arg":{"text":"The NPC schedule, see Enums/SCHED.","name":"schedule","type":"number"}}},"example":{"description":"Function which forces an NPC to walk to an entity.","code":"function NPCMoveTo(npc, ent)\n\n\tif(!IsValid(npc) or !IsValid(ent)) then return end\n\t\t\n\tnpc:SetSaveValue(\"m_vecLastPosition\", ent:GetPos())\n\tnpc:SetSchedule(SCHED_FORCED_GO)\n\t\nend"},"realms":["Server"],"type":"Function"},
{"function":{"name":"StartEngineTask","parent":"NPC","type":"classfunc","description":"Forces the NPC to start an engine task, this has different results for every NPC.","realm":"Server","args":{"arg":[{"text":"The id of the task to start, see [ai_task.h](https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/server/ai_task.h#L89-L502)","name":"task","type":"number"},{"text":"The task data as a float, not all tasks make use of it.","name":"taskData","type":"number"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetTarget","parent":"NPC","type":"classfunc","description":"Sets the NPC's target. This is used in some engine schedules.","realm":"Server","args":{"arg":{"text":"The target of the NPC.","name":"entity","type":"Entity"}}},"example":{"description":"Sets the NPC's target to first player.","code":"npc:SetTarget( Entity( 1 ) )"},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetTaskStatus","parent":"NPC","type":"classfunc","description":"Sets the status of the current task.","realm":"Server","added":"2021.03.31","args":{"arg":{"text":"The status. See Enums/TASKSTATUS.","name":"status","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"StopMoving","parent":"NPC","type":"classfunc","description":"Resets the NPC's movement animation and velocity. Does not actually stop the NPC from moving.","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"TaskComplete","parent":"NPC","type":"classfunc","description":"Marks the current NPC task as completed.\n\nThis is meant to be used alongside NPC:TaskFail to complete or fail custom Lua defined tasks. (Schedule:AddTask)","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"TargetOrder","parent":"NPC","type":"classfunc","description":"Cancels NPC:MoveOrder basically.\n\nOnly works on Citizens (npc_citizen) and is a part of the Half-Life 2 squad system.\n\nThe NPC **must** be in the player's squad for this to work.","realm":"Server","args":{"arg":{"text":"Must be a player, does nothing otherwise.","name":"target","type":"Entity"}}},"example":{"description":"A console command that once used cancels Move Orders and makes the NPCs return to the player.","code":"concommand.Add( \"targetnpcs\", function( ply )\n\tfor id, npc in ipairs( ents.FindByClass( \"npc_citizen\" ) ) do\n\t\tnpc:TargetOrder( ply )\n\tend\nend )"},"realms":["Server"],"type":"Function"},
{"function":{"name":"TaskFail","parent":"NPC","type":"classfunc","description":"Marks the current NPC task as failed.\n\nThis is meant to be used alongside NPC:TaskComplete to complete or fail custom Lua defined tasks. (Schedule:AddTask)","realm":"Server","args":{"arg":{"text":"A string most likely defined as a Source Task, for more information on Tasks go to https://developer.valvesoftware.com/wiki/Task","name":"task","type":"string"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"UpdateEnemyMemory","parent":"NPC","type":"classfunc","description":"Force the NPC to update information on the supplied enemy, as if it had line of sight to it.","realm":"Server","args":{"arg":[{"text":"The enemy to update.","name":"enemy","type":"Entity"},{"text":"The last known position of the enemy.","name":"pos","type":"Vector"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"UpdateTurnActivity","parent":"NPC","type":"classfunc","description":"Updates the turn activity. Basically applies the turn animations depending on the current turn yaw.","realm":"Server","added":"2021.03.31"},"realms":["Server"],"type":"Function"},
{"function":{"name":"UseActBusyBehavior","parent":"NPC","type":"classfunc","description":"Only usable on \"ai\" base entities.","realm":"Server","rets":{"ret":{"text":"If we succeeded setting the behavior.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"UseAssaultBehavior","parent":"NPC","type":"classfunc","realm":"Server","rets":{"ret":{"name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"UseFollowBehavior","parent":"NPC","type":"classfunc","description":"Only usable on \"ai\" base entities.","realm":"Server","rets":{"ret":{"text":"If we succeeded setting the behavior.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"UseFuncTankBehavior","parent":"NPC","type":"classfunc","realm":"Server","rets":{"ret":{"name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"UseLeadBehavior","parent":"NPC","type":"classfunc","realm":"Server","rets":{"ret":{"name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"UseNoBehavior","parent":"NPC","type":"classfunc","description":"Undoes the other Use*Behavior functions.\n\nOnly usable on \"ai\" base entities.","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"Add","parent":"Panel","type":"classfunc","description":"Adds the specified object to the panel.","realm":"Client","args":{"arg":{"text":"The panel to be added (parented). Can also be:\n* string Class Name - creates panel with the specified name and adds it to the panel.\n* table PANEL table - creates a panel from table and adds it to the panel.","name":"object","type":"Panel"}},"rets":{"ret":{"text":"New panel","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddText","parent":"Panel","type":"classfunc","description":{"text":"This function does nothing.","deprecated":"Does nothing"},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"AlignBottom","parent":"Panel","type":"classfunc","description":"Aligns the panel on the bottom of its parent with the specified offset.","realm":"Client","args":{"arg":{"text":"The align offset.","name":"offset","type":"number","default":"0"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AlignRight","parent":"Panel","type":"classfunc","description":"Aligns the panel on the right of its parent with the specified offset.","realm":"Client","args":{"arg":{"text":"The align offset.","name":"offset","type":"number","default":"0"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AlignTop","parent":"Panel","type":"classfunc","description":"Aligns the panel on the top of its parent with the specified offset.","realm":"Client","args":{"arg":{"text":"The align offset.","name":"offset","type":"number","default":"0"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AlignLeft","parent":"Panel","type":"classfunc","description":"Aligns the panel on the left of its parent with the specified offset.","realm":"Client","args":{"arg":{"text":"The align offset.","name":"offset","type":"number","default":"0"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AlphaTo","parent":"Panel","type":"classfunc","description":"Uses animation to transition the current alpha value of a panel to a new alpha, over a set period of time and after a specified delay.","realm":"Client","args":{"arg":[{"text":"The alpha value (0-255) to approach.","name":"alpha","type":"number"},{"text":"The time in seconds it should take to reach the alpha.","name":"duration","type":"number"},{"text":"The delay before the animation starts.","name":"delay","type":"number","default":"0"},{"text":"The function to be called once the animation finishes. Arguments are:\n* table animData - The AnimationData that was used. See Structures/AnimationData\n* Panel pnl - The panel object whose alpha was changed.","name":"callback","type":"function"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AnimationThinkInternal","parent":"Panel","type":"classfunc","description":{"text":"Performs the per-frame operations required for panel animations.\n\nThis is called every frame by PANEL:AnimationThink.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"AppendText","parent":"Panel","type":"classfunc","description":"Appends text to a RichText element. This does not automatically add a new line.","realm":"Client","args":{"arg":{"text":"The text to append (add on).","name":"txt","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AnimTail","parent":"Panel","type":"classfunc","description":"Returns the Global.SysTime value when all animations for this panel object will end.","realm":"Client","rets":{"ret":{"text":"The system time value when all animations will end for this panel.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ApplyGWEN","parent":"Panel","type":"classfunc","description":"Used by Panel:LoadGWENFile and Panel:LoadGWENString to apply a GWEN controls table to a panel object.\n\nYou can do this manually using file.Read and util.JSONToTable to import and create a GWEN table structure from a `.gwen` file. This method can then be called, passing the GWEN table's `Controls` member.","realm":"Client","args":{"arg":{"text":"The GWEN controls table to apply to the panel.","name":"GWENTable","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Center","parent":"Panel","type":"classfunc","description":"Centers the panel on its parent.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"CenterHorizontal","parent":"Panel","type":"classfunc","description":"Centers the panel horizontally with specified fraction.","realm":"Client","args":{"arg":{"text":"The center fraction.","name":"fraction","type":"number","default":"0.5"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"CenterVertical","parent":"Panel","type":"classfunc","description":"Centers the panel vertically with specified fraction.","realm":"Client","args":{"arg":{"text":"The center fraction.","name":"fraction","type":"number","default":"0.5"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ChildCount","parent":"Panel","type":"classfunc","description":"Returns the amount of children of the of panel.","realm":"Client","rets":{"ret":{"text":"The amount of children the panel has.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ChildrenSize","parent":"Panel","type":"classfunc","description":"Returns the width and height of the space between the position of the panel (upper-left corner) and the max bound of the children panels (farthest reaching lower-right corner).","realm":"Client","rets":{"ret":[{"text":"The children size width.","name":"","type":"number"},{"text":"The children size height.","name":"","type":"number"}]}},"example":{"description":"Creates a recursively generated box of panels where the size of each panel is determined by the parent panel's children size + 10x10 pixels.\n\nAlso they flash bluish colors, just for good measure.","code":{"text":"-- Parent panel\nBGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetSize(200, 200)\nBGPanel:Center()\n\nlocal panel, child_size_w, child_size_h = nil, 0, 0\n\n-- Create increasingly large blocks until children size exceeds the size of the panel\nwhile(BGPanel:ChildrenSize()","bgpanel:getsize":{"do":"","child_w":"","child_h":"BGPanel:ChildrenSize()","panel":"vgui.Create(\"DPanel\",","bgpanel":"","panel:setpos0":"","increase":"","size":"","based":"","on":"","the":"","children":"","panel:setsizechild_w10":"","child_h10":"","random":"","bluish":"","color":"","every":"","frame":"","function":"","panel:performlayout":"","self:invalidatelayout":"","call":"","this":"","again":"","next":"","self:setbackgroundcolorcolormath.random0":"","math.random0":"","end":"","move":"","to":"","back":"","so":"","we":"","can":"","see":"","effect":"","panel:movetoback":"","ode":"ode","output":{"image":{"src":"Panel_ChildrenSize_example1.gif"}}}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Command","parent":"Panel","type":"classfunc","description":"Sends an action command signal to the panel. The response is handled by PANEL:ActionSignal.","realm":"Client","args":{"arg":{"text":"The command to send to the panel.","name":"command","type":"string"}}},"example":{"description":"Defines a function which displays a dialog box that asks the player if they want to leave the server. Clicking the buttons fire panel commands that call the PANEL:ActionSignal which handles what action should be taken.","code":"function DisconnectDialog()\n\n\t-- Remove existing dialog box\n\tif(DialogBox) then DialogBox:Remove() end\n\t\n\t-- Font and message\n\tlocal font = \"ChatFont\"\n\tlocal msg = \"Would you like to disconnect?\"\n\t\n\t-- Get the size of the text\n\tsurface.SetFont(font)\n\tlocal msg_w, msg_h = surface.GetTextSize(msg)\n\t\n\t-- Padding and button size\n\tlocal padding = 15\n\tlocal btn_w, btn_h = 35, 25\n\t\n\t-- Calculate dialog box size\n\tlocal dialog_w = msg_w+(padding*2)\n\tlocal dialog_h = msg_h+(padding*3)+btn_h\n\t\n\t-- Create the dialog box\n\tDialogBox = vgui.Create(\"DPanel\")\n\tDialogBox:SetSize(dialog_w, dialog_h)\n\tDialogBox:Center()\n\tDialogBox:SetBackgroundColor(Color(64, 64, 92, 255))\n\t\n\t-- Message\n\tlocal lbl = vgui.Create(\"DLabel\", DialogBox)\n\tlbl:SetPos(padding, padding)\n\tlbl:SetSize(msg_w, msg_h)\n\tlbl:SetText(msg)\n\tlbl:SetFont(font)\n\t\n\t-- Yes button\n\tlocal yes = vgui.Create(\"DButton\", DialogBox)\n\tyes:SetPos((dialog_w/2)-btn_w-20, msg_h+padding*2)\n\tyes:SetSize(btn_w, btn_h)\n\tyes:SetText(\"Yes\")\n\tyes:SetFont(font)\n\tyes.DoClick = function() DialogBox:Command(\"yes\") end\n\t\n\t-- No button\n\tlocal no = vgui.Create(\"DButton\", DialogBox)\n\tno:SetPos((dialog_w/2)+20, msg_h+padding*2)\n\tno:SetSize(btn_w, btn_h)\n\tno:SetText(\"No\")\n\tno:SetFont(font)\n\tno.DoClick = function() DialogBox:Command(\"no\") end\n\t\n\t-- Force mouse input\n\tDialogBox:MakePopup()\n\t\n\t-- Hook fired when DialogBox:Command is used\n\tfunction DialogBox:ActionSignal(signalName, signalValue)\n\t\n\t\t-- Thank the player and disconnect after 2 seconds\n\t\tif(signalName == \"yes\") then\n\t\t\n\t\t\tchat.AddText(Color(192, 192, 224), \"Thanks for playing \"..LocalPlayer():Nick()..\", come back soon!\")\n\t\t\t\n\t\t\ttimer.Simple(2.0, function()\n\t\t\t\tRunConsoleCommand(\"disconnect\")\n\t\t\tend)\n\t\t\t\n\t\t\tself:Remove()\n\t\t\n\t\t-- Remove the dialog box\n\t\telseif(signalName == \"no\") then\n\t\t\n\t\t\tself:Remove()\n\t\t\n\t\tend\n\t\n\tend\n\t\nend","output":{"image":{"src":"Panel_Command_example1.gif"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Clear","parent":"Panel","type":"classfunc","description":"Marks all of the panel's children for deletion.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"ConVarChanged","parent":"Panel","type":"classfunc","description":"Updates a panel object's associated console variable. This must first be set up with Global.Derma_Install_Convar_Functions, and have a ConVar set using Panel:SetConVar.","realm":"Client","args":{"arg":{"text":"The new value to set the associated console variable to.","name":"newValue","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ConVarNumberThink","parent":"Panel","type":"classfunc","description":"A think hook for Panels using ConVars as a value. Call it in the Think hook. Sets the panel's value should the convar change.\n\nThis function is best for: checkboxes, sliders, number wangs\n\nFor a string alternative, see Panel:ConVarStringThink.\n\n`Important`: Make sure your Panel has a SetValue function, else you may get errors.","realm":"Client"},"example":{"description":"How it should be implemented into your input.","code":"function PANEL:Think()\n\tself:ConVarNumberThink()\nend","output":"Panel's value is changed when the convar changes."},"realms":["Client"],"type":"Function"},
{"function":{"name":"ColorTo","parent":"Panel","type":"classfunc","description":"Fades panels color to specified one. It won't work unless panel has SetColor function.","realm":"Client","args":{"arg":[{"text":"The color to fade to","name":"color","type":"table"},{"text":"Length of the animation","name":"length","type":"number"},{"text":"Delay before start fading","name":"delay","type":"number"},{"text":"Function to execute when finished","name":"callback","type":"function"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ConVarStringThink","parent":"Panel","type":"classfunc","description":{"text":"A think hook for  using ConVars as a value. Call it in the Think hook. Sets the panel's value should the convar change.\n\nThis function is best for: text inputs, read-only inputs, dropdown selects\n\nFor a number alternative, see Panel:ConVarNumberThink.\n\n`Important`: Make sure your Panel has a SetValue function, else you may get errors.","page":",panelsPanel"},"realm":"Client"},"example":{"description":"How it should be implemented into your input.","code":"function PANEL:Think()\n\tself:ConVarStringThink()\nend","output":"Panel's value is changed when the convar changes."},"realms":["Client"],"type":"Function"},
{"function":{"name":"CopyBase","parent":"Panel","type":"classfunc","description":"Gets the size, position and dock state of the passed panel object, and applies it to this one.","realm":"Client","args":{"arg":{"text":"The panel to copy the boundary and dock settings from.","name":"srcPanel","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"CopyBounds","parent":"Panel","type":"classfunc","description":"Copies position and size of the panel.","realm":"Client","args":{"arg":{"text":"The panel to copy size and position from.","name":"base","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"CopySelected","parent":"Panel","type":"classfunc","description":"Performs the \"CONTROL + C\" key combination effect ( Copy selection to clipboard ) on selected text.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"CopyPos","parent":"Panel","type":"classfunc","description":"Copies the position of the panel.","realm":"Client","args":{"arg":{"text":"Panel to position the width from.","name":"base","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"CopyHeight","parent":"Panel","type":"classfunc","description":"Copies the height of the panel.","realm":"Client","args":{"arg":{"text":"Panel to copy the height from.","name":"base","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"CopyWidth","parent":"Panel","type":"classfunc","description":"Copies the width of the panel.","realm":"Client","args":{"arg":{"text":"Panel to copy the width from.","name":"base","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"CutSelected","parent":"Panel","type":"classfunc","description":"Performs the \"CONTROL + X\" ( delete text and copy it to clipboard buffer ) action on selected text.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"CursorPos","parent":"Panel","type":"classfunc","description":{"text":"Returns the cursor position relative to the top left of the panel.\n\nThis is equivalent to calling gui.MousePos and then Panel:ScreenToLocal.","warning":"This function uses a cached value for the screen position of the panel, computed at the end of the last VGUI Think/Layout pass.\n\nie. inaccurate results may be returned if the panel or any of its ancestors have been repositioned outside of PANEL:Think or PANEL:PerformLayout within the last frame."},"realm":"Client","rets":{"ret":[{"text":"X coordinate of the cursor, relative to the top left of the panel.","name":"","type":"number"},{"text":"Y coordinate of the cursor, relative to the top left of the panel.","name":"","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"DeleteCookie","parent":"Panel","type":"classfunc","description":"Deletes a cookie value using the panel's cookie name ( Panel:GetCookieName ) and the passed extension.","realm":"Client","args":{"arg":{"text":"The unique cookie name to delete.","name":"cookieName","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"DisableLerp","parent":"Panel","type":"classfunc","description":"Resets the panel object's Panel:SetPos method and removes its animation table (`Panel.LerpAnim`). This effectively undoes the changes made by Panel:LerpPositions.\n\nIn order to use Lerp animation again, you must call Panel:Stop before setting its `SetPosReal` property to `nil`. See the example below.","realm":"Client","file":{"text":"lua/includes/extensions/client/panel/animation.lua","line":"343-L351"}},"example":{"description":"Creates a function for changing the Lerp animation speed of a panel.","code":"function ChangeLerpSpeed( pnl, newSpeed, ease )\n\t\n\tif not IsValid(pnl) then return end -- Make sure panel is valid\n\t\n\tpnl:DisableLerp()\n\tpnl:Stop()\n\tpnl.SetPosReal = nil\n\t\n\tpnl:LerpPositions( newSpeed, ease )\n\t\nend"},"realms":["Client"],"type":"Function"},
{"function":{"name":"Distance","parent":"Panel","type":"classfunc","description":"Returns the linear distance from the center of this panel object and another. **Both panels must have the same parent for this function to work properly.**","realm":"Client","args":{"arg":{"text":"The target object with which to compare position.","name":"tgtPanel","type":"Panel"}},"rets":{"ret":{"text":"The linear (straight-line) distance between the center of the two objects.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"DistanceFrom","parent":"Panel","type":"classfunc","description":"Returns the distance between the center of this panel object and a specified point **local to the parent panel**.","realm":"Client","args":{"arg":[{"text":"The horizontal (x) position in pixels of the point to compare with. Local to the parent panel, or container, not the panel the function is called on.","name":"posX","type":"number"},{"text":"The vertical (y) position in pixels of the point to compare with. Local to the parent panel, or container, not the panel the function is called on.","name":"posY","type":"number"}]},"rets":{"ret":{"text":"The linear (straight-line) distance between the specified point local to parent panel and the center of this panel object.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Dock","parent":"Panel","type":"classfunc","description":{"text":"Sets the dock type for the panel, making the panel \"dock\" in a certain direction, modifying it's position and size.\n\nYou can set the inner spacing of a panel's docking using Panel:DockPadding, which will affect docked child panels, and you can set the outer spacing of a panel's docking using Panel:DockMargin, which affects how docked siblings are positioned/sized.\n\nYou may need to use Panel:SetZPos to ensure child panels (DTextEntry) stay in a specific order.","note":"After using this function, if you want to get the correct panel's bounds (position, size), use Panel:InvalidateParent (use `true` as argument if you need to update immediately)"},"realm":"Client","args":{"arg":{"text":"Dock type using Enums/DOCK.","name":"dockType","type":"number"}}},"example":[{"description":"Example docking including DockMargin. Provided by Walrus Viking in [this](http://facepunch.com/showthread.php?t=1439021&p=47095061&viewfull=1#post47095061) Facepunch post.","code":"local f = vgui.Create( \"DFrame\" )\nf:SetTitle( \"Dock Test\" )\nf:SetSize( 256, 256 )\nf:Center()\nf:MakePopup()\n\nlocal p = vgui.Create( \"DPanel\", f )\np:Dock( FILL )\np:DockMargin( 0, 0, 0, 0 )\n\nfor i = 0, 10, 1 do\n\tlocal l = vgui.Create( \"DLabel\", p )\n\tl:Dock( TOP )\n\tl:DockMargin( 4, 0, 0, 0 ) -- shift to the right\n\tl:SetColor( color_black )\n\tl:SetText( \"Hi! I'm a label!\" )\nend","output":{"image":{"src":"panel_dock_example1.png"}}},{"description":"Example showing how multiple docked elements behave.","code":"local frame = vgui.Create(\"DFrame\")\nframe:SetSize(600, 300)\nframe:SetTitle(\"Docking Demonstration\")\nframe:Center()\nframe:MakePopup(true)\n\nlocal panel = vgui.Create(\"DPanel\", frame) --Create a panel on the left\npanel:SetSize(300, 0) --Height doesn't matter since we're docking it to the left anyways\npanel:Dock(LEFT)\nlocal fill = vgui.Create(\"DButton\", panel) --Create a button and dock it\nfill:SetText(\"FILL\")\nfill:Dock(FILL)\nlocal left = vgui.Create(\"DButton\", panel)\nleft:SetText(\"LEFT\")\nleft:Dock(LEFT)\nlocal right = vgui.Create(\"DButton\", panel)\nright:SetText(\"RIGHT\")\nright:Dock(RIGHT)\nlocal top = vgui.Create(\"DButton\", panel)\ntop:SetText(\"TOP\")\ntop:Dock(TOP)\nlocal bottom = vgui.Create(\"DButton\", panel)\nbottom:SetText(\"BOTTOM\")\nbottom:Dock(BOTTOM)\n\nlocal panel = vgui.Create(\"DPanel\", frame) --Do the same thing on the right, but this time with top and bottom before left and right\npanel:SetSize(300, 0)\npanel:Dock(RIGHT)\nlocal fill = vgui.Create(\"DButton\", panel)\nfill:SetText(\"FILL\")\nfill:Dock(FILL)\nlocal top = vgui.Create(\"DButton\", panel)\ntop:SetText(\"TOP\")\ntop:Dock(TOP)\nlocal bottom = vgui.Create(\"DButton\", panel)\nbottom:SetText(\"BOTTOM\")\nbottom:Dock(BOTTOM)\nlocal left = vgui.Create(\"DButton\", panel)\nleft:SetText(\"LEFT\")\nleft:Dock(LEFT)\nlocal right = vgui.Create(\"DButton\", panel)\nright:SetText(\"RIGHT\")\nright:Dock(RIGHT)","output":{"image":{"src":"panel_dock_example_2.png"}}}],"realms":["Client"],"type":"Function"},
{"function":{"name":"DockMargin","parent":"Panel","type":"classfunc","description":"Sets the dock margin of the panel.\n\nThe dock margin is the extra space that will be left around the edge when this element is docked inside its parent element.","realm":"Client","args":{"arg":[{"text":"The left margin to the parent.","name":"marginLeft","type":"number"},{"text":"The top margin to the parent.","name":"marginTop","type":"number"},{"text":"The right margin to the parent.","name":"marginRight","type":"number"},{"text":"The bottom margin to the parent.","name":"marginBottom","type":"number"}]}},"example":{"description":"Example showing the effects of DockMargin and DockPadding","code":"local frame = vgui.Create(\"DFrame\")\nframe:SetSize(600, 300)\nframe:SetTitle(\"Docking Demonstration\")\nframe:Center()\nframe:MakePopup(true)\n\nlocal panel = vgui.Create(\"DPanel\", frame)\npanel:DockMargin(10, 20, 30, 40)\npanel:DockPadding(40, 30, 20, 10)\npanel:Dock(FILL)\n\nlocal button = vgui.Create(\"DButton\", panel)\nbutton:SetText(\"Lopsided proportions!\")\nbutton:Dock(FILL)","output":{"image":{"src":"panel_dockmargin_dockpadding.png"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"DockPadding","parent":"Panel","type":"classfunc","description":"Sets the dock padding of the panel.\n\nThe dock padding is the extra space that will be left around the edge when child elements are docked inside this element.","realm":"Client","args":{"arg":[{"text":"The left padding to the parent.","name":"paddingLeft","type":"number"},{"text":"The top padding to the parent.","name":"paddingTop","type":"number"},{"text":"The right padding to the parent.","name":"paddingRight","type":"number"},{"text":"The bottom padding to the parent.","name":"paddingBottom","type":"number"}]}},"example":{"description":"Example showing the effects of DockMargin and DockPadding","code":"local frame = vgui.Create(\"DFrame\")\nframe:SetSize(600, 300)\nframe:SetTitle(\"Docking Demonstration\")\nframe:Center()\nframe:MakePopup(true)\n\nlocal panel = vgui.Create(\"DPanel\", frame)\npanel:DockMargin(10, 20, 30, 40)\npanel:DockPadding(40, 30, 20, 10)\npanel:Dock(FILL)\n\nlocal button = vgui.Create(\"DButton\", panel)\nbutton:SetText(\"Lopsided proportions!\")\nbutton:Dock(FILL)","output":{"image":{"src":"panel_dockmargin_dockpadding.png"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"DragClick","parent":"Panel","type":"classfunc","description":{"text":"Called by Panel:DragMouseRelease when a user clicks one mouse button whilst dragging with another.","internal":""},"realm":"Client","rets":{"ret":{"text":"Always returns `true`.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"DragHover","parent":"Panel","type":"classfunc","description":{"text":"Called by dragndrop.HoverThink to perform actions on an object that is dragged and hovered over another.","internal":""},"realm":"Client","file":{"text":"lua/includes/extensions/client/panel/dragdrop.lua","line":"502-L525"},"args":{"arg":{"text":"If this time is greater than 0.1, PANEL:DragHoverClick is called, passing it as an argument.","name":"HoverTime","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"DoModal","parent":"Panel","type":"classfunc","description":{"text":"Makes the panel \"lock\" the screen until it is removed. All input will be directed to the given panel.\n\nIt will silently fail if used while cursor is not visible.\nCall Panel:MakePopup before calling this function.\nThis must be called on a panel derived from EditablePanel.","bug":{"text":"You can still click in the world even if locked.","issue":"3457"}},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"DragMousePress","parent":"Panel","type":"classfunc","description":"Called to inform the dragndrop that a mouse button is being held down on a panel object.","realm":"Client","args":{"arg":{"text":"The code for the mouse button pressed, passed by, for example, PANEL:OnMousePressed. See the Enums/MOUSE.","name":"mouseCode","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"DragHoverEnd","parent":"Panel","type":"classfunc","description":{"text":"Called to end a drag and hover action. This resets the panel's PANEL:PaintOver method, and is primarily used by dragndrop.StopDragging.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"DrawDragHover","parent":"Panel","type":"classfunc","description":{"text":"Called to draw the drop target when an object is being dragged across another. See Panel:SetDropTarget.","internal":""},"realm":"Client","args":{"arg":[{"text":"The x coordinate of the top-left corner of the drop area.","name":"x","type":"number"},{"text":"The y coordinate of the top-left corner of the drop area.","name":"y","type":"number"},{"text":"The width of the drop area.","name":"width","type":"number"},{"text":"The height of the drop area.","name":"height","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"DragMouseRelease","parent":"Panel","type":"classfunc","description":"Called to inform the dragndrop that a mouse button has been depressed on a panel object.","realm":"Client","args":{"arg":{"text":"The code for the mouse button pressed, passed by, for example, PANEL:OnMouseReleased. See the Enums/MOUSE.","name":"mouseCode","type":"number"}},"rets":{"ret":{"text":"`true` if an object was being dragged, otherwise `false`.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"DrawFilledRect","parent":"Panel","type":"classfunc","description":"Draws a coloured rectangle to fill the panel object this method is called on. The colour is set using surface.SetDrawColor. This should only be called within the object's PANEL:Paint or PANEL:PaintOver hooks, as a shortcut for surface.DrawRect.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"DrawOutlinedRect","parent":"Panel","type":"classfunc","description":"Draws a hollow rectangle the size of the panel object this method is called on, with a border width of 1 px. The border colour is set using surface.SetDrawColor. This should only be called within the object's PANEL:Paint or PANEL:PaintOver hooks, as a shortcut for surface.DrawOutlinedRect.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"DrawSelections","parent":"Panel","type":"classfunc","description":"Used to draw the magenta highlight colour of a panel object when it is selected. This should be called in the object's PANEL:PaintOver hook. Once this is implemented, the highlight colour will be displayed only when the object is selectable and selected. This is achieved using Panel:SetSelectable and Panel:SetSelected respectively.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"DrawTextEntryText","parent":"Panel","type":"classfunc","description":{"text":"Used to draw the text in a DTextEntry within a derma skin. This should be called within the SKIN:PaintTextEntry skin hook.","note":"Will silently fail if any of arguments are not Color."},"realm":"Client","args":{"arg":[{"text":"The colour of the main text.","name":"textCol","type":"table"},{"text":"The colour of the selection highlight (when selecting text).","name":"highlightCol","type":"table"},{"text":"The colour of the text cursor (or caret).","name":"cursorCol","type":"table"}]}},"example":{"description":"The paint function used in the default derma skin.","code":"function SKIN:PaintTextEntry( panel, w, h )\n\n\tif ( panel.m_bBackground ) then\n\t\n\t\tif ( panel:GetDisabled() ) then\n\t\t\tself.tex.TextBox_Disabled( 0, 0, w, h )\n\t\telseif ( panel:HasFocus() ) then\n\t\t\tself.tex.TextBox_Focus( 0, 0, w, h )\n\t\telse\n\t\t\tself.tex.TextBox( 0, 0, w, h )\n\t\tend\n\t\n\tend\n\t\n\tpanel:DrawTextEntryText( panel.m_colText, panel.m_colHighlight, panel.m_colCursor )\n\t\nend"},"realms":["Client"],"type":"Function"},
{"function":{"name":"DrawTexturedRect","parent":"Panel","type":"classfunc","description":"Draws a textured rectangle to fill the panel object this method is called on. The texture is set using surface.SetTexture or surface.SetMaterial. This should only be called within the object's PANEL:Paint or PANEL:PaintOver hooks, as a shortcut for surface.DrawTexturedRect.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"EndBoxSelection","parent":"Panel","type":"classfunc","description":"Completes a box selection. If the end point of the selection box is within the selection canvas, mouse capture is disabled for the panel object, and the selected state of each child object within the selection box is toggled.","realm":"Client","rets":{"ret":{"text":"Whether the end point of the selection box was within the selection canvas.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Droppable","parent":"Panel","type":"classfunc","description":"Makes this panel droppable. This is used with Panel:Receiver to create drag and drop events.\n\nCan be called multiple times with different names allowing to be dropped onto different receivers.","realm":"Client","file":{"text":"lua/includes/extensions/client/panel/dragdrop.lua","line":"308"},"args":{"arg":{"text":"Name of your droppable panel","name":"name","type":"string"}},"rets":{"ret":{"text":"Blank table stored on the panel itself under pnl.m_DragSlot[ name ]. Is reset every time this function is called and does not appear to be used or exposed anywhere else.","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Exec","parent":"Panel","type":"classfunc","description":{"text":"Used to run commands within a DHTML window.","internal":""},"realm":"Client","args":{"arg":{"text":"The command to be run.","name":"cmd","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"FocusNext","parent":"Panel","type":"classfunc","description":"Focuses the next panel in the focus queue.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"Find","parent":"Panel","type":"classfunc","description":"Finds a panel in its children(and sub children) with the given name.","realm":"Client","args":{"arg":{"text":"The name of the panel that should be found.","name":"panelName","type":"string"}},"rets":{"ret":{"text":"foundPanel","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetAlpha","parent":"Panel","type":"classfunc","description":"Returns the alpha multiplier for this panel.","realm":"Client","rets":{"ret":{"text":"alphaMul","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"FocusPrevious","parent":"Panel","type":"classfunc","description":"Focuses the previous panel in the focus queue.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetBGColor","parent":"Panel","type":"classfunc","description":{"text":"Returns the background color of a panel such as a RichText, Label or DColorCube.","note":"This doesn't apply to all VGUI elements and its function varies between them"},"realm":"Client","added":"2020.03.17","rets":{"ret":{"text":"The Color structure","name":"color","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetBounds","parent":"Panel","type":"classfunc","description":"Returns the position and size of the panel.\n\nThis is equivalent to calling Panel:GetPos and Panel:GetSize together.","realm":"Client","rets":{"ret":[{"text":"The x coordinate of the panel, relative to its parent's top left.","name":"","type":"number"},{"text":"The y coordinate of the panel, relative to its parent's top left.","name":"","type":"number"},{"text":"The width of the panel.","name":"","type":"number"},{"text":"The height of the panel.","name":"","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetCaretPos","parent":"Panel","type":"classfunc","description":"Returns the position/offset of the caret (or text cursor) in a text-based panel object.","realm":"Client","rets":{"ret":{"text":"The caret position/offset from the start of the text. A value of `0` means the caret sits before the first character.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetChild","parent":"Panel","type":"classfunc","description":"Gets a child by its index.","realm":"Client","args":{"arg":{"text":"The index of the child to get.","name":"childIndex","type":"number","note":"This index starts at 0, except when you use this on a DMenu."}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetChildPosition","parent":"Panel","type":"classfunc","description":"Gets a child object's position relative to this panel object. The number of levels is not relevant; the child may have many parents between itself and the object on which the method is called.","realm":"Client","args":{"arg":{"text":"The panel to get the position of.","name":"pnl","type":"Panel"}},"rets":{"ret":[{"text":"The horizontal (x) position of the child relative to this panel object.","name":"","type":"number"},{"text":"The vertical (y) position of the child relative to this panel object.","name":"","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetChildren","parent":"Panel","type":"classfunc","description":"Returns a table with all the child panels of the panel.","realm":"Client","rets":{"ret":{"text":"children","name":"","type":"table"}}},"example":{"description":"Print the classnames of the children on the panel.","code":"for _, v in ipairs( panel:GetChildren() ) do\n\tprint( v:GetClassName() )\nend"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetClassName","parent":"Panel","type":"classfunc","description":"Returns the class name of the panel.","realm":"Client","rets":{"ret":{"text":"className","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetChildrenInRect","parent":"Panel","type":"classfunc","description":"Returns a table of all visible, selectable children of the panel object that lie at least partially within the specified rectangle.","realm":"Client","args":{"arg":[{"text":"The horizontal (x) position of the top-left corner of the rectangle, relative to the panel object.","name":"x","type":"number"},{"text":"The vertical (y) position of the top-left corner of the rectangle, relative to the panel object.","name":"y","type":"number"},{"text":"The width of the rectangle.","name":"w","type":"number"},{"text":"The height of the rectangle.","name":"h","type":"number"}]},"rets":{"ret":{"text":"A table of panel objects that lie at least partially within the specified rectangle.","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetClosestChild","parent":"Panel","type":"classfunc","description":"Returns the child of this panel object that is closest to the specified point. The point is relative to the object on which the method is called. The distance the child is from this point is also returned.","realm":"Client","args":{"arg":[{"text":"The horizontal (x) position of the point.","name":"x","type":"number"},{"text":"The vertical (y) position of the point.","name":"y","type":"number"}]},"rets":{"ret":[{"text":"The child object that was closest to the specified point.","name":"","type":"Panel"},{"text":"The distance that this child was from the point.","name":"","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetContentSize","parent":"Panel","type":"classfunc","description":"Gets the size of the content/children within a panel object.\n\nOnly works with Label derived panels by default such as DLabel.\n\n\nWill also work on any panel that manually implements this method.","realm":"Client","rets":{"ret":[{"text":"The content width of the object.","name":"","type":"number"},{"text":"The content height of the object.","name":"","type":"number"}]}},"example":{"description":"Demonstrates how to implement this function in your own panel.","code":"local PANEL = {}\n\nfunction PANEL:GetContentSize()\n\tsurface.SetFont( self:GetFont() )\n\treturn surface.GetTextSize( self:GetText() )\nend\n\nvgui.Register( \"DTextEntry_Edit\", PANEL, \"DTextEntry\" )\n\n-- Somewhere else, to test the newly created panel\nlocal frame = vgui.Create( \"DFrame\" )\nframe:SetSize( 500, 200 )\nframe:Center()\nframe:MakePopup()\n\nlocal txt = vgui.Create( \"DTextEntry_Edit\", frame )\ntxt:SetPos( 5, 25 )\ntxt:SetSize( 100, 10 )\ntxt:SetText( \"Really long string that is bigger than 100 pixels\" )\ntxt:SizeToContentsX( 5 ) -- Must be called after setting the text\ntxt:SizeToContentsY( 5 ) -- These two functions will not have effect on a normal DTextEntry"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetCookie","parent":"Panel","type":"classfunc","description":"Gets the value of a cookie stored by the panel object. This can also be done with cookie.GetString, using the panel's cookie name, a fullstop, and then the actual name of the cookie.\n\nMake sure the panel's cookie name has not changed since writing, or the cookie will not be accessible. This can be done with Panel:GetCookieName and Panel:SetCookieName.","realm":"Client","args":{"arg":[{"text":"The name of the cookie from which to retrieve the value.","name":"cookieName","type":"string"},{"text":"The default value to return if the cookie does not exist.","name":"default","type":"string"}]},"rets":{"ret":{"text":"The value of the stored cookie, or the default value should the cookie not exist.","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetCookieNumber","parent":"Panel","type":"classfunc","description":"Gets the value of a cookie stored by the panel object, as a number. This can also be done with cookie.GetNumber, using the panel's cookie name, a fullstop, and then the actual name of the cookie.\n\nMake sure the panel's cookie name has not changed since writing, or the cookie will not be accessible. This can be done with Panel:GetCookieName and Panel:SetCookieName.","realm":"Client","args":{"arg":[{"text":"The name of the cookie from which to retrieve the value.","name":"cookieName","type":"string"},{"text":"The default value to return if the cookie does not exist.","name":"default","type":"number"}]},"rets":{"ret":{"text":"The number value of the stored cookie, or the default value should the cookie not exist.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetDockMargin","parent":"Panel","type":"classfunc","description":"Returns the docked margins of the panel. (set by Panel:DockMargin)","realm":"Client","rets":{"ret":[{"text":"Left margin.","name":"","type":"number"},{"text":"Top margin.","name":"","type":"number"},{"text":"Right margin.","name":"","type":"number"},{"text":"Bottom margin.","name":"","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetCookieName","parent":"Panel","type":"classfunc","description":"Gets the name the panel uses to store cookies. This is set with Panel:SetCookieName.","realm":"Client","rets":{"ret":{"text":"The name the panel uses when reading or writing cookies. The format used is as follows: \n```\npanelCookieName.individualCookieName\n```","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetDock","parent":"Panel","type":"classfunc","description":"Returns a dock enum for the panel's current docking type.","realm":"Client","rets":{"ret":{"text":"The dock enum for the panel. See Enums/DOCK.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetDockPadding","parent":"Panel","type":"classfunc","description":"Returns the docked padding of the panel. (set by Panel:DockPadding)","realm":"Client","rets":{"ret":[{"text":"Left padding.","name":"","type":"number"},{"text":"Top padding.","name":"","type":"number"},{"text":"Right padding.","name":"","type":"number"},{"text":"Bottom padding.","name":"","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetFont","parent":"Panel","type":"classfunc","description":"Returns the name of the font that the panel renders its text with.\n\nThis is the same font name set with Panel:SetFontInternal.","realm":"Client","rets":{"ret":{"text":"fontName","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetHTMLMaterial","parent":"Panel","type":"classfunc","description":"Returns the panel's HTML material. Only works with Awesomium, HTML and DHTML panels that have been fully loaded.","realm":"Client","rets":{"ret":{"text":"The HTML material used by the panel. Typically starts with \"__vgui_texture_\" followed by an incremental number.","name":"","type":"IMaterial"}}},"example":{"description":"Defines a new entity which can display a web page on a TV screen.","code":"AddCSLuaFile()\n\nENT.Type = \"anim\"\nENT.Base = \"base_entity\"\n\nENT.PrintName = \"Web Screen\"\nENT.Author = \"Microflash\"\nENT.Spawnable = true\n\nif ( CLIENT ) then\n\tENT.Mat = nil\n\tENT.Panel = nil\nend\n\nfunction ENT:Initialize()\n\n\tif ( SERVER ) then\n\t\t\n\t\tself:SetModel(\"models/props_phx/rt_screen.mdl\")\n\t\tself:SetMoveType(MOVETYPE_VPHYSICS)\n\t\tself:SetSolid(SOLID_VPHYSICS)\n\t\t\n\t\tself:PhysicsInit(SOLID_VPHYSICS)\n\t\t\n\t\tself:Freeze()\n\t\t\n\telse\n\t\n\t\t-- Reset material and panel and load DHTML panel\n\t\tself.Mat = nil\n\t\tself.Panel = nil\n\t\tself:OpenPage()\n\t\t\n\tend\n\t\nend\n\nfunction ENT:Freeze()\n\tlocal phys = self:GetPhysicsObject()\n\tif (IsValid(phys)) then phys:EnableMotion(false) end\nend\n\n-- Load the DHTML reference panel\nfunction ENT:OpenPage()\n\n\t-- Iff for some reason a panel is already loaded, delete it\n\tif(self.Panel) then\n\t\n\t\tself.Panel:Remove()\n\t\tself.Panel = nil\n\t\n\tend\n\n\t-- Create a web page panel and fill the entire screen\n\tself.Panel = vgui.Create(\"DHTML\")\n\tself.Panel:Dock(FILL)\n\t\n\t-- Wiki page URL\n\tlocal url = \"https://wiki.facepunch.com/gmod/Material\"\n\t\n\t-- Load the wiki page\n\tself.Panel:OpenURL(url)\n\t\n\t-- Hide the panel\n\tself.Panel:SetAlpha(0)\n\tself.Panel:SetMouseInputEnabled(false)\n\t\n\t-- Disable HTML messages\n\tfunction self.Panel:ConsoleMessage(msg) end\n\nend\n\nfunction ENT:Draw()\n\n\t-- Iff the material has already been grabbed from the panel\n\tif(self.Mat) then\n\t\t\n\t\t-- Apply it to the screen/model\n\t\tif(render.MaterialOverrideByIndex) then\n\t\t\trender.MaterialOverrideByIndex(1, self.Mat)\n\t\telse\n\t\t\trender.ModelMaterialOverride(self.Mat)\n\t\tend\n\t\t\n\t-- Otherwise, check that the panel is valid and the HTML material is finished loading\n\telseif(self.Panel && self.Panel:GetHTMLMaterial()) then\n\n\t\t-- Get the html material\n\t\tlocal html_mat = self.Panel:GetHTMLMaterial()\n\t\t\n\t\t-- Used to make the material fit the model screen\n\t\t-- May need to be changed iff using a different model\n\t\t-- For the multiplication number it goes in segments of 512\n\t\t-- Based off the players screen resolution\n\t\tlocal scale_x, scale_y = ScrW()/2048, ScrH()/1024\n\t\t\n\t\t-- Create a new material with the proper scaling and shader\n\t\tlocal matdata =\n\t\t{\n\t\t\t[\"$basetexture\"]=html_mat:GetName(),\n\t\t\t[\"$basetexturetransform\"]=\"center 0 0 scale \"..scale_x..\" \"..scale_y..\" rotate 0 translate 0 0\",\n\t\t\t[\"$model\"]=1\n\t\t}\n\t\t-- Unique ID used for material name\n\t\tlocal uid = string.Replace(html_mat:GetName(), \"__vgui_texture_\", \"\")\n\t\t\n\t\t-- Create the model material\n\t\tself.Mat = CreateMaterial(\"WebMaterial_\"..uid, \"VertexLitGeneric\", matdata)\n\t\n\tend\n\n\t-- Render the model\n\tself:DrawModel()\n\t\n\t-- Reset the material override or else everything will have a HTML material!\n\trender.ModelMaterialOverride(nil)\n\nend\n\nfunction ENT:OnRemove()\n\t-- Make sure the panel is removed too\n\tif(self.Panel) then self.Panel:Remove() end\nend","output":{"image":{"src":"Panel_GetHTMLMaterial_example1.gif"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetFGColor","parent":"Panel","type":"classfunc","description":{"text":"Returns the foreground color of the panel.\n\nFor a Label or RichText, this is the color of its text.","note":"This doesn't apply to all VGUI elements (such as DLabel) and its function varies between them"},"added":"2020.03.17","realm":"Client","rets":{"ret":{"text":"A color structure. See Color","name":"color","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetMaximumCharCount","parent":"Panel","type":"classfunc","description":"Returns the current maximum character count.\n\nThis function will only work on RichText and TextEntry panels and their derivatives.","realm":"Client","added":"2020.03.17","rets":{"ret":{"text":"The maximum amount of characters this panel is allowed to contain.","name":"maxChar","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetNumLines","parent":"Panel","type":"classfunc","description":{"text":"Returns the number of lines in a RichText. You must wait a couple frames before calling this after using Panel:AppendText or Panel:SetText, otherwise it will return the number of text lines before the text change.","note":"Even though this function can be called on any panel, it will only work with RichText"},"realm":"Client","rets":{"ret":{"text":"The number of lines.","name":"","type":"number"}}},"example":{"description":"Creates a rich text panel with a block of text and prints out the number of text lines before and after `PerformLayout` is called.","code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(200, 224)\nTextFrame:Center()\nTextFrame:SetTitle(\"Generic Frame\")\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- Throw some text in the panel\nrichtext:SetText(\"This is a block of text demonstrating how line wrapping and panel size relates to the number of lines shown inside of a RichText panel.\")\n\n-- Keep track of PerformLayout calls\nrichtext.layoutCount = 0\n\n-- Custom function for this example\nfunction richtext:NumLinesExample()\n\tprint(\"PerformLayout called \"..self.layoutCount..\" times: \"..richtext:GetNumLines()..\" line(s) returned\")\t\nend\n\n-- Print # of lines before any layouts\nrichtext:NumLinesExample()\n\n-- Render update\nfunction richtext:PerformLayout()\n\n\tself.layoutCount = self.layoutCount + 1\n\tself:NumLinesExample()\t-- Print current # of lines\n\nend","output":{"text":"The panel shows 5 lines of text, but the number 5 isn't returned until PerformLayout has been called 2 times.\n\n```\nPerformLayout called 0 times: 1 line(s) returned\nPerformLayout called 1 times: 1 line(s) returned\nPerformLayout called 2 times: 5 line(s) returned\n```","image":{"src":"RichText_GetNumLines_example1.png"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetName","parent":"Panel","type":"classfunc","description":"Returns the internal name of the panel.","realm":"Client","rets":{"ret":{"text":"name","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetSelectedChildren","parent":"Panel","type":"classfunc","description":"Returns a table of all children of the panel object that are selected. This is recursive, and the returned table will include tables for any child objects that also have children. This means that not all first-level members in the returned table will be of type Panel.","realm":"Client","rets":{"ret":{"text":"A table of any child objects that are selected, including tables for children of the child objects (These tables may also contain table members, as the method is recursive).","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetPos","parent":"Panel","type":"classfunc","description":"Returns the position of the panel relative to its Panel:GetParent.\n\nIf you require the panel's position **and** size, consider using Panel:GetBounds instead.\n\nIf you need the position in screen space, see Panel:LocalToScreen.\n\nSee also Panel:GetX and Panel:GetY.","realm":"Client","rets":{"ret":[{"text":"X coordinate, relative to this panels parents top left corner.","name":"","type":"number"},{"text":"Y coordinate, relative to this panels parents top left corner.","name":"","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetSelectedTextRange","parent":"Panel","type":"classfunc","description":"Returns the currently selected range of text.\n\nThis function will only work on RichText and TextEntry panels and their derivatives.","realm":"Client","added":"2020.03.17","rets":{"ret":[{"text":"The start of the range. If no text is selected it may be 0 and/or equal to the end range.","name":"start","type":"number"},{"text":"The end of the range. If no text is selected it may be 0 and/or equal to the start range.","name":"endrange","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetParent","parent":"Panel","type":"classfunc","description":"Returns the parent of the panel, returns nil if there is no parent.","realm":"Client","rets":{"ret":{"text":"The parent of given panel","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetSelectionCanvas","parent":"Panel","type":"classfunc","description":"Returns the panel object (`self`) if it has been enabled as a selection canvas. This is achieved using Panel:SetSelectionCanvas.","realm":"Client","rets":{"ret":{"text":"The panel object this method was called on if enabled as a selection canvas, otherwise `nil`.","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetSize","parent":"Panel","type":"classfunc","description":"Returns the size of the panel.\n\nIf you require both the panel's position and size, consider using Panel:GetBounds instead.","realm":"Client","rets":{"ret":[{"text":"width","name":"","type":"number"},{"text":"height","name":"","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetSkin","parent":"Panel","type":"classfunc","description":"Returns the table for the derma skin currently being used by this panel object.","realm":"Client","rets":{"ret":{"text":"The derma skin table currently being used by this object.","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetTable","parent":"Panel","type":"classfunc","description":"Returns the internal Lua table of the panel.","realm":"Client","rets":{"ret":{"text":"A table containing all the members of given panel object.","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetTall","parent":"Panel","type":"classfunc","description":"Returns the height of the panel.","realm":"Client","rets":{"ret":{"text":"height","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetText","parent":"Panel","type":"classfunc","description":"Returns the panel's text (where applicable).\n\nThis method returns a maximum of 1023 bytes, except for DTextEntry.","realm":"Client","rets":{"ret":{"text":"The panel's text.","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetValidReceiverSlot","parent":"Panel","type":"classfunc","description":"Gets valid receiver slot of currently dragged panel.","realm":"Client","file":{"text":"lua/includes/extensions/client/panel/dragdrop.lua","line":"331"},"rets":{"ret":[{"text":"The panel this was called on if a valid receiver slot exists, otherwise false.","name":"","type":"Panel"},{"text":"The slot table.","name":"","type":"table"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetTextSize","parent":"Panel","type":"classfunc","description":"Gets the size of the text within a Label derived panel.","realm":"Client","rets":{"ret":[{"text":"The width of the text in the DLabel.","name":"","type":"number"},{"text":"The height of the text in the DLabel.","name":"","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetTextInset","parent":"Panel","type":"classfunc","description":"Gets the left and top text margins of a text-based panel object, such as a DButton or DLabel. This is set with Panel:SetTextInset.","realm":"Client","rets":{"ret":[{"text":"The left margin of the text, in pixels.","name":"","type":"number"},{"text":"The top margin of the text, in pixels.","name":"","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetWide","parent":"Panel","type":"classfunc","description":"Returns the width of the panel.","realm":"Client","rets":{"ret":{"text":"width","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetValue","parent":"Panel","type":"classfunc","description":{"text":"Returns the value the panel holds.\n\nIn engine is only implemented for CheckButton, Label and TextEntry as a string.","note":"This function is limited to 8092 Bytes. If using DTextEntry, use Panel:GetText for unlimited bytes."},"realm":"Client","rets":{"ret":{"text":"The value the panel holds.","name":"","type":"any"}}},"example":{"description":"Returns the string typed in a TextEntry.","code":"local TextEntry = vgui.Create( \"TextEntry\" )\nTextEntry:SetText( \"Hello world!\" )\nprint( TextEntry:GetValue() )","output":"\"Hello world!\""},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetZPos","parent":"Panel","type":"classfunc","description":"Returns the Z position of the panel.","realm":"Client","rets":{"ret":{"text":"The Z order position of the panel.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetY","parent":"Panel","type":"classfunc","description":"Returns the Y position of the panel relative to its Panel:GetParent.\n\nUses Panel:GetPos internally.","realm":"Client","file":{"text":"lua/includes/extensions/client/panel.lua","line":"66-L69"},"added":"2021.03.31","rets":{"ret":{"text":"Y coordinate.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetX","parent":"Panel","type":"classfunc","description":"Returns the X position of the panel relative to its Panel:GetParent.\n\nUses Panel:GetPos internally.","realm":"Client","file":{"text":"lua/includes/extensions/client/panel.lua","line":"62-L65"},"added":"2021.03.31","rets":{"ret":{"text":"X coordinate.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GoForward","parent":"Panel","type":"classfunc","description":"Goes forward one page in the HTML panel's history if available.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GoToHistoryOffset","parent":"Panel","type":"classfunc","description":"Goes to the page in the HTML panel's history at the specified relative offset.","realm":"Client","args":{"arg":{"text":"The offset in the panel's back/forward history, relative to the current page, that you would like to skip to. Because this is relative, 0 = current page while negative goes back and positive goes forward. For example, -2 will go back 2 pages in the history.","name":"offset","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GoBack","parent":"Panel","type":"classfunc","description":"Goes back one page in the HTML panel's history if available.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GotoTextEnd","parent":"Panel","type":"classfunc","description":"Causes a RichText element to scroll to the bottom of its text.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GotoTextStart","parent":"Panel","type":"classfunc","description":{"text":"Causes a RichText element to scroll to the top of its text.","bug":{"text":"This does not work on the same frame as Panel:SetText.","issue":"2239"}},"realm":"Client"},"example":{"description":"Creates a RichText panel with a \"Back to Top\" button which scrolls the text to the start.","code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(250, 200)\nTextFrame:Center()\nTextFrame:SetTitle(\"#ServerBrowser_ServerWarningTitle\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- Yellow colored localized text about player capacity\nrichtext:InsertColorChange(255, 255, 192, 255)\nrichtext:AppendText(\"#ServerBrowser_ServerWarning_MaxPlayers\")\n\n-- Create a button that moves the text back to the start\nlocal topbutton = vgui.Create(\"DButton\", richtext)\ntopbutton:SetSize(60, 20)\ntopbutton:SetPos(160, 146)\ntopbutton:SetText(\"Back to Top\")\n\n-- When clicked, go to the start of the text\ntopbutton.DoClick = function() richtext:GotoTextStart()\tend\n\n-- Apply background color and font\nfunction richtext:PerformLayout()\n\t\n\tself:SetFontInternal(\"Trebuchet18\")\n\tself:SetBGColor(Color(64, 64, 84))\n\t\nend","output":{"image":{"src":"RichText_GotoTextStart_example1.gif"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GWEN_SetControlName","parent":"Panel","type":"classfunc","description":{"text":"Used by Panel:ApplyGWEN to apply the `ControlName` property to a panel. This calls Panel:SetName.","internal":""},"realm":"Client","args":{"arg":{"text":"The new name to apply to the panel.","name":"name","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GWEN_SetCheckboxText","parent":"Panel","type":"classfunc","description":{"text":"Used by Panel:ApplyGWEN to apply the `CheckboxText` property to a DCheckBoxLabel. This does exactly the same as Panel:GWEN_SetText, but exists to cater for the seperate GWEN properties.","internal":""},"realm":"Client","args":{"arg":{"text":"The text to be applied to the DCheckBoxLabel.","name":"txt","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GWEN_SetHorizontalAlign","parent":"Panel","type":"classfunc","description":{"text":"Used by Panel:ApplyGWEN to apply the `HorizontalAlign` property to a  panel object. This calls Panel:SetContentAlignment.","internal":""},"realm":"Client","args":{"arg":{"text":"The alignment, as a string, to pass to Panel:SetContentAlignment. Accepts:\n* `Right`: Align mid-right.\n* `Left`: Align mid-left.\n* `Center`: Align mid-center.","name":"hAlign","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GWEN_SetDock","parent":"Panel","type":"classfunc","description":{"text":"Used by Panel:ApplyGWEN to apply the `Dock` property to a  panel object. This calls Panel:Dock.","internal":""},"realm":"Client","args":{"arg":{"text":"The dock mode to pass to the panel's `Dock` method. This reads a string and applies the approriate Enums/DOCK.\n* `Right`: Dock right.\n* `Left`: Dock left.\n* `Bottom`: Dock at the bottom.\n* `Top`: Dock at the top.\n* `Fill`: Fill the parent panel.","name":"dockState","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GWEN_SetMargin","parent":"Panel","type":"classfunc","description":{"text":"Used by Panel:ApplyGWEN to apply the `Margin` property to a  panel object. This calls Panel:DockMargin.","internal":""},"realm":"Client","args":{"arg":{"text":"A four-membered table containing the margins as numbers:\n* number left - The left margin.\n* number top - The top margin.\n* number right - The right margin.\n* number bottom - The bottom margin.","name":"margins","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GWEN_SetMax","parent":"Panel","type":"classfunc","description":{"text":"Used by Panel:ApplyGWEN to apply the `Max` property to a  DNumberWang, Slider, DNumSlider or DNumberScratch. This calls `SetMax` on one of the previously listed methods.","internal":""},"realm":"Client","args":{"arg":{"text":"The maximum value the element is to permit.","name":"maxValue","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GWEN_SetMin","parent":"Panel","type":"classfunc","description":{"text":"Used by Panel:ApplyGWEN to apply the `Min` property to a  DNumberWang, Slider, DNumSlider or DNumberScratch. This calls `SetMin` on one of the previously listed methods.","internal":""},"realm":"Client","args":{"arg":{"text":"The minimum value the element is to permit.","name":"minValue","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GWEN_SetSize","parent":"Panel","type":"classfunc","description":{"text":"Used by Panel:ApplyGWEN to apply the `Size` property to a  panel object. This calls Panel:SetSize.","internal":""},"realm":"Client","args":{"arg":{"text":"A two-membered table containing the width and heights as numbers:\n* number w - The width.\n* number h - The height.","name":"size","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GWEN_SetPosition","parent":"Panel","type":"classfunc","description":{"text":"Used by Panel:ApplyGWEN to apply the `Position` property to a  panel object. This calls Panel:SetPos.","internal":""},"realm":"Client","args":{"arg":{"text":"A two-membered table containing the x and y coordinates as numbers:\n* number x - The x coordinate.\n* number y - The y coordinate.","name":"pos","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GWEN_SetText","parent":"Panel","type":"classfunc","description":{"text":"Used by Panel:ApplyGWEN to apply the `Text` property to a panel.","internal":""},"realm":"Client","args":{"arg":{"text":"The text to be applied to the panel.","name":"txt","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"HasChildren","parent":"Panel","type":"classfunc","description":"Returns whenever the panel has child panels.","realm":"Client","rets":{"ret":{"text":"hasChilds","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"HasFocus","parent":"Panel","type":"classfunc","description":"Returns if the panel is focused.","realm":"Client","rets":{"ret":{"text":"hasFocus","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"HasHierarchicalFocus","parent":"Panel","type":"classfunc","description":"Returns if the panel or any of its children(sub children and so on) has the focus.","realm":"Client","rets":{"ret":{"text":"hasHierarchicalFocus","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Hide","parent":"Panel","type":"classfunc","description":"Makes a panel invisible.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"HasParent","parent":"Panel","type":"classfunc","description":"Returns whether the panel is a descendent of the given panel.","realm":"Client","args":{"arg":{"name":"parentPanel","type":"Panel"}},"rets":{"ret":{"text":"True if the panel is contained within parentPanel.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"InsertClickableTextEnd","parent":"Panel","type":"classfunc","description":"Marks the end of a clickable text segment in a RichText element, started with Panel:InsertClickableTextStart.","realm":"Client"},"example":{"description":"Creates a panel with some information on RichText panels along with a click-able link to the RichText page.","code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(250, 150)\nTextFrame:Center()\nTextFrame:SetTitle(\"RichText\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- First segment\nrichtext:InsertColorChange(255, 255, 255, 255)\nrichtext:AppendText(\"This is a Rich Text panel — a panel used in Source MP's default chat box and developer console.\\n\\nSee the \")\n\n-- Second segment\nrichtext:InsertColorChange(192, 192, 255, 255)\nrichtext:InsertClickableTextStart(\"OpenWiki\")\t-- Make incoming text fire the \"OpenWiki\" value when clicked\nrichtext:AppendText(\"Garry's Mod Wiki\")\nrichtext:InsertClickableTextEnd()\t-- End clickable text here\n\n-- Third segment\nrichtext:InsertColorChange(255, 255, 255, 255)\nrichtext:AppendText(\" for information on how to use a Rich Text panel.\")\n\n-- Background color\nfunction richtext:PerformLayout() self:SetBGColor(Color(32, 32, 46)) end\n\n-- Handle any commands we get from the panel\nfunction richtext:ActionSignal(signalName, signalValue)\n\n\t-- Some clickable text was clicked\n\tif(signalName == \"TextClicked\") then\n\t\n\t\t-- Open the wiki\n\t\tif(signalValue == \"OpenWiki\") then\n\t\t\n\t\t\tgui.OpenURL(\"/Category:RichText\")\n\t\n\t\tend\n\t\n\tend\n\nend","output":{"image":{"src":"RichText_InsertClickableText_example.png"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"InsertClickableTextStart","parent":"Panel","type":"classfunc","description":{"text":"Starts the insertion of clickable text for a RichText element. Any text appended with Panel:AppendText between this call and Panel:InsertClickableTextEnd will become clickable text.\n\nThe hook PANEL:ActionSignal is called when the text is clicked, with \"TextClicked\" as the signal name and `signalValue` as the signal value.","note":"The clickable text is a separate Derma panel which will not inherit the current font from the `RichText`."},"realm":"Client","args":{"arg":{"text":"The text passed as the action signal's value.","name":"signalValue","type":"string"}}},"example":{"description":"Creates a panel with some information on Rich Text panels along with a click-able link to the RichText page.","code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(250, 150)\nTextFrame:Center()\nTextFrame:SetTitle(\"RichText\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock( FILL )\n\n-- First segment\nrichtext:InsertColorChange(255, 255, 255, 255)\nrichtext:AppendText(\"This is a Rich Text panel — a panel used in Source MP's default chat box and developer console.\\n\\nSee the \")\n\n-- Second segment\nrichtext:InsertColorChange(192, 192, 255, 255)\nrichtext:InsertClickableTextStart(\"OpenWiki\")\t-- Make incoming text fire the \"OpenWiki\" value when clicked\nrichtext:AppendText(\"Garry's Mod Wiki\")\nrichtext:InsertClickableTextEnd()\t-- End clickable text here\n\n-- Third segment\nrichtext:InsertColorChange(255, 255, 255, 255)\nrichtext:AppendText(\" for information on how to use a Rich Text panel.\")\n\n-- Background color\nfunction richtext:PerformLayout() self:SetBGColor(Color(32, 32, 46)) end\n\n-- Handle any commands we get from the panel\nfunction richtext:ActionSignal(signalName, signalValue)\n\n\t-- Some clickable text was clicked\n\tif ( signalName == \"TextClicked\" ) then\n\t\n\t\t-- Open the wiki\n\t\tif ( signalValue == \"OpenWiki\" ) then\n\t\t\n\t\t\tgui.OpenURL( \"https://wiki.facepunch.com/gmod/Panel:InsertClickableTextStart\" ) \n\t\t\n\t\tend\n\t\n\tend\n\nend","output":{"image":{"src":"RichText_InsertClickableText_example.png"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"InsertColorChange","parent":"Panel","type":"classfunc","description":"Inserts a color change in a RichText element, which affects the color of all text added with Panel:AppendText until another color change is applied.","realm":"Client","args":{"arg":[{"text":"The red value `(0 - 255)`.","name":"r","type":"number"},{"text":"The green value `(0 - 255)`.","name":"g","type":"number"},{"text":"The blue value `(0 - 255)`.","name":"b","type":"number"},{"text":"The alpha value `(0 - 255)`.","name":"a","type":"number"}]}},"example":[{"description":"Creates a RichText panel with color coding on certain segments of text.","code":"-- Create a window frame\nTextFrame = vgui.Create( \"DFrame\" )\nTextFrame:SetSize( 200, 200 )\nTextFrame:Center()\nTextFrame:SetTitle( \"Colored text\" )\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create( \"RichText\", TextFrame )\nrichtext:Dock( FILL )\nrichtext:SetVerticalScrollbarEnabled( false )\n\n-- Text blocks\nrichtext:InsertColorChange( 255, 255, 192, 255 )\nrichtext:AppendText( \"This is an example of \" )\n\nrichtext:InsertColorChange( 0, 255, 0, 255 )\nrichtext:AppendText( \"color coding \" )\n\nrichtext:InsertColorChange( 255, 255, 192, 255 )\nrichtext:AppendText( \"different segments of text throughout a \" )\n\nrichtext:InsertColorChange( 255, 200, 0, 255 )\nrichtext:AppendText( \"Rich Text panel.\\n\\n\" )\n\nrichtext:InsertColorChange(64, 0, 255, 255 )\nrichtext:AppendText( \"Here is another line of text shown in the color \")\n\nrichtext:InsertColorChange( 128, 0, 255, 255 )\nrichtext:AppendText( \"purple.\" )\n\n-- When the panel is ready for layout, apply font and background color\nfunction richtext:PerformLayout()\n\tself:SetFontInternal( \"Trebuchet18\" )\n\tself:SetBGColor( Color( 0, 16, 32 ) )\nend","output":{"image":{"src":"RichText_InsertColorChange_example1.png"}}},{"description":"Word by word coloring using string.Explode and random colors.","code":"-- Create a window frame\nlocal TextFrame = vgui.Create( \"DFrame\" )\nTextFrame:SetSize( 300, 200 )\nTextFrame:Center()\nTextFrame:SetTitle( \"Randomly Colored Words\" )\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create( \"RichText\", TextFrame )\nrichtext:Dock( FILL )\nrichtext:SetVerticalScrollbarEnabled( false )\n\nlocal txt = {\n\t\"Here's a fun example involving word by word text coloring.\",\n\t\"Each word is separated by a space, colored, and appended to the Rich Text panel individually.\",\n\t\"The colors are randomly generated shades of red, orange, yellow, and pink.\"\n}\n\nlocal txt_tbl = string.Explode( \" \", txt, false )\n\nfor _, word in ipairs( txt_tbl ) do\n\trichtext:InsertColorChange( 255, math.random( 0, 255 ), math.random( 0, 255 ), 255 )\n\trichtext:AppendText( word .. \" \" )\nend\n\nfunction richtext:PerformLayout()\n\tself:SetFontInternal( \"GModNotify\" )\n\tself:SetBGColor( Color( 32, 16, 0 ) )\nend","output":{"image":{"src":"RichText_InsertColorChange_example2.png"}}}],"realms":["Client"],"type":"Function"},
{"function":{"name":"InvalidateLayout","parent":"Panel","type":"classfunc","description":{"text":"Causes the panel to re-layout in the next frame. During the layout process  PANEL:PerformLayout will be called on the target panel.\n\nYou should avoid calling this function every frame.","bug":{"text":"Using this on a panel after clicking on a docked element will cause docked elements to reorient themselves incorrectly. This can be fixed by assigning a unique Panel:SetZPos to each docked element.","issue":"2574"}},"realm":"Client","args":{"arg":{"text":"If true the panel will re-layout instantly and not wait for the next frame.","name":"layoutNow","type":"boolean","default":"false"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"InvalidateChildren","parent":"Panel","type":"classfunc","description":"Invalidates the layout of this panel object and all its children. This will cause these objects to re-layout immediately, calling PANEL:PerformLayout. If you want to perform the layout in the next frame, you will have loop manually through all children, and call Panel:InvalidateLayout on each.","realm":"Client","args":{"arg":{"text":"If `true`, the method will recursively invalidate the layout of all children. Otherwise, only immediate children are affected.","name":"recursive","type":"boolean","default":"false"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"InsertFade","parent":"Panel","type":"classfunc","description":"Begins a text fade for a RichText element where the last appended text segment is fully faded out after a specific amount of time, at a specific speed.\n\nThe alpha of the text at any given time is determined by the text's base alpha * ((`sustain` - Global.CurTime) / `length`) where Global.CurTime is added to `sustain` when this method is called.","realm":"Client","args":{"arg":[{"text":"The number of seconds the text remains visible.","name":"sustain","type":"number"},{"text":"The number of seconds it takes the text to fade out.\n\nIf set **lower** than `sustain`, the text will not begin fading out until (`sustain` - `length`) seconds have passed.\n\nIf set **higher** than `sustain`, the text will begin fading out immediately at a fraction of the base alpha.\n\nIf set to **-1**, the text doesn't fade out.","name":"length","type":"number"}]}},"example":[{"description":"Creates a Rich Text panel that sustains visibility for 6 seconds with a 2 second long fade-out.","code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(200, 200)\nTextFrame:Center()\nTextFrame:SetTitle(\"Fading Text\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- Sample text\nrichtext:SetText(\"This is an example of a Rich Text panel using a fade-out with:\\n\\n6 seconds of sustain\\n\\n2 second fade-out length\")\n\t\n-- When the panel is ready for layout, begin the fade\nfunction richtext:PerformLayout()\n\t\n\tself:SetFontInternal(\"Trebuchet18\")\n\tself:SetBGColor(Color(64, 64, 92))\n\t\n\t-- Wait 6 seconds, then fade out in 2 seconds\n\tself:InsertFade(6, 2)\n\t\nend","output":{"text":"Some identical example outputs are shown below, only with different `length` values swapped in.","image":[{"src":"RichText_InsertFade_output1.gif"},{"src":"RichText_InsertFade_output2.gif"},{"src":"RichText_InsertFade_output3.gif"}]}},{"description":"Create a Rich Text panel where Dr. Kleiner reads a fading message in sync with text.","code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(350, 100)\nTextFrame:Center()\nTextFrame:SetTitle(\"Kleiner says:\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\t\n\n-- Red text\nrichtext:InsertColorChange(200, 60, 32, 255)\nrichtext:SetVerticalScrollbarEnabled(false)\n\t\nlocal words = {\"There's\", \"only\", \"one\", \"hedy...\"}\nlocal delay = 0\n\n-- Display each word in half second interval\nfor w, txt in pairs(words) do\n\n\tif(w == 1) then delay = 0.2\n\telse delay = (w-1)*0.45 end\n\n\ttimer.Simple(delay, function()\n\t\n\t\trichtext:AppendText(txt..\" \")\n\t\trichtext:InsertFade(2, 1)\t-- Sustain for 2 seconds while fading out after 1 second\n\t\t\n\t\trichtext:SetBGColor(Color(0, 0, 0))\n\t\trichtext:SetFontInternal(\"DermaLarge\")\n\t\n\tend)\n\nend\n\n-- Kleiner read along\nLocalPlayer():EmitSound(\"vo/k_lab2/kl_onehedy.wav\")","output":{"image":{"src":"RichText_InsertFade_example2.gif"}}}],"realms":["Client"],"type":"Function"},
{"function":{"name":"InvalidateParent","parent":"Panel","type":"classfunc","description":{"text":"Calls Panel:InvalidateLayout on the panel's . This function will silently fail if the panel has no parent.\n\nThis will cause the parent panel to re-layout, calling PANEL:PerformLayout.\n\nInternally sets `LayingOutParent` to `true` on this panel, and will silently fail if it is already set.","page":",parentPanel:GetParent"},"realm":"Client","args":{"arg":{"text":"If `true`, the re-layout will occur immediately, otherwise it will be performed in the next frame.","name":"layoutNow","type":"boolean","default":"false"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsDragging","parent":"Panel","type":"classfunc","description":"Returns whether this panel is currently being dragged or not.","realm":"Client","file":{"text":"lua/includes/extensions/client/panel/dragdrop.lua","line":"363"},"rets":{"ret":{"text":"Whether this panel is currently being dragged or not.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsChildHovered","parent":"Panel","type":"classfunc","description":"Determines whether the mouse cursor is hovered over one of this panel object's children. This is a reverse process using vgui.GetHoveredPanel, and looks upward to find the parent.","realm":"Client","args":{"arg":{"text":"Set to true to check only the immediate children of given panel ( first level )","name":"immediate","type":"boolean","default":"false"}},"rets":{"ret":{"text":"Whether or not one of this panel object's children is being hovered over.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsDraggable","parent":"Panel","type":"classfunc","description":"Returns whether this panel is draggable ( if user is able to drag it ) or not.","realm":"Client","file":{"text":"lua/includes/extensions/client/panel/dragdrop.lua","line":"357"},"rets":{"ret":{"text":"Whether this panel is draggable ( if user is able to drag it ) or not.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsEnabled","parent":"Panel","type":"classfunc","description":"Returns whether the the panel is enabled or disabled.\n\nSee Panel:SetEnabled for a function that makes the panel enabled or disabled.","realm":"Client","rets":{"ret":{"text":"Whether the panel is enabled or disabled.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsHovered","parent":"Panel","type":"classfunc","description":"Returns whether the mouse cursor is hovering over this panel or not\n\nUses vgui.GetHoveredPanel internally.\n\nRequires Panel:SetMouseInputEnabled to be set to true.","realm":"Client","rets":{"ret":{"text":"true if the panel is hovered","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsLoading","parent":"Panel","type":"classfunc","description":{"text":"Determines whether or not a HTML or DHTML element is currently loading a page.","note":["Before calling Panel:SetHTML or DHTML:OpenURL, the result seems to be `false` with the Awesomium web renderer and `true` for the Chromium web renderer. This difference can be used to determine the available HTML5 capabilities.","On Awesomium, the result remains `true` until the root document is loaded and when in-page content is loading (when adding pictures, frames, etc.). During this state, the HTML texture is not refreshed and the panel is not painted (it becomes invisible).\n\nOn Chromium, the value is only `true` when the root document is not ready. The rendering is not suspended when in-page elements are loading."]},"realm":"Client","rets":{"ret":{"text":"Whether or not the (D)HTML object is loading.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsKeyboardInputEnabled","parent":"Panel","type":"classfunc","description":"Returns true if the panel can receive keyboard input.","realm":"Client","rets":{"ret":{"text":"keyboardInputEnabled","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsMarkedForDeletion","parent":"Panel","type":"classfunc","description":"Returns if the panel is going to be deleted in the next frame.","realm":"Client","rets":{"ret":{"text":"markedForDeletion","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsMouseInputEnabled","parent":"Panel","type":"classfunc","description":"Returns true if the panel can receive mouse input.","realm":"Client","rets":{"ret":{"text":"mouseInputEnabled","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsOurChild","parent":"Panel","type":"classfunc","description":"Returns whether the panel contains the given panel, recursively.","realm":"Client","args":{"arg":{"name":"childPanel","type":"Panel"}},"rets":{"ret":{"text":"True if the panel contains childPanel.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsModal","parent":"Panel","type":"classfunc","description":"Returns whether the panel was made modal or not. See Panel:DoModal.","realm":"Client","added":"2021.01.27","rets":{"ret":{"text":"True if the panel is modal.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsPopup","parent":"Panel","type":"classfunc","description":"Returns if the panel was made popup or not. See Panel:MakePopup","realm":"Client","added":"2021.01.27","rets":{"ret":{"text":"`true` if the panel was made popup.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsSelectable","parent":"Panel","type":"classfunc","description":{"text":"Determines if the panel object is selectable (like icons in the Spawn Menu, holding ). This is set with Panel:SetSelectable.","key":"Shift"},"realm":"Client","rets":{"ret":{"text":"Whether the panel is selectable or not.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsSelected","parent":"Panel","type":"classfunc","description":{"text":"Returns if the panel object is selected (like icons in the Spawn Menu, holding ). This can be set in Lua using Panel:SetSelected.","key":"Shift"},"realm":"Client","rets":{"ret":{"text":"Whether the panel object is selected or not. Always returns false if the object is not selectable. This can be modified using Panel:SetSelectable.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsSelectionCanvas","parent":"Panel","type":"classfunc","description":"Determines if the panel object is a selection canvas or not. This is set with Panel:SetSelectionCanvas.","realm":"Client","rets":{"ret":{"text":"The value (if any) set by Panel:SetSelectionCanvas.","name":"","type":"any"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsValid","parent":"Panel","type":"classfunc","description":"Returns if the panel is valid and not marked for deletion.","realm":"Client","rets":{"ret":{"text":"True if the object is valid.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsVisible","parent":"Panel","type":"classfunc","description":"Returns if the panel is visible. This will **NOT** take into account visibility of the parent.","realm":"Client","rets":{"ret":{"text":"`true` if the panel ls visible, `false` otherwise.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsWorldClicker","parent":"Panel","type":"classfunc","description":"Returns if a panel allows world clicking set by Panel:SetWorldClicker.","realm":"Client","rets":{"ret":{"text":"If the panel allows world clicking.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"KillFocus","parent":"Panel","type":"classfunc","description":"Remove the focus from the panel.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"LoadControlsFromString","parent":"Panel","type":"classfunc","description":{"text":"Loads controls(positions, etc) from given data. This is what the default options menu uses.","deprecated":"","internal":""},"realm":"Client","args":{"arg":{"text":"The data to load controls from. Format unknown.","name":"data","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"LerpPositions","parent":"Panel","type":"classfunc","description":"Redefines the panel object's Panel:SetPos method to operate using frame-by-frame linear interpolation (Global.Lerp). When the panel's position is changed, it will move to the target position at the speed defined. You can undo this with Panel:DisableLerp.\n\nUnlike the other panel animation functions, such as Panel:MoveTo, this animation method will not operate whilst the game is paused. This is because it relies on Global.FrameTime.","realm":"Client","file":{"text":"lua/includes/extensions/client/panel/animation.lua","line":"326-L341"},"args":{"arg":[{"text":"The speed at which to move the panel. This is affected by the value of `easeOut`. Recommended values are:\n* **0.1 - 10** when `easeOut` is `false`.\n* **0.1 - 1** when `easeOut` is `true`.","name":"speed","type":"number"},{"text":"This causes the panel object to 'jump' at the target, slowing as it approaches. This affects the `speed` value significantly, see above.","name":"easeOut","type":"boolean"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"LoadGWENFile","parent":"Panel","type":"classfunc","description":"Loads a .gwen file (created by GWEN Designer) and calls Panel:LoadGWENString with the contents of the loaded file.\n\nUsed to load panel controls from a file.","realm":"Client","args":{"arg":[{"text":"The file to open. The path is relative to garrysmod/garrysmod/.","name":"filename","type":"string"},{"text":"The path used to look up the file.\n\n* \"GAME\" Structured like base folder (garrysmod/), searches all the mounted content (main folder, addons, mounted games etc)\n* \"LUA\" or \"lsv\" - All Lua folders (lua/) including gamesmodes and addons\n* \"DATA\" Data folder (garrysmod/data)\n* \"MOD\" Strictly the game folder (garrysmod/), ignores mounting.","name":"path","type":"string","default":"GAME"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"LoadControlsFromFile","parent":"Panel","type":"classfunc","description":{"text":"Similar to Panel:LoadControlsFromString but loads controls from a file.","deprecated":"","internal":""},"realm":"Client","args":{"arg":{"text":"The path to load the controls from.","name":"path","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"LoadGWENString","parent":"Panel","type":"classfunc","description":"Loads controls for the panel from a JSON string.","realm":"Client","args":{"arg":{"text":"JSON string containing information about controls to create.","name":"str","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"LocalCursorPos","parent":"Panel","type":"classfunc","description":"Returns the cursor position local to the position of the panel (usually the upper-left corner).","realm":"Client","rets":{"ret":[{"text":"The x coordinate","name":"","type":"number"},{"text":"The y coordinate","name":"","type":"number"}]}},"example":{"description":"Create and center a label panel and update its text with the local cursor position.","code":"TestLabel = vgui.Create(\"DLabel\")\nTestLabel:SetSize(100, 20)\nTestLabel:Center()\nTestLabel:SetPaintBackgroundEnabled(true)\nTestLabel:SetColor(Color(255, 0, 0))\n\nlocal x, y = 0, 0\n\nfunction TestLabel:PerformLayout()\n\n\tx, y = self:LocalCursorPos()\n\n\tself:SetText(\" X: \"..x..\" , Y: \"..y)\n\t\nend","output":{"image":{"src":"Panel_LocalCursorPos_example1.gif"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"LoadTGAImage","parent":"Panel","type":"classfunc","description":"Sets a new image to be loaded by a TGAImage.","realm":"Client","args":{"arg":[{"text":"The file path.","name":"imageName","type":"string"},{"text":"The PATH to search in. See File Search Paths.\n\nThis isn't used internally.","name":"strPath","type":"string"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"LocalToScreen","parent":"Panel","type":"classfunc","description":{"text":"Gets the absolute screen position of the position specified relative to the panel.\n\nSee also Panel:ScreenToLocal.","warning":"This function uses a cached value for the screen position of the panel, computed at the end of the last VGUI Think/Layout pass, so inaccurate results may be returned if the panel or any of its ancestors have been re-positioned outside of PANEL:Think or PANEL:PerformLayout within the last frame.","note":"If the panel uses Panel:Dock, this function will return 0, 0 when the panel was created. The position will be updated in the next frame."},"realm":"Client","args":{"arg":[{"text":"The X coordinate of the position on the panel to translate.","name":"posX","type":"number"},{"text":"The Y coordinate of the position on the panel to translate.","name":"posY","type":"number"}]},"rets":{"ret":[{"text":"The X coordinate relative to the screen.","name":"","type":"number"},{"text":"The Y coordinate relative to the screen.","name":"","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"MakePopup","parent":"Panel","type":"classfunc","description":{"text":"Focuses the panel and enables it to receive input.\n\nThis automatically calls Panel:SetMouseInputEnabled and Panel:SetKeyboardInputEnabled and sets them to `true`.","note":"Panels derived from Panel will not work properly with this function. Due to this, any children will not be intractable with keyboard. Derive from EditablePanel instead.\n\nFor non gui related mouse focus, you can use gui.EnableScreenClicker."},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"MouseCapture","parent":"Panel","type":"classfunc","description":"Allows the panel to receive mouse input even if the mouse cursor is outside the bounds of the panel.","realm":"Client","args":{"arg":{"text":"Set to true to enable, set to false to disable.","name":"doCapture","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"MoveAbove","parent":"Panel","type":"classfunc","description":"Places the panel above the passed panel with the specified offset.","realm":"Client","args":{"arg":[{"text":"Panel to position relatively to.","name":"panel","type":"Panel"},{"text":"The align offset.","name":"offset","type":"number","default":"0"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"MoveBy","parent":"Panel","type":"classfunc","description":"Moves the panel by the specified coordinates using animation.","realm":"Client","args":{"arg":[{"text":"The number of pixels to move by in the horizontal (x) direction.","name":"moveX","type":"number"},{"text":"The number of pixels to move by in the vertical (y) direction.","name":"moveY","type":"number"},{"text":"The time (in seconds) in which to perform the animation.","name":"time","type":"number"},{"text":"The delay (in seconds) before the animation begins.","name":"delay","type":"number","default":"0"},{"text":"The easing of the start and/or end speed of the animation. See Panel:NewAnimation for how this works.","name":"ease","type":"number","default":"-1"},{"text":"The function to be called once the animation is complete. Arguments are:\n* table animData - The AnimationData that was used.\n* Panel pnl - The panel object that was moved.","name":"callback","type":"function","default":"nil"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"MoveLeftOf","parent":"Panel","type":"classfunc","description":"Places the panel left to the passed panel with the specified offset.","realm":"Client","args":{"arg":[{"text":"Panel to position relatively to.","name":"panel","type":"Panel"},{"text":"The align offset.","name":"offset","type":"number","default":"0"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"MoveRightOf","parent":"Panel","type":"classfunc","description":"Places the panel right to the passed panel with the specified offset.","realm":"Client","args":{"arg":[{"text":"Panel to position relatively to.","name":"panel","type":"Panel"},{"text":"The align offset.","name":"offset","type":"number","default":"0"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"MoveBelow","parent":"Panel","type":"classfunc","description":"Places the panel below the passed panel with the specified offset.","realm":"Client","args":{"arg":[{"text":"Panel to position relatively to.","name":"panel","type":"Panel"},{"text":"The align offset.","name":"offset","type":"number","default":"0"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"MoveTo","parent":"Panel","type":"classfunc","description":{"text":"Moves the panel to the specified position using animation.","note":"Setting the ease argument to 0 will result in the animation happening instantly, this applies to all MoveTo/SizeTo functions"},"realm":"Client","args":{"arg":[{"text":"The target x coordinate of the panel.","name":"posX","type":"number"},{"text":"The target y coordinate of the panel.","name":"posY","type":"number"},{"text":"The time to perform the animation within.","name":"time","type":"number"},{"text":"The delay before the animation starts.","name":"delay","type":"number","default":"0"},{"text":"The easing of the start and/or end speed of the animation. See Panel:NewAnimation for how this works.","name":"ease","type":"number","default":"-1"},{"text":"The function to be called once the animation finishes. Arguments are:\n* table animData - The Structures/AnimationData that was used.\n* Panel pnl - The panel object that was moved.","name":"callback","type":"function"}]}},"example":{"description":"Move panel to center","code":"local frame = vgui.Create(\"DFrame\")\nframe:SetSize(ScrW() / 4, ScrH() / 4)\nframe:SetPos(ScrW() / 4, ScrH() / 2)\nframe:SetTitle(\"MoveTo Example\")\n\nlocal btn = vgui.Create(\"DButton\", frame)\nbtn:SetSize(frame:GetWide() / 2, frame:GetTall() / 3)\nbtn:Center()\nbtn:SetText(\"Move !\")\nbtn.DoClick = function(self)\n\tframe:MoveTo(ScrW() / 2 - frame:GetWide() / 2, ScrH() / 2 - frame:GetTall() / 2, 1, 0, -1, function()\n\t\tself:SetText(\"Yeah !\")\n\tend)\nend"},"realms":["Client"],"type":"Function"},
{"function":{"name":"MoveToBack","parent":"Panel","type":"classfunc","description":"Moves the panel object behind all other panels on screen. If the panel has been made a pop-up with Panel:MakePopup, it will still draw in front of any panels that haven't.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"MoveToAfter","parent":"Panel","type":"classfunc","description":"Moves this panel object in front of the specified sibling (child of the same parent) in the render order, and shuffles up the Z-positions of siblings now behind.","realm":"Client","args":{"arg":{"text":"The panel to move this one in front of. Must be a child of the same parent panel.","name":"siblingPanel","type":"Panel"}},"rets":{"ret":{"text":"`false` if the passed panel is not a sibling, otherwise `nil`.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"MoveToBefore","parent":"Panel","type":"classfunc","description":"Moves this panel object behind the specified sibling (child of the same parent) in the render order, and shuffles up the Panel:SetZPos of siblings now in front.","realm":"Client","args":{"arg":{"text":"The panel to move this one behind. Must be a child of the same parent panel.","name":"siblingPanel","type":"Panel"}},"rets":{"ret":{"text":"`false` if the passed panel is not a sibling, otherwise `nil`.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"MoveToFront","parent":"Panel","type":"classfunc","description":"Moves the panel in front of all other panels on screen. Unless the panel has been made a pop-up using Panel:MakePopup, it will still draw behind any that have.","realm":"Client"},"example":{"description":"Creates two frame panels where one acts normal and the other acts as a persistent warning window that will move in front of all other panels until it is closed.","code":"-- Regular message\nlocal popup1 = vgui.Create(\"DFrame\")\npopup1:SetSize(400, 300)\npopup1:Center()\npopup1:MakePopup()\npopup1:SetTitle(\"This is a normal window.\")\n\n-- Warning message\nlocal popup2 = vgui.Create(\"DFrame\")\npopup2:SetSize(300, 100)\npopup2:Center()\npopup2:MakePopup()\npopup2:SetTitle(\"Warning!\")\n\n-- Warning label\nlocal warning = vgui.Create(\"DLabel\", popup2)\nwarning:SetSize(280, 80)\nwarning:Center()\nwarning:SetText(\"The server will be shutting down in 5 minutes!\")\nwarning:SetFont(\"GModNotify\")\nwarning:SetWrap(true)\n\n-- Move the warning message to front constantly\nfunction popup2:Think()\n\tself:MoveToFront()\nend","output":{"image":{"src":"Panel_MoveToFront_example1.gif"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"NewObject","parent":"Panel","type":"classfunc","description":{"internal":""},"realm":"Client","args":{"arg":{"name":"objectName","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"NewObjectCallback","parent":"Panel","type":"classfunc","description":{"internal":""},"realm":"Client","args":{"arg":[{"name":"objectName","type":"string"},{"name":"callbackName","type":"string"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"NewAnimation","parent":"Panel","type":"classfunc","description":"Creates a new animation for the panel object.\n\nMethods that use this function:\n* Panel:MoveTo\n* Panel:SizeTo\n* Panel:SlideUp\n* Panel:SlideDown\n* Panel:ColorTo\n* Panel:AlphaTo\n* Panel:MoveBy\n* Panel:LerpPositions","realm":"Client","file":{"text":"lua/includes/extensions/client/panel/animation.lua","line":"100-L135"},"args":{"arg":[{"text":"The length of the animation in seconds.","name":"length","type":"number"},{"text":"The delay before the animation starts.","name":"delay","type":"number","default":"0"},{"text":"The power/index to use for easing.\n* Positive values greater than 1 will ease in; the higher the number, the sharper the curve's gradient (less linear).\n* A value of 1 removes all easing.\n* Positive values between 0 and 1 ease out; values closer to 0 increase the curve's gradient (less linear).\n* A value of 0 will break the animation and should be avoided.\n* Any value less than zero will ease in/out; the value has no effect on the gradient.","name":"ease","type":"number","default":"-1"},{"text":"The function to be called when the animation ends. Arguments passed are:\n* table animTable - The Structures/AnimationData that was used.\n* Panel tgtPanel - The panel object that was animated.","name":"callback","type":"function","default":"nil"}]},"rets":{"ret":{"text":"Partially filled Structures/AnimationData with members: \n* number EndTime - Equal to `length` and `delay` arguments added together, plus either the Global.SysTime if there is no other animation queued or the end time of the last animation in the queue.\n* number StartTime - Equal to the `delay` argument, plus either the Global.SysTime if there is no other animation queued or the end time of the last animation in the queue.\n* number Ease - Equal to the `ease` argument.\n* function OnEnd - Equal to the `callback` argument.","name":"","type":"table"}}},"example":{"description":"Example on how to use this function, makes a button go around in a circle in a DFrame.","code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetSize( 500, 500 )\nframe:Center()\nframe:MakePopup()\n\nlocal butt = frame:Add( \"DButton\" )\nbutt:SetPos( 5, 30 )\nbutt:SetSize( 100, 40 )\n\nfunction butt:doAnim()\n\tlocal anim = self:NewAnimation( 10, 0, 1, function( anim, pnl )\n\t\tself:doAnim()\n\tend )\n\n\tanim.Think = function( anim, pnl, fraction )\n\t\tlocal radius = 200\n\t\tpnl:SetPos( 250 + math.sin( Lerp( fraction, -math.pi, math.pi ) ) * radius - pnl:GetWide() / 2,\n\t\t\t\t\t250 + math.cos( Lerp( fraction, -math.pi, math.pi ) ) * radius - pnl:GetTall() / 2 )\n\n\t\tpnl:SetText( \"Frac: \" .. fraction .. \"\\nTime: \" .. ( SysTime() - anim.StartTime ) )\n\tend\nend\nbutt:doAnim()"},"realms":["Client"],"type":"Function"},
{"function":{"name":"NumSelectedChildren","parent":"Panel","type":"classfunc","description":"Returns the number of children of the panel object that are selected. This is equivalent to calling Panel:IsSelected on all child objects and counting the number of returns that are `true`.","realm":"Client","rets":{"ret":{"text":"The number of child objects that are currently selected. This does not include the parent object you are calling the method from.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"NoClipping","parent":"Panel","type":"classfunc","description":"Sets whether this panel's drawings should be clipped within the parent panel's bounds.\n\nSee also Global.DisableClipping.","realm":"Client","args":{"arg":{"text":"Whether to clip or not.","name":"clip","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"PaintAt","parent":"Panel","type":"classfunc","description":"Paints a ghost copy of the panel at the given position.","realm":"Client","args":{"arg":[{"text":"The x coordinate to draw the panel from.","name":"posX","type":"number"},{"text":"The y coordinate to draw the panel from.","name":"posY","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"PaintManual","parent":"Panel","type":"classfunc","description":"Paints the panel at its current position. To use this you must call Panel:SetPaintedManually(true).","realm":"Client"},"example":{"description":"Paints a simple panel inside a 3D rendering context.","code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetTitle( \"PaintManual Test\" )\nframe:SetSize( 500, 500 )\nframe:SetPaintedManually( true )\n\nhook.Add( \"PostDrawTranslucentRenderables\", \"PaintManual Test\", function()\n\tif IsValid(frame) then\n\t\tlocal eyePos = Entity(1):EyePos()\n\t\tlocal forward = Entity(1):GetForward()\n\t\tlocal forwardAngle = forward:Angle()\n\n\t\tcam.Start3D2D(eyePos + (forward * 250), Angle(0, forwardAngle.y - 90, forwardAngle.r + 90), 0.2)\n\t\t\tframe:PaintManual()\n\t\tcam.End3D2D()\n\tend\nend )","output":{"text":"The panel will be drawn facing the player located on the player's crosshair.","image":{"src":"panel_paintmanual_example1_output.png","alt":"left"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"PositionLabel","parent":"Panel","type":"classfunc","description":"Sets the width and position of a DLabel and places the passed panel object directly to the right of it. Returns the `y` value of the bottom of the tallest object. The panel on which this method is run is not relevant; only the passed objects are affected.","realm":"Client","args":{"arg":[{"text":"The width to set the label to.","name":"lblWidth","type":"number"},{"text":"The horizontal (x) position at which to place the label.","name":"x","type":"number"},{"text":"The vertical (y) position at which to place the label.","name":"y","type":"number"},{"text":"The label to resize and position.","name":"lbl","type":"Panel"},{"text":"The panel object to place to the right of the label.","name":"panelObj","type":"Panel"}]},"rets":{"ret":{"text":"The distance from the top of the parent panel to the bottom of the tallest object (the `y` position plus the height of the label or passed panel, depending on which is tallest).","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ParentToHUD","parent":"Panel","type":"classfunc","description":"Parents the panel to the HUD.\nMakes it invisible on the escape-menu and disables controls.","realm":"Client"},"example":{"code":"Panel:ParentToHUD()"},"realms":["Client"],"type":"Function"},
{"function":{"name":"PostMessage","parent":"Panel","type":"classfunc","description":{"text":"Sends a command to the panel.","deprecated":"Only used in deprecated Derma controls."},"realm":"Client","args":{"arg":[{"text":"The name of the message.","name":"messageName","type":"string"},{"text":"The type of the variable to post.","name":"valueType","type":"string"},{"text":"The value to post.","name":"value","type":"string"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"RebuildSpawnIcon","parent":"Panel","type":"classfunc","description":"Causes a SpawnIcon to rebuild its model image.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"Prepare","parent":"Panel","type":"classfunc","description":{"text":"Installs Lua defined functions into the panel.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"Queue","parent":"Panel","type":"classfunc","description":"Enables the queue for panel animations. If enabled, the next new animation will begin after all current animations have ended. This must be called before Panel:NewAnimation to work, and only applies to the next new animation. If you want to queue many, you must call this before each.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"Refresh","parent":"Panel","type":"classfunc","description":"Refreshes the HTML panel's current page.","realm":"Client","args":{"arg":{"text":"If true, the refresh will ignore cached content similar to \"ctrl+f5\" in most browsers.","name":"ignoreCache","type":"boolean","default":"false"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Receiver","parent":"Panel","type":"classfunc","description":"Allows the panel to receive drag and drop events. Can be called multiple times with different names to receive multiple different draggable panel events.","realm":"Client","file":{"text":"lua/includes/extensions/client/panel/dragdrop.lua","line":"321"},"args":{"arg":[{"text":"Name of DnD panels to receive. This is set on the drag'n'drop-able panels via  Panel:Droppable","name":"name","type":"string"},{"text":"This function is called whenever a panel with valid name is hovering above and dropped on this panel. It has next arguments:\n* Panel pnl - The receiver panel\n* table tbl - A table of panels dropped onto receiver panel\n* boolean dropped - False if hovering over, true if dropped onto\n* number menuIndex - Index of clicked menu item from third argument of Panel:Receiver\n* number x - Cursor pos, relative to the receiver\n* number y - Cursor pos, relative to the receiver","name":"func","type":"function"},{"text":"A table of strings that will act as a menu if drag'n'drop was performed with a right click","name":"menu","type":"table"}]}},"example":{"description":"A very simple drag'n'drop example without using DDragBase.","code":"local function DoDrop( self, panels, bDoDrop, Command, x, y )\n\tif ( bDoDrop ) then\n\t\tfor k, v in pairs( panels ) do\n\t\t\tself:AddItem( v )\n\t\tend\n\tend\nend\n\nconcommand.Add( \"test2\", function()\n\n\tlocal frame = vgui.Create( \"DFrame\" )\n\tframe:SetSize( 500, 300 )\n\tframe:SetTitle( \"Frame\" )\n\tframe:MakePopup()\n\tframe:Center()\n\n\tlocal left = vgui.Create( \"DScrollPanel\", frame )\n\tleft:Dock( LEFT )\n\tleft:SetWidth( frame:GetWide() / 2 - 7 )\n\tleft:SetPaintBackground( true )\n\tleft:DockMargin( 0, 0, 4, 0 )\n\tleft:Receiver( \"myDNDname\", DoDrop ) -- Make the panel a receiver for drag and drop events\n\n\tlocal right = vgui.Create( \"DScrollPanel\", frame )\n\tright:Dock( FILL )\n\tright:SetPaintBackground( true )\n\tright:Receiver( \"myDNDname\", DoDrop )\n\n\tfor i = 1, 30 do\n\t\tlocal but = vgui.Create( \"DButton\" )\n\t\tbut:SetText( i )\n\t\tbut:SetSize( 36, 24 )\n\t\tbut:Dock( TOP )\n\t\tbut:Droppable( \"myDNDname\" ) -- make the panel be able to be drag'n'dropped onto other panels\n\t\tright:AddItem( but )\n\tend\n\nend )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"RebuildSpawnIconEx","parent":"Panel","type":"classfunc","description":{"text":"Re-renders a spawn icon with customized cam data.\n\nGlobal.PositionSpawnIcon can be used to easily calculate the necessary camera parameters.","note":"This function does **not** accept the standard Structures/CamData."},"realm":"Client","args":{"arg":{"text":"A four-membered table containing the information needed to re-render:\n* Vector cam_pos - The relative camera position the model is viewed from.\n* Angle cam_ang - The camera angle the model is viewed from.\n* number cam_fov - The camera's field of view (FOV).\n* Entity ent - The entity object of the model.\nSee the example below for how to retrieve these values.","name":"data","type":"table"}}},"example":{"description":"The `RenderIcon` method used by IconEditor. `SpawnIcon` is a SpawnIcon and `ModelPanel` is a DAdjustableModelPanel.","code":"function PANEL:RenderIcon()\n\t\n\tlocal ent = self.ModelPanel:GetEntity()\n\t\n\tlocal tab = {}\n\ttab.ent\t\t= ent\n\ttab.cam_pos = self.ModelPanel:GetCamPos()\n\ttab.cam_ang = self.ModelPanel:GetLookAng()\n\ttab.cam_fov = self.ModelPanel:GetFOV()\n\n\tself.SpawnIcon:RebuildSpawnIconEx( tab )\nend"},"realms":["Client"],"type":"Function"},
{"function":{"name":"Paste","parent":"Panel","type":"classfunc","description":{"text":"Only works for TextEntries.\n\nPastes the contents of the clipboard into the TextEntry.","warning":"Due to privacy concerns, this function has been disabled","note":"Tab characters will be dropped from the pasted text"},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"RequestFocus","parent":"Panel","type":"classfunc","description":"Attempts to obtain focus for this panel.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"Remove","parent":"Panel","type":"classfunc","description":"Marks a panel for deletion so it will be deleted on the next frame.\n\nThis will not mark child panels for deletion this frame, but they will be marked and deleted in the next frame.\n\nSee also Panel:IsMarkedForDeletion\n\nWill automatically call Panel:InvalidateParent.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"ResetAllFades","parent":"Panel","type":"classfunc","description":"Resets all text fades in a RichText element made with Panel:InsertFade.","realm":"Client","args":{"arg":[{"text":"True to reset fades, false otherwise.","name":"hold","type":"boolean"},{"text":"Any value equating to `true` will reset fades only on text segments that are completely faded out.","name":"expiredOnly","type":"boolean"},{"text":"The new sustain value of each faded text segment. Set to -1 to keep the old sustain value.","name":"newSustain","type":"number"}]}},"example":{"description":"Creates a RichText panel where two text segments slowly fade out and get reset to full alpha 5 seconds after being created.","code":"-- Window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(200, 100)\nTextFrame:Center()\nTextFrame:SetTitle(\"ResetAllFades\")\nTextFrame:MakePopup()\n\n-- Rich Text panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- Append text and start fading a few frames after creation (won't work otherwise)\ntimer.Simple(0.05, function()\n\n\trichtext:SetBGColor(Color(32, 32, 32))\n\trichtext:SetFontInternal(\"GModNotify\")\n\n\trichtext:AppendText(\"This is \")\n\trichtext:InsertFade(5, 2)\n\t\n\trichtext:AppendText(\"a test...\")\n\trichtext:InsertFade(5, 1)\n\t\nend)\n\n-- 5 seconds after creation, reset all the fades\ntimer.Simple(5, function()\n\n\trichtext:ResetAllFades(true, false, -1)\n\nend)","output":{"image":{"src":"RichText_ResetAllFades_example1.gif"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"RunJavascript","parent":"Panel","type":"classfunc","realm":"Client","description":{"text":"Runs/Executes a string as JavaScript code in a panel.","note":[{"text":"This function does **NOT** evaluate expression (i.e. allow you to pass variables from JavaScript (JS) to Lua context).Because a return value is nil/no value (a.k.a. void).If you wish to pass/return values from JS to Lua, you may want to use DHTML:AddFunction function to accomplish that job.","br":["",""]},"The Awesomium web renderer automatically delays the code execution if the document is not ready, but the Chromium web renderer does not!\n\nThis means that with Chromium, you cannot JavaScript run code immediatly after calling Panel:SetHTML or DHTML:OpenURL. You should wait for the events PANEL:OnDocumentReady or PANEL:OnFinishLoadingDocument to be triggered before proceeding, otherwise you may manipulate an empty / incomplete document."]},"args":{"arg":{"text":"Specify JavaScript code to be executed.","name":"js","type":"string"}}},"example":{"description":"Shows how to change [document.body.innerHTML](http://www.w3schools.com/jsref/prop_html_innerhtml.asp) property by calling this function on  panel.","code":"-- First we create a container, in this case it is a full-screen Derma Frame window.\nlocal dframe = vgui.Create( 'DFrame' )\ndframe:SetSize( ScrW(), ScrH() )\ndframe:SetTitle( \"Garry's Mod Wiki\" )\ndframe:Center()\ndframe:MakePopup() -- Enable keyboard and mouse interaction for DFrame panel.\n\n-- Create a new DHTML panel as a child of dframe, and dock-fill it.\nlocal dhtml = vgui.Create( 'DHTML', dframe )\ndhtml:Dock( FILL )\n-- Navigate to Garry's Mod wikipedia website.\ndhtml:OpenURL( 'https://wiki.garrysmod.com/index.php' )\n-- Run JavaScript code.\ndhtml:RunJavascript( [[document.body.innerHTML = 'HTML changed from Lua using JavaScript!';]] )\n\n-- This does not throw an error/exception, but instead returns nil/no value.\n-- That means you can't pass/return values from JavaScript back to Lua context using this function.\nlocal number = dhtml:Call( '22;' )\nprint( number )","output":"Inner HTML of document body in DHTML panel is now set to \"HTML changed from Lua using JavaScript!\"."},"realms":["Client"],"type":"Function"},
{"function":{"name":"SaveUndoState","parent":"Panel","type":"classfunc","description":"Saves the current state (caret position and the text inside) of a TextEntry as an undo state.\n\nSee also Panel:Undo.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SelectAll","parent":"Panel","type":"classfunc","description":"Selects all items within a panel or object. For text-based objects, selects all text.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"ScreenToLocal","parent":"Panel","type":"classfunc","description":{"text":"Translates global screen coordinate to coordinates relative to the panel.\n\nSee also Panel:LocalToScreen.","warning":"This function uses a cached value for the screen position of the panel, computed at the end of the last VGUI Think/Layout pass, so inaccurate results may be returned if the panel or any of its ancestors have been re-positioned outside of PANEL:Think or PANEL:PerformLayout within the last frame."},"realm":"Client","args":{"arg":[{"text":"The x coordinate of the screen position to be translated.","name":"screenX","type":"number"},{"text":"The y coordinate of the screed position be to translated.","name":"screenY","type":"number"}]},"rets":{"ret":[{"text":"Relativeposition X","name":"","type":"number"},{"text":"Relativeposition Y","name":"","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SelectAllText","parent":"Panel","type":"classfunc","description":"Selects all the text in a panel object. Will not select non-text items; for this, use Panel:SelectAll.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SelectNone","parent":"Panel","type":"classfunc","description":"Deselects all items in a panel object. For text-based objects, this will deselect all text.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SelectAllOnFocus","parent":"Panel","type":"classfunc","description":"If called on a text entry, clicking the text entry for the first time will automatically select all of the text ready to be copied by the user.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetAchievement","parent":"Panel","type":"classfunc","description":"Sets the achievement to be displayed by AchievementIcon.","realm":"Client","args":{"arg":{"text":"Achievement number ID","name":"id","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetActionFunction","parent":"Panel","type":"classfunc","description":{"text":"Used in Button to call a function when the button is clicked and in Slider when the value changes.","deprecated":"Does nothing at all."},"realm":"Client","args":{"arg":{"text":"Function to call when the Button is clicked or the Slider value is changed.\n\nArguments given are:\n* Panel self - The panel itself\n* string action - \"Command\" on button press, \"SliderMoved\" on slider move.\n* number val - The new value of the Slider. Will always equal 0 for buttons.\n* number zed - Always equals 0.","name":"func","type":"function"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetAllowNonAsciiCharacters","parent":"Panel","type":"classfunc","description":"Configures a text input to allow user to type characters that are not included in the US-ASCII (7-bit ASCII) character set.\n\nCharacters not included in US-ASCII are multi-byte characters in UTF-8. They can be accented characters, non-Latin characters and special characters.","realm":"Client","args":{"arg":{"text":"Set to true in order not to restrict input characters.","name":"allowed","type":"boolean"}}},"example":{"description":"Replaces the default vgui.Create() function to always allow non US-ASCII characters for text inputs.","code":"if vgui.CreateStdRestrict == nil then\n\tvgui.CreateStdRestrict = vgui.Create\nend\nfunction vgui.Create( classname, parent, name )\n\tlocal vgui_elt = vgui.CreateStdRestrict(classname, parent, name)\n\tif classname == \"DTextEntry\" or classname == \"RichText\" or classname == \"TextEntry\" then\n\t\tvgui_elt:SetAllowNonAsciiCharacters(true)\n\tend\n\treturn vgui_elt\nend"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetAutoDelete","parent":"Panel","type":"classfunc","description":"Sets whenever the panel should be removed if the parent was removed.","realm":"Client","args":{"arg":{"text":"Whenever to delete if the parent was removed or not.","name":"autoDelete","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetAnimationEnabled","parent":"Panel","type":"classfunc","description":"Enables or disables animations for the panel object by overriding the PANEL:AnimationThink hook to nil and back.","realm":"Client","args":{"arg":{"text":"Whether to enable or disable animations.","name":"enable","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetAlpha","parent":"Panel","type":"classfunc","description":"Sets the alpha multiplier for the panel","realm":"Client","args":{"arg":{"text":"The alpha value in the range of 0-255.","name":"alpha","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetBGColor","parent":"Panel","type":"classfunc","description":{"text":"Sets the background color of a panel such as a RichText, Label or DColorCube.\n\n\n\nFor DLabel elements, you must use Panel:SetPaintBackgroundEnabled( true ) before applying the color.\n\nThis will not work on setup of the panel - you should use this function in a hook like PANEL:ApplySchemeSettings or PANEL:PerformLayout.","note":"This doesn't apply to all VGUI elements and its function varies between them"},"realm":"Client","args":{"arg":[{"text":"The red channel of the color, or a Color. If you pass the latter, the following three arguments are ignored.","name":"r or color","type":"number"},{"text":"The green channel of the color.","name":"g","type":"number"},{"text":"The blue channel of the color.","name":"b","type":"number"},{"text":"The alpha channel of the color.","name":"a","type":"number"}]}},"example":{"description":"Creates a RichText panel that mimics a [blue screen of death](http://en.wikipedia.org/wiki/Blue_Screen_of_Death).","code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(300, 100)\nTextFrame:Center()\nTextFrame:SetTitle(\"Windows XP Blue Screen\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- Sample text\nrichtext:SetText(\"A problem has been detected and Windows has been shut down to prevent damage to your computer.\\n\\nMOTHERBOARD_FRIED\")\n\n-- When the panel is ready for layout, set the background color to blue\nfunction richtext:PerformLayout()\n\t\n\tself:SetBGColor(Color(0, 0, 255))\n\t\nend","output":{"image":{"src":"RichText_SetBGColor_example1.png"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetBGColorEx","parent":"Panel","type":"classfunc","description":{"text":"Sets the background color of the panel.","internal":""},"realm":"Client","args":{"arg":[{"text":"The red channel of the color.","name":"r","type":"number"},{"text":"The green channel of the color.","name":"g","type":"number"},{"text":"The blue channel of the color.","name":"b","type":"number"},{"text":"The alpha channel of the color.","name":"a","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetContentAlignment","parent":"Panel","type":"classfunc","description":"Sets the alignment of the contents.","realm":"Client","args":{"arg":{"text":"The direction of the content, based on the number pad.\n\n: **bottom-left** \n: **bottom-center** \n: **bottom-right** \n: **middle-left** \n: **center** \n: **middle-right** \n: **top-left** \n: **top-center** \n: **top-right**","name":"alignment","type":"number","key":["1","2","3","4","5","6","7","8","9"],"br":["","","","","","","","",""],"image":{"src":"DLabel_SetContentAlignment.gif"}}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetCommand","parent":"Panel","type":"classfunc","description":"Sets the action signal command that's fired when a Button is clicked. The hook PANEL:ActionSignal is called as the click response.\n\nThis has no effect on buttons unless it has had its `AddActionSignalTarget` method called (an internal function not available by default in Garry's Mod LUA).\n\nA better alternative is calling Panel:Command when a DButton is clicked.","realm":"Client"},"example":{"description":"Creates an engine-based Frame panel and changes the command that's fired when you click the white close button (by default the command is set to `Close`).","code":"-- Create a regular Frame panel\nlocal TestFrame = vgui.Create( \"Frame\" )\nTestFrame:SetSize( 200, 200 )\nTestFrame:Center()\nTestFrame:MakePopup()\nTestFrame:SetVisible( true )\n\nlocal lbl = vgui.Create( \"DLabel\", TestFrame )\nlbl:Dock( FILL )\nlbl:DockMargin( 10, 10, 10, 10 )\nlbl:SetText( \"Click the white button in the upper right corner of this window.\" )\nlbl:SetFont( \"ChatFont\" )\nlbl:SetWrap( true )\n\n-- Create a background panel so we can see the Frame's internal buttons\nlocal bg = vgui.Create( \"DPanel\", TestFrame )\nbg:Dock( FILL )\nbg:SetBackgroundColor( Color( 64, 64, 64, 192 ) )\nbg:MoveToBack()\n\n-- Loop through Frame's internal components\nfor _, child in ipairs( TestFrame:GetChildren() ) do\n\n\t-- Disable frame sizing\n\tif ( string.find( child:GetName(), \"Grip\" ) ) then\n\t\tchild:SetMouseInputEnabled(false)\n\n\t-- Fire the \"Testing\" command when we click the white button\n\telseif ( child:GetName() == \"frame_close\" ) then\n\t\tchild:SetCommand( \"Testing\" )\n\tend\n\nend\n\nfunction TestFrame:ActionSignal( signalName, signalValue )\n\n\t-- Show the signal name\n\tlbl:SetText( \"Received command: \\\"\" .. signalName .. \"\\\"\" )\n\nend","output":{"image":{"src":"Panel_SetCommand_example1.gif"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetCaretPos","parent":"Panel","type":"classfunc","description":"Sets the position of the caret (or text cursor) in a text-based panel object.","realm":"Client","args":{"arg":{"text":"Caret position/offset from the start of text. A value of `0` places the caret before the first character.","name":"offset","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetConVar","parent":"Panel","type":"classfunc","description":{"text":"Sets this panel's convar. When the convar changes this panel will update automatically.\n\nFor developer implementation, see Global.Derma_Install_Convar_Functions.","warning":["This function does not exist on all panels","This function cannot interact with serverside convars unless you are host"],"note":"Blocked convars will not work with this, see Blocked ConCommands"},"realm":"Client","args":{"arg":{"text":"The console variable to check.","name":"convar","type":"string"}}},"example":{"description":"Makes a checkbox linked to the **cl_drawhud** convar.","code":"local DermaPanel = vgui.Create( \"DFrame\" )\nDermaPanel:SetPos( 100, 100 )\nDermaPanel:SetSize( 300, 200 )\nDermaPanel:SetTitle( \"My new Derma frame\" )\nDermaPanel:SetDraggable( true )\nDermaPanel:MakePopup()\n\nlocal Checkbox = vgui.Create( \"DCheckBoxLabel\", DermaPanel )\nCheckbox:SetConVar( \"cl_drawhud\" )\nCheckbox:SetText( \"Enable HUD?\" )\nCheckbox:SetPos( 5, 25 )\nCheckbox:SizeToContents()","output":{"image":{"src":"panel_setcvar.png"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetCursor","parent":"Panel","type":"classfunc","description":"Sets the appearance of the cursor. You can find a list of all available cursors with image previews [here](https://wiki.facepunch.com/gmod/Cursors).","realm":"Client","args":{"arg":{"text":"The cursor to be set. Can be one of the following:\n\n* [arrow](https://wiki.facepunch.com/gmod/Cursors#:~:text=arrow)\n* [beam](https://wiki.facepunch.com/gmod/Cursors#:~:text=beam)\n* [hourglass](https://wiki.facepunch.com/gmod/Cursors#:~:text=hourglass)\n* [waitarrow](https://wiki.facepunch.com/gmod/Cursors#:~:text=waitarrow)\n* [crosshair](https://wiki.facepunch.com/gmod/Cursors#:~:text=crosshair)\n* [up](https://wiki.facepunch.com/gmod/Cursors#:~:text=up)\n* [sizenwse](https://wiki.facepunch.com/gmod/Cursors#:~:text=sizenwse)\n* [sizenesw](https://wiki.facepunch.com/gmod/Cursors#:~:text=sizenesw)\n* [sizewe](https://wiki.facepunch.com/gmod/Cursors#:~:text=sizewe)\n* [sizens](https://wiki.facepunch.com/gmod/Cursors#:~:text=sizens)\n* [sizeall](https://wiki.facepunch.com/gmod/Cursors#:~:text=sizeall)\n* [no](https://wiki.facepunch.com/gmod/Cursors#:~:text=no)\n* [hand](https://wiki.facepunch.com/gmod/Cursors#:~:text=hand)\n* [blank](https://wiki.facepunch.com/gmod/Cursors#:~:text=blank)\n\nSet to anything else to set it to \"none\", the default fallback. Do note that a value of \"none\" does not, as one might assume, result in no cursor being drawn - hiding the cursor requires a value of \"blank\" instead.","name":"cursor","type":"string"}}},"example":{"code":"function draw.CustomCursor(panel, material)\n\t-- Paint the custom cursor\n\tlocal cursorX, cursorY = panel:LocalCursorPos()\n\n\tsurface.SetDrawColor(255, 255, 255, 240)\n\tsurface.SetMaterial(material)\n\tsurface.DrawTexturedRect(cursorX, cursorY, 20, 20)\nend\n\nlocal myPanel = vgui.Create(\"DFrame\")\n-- Make the default cursor disappear\nmyPanel:SetCursor(\"blank\")\n\nlocal customCursorMaterial = Material(\"vgui/your_cursor\")\nmyPanel.Paint = function(s, w, h)\n\tdraw.CustomCursor(s, customCursorMaterial)\nend"},"upload":{"src":"5598e/8d7dfba5b02b2c7.png","size":"5451","name":"cursor.png"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetCookie","parent":"Panel","type":"classfunc","description":{"text":"Stores a string in the named cookie using Panel:GetCookieName as prefix.\n\nYou can also retrieve and modify this cookie by using the cookie. Cookies are stored in this format:\n\n```\npanelCookieName.cookieName\n```","warning":"The panel's cookie name MUST be set for this function to work. See Panel:SetCookieName."},"realm":"Client","args":{"arg":[{"text":"The unique name used to retrieve the cookie later.","name":"cookieName","type":"string"},{"text":"The value to store in the cookie. This can be retrieved later as a string or number.","name":"value","type":"string"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetCookieName","parent":"Panel","type":"classfunc","description":"Sets the panel's cookie name. Calls PANEL:LoadCookies if defined.","realm":"Client","args":{"arg":{"text":"The panel's cookie name. Used as prefix for Panel:SetCookie","name":"name","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDrawLanguageID","parent":"Panel","type":"classfunc","description":"Sets the visibility of the language selection box in a TextEntry when typing in non-English mode.\n\nSee Panel:SetDrawLanguageIDAtLeft for a function that changes the position of the language selection box.","realm":"Client","args":{"arg":{"text":"true to make it visible, false to hide it.","name":"visible","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDrawOnTop","parent":"Panel","type":"classfunc","description":{"text":"Makes the panel render in front of all others, including the spawn menu and main menu.\n\nPriority is given based on the last call, so of two panels that call this method, the second will draw in front of the first.","note":"This only makes the panel **draw** above other panels. If there's another panel that would have otherwise covered it, users will not be able to interact with it.","warning":"This does not work when using PANEL:SetPaintedManually or PANEL:PaintAt!"},"realm":"Client","args":{"arg":{"text":"Whether or not to draw the panel in front of all others.","name":"drawOnTop","type":"boolean","default":"false"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDrawLanguageIDAtLeft","parent":"Panel","type":"classfunc","description":"Sets where to draw the language selection box.\n\nSee Panel:SetDrawLanguageID for a function that hides or shows the language selection box.","realm":"Client","args":{"arg":{"text":"true = left, false = right","name":"left","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDropTarget","parent":"Panel","type":"classfunc","description":"Sets the target area for dropping when an object is being dragged around this panel using the dragndrop. \n\nThis draws a target box of the specified size and position, until Panel:DragHoverEnd is called. It uses Panel:DrawDragHover to draw this area.","realm":"Client","args":{"arg":[{"text":"The x coordinate of the top-left corner of the drop area.","name":"x","type":"number"},{"text":"The y coordinate of the top-left corner of the drop area.","name":"y","type":"number"},{"text":"The width of the drop area.","name":"width","type":"number"},{"text":"The height of the drop area.","name":"height","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDragParent","parent":"Panel","type":"classfunc","description":"Sets the drag parent.\n\nDrag parent means that when we start to drag this panel, we'll really start dragging the defined parent.","realm":"Client","file":{"text":"lua/includes/extensions/client/panel/dragdrop.lua","line":"332-L339"},"args":{"arg":{"text":"The panel to set as drag parent.","name":"parent","type":"Panel"}}},"example":{"code":"local function DoDrop( self, panels, bDoDrop, Command, x, y )\n\tif ( bDoDrop ) then\n\t\tfor _, v in ipairs( panels ) do\n\t\t\tself:AddItem( v )\n\t\tend\n\tend\nend\n\nconcommand.Add( \"test2\", function()\n\tlocal frame = vgui.Create( \"DFrame\" )\n\tframe:SetSize( 500, 300 )\n\tframe:SetTitle( \"Frame\" )\n\tframe:MakePopup()\n\tframe:Center()\n\n\tlocal left = vgui.Create( \"DScrollPanel\", frame )\n\tleft:Dock( LEFT )\n\tleft:SetWidth( frame:GetWide() / 2 - 7 )\n\tleft:SetPaintBackground( true )\n\tleft:DockMargin( 0, 0, 4, 0 )\n\tleft:Receiver( \"myDNDname\", DoDrop ) -- Make the panel a receiver for drag and drop events\n\n\tlocal right = vgui.Create( \"DScrollPanel\", frame )\n\tright:Dock( FILL )\n\tright:SetPaintBackground( true )\n\tright:Receiver( \"myDNDname\", DoDrop )\n\n\tfor i = 1, 30 do\n\t\tlocal but = vgui.Create( \"DButton\" )\n\t\tbut:SetText( \"button text \" .. i )\n\t\tbut:SetSize( 36, 24 )\n\t\tbut:Dock( TOP )\n\t\tbut:Droppable( \"myDNDname\" ) -- make the panel be able to be drag'n'dropped onto other panels\n\t\tright:AddItem( but )\n\t\t\n\t\tlocal mdl = vgui.Create( \"DModelPanel\", but ) -- Put another panel over the draggable button\n\t\tmdl:Dock( FILL )\n\t\tmdl:SetModel( \"models/alyx.mdl\" )\n\t\tmdl:SetDragParent( but ) -- The magic bit. Without it, you would not be able to drag the button at all\n\tend\nend )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetEnabled","parent":"Panel","type":"classfunc","description":"Sets the enabled state of a disable-able panel object, such as a DButton or DTextEntry.\n\nSee Panel:IsEnabled for a function that retrieves the \"enabled\" state of a panel.","realm":"Client","args":{"arg":{"text":"Whether to enable or disable the panel object.","name":"enable","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetFGColorEx","parent":"Panel","type":"classfunc","description":{"text":"Sets the foreground color of the panel.\n\nFor labels, this is the color of their text.","internal":""},"realm":"Client","args":{"arg":[{"text":"The red channel of the color.","name":"r","type":"number"},{"text":"The green channel of the color.","name":"g","type":"number"},{"text":"The blue channel of the color.","name":"b","type":"number"},{"text":"The alpha channel of the color.","name":"a","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetExpensiveShadow","parent":"Panel","type":"classfunc","description":"Adds a shadow falling to the bottom right corner of the panel's text. This has no effect on panels that do not derive from Label.","realm":"Client","args":{"arg":[{"text":"The distance of the shadow from the panel.","name":"distance","type":"number"},{"text":"The color of the shadow. Uses the Color.","name":"Color","type":"table"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetFGColor","parent":"Panel","type":"classfunc","description":{"text":"Sets the foreground color of a panel.\n\nFor a Label or RichText, this is the color of its text.\n\nThis function calls Panel:SetFGColorEx internally.","note":"This doesn't apply to all VGUI elements (such as DLabel) and its function varies between them"},"realm":"Client","args":{"arg":[{"text":"The red channel of the color, or a Color. If you pass the latter, the following three arguments are ignored.","name":"r or color","type":"number"},{"text":"The green channel of the color.","name":"g","type":"number"},{"text":"The blue channel of the color.","name":"b","type":"number"},{"text":"The alpha channel of the color.","name":"a","type":"number"}]}},"example":[{"description":"Creates a Label and sets its text color to white.","code":"local label = vgui.Create( \"Label\" )\n\nlabel:SetFGColor( Color( 255, 255, 255, 255 ) )"},{"description":"Sets the foreground color of a RichText to match the chat box format.","code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(200, 50)\nTextFrame:Center()\nTextFrame:SetTitle(\"This is a color test\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- Sample text\nrichtext:SetText(\"Here is some light green text.\")\n\n-- When the panel is ready for layout, make the text light green\nfunction richtext:PerformLayout()\n\tself:SetFGColor(Color(153, 255, 153))\nend","output":{"image":{"src":"RichText_SetFGColor_example1.png"}}}],"realms":["Client"],"type":"Function"},
{"function":{"name":"SetFocusTopLevel","parent":"Panel","type":"classfunc","description":"Sets the panel that owns this FocusNavGroup to be the root in the focus traversal hierarchy. This function will only work on EditablePanel class panels and its derivatives.","realm":"Client","args":{"arg":{"name":"state","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetFontInternal","parent":"Panel","type":"classfunc","description":"Sets the font used to render this panel's text.\n\nTo retrieve the font used by a panel, call Panel:GetFont.","realm":"Client","args":{"arg":{"text":"The name of the font.\n\nSee  for a list of existing fonts.\nAlternatively, use surface.CreateFont to create your own custom font.","name":"fontName","type":"string","page":",hereDefault_Fonts"}}},"example":{"description":"Sets the font of a RichText element to match the chat box font.","code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(200, 100)\nTextFrame:Center()\nTextFrame:SetTitle(\"This is a font test\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- Sample text\nrichtext:SetText(\"This is a sample of text using the chat box font.\")\n\n-- Ensure font and text color changes are applied\nfunction richtext:PerformLayout()\n\n\tself:SetFontInternal(\"ChatFont\")\n\tself:SetFGColor(Color(255, 255, 255))\n\t\nend","output":{"image":{"src":"RichText_SetFontInternal_example1.png"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetHeight","parent":"Panel","type":"classfunc","description":"Sets the height of the panel.\n\nCalls PANEL:OnSizeChanged and marks this panel for layout (Panel:InvalidateLayout).\n\n\nSee also Panel:SetSize.","realm":"Client","args":{"arg":{"text":"The height to be set.","name":"height","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetHTML","parent":"Panel","type":"classfunc","description":"Allows you to set HTML code within a panel.","realm":"Client","args":{"arg":{"text":"The code to set.","name":"HTML code","type":"string"}}},"example":{"code":{"text":"local HTML = vgui.Create( \"HTML\", DPanel )\nHTML:SetHTML( \"\" )\nHTML:SetSize( 390, 400 )","p":"Put HTML code here"}},"realms":["Client"],"type":"Function"},
{"ambig":{"text":"You might be looking for  (lowercase `board`), which has the same name but isn't deprecated.","page":["Panel:SetKeyboardInputEnabled(lowercase)",",Panel:SetKeyboardInputEnabledPanel:SetKeyboardInputEnabled(lowercase)"]},"function":{"name":"SetKeyBoardInputEnabled","parent":"Panel","type":"classfunc","description":{"text":"Enables or disables the keyboard input for the panel.","deprecated":{"text":"Alias of","page":",Panel:SetKeyboardInputEnabledPanel:SetKeyboardInputEnabled(lowercase)"}},"realm":"Client","args":{"arg":{"text":"Whether to enable or disable keyboard input.","name":"keyboardInput","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetMaximumCharCount","parent":"Panel","type":"classfunc","description":"Sets the maximum character count this panel should have.\n\nThis function will only work on RichText and TextEntry panels and their derivatives.","realm":"Client","added":"2020.03.17","args":{"arg":{"text":"The new maximum amount of characters this panel is allowed to contain.","name":"maxChar","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetName","parent":"Panel","type":"classfunc","description":"Sets the internal name of the panel.","realm":"Client","args":{"arg":{"text":"The new name of the panel.","name":"name","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetModel","parent":"Panel","type":"classfunc","description":{"text":"Sets the model to be displayed by SpawnIcon.","note":"This must be called after setting size if you wish to use a different size spawnicon"},"realm":"Client","args":{"arg":[{"text":"The path of the model to set","name":"ModelPath","type":"string"},{"text":"The skin to set","name":"skin","type":"number","default":"0"},{"text":"The body groups to set. Each single-digit number in the string represents a separate bodygroup, **This argument must be 9 characters in total**.","name":"bodygroups","type":"string","default":""}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetMouseInputEnabled","parent":"Panel","type":"classfunc","description":"Enables or disables the mouse input for the panel.","realm":"Client","args":{"arg":{"text":"Whenever to enable or disable mouse input.","name":"mouseInput","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetPaintBorderEnabled","parent":"Panel","type":"classfunc","description":"Sets whenever all the default border of the panel should be drawn or not.","realm":"Client","args":{"arg":{"text":"Whenever to draw the border or not.","name":"paintBorder","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetMinimumSize","parent":"Panel","type":"classfunc","description":"Sets the minimum dimensions of the panel or object.\n\nYou can restrict either or both values.\n\nCalling the function without arguments will remove the minimum size.","realm":"Client","args":{"arg":[{"text":"The minimum width of the object.","name":"minW","type":"number","default":"nil"},{"text":"The minimum height of the object.","name":"minH","type":"number","default":"nil"}]}},"example":{"description":"Restricting height but not width","code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetSize( 800, 600 )\nframe:SetSizable( true )\nframe:SetMinimumSize( nil, 300 )\nframe:MakePopup()"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetPaintBackgroundEnabled","parent":"Panel","type":"classfunc","description":"Sets whenever all the default background of the panel should be drawn or not.","realm":"Client","args":{"arg":{"text":"Whenever to draw the background or not.","name":"paintBackground","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetPlayer","parent":"Panel","type":"classfunc","description":"Used by AvatarImage to load an avatar for given player.","realm":"Client","args":{"arg":[{"text":"The player to use avatar of.","name":"player","type":"Player"},{"text":"The size of the avatar to use. Acceptable sizes are 32, 64, 184.","name":"size","type":"number"}]}},"example":{"description":"Creates an AvatarImage with the LocalPlayer's avatar inside.","code":"concommand.Add( \"testavatar\", function()\n\n\tlocal Panel = vgui.Create( \"DFrame\" )\n\tPanel:SetPos( 200, 200 )\n\tPanel:SetSize( 500, 500 )\n\tPanel:SetTitle( \"Avatar Test\" )\n\tPanel:MakePopup()\n\n\tlocal Avatar = vgui.Create( \"AvatarImage\", Panel )\n\tAvatar:SetSize( 64, 64 )\n\tAvatar:SetPos( 4, 30 )\n\tAvatar:SetPlayer( LocalPlayer(), 64 )\n\n\t-- After a second reset the avatar to no player\n\ttimer.Simple( 1, function() Avatar:SetPlayer( NULL, 64 ) end )\n\nend )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetPaintFunction","parent":"Panel","type":"classfunc","description":{"text":"This function does nothing.","deprecated":"This function does nothing."},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetParent","parent":"Panel","type":"classfunc","description":"Sets the parent of the panel.","realm":"Client","args":{"arg":{"text":"The new parent of the panel.","name":"parent","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetPopupStayAtBack","parent":"Panel","type":"classfunc","description":"If this panel object has been made a popup with Panel:MakePopup, this method will prevent it from drawing in front of other panels when it receives input focus.","realm":"Client","args":{"arg":{"text":"If `true`, the popup panel will not draw in front of others when it gets focus, for example when it is clicked.","name":"stayAtBack","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetPos","parent":"Panel","type":"classfunc","description":{"text":"Sets the position of the panel's top left corner.\n\nThis will trigger PANEL:PerformLayout. You should avoid calling this function in PANEL:PerformLayout to avoid infinite loops.\n\nSee also Panel:SetX and Panel:SetY.","note":"If you wish to position and re-size panels without much guesswork and have them look good on different screen resolutions, you may find Panel:Dock useful"},"realm":"Client","args":{"arg":[{"text":"The x coordinate of the position.","name":"posX","type":"number"},{"text":"The y coordinate of the position.","name":"posY","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetPaintedManually","parent":"Panel","type":"classfunc","description":"Enables or disables painting of the panel manually with Panel:PaintManual.","realm":"Client","args":{"arg":{"text":"True if the panel should be painted manually.","name":"paintedManually","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetRenderInScreenshots","parent":"Panel","type":"classfunc","description":"Sets whenever the panel should be rendered in the next screenshot.","realm":"Client","args":{"arg":{"text":"Whenever to render or not.","name":"renderInScreenshot","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetSelected","parent":"Panel","type":"classfunc","description":"Sets the selected state of a selectable panel object. This functionality is set with Panel:SetSelectable and checked with Panel:IsSelectable.","realm":"Client","args":{"arg":{"text":"Whether the object should be selected or deselected. Panel:IsSelected can be used to determine the selected state of the object.","name":"selected","type":"boolean","default":"false"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetSelectable","parent":"Panel","type":"classfunc","description":{"text":"Sets whether the panel object can be selected or not (like icons in the Spawn Menu, holding ). If enabled, this will affect the function of a DButton whilst  is pressed. Panel:SetSelected can be used to select/deselect the object.","key":["Shift","Shift"]},"realm":"Client","args":{"arg":{"text":"Whether the panel object should be selectable or not.","name":"selectable","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetSkin","parent":"Panel","type":"classfunc","description":"Sets the derma skin that the panel object will use, and refreshes all panels with derma.RefreshSkins.","realm":"Client","args":{"arg":{"text":"The name of the skin to use. The default derma skin is `Default`.","name":"skinName","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetSpawnIcon","parent":"Panel","type":"classfunc","description":"Sets the `.png` image to be displayed on a  SpawnIcon or the panel it is based on - ModelImage.\n\nOnly `.png` images can be used with this function.","realm":"Client","args":{"arg":{"text":"A path to the .png material, for example one of the Silkicons shipped with the game.","name":"icon","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetSize","parent":"Panel","type":"classfunc","description":{"text":"Sets the size of the panel.\n\nCalls PANEL:OnSizeChanged and marks this panel for layout (Panel:InvalidateLayout).\n\n\nSee also Panel:SetWidth and Panel:SetHeight.","note":"If you wish to position and re-size panels without much guesswork and have them look good on different screen resolutions, you may find Panel:Dock useful"},"realm":"Client","args":{"arg":[{"text":"The width of the panel.","name":"width","type":"number"},{"text":"The height of the panel.","name":"height","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetSelectionCanvas","parent":"Panel","type":"classfunc","description":"Enables the panel object for selection (much like the spawn menu).","realm":"Client","args":{"arg":{"text":"Any value other than `nil` or `false` will enable the panel object for selection. It is recommended to pass `true`.","name":"selCanvas","type":"any"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetTabPosition","parent":"Panel","type":"classfunc","description":"When TAB is pressed, the next selectable panel in the number sequence is selected.","realm":"Client","args":{"arg":{"name":"position","type":"number"}}},"example":{"description":"Creates a menu to put information in with SetTablePosition application.","code":"local Panel = vgui.Create(\"DFrame\")\nPanel:SetSize(500,250)\nPanel:Center()\nPanel:SetText(\"My Information\")\nPanel:MakePopup()\n\nlocal FirstName = vgui.Create(\"DTextEntry\", Panel)\nFirstName:SetSize(400,35)\nFirstName:SetPos(50, 50)\nFirstName:SetPlaceholderText(\"First Name\")\nFirstName:SetTabPosition( 1 )\n\nlocal LastName = vgui.Create(\"DTextEntry\", Panel)\nLastName:SetSize(400,35)\nLastName:SetPos(50, 100)\nLastName:SetPlaceholderText(\"Last Name\")\nLastName:SetTabPosition( 2 )\n\nlocal FavoriteColor = vgui.Create(\"DTextEntry\", Panel)\nFavoriteColor:SetSize(400,35)\nFavoriteColor:SetPos(50, 150)\nFavoriteColor:SetPlaceholderText(\"Favorite Color\")\nFavoriteColor:SetTabPosition( 3 )\n\nlocal CompletedButton = vgui.Create(\"DButton\", Panel)\nCompletedButton:SetSize(200,35)\nCompletedButton:SetPos(150, 200)\nCompletedButton:SetText(\"Done\")\nfunction CompletedButton:DoClick()\n    LocalPlayer():ConCommand(\"say My name is \" .. FirstName:GetText() .. \" \" .. LastName:GetText() .. \" and my favorite color is \" .. FavoriteColor:GetText() .. \"!\")\n    Panel:Remove()\nend","output":"A Panel with a functional TAB Button."},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetTall","parent":"Panel","type":"classfunc","description":"Sets height of a panel. An alias of Panel:SetHeight.","realm":"Client","args":{"arg":{"text":"Desired height to set","name":"height","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetTerm","parent":"Panel","type":"classfunc","description":{"text":"Removes the panel after given time in seconds.","note":"This function will not work if PANEL:AnimationThink is overridden, unless Panel:AnimationThinkInternal is called every frame."},"realm":"Client","args":{"arg":{"text":"Delay in seconds after which the panel should be removed.","name":"delay","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetSteamID","parent":"Panel","type":"classfunc","description":"Used by AvatarImage panels to load an avatar by its 64-bit Steam ID (community ID).","realm":"Client","args":{"arg":[{"text":"The 64bit SteamID of the player to load avatar of","name":"steamid","type":"string"},{"text":"The size of the avatar to use. Acceptable sizes are 32, 64, 184.","name":"size","type":"number"}]}},"example":{"description":"Creates a grid of randomly generated Steam avatars which link to their corresponding Steam user pages.","code":"-- Returns a random 64-bit Steam ID between STEAM_0:0:1 and STEAM_0:1:100000000\nfunction GetRandomSteamID()\n\treturn \"7656119\"..tostring(7960265728+math.random(1, 200000000))\nend\n\n-- Create the Steam User Grid\n-- Arg1: the size of each avatar\n-- Arg2: the size to load each avatar (16, 32, 64, 84, 128, 184)\nfunction CreateSteamUserGrid(av_size, av_res)\n\n\t-- Remove this block of code if you do not mind loading thousands of avatars\n\tif(av_size < 64) then\n\t\tError(\"Avatar size cannot be less than 64 square pixels.\\n\")\n\t\treturn\n\tend\n\t\n\t-- Delete existing grid\n\tif(SteamUserGrid) then SteamUserGrid:Remove() end\n\t\n\t-- The amount of avatars we can fit width-wise and height-wise\n\tlocal w_count = math.floor(ScrW()/av_size)\n\tlocal h_count = math.floor((ScrH()-25)/av_size)\t-- 25 = frame header size\n\t\t\n\t-- Container panel\n\tSteamUserGrid = vgui.Create(\"DFrame\")\n\tSteamUserGrid:SetSize(w_count*av_size, (h_count*av_size)+25)\n\tSteamUserGrid:Center()\n\tSteamUserGrid:SetTitle(\"Randomly Generated Grid of Steam Users\")\n\tSteamUserGrid:MakePopup()\n\t\n\t-- Loop variables\n\tlocal avatar, random_id\n\t\n\t-- Create enough avatars to fill up screen without overflowing\n\tfor i = 0, (w_count*h_count)-1 do\n\t\n\t\trandom_id = GetRandomSteamID()\n\t\t\n\t\t-- Add avatar to container panel\n\t\tavatar = vgui.Create(\"AvatarImage\", SteamUserGrid)\n\t\t\n\t\t-- Layout the avatars in a grid\n\t\tavatar:SetPos((i%w_count)*av_size, 25+math.floor(i/w_count)*av_size)\n\t\t\n\t\t-- Load the avatar image\n\t\tavatar:SetSteamID(random_id, av_res)\n\n\t\tavatar:SetSize(av_size, av_size)\n\t\t\n\t\t-- Open user's Steam page on avatar click\n\t\tavatar.OnMousePressed = function(self)\n\t\t\t\n\t\t\tlocal url = \"http://steamcommunity.com/profiles/\"..random_id\n\t\t\t\n\t\t\tgui.OpenURL(url)\n\t\t\t\n\t\tend\n\t\t\n\tend\n\t\nend","output":{"text":"`CreateSteamUserGrid(64, 64)`\n\n\n\n\n\n\n\n\n\nThe white question mark avatars mean no custom icon used or the user hasn't set up a community profile. The blue question mark avatars mean the user doesn't exist.","image":{"src":"AvatarImage_SetSteamID_example1.png"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetText","parent":"Panel","type":"classfunc","description":{"text":"Sets the text value of a panel object containing text, such as a Label, TextEntry or  RichText and their derivatives, such as DLabel, DTextEntry or DButton.","warning":"When used on a Label or its derivatives ( DLabel and DButton ), it will automatically call Panel:InvalidateLayout, meaning that you should avoid running this function every frame on these panels to avoid unnecessary performance loss."},"realm":"Client","args":{"arg":{"text":"The text value to set.","name":"text","type":"string"}}},"example":{"description":"Creates a RichText element and sets the text to a localized string; the default VAC rejection message.","code":"-- Window frame for the RichText\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(250, 150)\nTextFrame:Center()\nTextFrame:SetTitle(\"#VAC_ConnectionRefusedTitle\") -- Results in \"Connection Refused - VAC\"\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- Set the text to the message you get when VAC banned\nrichtext:SetText(\"#VAC_ConnectionRefusedDetail\")","output":{"image":{"src":"RichText_SetText_example1.png"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetTooltip","parent":"Panel","type":"classfunc","description":"Sets the tooltip to be displayed when a player hovers over the panel object with their cursor.","realm":"Client","args":{"arg":{"text":"The text to be displayed in the tooltip. Set false to disable it.","name":"str","type":"string"}}},"example":{"description":"To disable tooltip set first argument to false","code":"local frame = vgui.Create(\"DFrame\")\nframe:SetSize(96, 96)\nframe:Center()\nframe:MakePopup()\n\nlocal icon = frame:Add(\"SpawnIcon\")\nicon:SetPos(0, 20)\nicon:SetSize(64, 64)\nicon:SetModel(\"models/props_junk/watermelon01.mdl\")\nicon:SetTooltip(false) -- disable tooltip for this panel"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetTextInset","parent":"Panel","type":"classfunc","description":"Sets the left and top text margins of a text-based panel object, such as a DButton or DLabel.","realm":"Client","args":{"arg":[{"text":"The left margin for the text, in pixels. This will only affect centered text if the margin is greater than its x-coordinate.","name":"insetX","type":"number"},{"text":"The top margin for the text, in pixels.","name":"insetY","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetToFullHeight","parent":"Panel","type":"classfunc","description":{"text":"Sets the height of a RichText element to accommodate the text inside.","note":"This function internally relies on Panel:GetNumLines, so it should be called at least a couple frames after modifying the text using Panel:AppendText"},"realm":"Client"},"example":{"description":"Creates a RichText panel with no set height. The proper height is applied 2 seconds after being created in order to show the difference.","code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(250, 210)\nTextFrame:Center()\nTextFrame:SetTitle(\"No set height\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:SetPos(10, 30)\nrichtext:SetWidth(230)\n\n-- Block of text\nrichtext:AppendText(\"#ServerBrowser_ServerWarning_MaxPlayers\")\n\nfunction richtext:PerformLayout() self:SetBGColor(Color(0, 0, 0)) end\n\n-- Set to full height after 2 seconds\ntimer.Simple(2, function()\n\n\trichtext:SetToFullHeight()\n\t\n\tTextFrame:SetTitle(\"Full set height\")\n\t\nend)","output":{"image":{"src":"RichText_SetToFullHeight_example1.gif"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetTooltipPanelOverride","parent":"Panel","type":"classfunc","description":"Sets the panel class to be created instead of DTooltip when the player hovers over this panel and a tooltip needs creating.","realm":"Client","added":"2020.04.29","args":{"arg":{"text":"The panel class to override the default DTooltip. The new panel class must have the following methods:\n*  - If you are using Panel:SetTooltip.\n*  - If you are using Panel:SetTooltipPanel.\n*  - A \"hook\" type function that gets called shortly after creation (and after the above 2) to open and position the tooltip. You can see this logic in `lua/includes/util/tooltips.lua`.","name":"override","type":"string","page":[",SetTextPanel:SetText",",SetContentsDTooltip:SetContents",",OpenForPanelDTooltip:OpenForPanel"]}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetTooltipPanel","parent":"Panel","type":"classfunc","description":{"text":"Sets the panel to be displayed as contents of a DTooltip when a player hovers over the panel object with their cursor. See Panel:SetTooltipPanelOverride if you are looking to override DTooltip itself.","note":"Panel:SetTooltip will override this functionality.","warning":"Calling this from PANEL:OnCursorEntered is too late! The tooltip will not be displayed or be updated.\n\n\tGiven panel or the previously set one will **NOT** be automatically removed."},"realm":"Client","args":{"arg":{"text":"The panel to use as the tooltip.","name":"tooltipPanel","type":"Panel","default":"nil"}}},"example":{"description":"Example usage of this function","code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetSize( 500, 500 )\nframe:Center()\nframe:MakePopup()\n\nlocal panel = vgui.Create( \"Panel\" )\npanel:SetSize( 100, 100 )\npanel:SetVisible( false )\npanel.Paint = function( self, width, height )\n\tsurface.SetDrawColor( 255, 0, 0 )\n\tsurface.DrawRect( 0, 0, width, height)\nend\n\nlocal button1 = vgui.Create( \"DButton\", panel )\nbutton1:SetText( \"test\" )\nbutton1:SetSize( 50, 50 )\nbutton1:SetPos( 5, 5 )\n\nlocal button2 = panel:Add( \"DButton\" )\nbutton2:Dock( TOP )\n-- button2:SetTooltip( \"test\" ) -- This will stop SetTooltipPanel from working.\nbutton2:SetTooltipPanel( panel )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetUnderlineFont","parent":"Panel","type":"classfunc","description":"Sets the underlined font for use by clickable text in a RichText. See also Panel:InsertClickableTextStart\n\nThis function will only work on RichText panels.","realm":"Client","added":"2020.03.17","args":{"arg":{"text":"The name of the font.\n\nSee  for a list of existing fonts.\nAlternatively, use surface.CreateFont to create your own custom font.","name":"fontName","type":"string","page":",hereDefault_Fonts"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetURL","parent":"Panel","type":"classfunc","description":"Sets the URL of a link-based panel such as DLabelURL.","realm":"Client","args":{"arg":{"text":"The URL to set. It **must** begin with either `http://` or `https://`.","name":"url","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetVisible","parent":"Panel","type":"classfunc","description":"Sets the \"visibility\" of the panel.","realm":"Client","args":{"arg":{"text":"The visibility of the panel.","name":"visible","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetWide","parent":"Panel","type":"classfunc","description":"Sets width of a panel. An alias of Panel:SetWidth.","realm":"Client","args":{"arg":{"text":"Desired width to set","name":"width","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetWidth","parent":"Panel","type":"classfunc","description":"Sets the width of the panel.\n\nCalls PANEL:OnSizeChanged and marks this panel for layout (Panel:InvalidateLayout).\n\n\nSee also Panel:SetSize.","realm":"Client","args":{"arg":{"text":"The new width of the panel.","name":"width","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetVerticalScrollbarEnabled","parent":"Panel","type":"classfunc","description":"Sets the visibility of the vertical scrollbar.\n\nWorks for RichText and TextEntry.","realm":"Client","args":{"arg":{"text":"True to display the vertical text scroll bar, false to hide it.","name":"display","type":"boolean","default":"false"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetWorldClicker","parent":"Panel","type":"classfunc","description":{"text":"This makes it so that when you're hovering over this panel you can `click` on the world. Your viewmodel will aim etc. This is primarily used for the Sandbox context menu.","bug":{"text":"This function doesn't scale with custom FOV specified by GM:CalcView or WEAPON:TranslateFOV.","issue":"3467"}},"realm":"Client","args":{"arg":{"name":"enabled","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetWrap","parent":"Panel","type":"classfunc","description":"Sets whether text wrapping should be enabled or disabled on Label and DLabel panels.\nUse DLabel:SetAutoStretchVertical to automatically correct vertical size; Panel:SizeToContents will not set the correct height.","realm":"Client","args":{"arg":{"text":"`True` to enable text wrapping, `false` otherwise.","name":"wrap","type":"boolean"}}},"example":{"description":"Creates two labels in a panel and sets the text wrapping to false and true respectively.","code":"-- Background panel\nlocal BGPanel = vgui.Create( \"DPanel\" )\nBGPanel:SetSize( 300, 130 )\nBGPanel:Center()\nBGPanel:SetBackgroundColor( color_black )\n\t\t\n-- Label with no text wrapping\nlocal lbl_nowrap = vgui.Create( \"DLabel\", BGPanel )\nlbl_nowrap:SetPos( 10, 10 )\nlbl_nowrap:SetSize( 280, 50 )\t\t\nlbl_nowrap:SetFont( \"GModNotify\" )\nlbl_nowrap:SetText( \"This is a label that has text wrapping disabled.\" )\n\nlbl_nowrap:SetWrap( false )\n\n-- Label with text wrapping\nlocal lbl_wrap = vgui.Create( \"DLabel\", BGPanel )\nlbl_wrap:SetPos( 10, 70 )\nlbl_wrap:SetSize( 280, 50 )\nlbl_wrap:SetFont( \"GModNotify\" )\nlbl_wrap:SetText( \"This is a label that has text wrapping enabled.\" )\n\nlbl_wrap:SetWrap( true )","output":{"image":{"src":"Panel_SetWrap_example1.png"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetX","parent":"Panel","type":"classfunc","description":"Sets the X position of the panel.\n\nUses Panel:SetPos internally.","realm":"Client","file":{"text":"lua/includes/extensions/client/panel.lua","line":"70-L72"},"added":"2021.03.31","args":{"arg":{"text":"The X coordinate of the position.","name":"x","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetY","parent":"Panel","type":"classfunc","description":"Sets the Y position of the panel.\n\nUses Panel:SetPos internally.","realm":"Client","file":{"text":"lua/includes/extensions/client/panel.lua","line":"73-L75"},"added":"2021.03.31","args":{"arg":{"text":"The Y coordinate of the position.","name":"y","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetZPos","parent":"Panel","type":"classfunc","description":"Sets the panels z position which determines the rendering order.\n\nPanels with lower z positions appear behind panels with higher z positions.\n\nThis also controls in which order panels docked with Panel:Dock appears.","realm":"Client","args":{"arg":{"text":"The z position of the panel. \nCan't be lower than -32768 or higher than 32767.","name":"zIndex","type":"number","br":""}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SizeTo","parent":"Panel","type":"classfunc","description":"Uses animation to resize the panel to the specified size.","realm":"Client","args":{"arg":[{"text":"The target width of the panel. Use -1 to retain the current width.","name":"sizeW","type":"number","default":"0"},{"text":"The target height of the panel. Use -1 to retain the current height.","name":"sizeH","type":"number","default":"0"},{"text":"The time to perform the animation within.","name":"time","type":"number"},{"text":"The delay before the animation starts.","name":"delay","type":"number","default":"0"},{"text":"Easing of the start and/or end speed of the animation. See Panel:NewAnimation for how this works.","name":"ease","type":"number","default":"-1"},{"text":"The function to be called once the animation finishes. Arguments are:\n* table animData - The Structures/AnimationData that was used.\n* Panel pnl - The panel object that was resized.","name":"callback","type":"function"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SizeToChildren","parent":"Panel","type":"classfunc","description":{"text":"Resizes the panel to fit the bounds of its children.","note":["Your panel must have its layout updated (Panel:InvalidateLayout) for this function to work properly.","The sizeW and sizeH parameters are false by default. Therefore, calling this function with no arguments will result in a no-op."]},"realm":"Client","args":{"arg":[{"text":"Resize with width of the panel.","name":"sizeW","type":"boolean","default":"false"},{"text":"Resize the height of the panel.","name":"sizeH","type":"boolean","default":"false"}]}},"example":{"description":"Using Panel:InvalidateLayout","code":"local Frame = vgui.Create( \"DFrame\" )\nFrame:SetSize( 300, 400 )\nFrame:Center()\nFrame:MakePopup()\nFrame:SetSizable( true )\n\n-- with :InvalidateLayout(true)\nlocal backgroundPanel = vgui.Create( \"DPanel\", Frame )\nbackgroundPanel:Dock( TOP )\nbackgroundPanel:DockPadding( 4, 4, 4, 4 )\nbackgroundPanel:DockMargin( 0, 0, 0, 4 )\n\nlocal button1 = vgui.Create( \"DButton\", backgroundPanel )\nbutton1:Dock( TOP )\nbutton1:DockMargin( 0, 0, 0, 4 )\nbutton1:SetTall( 60 )\nbutton1:SetText( \"c1\" )\n\nlocal button2 = vgui.Create( \"DButton\", backgroundPanel )\nbutton2:Dock( TOP )\nbutton2:SetTall( 60 )\nbutton2:SetText( \"c2\" )\n\nbackgroundPanel:InvalidateLayout( true )\nbackgroundPanel:SizeToChildren( false, true )\n\n\n-- now w/o :InvalidateLayout\nlocal backgroundPanel = vgui.Create( \"DPanel\", Frame )\nbackgroundPanel:Dock( TOP )\nbackgroundPanel:DockPadding( 4, 4, 4, 4 )\n\nlocal button1 = vgui.Create( \"DButton\", backgroundPanel )\nbutton1:Dock( TOP )\nbutton1:DockMargin( 0, 0, 0, 4 )\nbutton1:SetTall( 60 )\nbutton1:SetText( \"c1\" )\n\nlocal button2 = vgui.Create( \"DButton\", backgroundPanel )\nbutton2:Dock( TOP )\nbutton2:SetTall( 60 )\nbutton2:SetText( \"c2\" )\n\nbackgroundPanel:SizeToChildren( false, true )","output":{"image":{"src":"panel_stc_invalidation_ex1.png"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Show","parent":"Panel","type":"classfunc","description":"Makes a panel visible.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SizeToContentsX","parent":"Panel","type":"classfunc","description":{"text":"Resizes the panel object's width to accommodate all child objects/contents.\n\nOnly works on Label derived panels such as DLabel by default, and on any panel that manually implemented Panel:GetContentSize method.","note":"You must call this function **AFTER** setting text/font or adjusting child panels."},"realm":"Client","args":{"arg":{"text":"The number of extra pixels to add to the width. Can be a negative number, to reduce the width.","name":"addVal","type":"number","default":"0"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SizeToContents","parent":"Panel","type":"classfunc","description":{"text":"Resizes the panel so that its width and height fit all of the content inside.","note":"Only works on Label derived panels such as DLabel by default, and on any panel that manually implemented the Panel:SizeToContents method, such as DNumberWang and DImage.","warning":"You must call this function **AFTER** setting text/font, adjusting child panels or otherwise altering the panel."},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SizeToContentsY","parent":"Panel","type":"classfunc","description":{"text":"Resizes the panel object's height to accommodate all child objects/contents.\n\nOnly works on Label derived panels such as DLabel by default, and on any panel that manually implemented Panel:GetContentSize method.","note":"You must call this function **AFTER** setting text/font or adjusting child panels."},"realm":"Client","args":{"arg":{"text":"The number of extra pixels to add to the height.","name":"addVal","type":"number","default":"0"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SlideDown","parent":"Panel","type":"classfunc","description":"Slides the panel in from above.","realm":"Client","args":{"arg":{"text":"Time to complete the animation.","name":"Length","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"StartBoxSelection","parent":"Panel","type":"classfunc","description":"Begins a box selection, enables mouse capture for the panel object, and sets the start point of the selection box to the mouse cursor's position, relative to this object. For this to work, either the object or its parent must be enabled as a selection canvas. This is set using Panel:SetSelectionCanvas.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"Stop","parent":"Panel","type":"classfunc","description":"Stops all panel animations by clearing its animation list. This also clears all delayed animations.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"StretchBottomTo","parent":"Panel","type":"classfunc","description":"Resizes the panel object's height so that its bottom is aligned with the top of the passed panel. An offset greater than zero will reduce the panel's height to leave a gap between it and the passed panel.","realm":"Client","args":{"arg":[{"text":"The panel to align the bottom of this one with.","name":"tgtPanel","type":"Panel"},{"text":"The gap to leave between this and the passed panel. Negative values will cause the panel's height to increase, forming an overlap.","name":"offset","type":"number","default":"0"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SlideUp","parent":"Panel","type":"classfunc","description":"Slides the panel out to the top.","realm":"Client","args":{"arg":{"text":"Time to complete the animation.","name":"Length","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"StretchToParent","parent":"Panel","type":"classfunc","description":"Sets the dimensions of the panel to fill its parent. It will only stretch in directions that aren't nil.","realm":"Client","args":{"arg":[{"text":"The left offset to the parent.","name":"offsetLeft","type":"number"},{"text":"The top offset to the parent.","name":"offsetTop","type":"number"},{"text":"The right offset to the parent.","name":"offsetRight","type":"number"},{"text":"The bottom offset to the parent.","name":"offsetBottom","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ToggleVisible","parent":"Panel","type":"classfunc","description":"Toggles the visibility of a panel and all its children.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"ToggleSelection","parent":"Panel","type":"classfunc","description":"Toggles the selected state of a selectable panel object. This functionality is set with Panel:SetSelectable and checked with Panel:IsSelectable. To check whether the object is selected or not, Panel:IsSelected is used.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"StretchRightTo","parent":"Panel","type":"classfunc","description":"Resizes the panel object's width so that its right edge is aligned with the left of the passed panel. An offset greater than zero will reduce the panel's width to leave a gap between it and the passed panel.","realm":"Client","args":{"arg":[{"text":"The panel to align the right edge of this one with.","name":"tgtPanel","type":"Panel"},{"text":"The gap to leave between this and the passed panel. Negative values will cause the panel's width to increase, forming an overlap.","name":"offset","type":"number","default":"0"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"UnselectAll","parent":"Panel","type":"classfunc","description":"Recursively deselects this panel object and all of its children. This will cascade to all child objects at every level below the parent.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"Undo","parent":"Panel","type":"classfunc","description":"Restores the last saved state (caret position and the text inside) of a TextEntry. Should act identically to pressing CTRL+Z in a TextEntry.\n\nSee also Panel:SaveUndoState.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"Chase","parent":"PathFollower","type":"classfunc","description":"If you created your path with type \"Chase\" this functions should be used in place of PathFollower:Update to cause the bot to chase the specified entity.","realm":"Server","args":{"arg":[{"text":"The bot to update along the path","name":"bot","type":"NextBot"},{"text":"The entity we want to chase","name":"ent","type":"Entity"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Compute","parent":"PathFollower","type":"classfunc","description":"Compute shortest path from bot to 'goal' via A* algorithm.","realm":"Server","args":{"arg":[{"text":"The nextbot we're generating for","name":"from","type":"NextBot"},{"text":"To point","name":"to","type":"Vector"},{"text":"A funtion that allows you to alter the path generation. See example below for the default function.","name":"generator","type":"function","default":"nil"}]},"rets":{"ret":{"text":"* If returns true, path was found to the goal position.\n* If returns false, path may either be invalid (use IsValid() to check), or valid but doesn't reach all the way to the goal.","name":"","type":"boolean"}}},"example":{"description":"The default path generator. You **do not have** to provide the PathFollower.Compute any generator functions if you want to use the default generator.","code":"path:Compute( self, pos, function( area, fromArea, ladder, elevator, length )\n\tif ( !IsValid( fromArea ) ) then\n\n\t\t// first area in path, no cost\n\t\treturn 0\n\t\n\telse\n\t\n\t\tif ( !self.loco:IsAreaTraversable( area ) ) then\n\t\t\t// our locomotor says we can't move here\n\t\t\treturn -1\n\t\tend\n\n\t\t// compute distance traveled along path so far\n\t\tlocal dist = 0\n\n\t\tif ( IsValid( ladder ) ) then\n\t\t\tdist = ladder:GetLength()\n\t\telseif ( length > 0 ) then\n\t\t\t// optimization to avoid recomputing length\n\t\t\tdist = length\n\t\telse\n\t\t\tdist = ( area:GetCenter() - fromArea:GetCenter() ):GetLength()\n\t\tend\n\n\t\tlocal cost = dist + fromArea:GetCostSoFar()\n\n\t\t// check height change\n\t\tlocal deltaZ = fromArea:ComputeAdjacentConnectionHeightChange( area )\n\t\tif ( deltaZ >= self.loco:GetStepHeight() ) then\n\t\t\tif ( deltaZ >= self.loco:GetMaxJumpHeight() ) then\n\t\t\t\t// too high to reach\n\t\t\t\treturn -1\n\t\t\tend\n\n\t\t\t// jumping is slower than flat ground\n\t\t\tlocal jumpPenalty = 5\n\t\t\tcost = cost + jumpPenalty * dist\n\t\telseif ( deltaZ < -self.loco:GetDeathDropHeight() ) then\n\t\t\t// too far to drop\n\t\t\treturn -1\n\t\tend\n\n\t\treturn cost\n\tend\nend )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"Compute","parent":"PathFollower","type":"classfunc","description":"Compute shortest path from bot to 'goal' via A* algorithm.","realm":"Server","args":{"arg":[{"text":"The nextbot we're generating for","name":"from","type":"NextBot"},{"text":"To point","name":"to","type":"Vector"},{"text":"A funtion that allows you to alter the path generation. See example below for the default function.","name":"generator","type":"function","default":"nil"}]},"rets":{"ret":{"text":"* If returns true, path was found to the goal position.\n* If returns false, path may either be invalid (use IsValid() to check), or valid but doesn't reach all the way to the goal.","name":"","type":"boolean"}}},"example":{"description":"The default path generator. You **do not have** to provide the PathFollower.Compute any generator functions if you want to use the default generator.","code":"path:Compute( self, pos, function( area, fromArea, ladder, elevator, length )\n\tif ( !IsValid( fromArea ) ) then\n\n\t\t// first area in path, no cost\n\t\treturn 0\n\t\n\telse\n\t\n\t\tif ( !self.loco:IsAreaTraversable( area ) ) then\n\t\t\t// our locomotor says we can't move here\n\t\t\treturn -1\n\t\tend\n\n\t\t// compute distance traveled along path so far\n\t\tlocal dist = 0\n\n\t\tif ( IsValid( ladder ) ) then\n\t\t\tdist = ladder:GetLength()\n\t\telseif ( length > 0 ) then\n\t\t\t// optimization to avoid recomputing length\n\t\t\tdist = length\n\t\telse\n\t\t\tdist = ( area:GetCenter() - fromArea:GetCenter() ):GetLength()\n\t\tend\n\n\t\tlocal cost = dist + fromArea:GetCostSoFar()\n\n\t\t// check height change\n\t\tlocal deltaZ = fromArea:ComputeAdjacentConnectionHeightChange( area )\n\t\tif ( deltaZ >= self.loco:GetStepHeight() ) then\n\t\t\tif ( deltaZ >= self.loco:GetMaxJumpHeight() ) then\n\t\t\t\t// too high to reach\n\t\t\t\treturn -1\n\t\t\tend\n\n\t\t\t// jumping is slower than flat ground\n\t\t\tlocal jumpPenalty = 5\n\t\t\tcost = cost + jumpPenalty * dist\n\t\telseif ( deltaZ < -self.loco:GetDeathDropHeight() ) then\n\t\t\t// too far to drop\n\t\t\treturn -1\n\t\tend\n\n\t\treturn cost\n\tend\nend )"},"realms":["Server"],"type":"Function"},
{"function":{"name":"UpdateHTMLTexture","parent":"Panel","type":"classfunc","description":{"text":"Forcibly updates the panels' HTML Material, similar to when Paint is called on it.This is only useful if the panel is not normally visible, i.e the panel exists purely for its HTML Material.","br":"","note":["Only works on with panels that have a HTML Material. See Panel:GetHTMLMaterial for more details.","A good place to call this is in the GM:PreRender hook"]},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"Draw","parent":"PathFollower","type":"classfunc","description":"Draws the path. This is meant for debugging - and uses debug overlay.","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetAllSegments","parent":"PathFollower","type":"classfunc","description":"Returns all of the segments of the given path.","realm":"Server","rets":{"ret":{"text":"A table of tables with Structures/PathSegment.","name":"","type":"table"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetAge","parent":"PathFollower","type":"classfunc","description":"Returns the age since the path was built","realm":"Server","rets":{"ret":{"text":"Path age","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetCurrentGoal","parent":"PathFollower","type":"classfunc","description":"Returns the current goal data. Can return nil if the current goal is invalid, for example immediately after PathFollower:Update.","realm":"Server","rets":{"ret":{"text":"A table with Structures/PathSegment.","name":"","type":"table"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetClosestPosition","parent":"PathFollower","type":"classfunc","description":"The closest position along the path to a position","realm":"Server","args":{"arg":{"text":"The point we're querying for","name":"position","type":"Vector"}},"rets":{"ret":{"text":"The closest position on the path","name":"","type":"Vector"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"FirstSegment","parent":"PathFollower","type":"classfunc","description":"Returns the first segment of the path.","realm":"Server","rets":{"ret":{"text":"A table with Structures/PathSegment.","name":"","type":"table"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetCursorData","parent":"PathFollower","type":"classfunc","description":"Returns the cursor data","realm":"Server","rets":{"ret":{"text":"A table with 3 keys:\nnumber curvature\n\n\nVector forward\n\n\nVector pos","name":"","type":"table"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetEnd","parent":"PathFollower","type":"classfunc","description":"Returns the path end position","realm":"Server","rets":{"ret":{"text":"The end position","name":"","type":"Vector"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetGoalTolerance","parent":"PathFollower","type":"classfunc","description":"Returns how close we can get to the goal to call it done.","realm":"Server","rets":{"ret":{"text":"The distance we're setting it to","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetHindrance","parent":"PathFollower","type":"classfunc","realm":"Server","rets":{"ret":{"name":"","type":"Entity"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetCursorPosition","parent":"PathFollower","type":"classfunc","description":"Returns the current progress along the path","realm":"Server","rets":{"ret":{"text":"The current progress","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetLength","parent":"PathFollower","type":"classfunc","description":"Returns the total length of the path","realm":"Server","rets":{"ret":{"text":"The length of the path","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetMinLookAheadDistance","parent":"PathFollower","type":"classfunc","description":"Returns the minimum range movement goal must be along path.","realm":"Server","rets":{"ret":{"text":"The minimum look ahead distance","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Invalidate","parent":"PathFollower","type":"classfunc","description":"Invalidates the current path","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsValid","parent":"PathFollower","type":"classfunc","description":"Returns true if the path is valid","realm":"Server","rets":{"ret":{"text":"Wether the path is valid or not.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetStart","parent":"PathFollower","type":"classfunc","description":"Returns the path start position","realm":"Server","rets":{"ret":{"text":"The start position","name":"","type":"Vector"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"LastSegment","parent":"PathFollower","type":"classfunc","description":"Returns the last segment of the path.","realm":"Server","rets":{"ret":{"text":"A table with Structures/PathSegment.","name":"","type":"table"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetPositionOnPath","parent":"PathFollower","type":"classfunc","description":"Returns the vector position of distance along path","realm":"Server","args":{"arg":{"text":"The distance along the path to query","name":"distance","type":"number"}},"rets":{"ret":{"text":"The position","name":"","type":"Vector"}}},"example":{"description":"Gets the current position on the path as a Vector.","code":"path:GetPositionOnPath( path:GetCursorPosition() )"},"realms":["Server"],"type":"Function"},
{"function":{"name":"MoveCursor","parent":"PathFollower","type":"classfunc","description":"Moves the cursor by give distance.\n\nFor a function that sets the distance, see PathFollower:MoveCursorTo.","realm":"Server","args":{"arg":{"text":"The distance to move the cursor (in relative world units)","name":"distance","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"MoveCursorTo","parent":"PathFollower","type":"classfunc","description":"Sets the cursor position to given distance.\n\nFor relative distance, see PathFollower:MoveCursor.","realm":"Server","args":{"arg":{"text":"The distance to move the cursor (in world units)","name":"distance","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"MoveCursorToClosestPosition","parent":"PathFollower","type":"classfunc","description":"Moves the cursor of the path to the closest position compared to given vector.","realm":"Server","args":{"arg":[{"name":"pos","type":"Vector"},{"text":"Seek type\n\n\n0 = SEEK_ENTIRE_PATH - Search the entire path length\n\n\n1 = SEEK_AHEAD - Search from current cursor position forward toward end of path\n\n\n2 = SEEK_BEHIND - Search from current cursor position backward toward path start","name":"type","type":"number","default":"0"},{"name":"alongLimit","type":"number","default":"0"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"MoveCursorToStart","parent":"PathFollower","type":"classfunc","description":"Moves the cursor to the end of the path","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"ResetAge","parent":"PathFollower","type":"classfunc","description":"Resets the age which is retrieved by PathFollower:GetAge to 0.","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetMinLookAheadDistance","parent":"PathFollower","type":"classfunc","description":"Sets minimum range movement goal must be along path","realm":"Server","args":{"arg":{"text":"The minimum look ahead distance","name":"mindist","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetGoalTolerance","parent":"PathFollower","type":"classfunc","description":"How close we can get to the goal to call it done","realm":"Server","args":{"arg":{"text":"The distance we're setting it to","name":"distance","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"MoveCursorToEnd","parent":"PathFollower","type":"classfunc","description":"Moves the cursor to the end of the path","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"Destroy","parent":"PhysCollide","type":"classfunc","description":"Destroys the PhysCollide object.","realm":"Shared"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsValid","parent":"PhysCollide","type":"classfunc","description":"Checks whether this PhysCollide object is valid or not.\n\nYou should just use Global.IsValid instead.","realm":"Shared","rets":{"ret":{"text":"Is valid or not.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"TraceBox","parent":"PhysCollide","type":"classfunc","description":"Performs a trace against this PhysCollide with the given parameters. This can be used for both line traces and box traces.","realm":"Shared","args":{"arg":[{"text":"The origin for the PhysCollide during the trace","name":"origin","type":"Vector"},{"text":"The angles for the PhysCollide during the trace","name":"angles","type":"Angle"},{"text":"The start position of the trace","name":"rayStart","type":"Vector"},{"text":"The end position of the trace","name":"rayEnd","type":"Vector"},{"text":"The mins of the trace's bounds","name":"rayMins","type":"Vector"},{"text":"The maxs of the trace's bounds","name":"rayMaxs","type":"Vector"}]},"rets":{"ret":[{"text":"Hit position of the trace. This is false if the trace did not hit.","name":"","type":"Vector"},{"text":"Hit normal of the trace","name":"","type":"Vector"},{"text":"Fraction of the trace. This is calculated from the distance between startPos, hitPos, and endPos.","name":"","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Update","parent":"PathFollower","type":"classfunc","description":"Move the bot along the path.","realm":"Server","args":{"arg":{"text":"The bot to update along the path","name":"bot","type":"NextBot"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"AddAngleVelocity","parent":"PhysObj","type":"classfunc","description":"Adds the specified velocity to the current.","realm":"Shared","args":{"arg":{"text":"Additional velocity.","name":"angularVelocity","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"AddGameFlag","parent":"PhysObj","type":"classfunc","description":"Adds one or more bit flags.","realm":"Shared","args":{"arg":{"text":"Bitflag, see Enums/FVPHYSICS.","name":"flags","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"AddVelocity","parent":"PhysObj","type":"classfunc","description":"Adds the specified velocity to the current.","realm":"Shared","args":{"arg":{"text":"Additional velocity.","name":"velocity","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ApplyForceOffset","parent":"PhysObj","type":"classfunc","description":"Applies the specified force on the physics object at the specified position","realm":"Shared","args":{"arg":[{"text":"The force to be applied.","name":"force","type":"Vector"},{"text":"The position in world coordinates where the force is applied to the physics object.","name":"position","type":"Vector"}]}},"example":{"description":"Pull what the player is looking at towards him.","code":"local tr = Entity(1):GetEyeTrace()\nif IsValid(tr.Entity) then\n\tlocal phys = tr.Entity:GetPhysicsObjectNum(tr.PhysicsBone)\n\t\n\tlocal pushvec = tr.Normal * -100000\n\tlocal pushpos = tr.HitPos\n\t\n\tphys:ApplyForceOffset(pushvec, pushpos)\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ApplyForceCenter","parent":"PhysObj","type":"classfunc","description":{"text":"Applies the specified force to the physics object (in [Newtons](https://en.wikipedia.org/wiki/Newton_(unit))).","note":"This will not work on players, use Entity:SetVelocity instead."},"realm":"Shared","args":{"arg":{"text":"The force to be applied.","name":"force","type":"Vector"}}},"example":{"description":{"text":"An entity that Simulates it's own gravity by applying a force downward on the entity based on the force equation :\n\n`(Force = mass * acceleration)`\n\nSince, by default, entities already have gravity. The default gravity must be turned off by adding `phys:EnableGravity(false)` in the entities  function so that the default gravity doesn't interfere with our custom gravity.\n\n**NOTE**: We can get the mass of the entity by using the PhysObj:GetMass function.","page":",InitializeENTITY:Initialize","note":"-9.80665 (meters / second ^ 2)  Is the approximate acceleration of objects on Earth due to gravity. (It is negative because gravity pushes things downwards.)"},"code":"function ENT:Initialize()\n    self:SetModel( \"models/hunter/blocks/cube1x1x1.mdl\" )\n\tself:PhysicsInit( SOLID_VPHYSICS )\n\tself:SetSolid( SOLID_VPHYSICS )\n\tself:SetMoveType( MOVETYPE_VPHYSICS )\n\n    local phys = self:GetPhysicsObject()\n    if phys:IsValid() then\n        phys:EnableGravity( false ) -- This is required. Since we are creating our own gravity.\n        phys:Wake()\n    end\nend\n\nfunction ENT:PhysicsUpdate( phys )\n    phys:ApplyForceCenter( Vector( 0, 0, phys:GetMass() * -9.80665 ) )\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"AlignAngles","parent":"PhysObj","type":"classfunc","description":"Rotates the object so that it's angles are aligned to the ones inputted.","realm":"Shared","args":{"arg":[{"name":"from","type":"Angle"},{"name":"to","type":"Angle"}]},"rets":{"ret":{"name":"","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ApplyTorqueCenter","parent":"PhysObj","type":"classfunc","description":"Applies specified angular impulse to the physics object. See PhysObj:CalculateForceOffset","realm":"Shared","args":{"arg":{"text":"The angular impulse to be applied in `kg * degrees / s` (verification needed).","name":"torque","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"CalculateForceOffset","parent":"PhysObj","type":"classfunc","description":"Calculates the force and torque on the center of mass for an offset force impulse. The outputs can be directly passed to PhysObj:ApplyForceCenter and PhysObj:ApplyTorqueCenter, respectively.","realm":"Shared","args":{"arg":[{"text":"The initial force","name":"force","type":"Vector"},{"text":"The location of the force in world coordinates","name":"pos","type":"Vector"}]},"rets":{"ret":[{"text":"The calculated force on the physics object's center of mass","name":"","type":"Vector"},{"text":"The calculated torque on the physics object's center of mass","name":"","type":"Vector"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ClearGameFlag","parent":"PhysObj","type":"classfunc","description":"Removes one of more specified flags.","realm":"Shared","args":{"arg":{"text":"Bitflag, see Enums/FVPHYSICS.","name":"flags","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ComputeShadowControl","parent":"PhysObj","type":"classfunc","description":"Allows you to move a PhysObj to a point and angle in 3D space.","realm":"Shared","args":{"arg":{"text":"The parameters for the shadow. See example code to see how its used.","name":"shadowparams","type":"table"}}},"example":{"description":"Move a PhysObj to vector 0 0 0 with angles 0 0 0.","code":"function ENT:Initialize()\n \n\tself:StartMotionController()\n\tself.ShadowParams = {}\n \nend\nfunction ENT:PhysicsSimulate( phys, deltatime )\n \n\tphys:Wake()\n \n\tself.ShadowParams.secondstoarrive = 1 // How long it takes to move to pos and rotate accordingly - only if it could move as fast as it want - damping and max speed/angular will make this invalid (Cannot be 0! Will give errors if you do)\n\tself.ShadowParams.pos = Vector( 0, 0, 0 ) // Where you want to move to\n\tself.ShadowParams.angle = Angle( 0, 0, 0 ) // Angle you want to move to\n\tself.ShadowParams.maxangular = 5000 //What should be the maximal angular force applied\n\tself.ShadowParams.maxangulardamp = 10000 // At which force/speed should it start damping the rotation\n\tself.ShadowParams.maxspeed = 1000000 // Maximal linear force applied\n\tself.ShadowParams.maxspeeddamp = 10000// Maximal linear force/speed before  damping\n\tself.ShadowParams.dampfactor = 0.8 // The percentage it should damp the linear/angular force if it reaches it's max amount\n\tself.ShadowParams.teleportdistance = 200 // If it's further away than this it'll teleport (Set to 0 to not teleport)\n\tself.ShadowParams.deltatime = deltatime // The deltatime it should use - just use the PhysicsSimulate one\n \n\tphys:ComputeShadowControl(self.ShadowParams)\n \nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"CalculateVelocityOffset","parent":"PhysObj","type":"classfunc","description":{"text":"Calculates the linear and angular velocities on the center of mass for an offset force impulse. The outputs can be directly passed to PhysObj:AddVelocity and PhysObj:AddAngleVelocity, respectively.","warning":"This will return zero length vectors if the physics object's motion is disabled. See PhysObj:IsMotionEnabled."},"realm":"Shared","args":{"arg":[{"text":"The initial force","name":"force","type":"Vector"},{"text":"The location of the force in world coordinates","name":"pos","type":"Vector"}]},"rets":{"ret":[{"text":"The calculated linear velocity from the force on the physics object's center of mass","name":"","type":"Vector"},{"text":"The calculated angular velocity from the force on the physics object's center of mass","name":"","type":"Vector"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"EnableCollisions","parent":"PhysObj","type":"classfunc","description":{"text":"Sets whether the physics object should collide with anything or not, including world.","warning":"This function currently has major problems with player collisions, and as such should be avoided at all costs.\n\n\n\nA better alternative to this function would be using Entity:SetCollisionGroup( COLLISION_GROUP_WORLD )."},"realm":"Shared","args":{"arg":{"text":"True to enable, false to disable.","name":"enable","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"EnableDrag","parent":"PhysObj","type":"classfunc","description":"Sets whenever the physics object should be affected by drag.","realm":"Shared","args":{"arg":{"text":"True to enable, false to disable.","name":"enable","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"EnableGravity","parent":"PhysObj","type":"classfunc","description":"Sets whether the PhysObject should be affected by gravity","realm":"Shared","args":{"arg":{"text":"True to enable, false to disable.","name":"enable","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"EnableMotion","parent":"PhysObj","type":"classfunc","description":"Sets whether the physobject should be able to move or not.\n\nThis is the exact method the Physics Gun uses to freeze props. If a motion-disabled physics object is grabbed with the physics gun, the object will be able to move again. To disallow this, use GM:PhysgunPickup.","realm":"Shared","args":{"arg":{"text":"True to enable, false to disable.","name":"enable","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetAABB","parent":"PhysObj","type":"classfunc","description":"Returns the mins and max of the physics object.","realm":"Shared","rets":{"ret":[{"text":"Mins","name":"","type":"Vector"},{"text":"Maxs","name":"","type":"Vector"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetAngles","parent":"PhysObj","type":"classfunc","description":"Returns the angles of the physics object.","realm":"Shared","rets":{"ret":{"text":"The angles of the physics object.","name":"","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetAngleVelocity","parent":"PhysObj","type":"classfunc","description":"Gets the angular velocity of the object in degrees per second as a local vector. You can use dot product to read the magnitude from a specific axis.","realm":"Shared","rets":{"ret":{"text":"The angular velocity","name":"","type":"Vector"}}},"example":{"description":"Calculate the RPM of an object rotating around its local Z axis with one revolution per second.","code":"print(\"RPM\", oPhys:GetAngleVelocity():Dot( Vector(0, 0, 1) ) / 6)","output":"RPM 60"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetDamping","parent":"PhysObj","type":"classfunc","description":"Returns the linear and angular damping of the physics object.","realm":"Shared","rets":{"ret":[{"text":"The linear damping","name":"","type":"number"},{"text":"The angular damping","name":"","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetEnergy","parent":"PhysObj","type":"classfunc","description":"Returns the sum of the linear and rotational kinetic energies of the physics object.","realm":"Shared","rets":{"ret":{"text":"The kinetic energy","name":"","type":"number"}}},"example":{"description":"Replicates what GetEnergy does internally.","code":"local linear_kenergy = 0.5 * phys:GetMass() * phys:GetVelocity() ^ 2 -- 1/2 mv^2\nlocal rotational_kenergy = 0.5 * phys:GetInertia() * phys:GetAngleVelocity() ^ 2 -- 1/2 Iw^2\nlocal kenergy = linear_kenergy + rotational_kenergy"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetEntity","parent":"PhysObj","type":"classfunc","description":"Returns the parent entity of the physics object.","realm":"Shared","rets":{"ret":{"text":"The entity this physics object belongs to","name":"","type":"Entity"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetContents","parent":"PhysObj","type":"classfunc","description":"Returns the contents flag of the PhysObj.","realm":"Shared","rets":{"ret":{"text":"The Enums/CONTENTS.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetInertia","parent":"PhysObj","type":"classfunc","description":"Returns the directional inertia of the physics object.","realm":"Shared","rets":{"ret":{"text":"directionalInertia","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetFrictionSnapshot","parent":"PhysObj","type":"classfunc","description":"Returns the friction snapshot of this physics object. This is useful for determining if an object touching ground for example.","realm":"Server","added":"2020.03.17","rets":{"ret":{"text":"A table of tables containing the following data:\n* PhysObj Other - The other physics object we came in contact with\n* number EnergyAbsorbed - \n* number FrictionCoefficient - \n* number NormalForce - \n* Vector Normal - Direction of the friction event\n* Vector ContactPoint - Contact point of the friction event\n* number Material - Surface Property ID of our physics obj\n* number MaterialOther - Surface Property ID of the physics obj we came in contact with","name":"","type":"table"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetInvMass","parent":"PhysObj","type":"classfunc","description":"Returns 1 divided by the physics object's mass.","realm":"Shared","rets":{"ret":{"text":"The inverted mass.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetInvInertia","parent":"PhysObj","type":"classfunc","description":"Returns 1 divided by the inertia.","realm":"Shared","rets":{"ret":{"text":"The inverted inertia","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetMass","parent":"PhysObj","type":"classfunc","description":"Returns the mass of the physics object.","realm":"Shared","rets":{"ret":{"text":"The mass in kilograms.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetMesh","parent":"PhysObj","type":"classfunc","description":"Returns the physics mesh of the object which is used for physobj-on-physobj collision.","realm":"Shared","rets":{"ret":{"text":"Table of Structures/MeshVertexs where each three vertices represent a triangle. Returns nil if the physics object is a sphere.","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetMeshConvexes","parent":"PhysObj","type":"classfunc","description":"Returns all convex physics meshes of the object. See Entity:PhysicsInitMultiConvex for more information.","realm":"Shared","rets":{"ret":{"text":"Table of Structures/MeshVertexs where each Structures/MeshVertex is an independent convex mesh and each three vertices represent a triangle. Returns nil if the physics object is a sphere.","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetMaterial","parent":"PhysObj","type":"classfunc","description":"Returns the physical material of the physics object.","realm":"Shared","rets":{"ret":{"text":"The physical material","name":"","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetMassCenter","parent":"PhysObj","type":"classfunc","description":"Returns the center of mass of the physics object as a local vector.","realm":"Shared","rets":{"ret":{"text":"The center of mass of the physics object.","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetPos","parent":"PhysObj","type":"classfunc","description":"Returns the position of the physics object.","realm":"Shared","rets":{"ret":{"text":"The position","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetRotDamping","parent":"PhysObj","type":"classfunc","description":"Returns the rotation damping of the physics object.","realm":"Shared","rets":{"ret":{"text":"The rotation damping","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetPositionMatrix","parent":"PhysObj","type":"classfunc","description":"Returns the position and angle of the physics object as a 3x4 matrix (VMatrix is 4x4 so the fourth row goes unused). The first three columns store the angle as a [rotation matrix](https://en.wikipedia.org/wiki/Rotation_matrix), and the fourth column stores the position vector.","realm":"Shared","rets":{"ret":{"text":"The position and angle matrix.","name":"","type":"VMatrix"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetName","parent":"PhysObj","type":"classfunc","description":"Returns the name of the physics object.","realm":"Shared","rets":{"ret":{"text":"The name of the physics object.","name":"","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetShadowAngles","parent":"PhysObj","type":"classfunc","description":"Returns the angles of the PhysObj shadow. See PhysObj:UpdateShadow.","realm":"Shared","rets":{"ret":{"text":"The angles of the PhysObj shadow.","name":"","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetShadowPos","parent":"PhysObj","type":"classfunc","description":"Returns the position of the PhysObj shadow. See PhysObj:UpdateShadow.","realm":"Shared","rets":{"ret":{"text":"The position of the PhysObj shadow.","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetSpeedDamping","parent":"PhysObj","type":"classfunc","description":"Returns the speed damping of the physics object.","realm":"Shared","rets":{"ret":{"text":"speedDamping","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetStress","parent":"PhysObj","type":"classfunc","description":"Returns the stress of the entity.","realm":"Server","rets":{"ret":{"text":"exertedStress","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetSurfaceArea","parent":"PhysObj","type":"classfunc","description":"Returns the surface area of the physics object in source-units². Or nil if the PhysObj is a generated sphere or box.","realm":"Shared","rets":{"ret":{"text":"The surface area or nil if the PhysObj is a generated sphere or box.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetVelocity","parent":"PhysObj","type":"classfunc","description":"Returns the absolute directional velocity of the physobject.","realm":"Shared","rets":{"ret":{"text":"velocity","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetVolume","parent":"PhysObj","type":"classfunc","description":"Returns the volume in source units³. Or nil if the PhysObj is a generated sphere or box.","realm":"Shared","rets":{"ret":{"text":"The volume or nil if the PhysObj is a generated sphere or box.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetVelocityAtPoint","parent":"PhysObj","type":"classfunc","description":"Returns the world velocity of a point in world coordinates about the object. This is useful for objects rotating around their own axis/origin.","realm":"Shared","args":{"arg":{"text":"A point to test in world space coordinates","name":"point","type":"Vector"}},"rets":{"ret":{"text":"Velocity at the given point","name":"velocity","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"HasGameFlag","parent":"PhysObj","type":"classfunc","description":"Returns whenever the specified flag(s) is/are set.","realm":"Shared","args":{"arg":{"text":"Bitflag, see Enums/FVPHYSICS.","name":"flags","type":"number"}},"rets":{"ret":{"text":"If flag was set or not","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsDragEnabled","parent":"PhysObj","type":"classfunc","description":"Returns whenever the entity is affected by drag.","realm":"Shared","rets":{"ret":{"text":"dragEnabled","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsGravityEnabled","parent":"PhysObj","type":"classfunc","description":"Returns whenever the entity is affected by gravity.","realm":"Shared","rets":{"ret":{"text":"`true` if the gravity is enabled, `false` otherwise","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsCollisionEnabled","parent":"PhysObj","type":"classfunc","description":"Returns whenever the entity is able to collide or not.","realm":"Shared","rets":{"ret":{"text":"isCollisionEnabled","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsMotionEnabled","parent":"PhysObj","type":"classfunc","description":"Returns if the physics object can move itself (by velocity, acceleration)","realm":"Shared","rets":{"ret":{"text":"`true` if the motion is enabled, `false` otherwise.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsAsleep","parent":"PhysObj","type":"classfunc","description":"Returns whether the physics object is \"sleeping\".\n\nSee PhysObj:Sleep for more information.","realm":"Shared","rets":{"ret":{"text":"Whether the physics object is sleeping.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsPenetrating","parent":"PhysObj","type":"classfunc","description":"Returns whenever the physics object is penetrating another physics object.\n\nThis is internally implemented as `PhysObj:HasGameFlag( FVPHYSICS_PENETRATING )` and thus is only updated for non-static physics objects.","realm":"Shared","rets":{"ret":{"text":"Whether the physics object is penetrating another object.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"LocalToWorld","parent":"PhysObj","type":"classfunc","description":{"text":"Mapping a vector in local frame of the physics object to world frame.","note":"this function does translation and rotation, with translation done first."},"realm":"Shared","args":{"arg":{"text":"A vector in the physics object's local frame","name":"LocalVec","type":"Vector"}},"rets":{"ret":{"text":"The corresponding vector in world frame","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsValid","parent":"PhysObj","type":"classfunc","description":"Returns if the physics object is valid/not NULL.","realm":"Shared","rets":{"ret":{"text":"isValid","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsMoveable","parent":"PhysObj","type":"classfunc","description":"Returns whenever the entity is able to move.","realm":"Shared","rets":{"ret":{"text":"movable","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"OutputDebugInfo","parent":"PhysObj","type":"classfunc","description":"Prints debug info about the state of the physics object to the console.","realm":"Shared"},"example":{"description":"Outputs physics info about the entity the player is looking at to the console.","code":"Entity(1):GetEyeTrace().Entity:GetPhysicsObject():OutputDebugInfo()","output":"```\n-----------------\nObject: models/props_borealis/bluebarrel001.mdl\nMass: 60.0 (inv 0.017)\nInertia: 8.69, 8.69, 2.46 (inv 0.115, 0.115, 0.406)\nVelocity: 0.00, 0.00, -0.00 \nAng Velocity: 0.00, 0.00, -0.00 \nDamping 0.00 linear, 0.00 angular\nLinear Drag: 0.02, 0.01, 0.01 (factor 1.00)\nAngular Drag: 0.01, 0.02, 0.01 (factor 1.00)\nattached to 5 controllers\n4) sys:friction\n3) sys:friction\n2) sys:friction\n1) vphysics:drag\n0) sys:gravity\nState: Asleep, Collision Enabled, Motion Enabled, Flags 1127 (game 0000, index 0)\nMaterial: plastic_barrel : density(500.0), thickness(0.25), friction(0.80), elasticity(0.01)\nCollisionModel: Compact Surface: 1 convex pieces no outer hull\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"LocalToWorldVector","parent":"PhysObj","type":"classfunc","description":{"text":"Rotate a vector from the local frame of the physics object to world frame.","note":"This function only rotates the vector, without any translation operation."},"realm":"Shared","args":{"arg":{"text":"A vector in the physics object's local frame","name":"LocalVec","type":"Vector"}},"rets":{"ret":{"text":"The corresponding vector in world frame","name":"","type":"Vector"}}},"example":{"description":"Given the angle of the physics object is angle ( 0.045, 89.952, 89.99 ) ( This can be derived by PhysObj:GetAngles() ), convert the vector ( 1 ,2, 3 ) in this physics object's local frame into world frame.","code":"print( \"Angle of the PhysObj: \", PhysObj:GetAngles() )\nprint( \"Vector in world frame: \", PhysObj:LocalToWorld( Vector( 1, 2, 3 ) ) )","output":"Angle of the PhysObj: 0.045 89.952 89.993;\nVector in world frame: 3.000585 0.999039 1.999603;"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"RecheckCollisionFilter","parent":"PhysObj","type":"classfunc","description":"Call this when the collision filter conditions change due to this object's state (e.g. changing solid type or collision group)","realm":"Shared"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetBuoyancyRatio","parent":"PhysObj","type":"classfunc","description":"Sets the buoyancy ratio of the physics object. (How well it floats in water)","realm":"Shared","args":{"arg":{"text":"Buoyancy ratio, where 0 is not buoyant at all (like a rock), and 1 is very buoyant (like wood). You can set values larger than 1 for greater effect.","name":"buoyancy","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetAngles","parent":"PhysObj","type":"classfunc","description":"Sets the angles of the physobject.","realm":"Shared","args":{"arg":{"text":"The new angles of the physobject.","name":"angles","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"RotateAroundAxis","parent":"PhysObj","type":"classfunc","description":"A convinience function for Angle:RotateAroundAxis.","realm":"Shared","args":{"arg":[{"text":"Direction, around which we will rotate","name":"dir","type":"Vector"},{"text":"Amount of rotation, in degrees","name":"ang","type":"number"}]},"rets":{"ret":{"text":"The resulting angle","name":"","type":"Angle"}}},"example":{"description":"Shows that it is the same as Angle:RotateAroundAxis.","code":"local phys = Entity(1):GetEyeTrace().Entity:GetPhysicsObject() -- Our physics object\n\nprint( phys:RotateAroundAxis( Vector( 1, 0, 0 ), 20 ) )\n\nlocal a = phys:GetAngles()\na:RotateAroundAxis( Vector( 1, 0, 0 ), 20 )\nprint( a )","output":"Two exactly the same angles\n\n```\n-27.179 133.246 -23.236\n-27.179 133.246 -23.236\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetAngleDragCoefficient","parent":"PhysObj","type":"classfunc","description":"Sets the amount of [drag](https://en.wikipedia.org/wiki/Drag_(physics)) to apply to a physics object when attempting to rotate.","realm":"Shared","args":{"arg":{"text":"[Drag coefficient](https://en.wikipedia.org/wiki/Drag_coefficient). The bigger this value is, the slower the angles will change.","name":"coefficient","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetDragCoefficient","parent":"PhysObj","type":"classfunc","description":"Modifies how much drag (air resistance) affects the object.","realm":"Shared","args":{"arg":{"text":"The drag coefficient\nIt can be positive or negative.","name":"drag","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetContents","parent":"PhysObj","type":"classfunc","description":"Sets the contents flag of the PhysObj.","realm":"Shared","args":{"arg":{"text":"The Enums/CONTENTS.","name":"contents","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetMass","parent":"PhysObj","type":"classfunc","description":"Sets the mass of the physics object.","realm":"Shared","args":{"arg":{"text":"The mass in kilograms.","name":"mass","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetDamping","parent":"PhysObj","type":"classfunc","description":"Sets the linear and angular damping of the physics object.","realm":"Shared","args":{"arg":[{"text":"Linear damping.","name":"linearDamping","type":"number"},{"text":"Angular damping.","name":"angularDamping","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetInertia","parent":"PhysObj","type":"classfunc","description":"Sets the directional inertia.","realm":"Shared","args":{"arg":{"text":"The directional inertia of the object.\nA value of Vector(0,0,0) makes the physobject go invalid.","name":"directionalInertia","type":"Vector","br":""}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetPos","parent":"PhysObj","type":"classfunc","description":"Sets the position of the physobject.","realm":"Shared","args":{"arg":[{"text":"The new position of the physobject.","name":"position","type":"Vector"},{"name":"teleport","type":"boolean","default":"false"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetMaterial","parent":"PhysObj","type":"classfunc","description":{"text":"Sets the material of the physobject.","note":"Impact sounds will only change if this is called on client"},"realm":"Shared","args":{"arg":{"text":"The name of the phys material to use. From this list: [Valve Developer](https://developer.valvesoftware.com/wiki/Material_surface_properties)","name":"materialName","type":"string"}}},"example":{"description":"Randomize the physical properties of an entity","code":"local tbl = {\n\t\"gmod_ice\", -- Makes the entity slide around\n\t\"gmod_bouncy\", -- Makes the entity bouncy\n\t\"gmod_silent\", -- Makes the entity not play sounds on impact\n\t\"flesh\" -- Makes the entity play flesh sounds on impact\n}\n\nlocal phys = SomeEntity:GetPhysicsObject()\n\nif ( IsValid( phys ) ) then\n\n\tphys:SetMaterial( table.Random( tbl ) )\n\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetVelocity","parent":"PhysObj","type":"classfunc","description":"Sets the velocity of the physics object for the next iteration.","realm":"Shared","args":{"arg":{"text":"The new velocity of the physics object.","name":"velocity","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"UpdateShadow","parent":"PhysObj","type":"classfunc","description":{"text":"Unlike PhysObj:SetPos and PhysObj:SetAngles, this allows the movement of a physobj while leaving physics interactions intact.\nThis is used internally by the motion controller of the Gravity Gun , the +use pickup and the Physics Gun, and entities such as the crane.","br":"","note":"This is the ideal function to move a physics shadow created with Entity:PhysicsInitShadow or Entity:MakePhysicsObjectAShadow."},"realm":"Shared","args":{"arg":[{"text":"The position we should move to.","name":"targetPosition","type":"Vector"},{"text":"The angle we should rotate towards.","name":"targetAngles","type":"Angle"},{"text":"The frame time to use for this movement, can be generally filled with Global.FrameTime or ENTITY:PhysicsSimulate with the deltaTime. \n\nCan be set to 0 when you need to update the physics object just once.","name":"frameTime","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetVelocityInstantaneous","parent":"PhysObj","type":"classfunc","description":"Sets the velocity of the physics object.","realm":"Shared","args":{"arg":{"text":"The new velocity of the physics object.","name":"velocity","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Sleep","parent":"PhysObj","type":"classfunc","description":"Makes the physics object \"sleep\".\n\nThe physics object will no longer be moving unless it is \"woken up\" by either a collision with another moving object, or by PhysObj:Wake. This is an optimization feature of the physics engine.","realm":"Shared"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"WorldToLocalVector","parent":"PhysObj","type":"classfunc","description":{"text":"Rotate a vector from the world frame to the local frame of the physics object.","note":"This function only rotates the vector, without any translation operation."},"realm":"Shared","args":{"arg":{"text":"A vector in the world frame","name":"WorldVec","type":"Vector"}},"rets":{"ret":{"text":"The corresponding vector relative to the PhysObj","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"WorldToLocal","parent":"PhysObj","type":"classfunc","description":"Converts a vector to a relative to the physics object coordinate system.","realm":"Shared","args":{"arg":{"text":"The vector in world space coordinates.","name":"vec","type":"Vector"}},"rets":{"ret":{"text":"The vector local to PhysObj:GetPos.","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"AccountID","parent":"Player","type":"classfunc","description":{"text":"Returns the player's AccountID aka SteamID3. (`[U:1:AccountID]`)\n\nFor bots this will return values starting with 0 for the first bot, 1 for the second bot and so on.  \n\nSee Player:SteamID for the text representation of the full SteamID.\nSee Player:SteamID64 for a 64bit representation of the full SteamID.\n\nUnlike other variations of SteamID, SteamID3 does not include the \"Account Type\" and \"Account Instance\" part of the SteamID.","bug":{"text":"In singleplayer, this will return `no value`. **This is fixed in the next update.**","issue":"2614"}},"realm":"Shared","rets":{"ret":{"text":"The AccountID of Player's SteamID.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"AddCount","parent":"Player","type":"classfunc","description":"Adds an entity to the total count of entities of same class.","realm":"Shared","args":{"arg":[{"text":"Entity type","name":"str","type":"string"},{"text":"Entity","name":"ent","type":"Entity"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"AddCleanup","parent":"Player","type":"classfunc","description":"Adds an entity to the players clean up list.","realm":"Shared","args":{"arg":[{"text":"Cleanup type","name":"type","type":"string"},{"text":"Entity to add","name":"ent","type":"Entity"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Wake","parent":"PhysObj","type":"classfunc","description":"Wakes the physics object.\n\nSee PhysObj:Sleep for more information.","realm":"Shared"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"AddDeaths","parent":"Player","type":"classfunc","description":"Add a certain amount to the player's death count","realm":"Server","args":{"arg":{"text":"number of deaths to add","name":"count","type":"number"}}},"example":{"description":"Adds 2 deaths to player","code":"Entity( 1 ):AddDeaths( 2 )","output":"Player1 has 2 extra deaths on the scoreboard relative to his old score."},"realms":["Server"],"type":"Function"},
{"function":{"name":"AddPlayerOption","parent":"Player","type":"classfunc","description":"Sets up the voting system for the player.\nThis is a really barebone system. By calling this a vote gets started, when the player presses 0-9 the callback function gets called along with the key the player pressed. Use the draw callback to draw the vote panel.","realm":"Client","args":{"arg":[{"text":"Name of the vote","name":"name","type":"string"},{"text":"Time until the vote expires","name":"timeout","type":"number"},{"text":"The function to be run when the player presses 0-9 while a vote is active.","name":"vote_callback","type":"function"},{"text":"Used to draw the vote panel.","name":"draw_callback","type":"function"}]}},"example":{"description":"Simple example. Prints player's choice in chat.","code":"function AfterChoice( num ) -- This is callback after we press number (Argument #3)\n\tchat.AddText( \"Your rate is \" .. num .. \". Thanks!\" )\n\n\treturn true -- Return true to close vote\nend\n\nlocal BlackTransparent = Color( 0, 0, 0, 200 )\nfunction VisualVote() -- This is drawing function (Argument #4)\n    draw.RoundedBox( 4, ScrW() / 2 - 300, ScrH() / 2 - 25, 600, 50, BlackTransparent )\n    draw.SimpleText( \"Rate our server by scale of zero to nine. Use number line to vote.\", \"Trebuchet24\", ScrW() / 2 , ScrH() / 2, color_white, 1, 1 )\nend\n\nLocalPlayer():AddPlayerOption( \"SelectWeapon\", 30, AfterChoice, VisualVote ) -- Creates new vote"},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddFrags","parent":"Player","type":"classfunc","description":"Add a certain amount to the player's frag count (or kills count)","realm":"Server","args":{"arg":{"text":"number of frags to add","name":"count","type":"number"}}},"example":{"description":"Adds 2 frags to player","code":"Entity( 1 ):AddFrags( 2 )","output":"Player1 has 2 extra frags on the scoreboard relative to his old score."},"realms":["Server"],"type":"Function"},
{"function":{"name":"AddVCDSequenceToGestureSlot","parent":"Player","type":"classfunc","description":"Plays a sequence directly from a sequence number, similar to Player:AnimRestartGesture. This function has the advantage to play sequences that haven't been bound to an existing Enums/ACT","realm":"Shared","args":{"arg":[{"text":"Gesture slot using Enums/GESTURE_SLOT","name":"slot","type":"number"},{"text":"The sequence ID to play, can be retrieved with Entity:LookupSequence.","name":"sequenceId","type":"number"},{"text":"The cycle to start the animation at, ranges from 0 to 1.","name":"cycle","type":"number"},{"text":"If the animation should not loop. true = stops the animation, false = the animation keeps playing.","name":"autokill","type":"boolean","default":"false"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"AddFrozenPhysicsObject","parent":"Player","type":"classfunc","description":"Adds a entity to the players list of frozen objects.","realm":"Server","args":{"arg":[{"text":"Entity","name":"ent","type":"Entity"},{"text":"Physics object belonging to ent","name":"physobj","type":"PhysObj"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"AllowFlashlight","parent":"Player","type":"classfunc","description":"Sets if the player can toggle his flashlight. Function exists on both the server and client but has no effect when ran on the client.","realm":"Shared","file":{"text":"lua/includes/extensions/player.lua","line":"211"},"args":{"arg":{"text":"True allows flashlight toggling","name":"canFlashlight","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Alive","parent":"Player","type":"classfunc","description":"Checks if the player is alive.","realm":"Shared","rets":{"ret":{"text":"Whether the player is alive","name":"","type":"boolean"}}},"example":{"description":"Loops through all the players and kills alive ones.","code":"for i, ply in ipairs( player.GetAll() ) do\n\tif ply:Alive() then\n\t\tply:Kill()\n\tend\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"AllowImmediateDecalPainting","parent":"Player","type":"classfunc","description":"Lets the player spray his decal without delay","realm":"Server","args":{"arg":{"text":"Allow or disallow","name":"allow","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"AnimResetGestureSlot","parent":"Player","type":"classfunc","description":"Resets player gesture in selected slot.","realm":"Shared","args":{"arg":{"text":"Slot to reset. See the Enums/GESTURE_SLOT.","name":"slot","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"AnimSetGestureSequence","parent":"Player","type":"classfunc","description":"Sets the sequence of the animation playing in the given gesture slot.","realm":"Shared","args":{"arg":[{"text":"The gesture slot. See Enums/GESTURE_SLOT","name":"slot","type":"number"},{"text":"Sequence ID to set.","name":"sequenceID","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"AnimSetGestureWeight","parent":"Player","type":"classfunc","description":"Sets the weight of the animation playing in the given gesture slot.","realm":"Shared","args":{"arg":[{"text":"The gesture slot. See Enums/GESTURE_SLOT","name":"slot","type":"number"},{"text":"The weight this slot should be set to. Value must be ranging from 0 to 1.","name":"weight","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"AnimRestartMainSequence","parent":"Player","type":"classfunc","description":"Restarts the main animation on the player, has the same effect as calling Entity:SetCycle( 0 ).","realm":"Shared"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"AnimRestartGesture","parent":"Player","type":"classfunc","description":{"text":"Restart a gesture on a player, within a gesture slot.","warning":"This is not automatically networked. This function has to be called on the client to be seen by said client."},"realm":"Shared","args":{"arg":[{"text":"Gesture slot using Enums/GESTURE_SLOT","name":"slot","type":"number"},{"text":"The activity ( see Enums/ACT ) or sequence that should be played","name":"activity","type":"number"},{"text":"Whether the animation should be automatically stopped. true = stops the animation, false = the animation keeps playing/looping","name":"autokill","type":"boolean","default":"false"}]}},"example":{"description":"Defines part of a SWEP with pistol whipping functionality by using a pistol hold type and AnimRestartGesture for the melee attack animation.","code":"function SWEP:Initialize()\n\tself:SetHoldType(\"pistol\")\nend\n\nfunction SWEP:PrimaryAttack()\n\n\t-- Weapon attack delay\n\tself:SetNextPrimaryFire(CurTime()+0.5)\n\n\t-- Get entity in front of us\n\tlocal tr = util.TraceLine(util.GetPlayerTrace(self.Owner))\n\t\n\tlocal ent = tr.Entity\n\t\n\t-- If there's an enemy under 50 units in front of us\n\tif(IsValid(ent) && self.Owner:GetShootPos():Distance(tr.HitPos) < 50) then\n\t\n\t\t-- Play the melee attack animation\n\t\tself.Owner:AnimRestartGesture(GESTURE_SLOT_ATTACK_AND_RELOAD, ACT_HL2MP_GESTURE_RANGE_ATTACK_MELEE, true)\n\t\t\n\t\t-- Create damage info (server-side)\n\t\tif SERVER then\n\t\t\n\t\t\tlocal dmg = DamageInfo()\t\t\n\t\t\tdmg:SetDamage(math.random(5, 10))\n\t\t\tdmg:SetAttacker(self.Owner)\n\t\t\tdmg:SetInflictor(self)\n\t\t\tdmg:SetDamageForce(self.Owner:GetAimVector()*300)\n\t\t\tdmg:SetDamagePosition(tr.HitPos)\n\t\t\tdmg:SetDamageType(DMG_CLUB)\n\t\t\n\t\t\t-- Apply damage to enemy\n\t\t\tent:TakeDamageInfo(dmg)\n\t\t\t\n\t\tend\n\t\t\n\t\t-- Play impact sound\n\t\tent:EmitSound(\"physics/flesh/flesh_impact_bullet\"..math.random(1, 5)..\".wav\")\n\t\t\n\t\t-- Make viewmodel pistol whip effect\n\t\tself.Owner:ViewPunch(Angle(0, 45, 0))\n\t\t\n\telse\n\t\n\t\t-- Typical pistol shot code goes here\n\t\t-- Some can be found in 'weapon_base/shared.lua'\n\t\n\tend\n\t\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Armor","parent":"Player","type":"classfunc","description":"Returns the player's armor.","realm":"Shared","rets":{"ret":{"text":"The player's armor.","name":"","type":"number"}}},"example":{"description":"Loops through all the players and checks if they have any armor, if they do not, then sets their armor to 100.","code":"for i, ply in ipairs( player.GetAll( ) ) do\n    if ply:Armor() == 0 then\n         ply:SetArmor( 100 )\n    end\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"CanUseFlashlight","parent":"Player","type":"classfunc","description":{"text":"Returns true if the player's flashlight hasn't been disabled by Player:AllowFlashlight.","note":"This is not synchronized between clients and server automatically!"},"realm":"Shared","file":{"text":"lua/includes/extensions/player.lua","line":"212"},"rets":{"ret":{"text":"Whether the player can use flashlight.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Ban","parent":"Player","type":"classfunc","description":"Bans the player from the server for a certain amount of minutes.","realm":"Server","args":{"arg":[{"text":"Duration of the ban in minutes (0 is permanent)","name":"minutes","type":"number"},{"text":"Whether to kick the player after banning them or not","name":"kick","type":"boolean","default":"false"}]}},"example":{"description":"Kicks and bans the player for a day.","code":"Entity( 1 ):Ban( 1440, true )"},"realms":["Server"],"type":"Function"},
{"function":{"name":"ChatPrint","parent":"Player","type":"classfunc","description":{"text":"Prints a string to the chatbox of the client.","warning":"Just like the usermessage, this function is affected by the 255 byte limit!"},"realm":"Shared","args":{"arg":{"text":"String to be printed","name":"message","type":"string"}}},"example":{"description":"Prints \"Hello World\" to chat of all players","code":"for i, ply in ipairs( player.GetAll() ) do\n\tply:ChatPrint( \"Hello World\" )\nend","output":"Hello World (In chatbox)"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"CheckLimit","parent":"Player","type":"classfunc","description":"Checks if the limit is hit or not. If it is, it will throw a notification saying so.","realm":"Shared","file":{"text":"gamemodes/sandbox/gamemode/player_extension.lua","line":"9-L24"},"args":{"arg":{"text":"Limit type. In unmodified Sandbox possible values are:\n* \"props\"\n* \"ragdolls\"\n* \"vehicles\"\n* \"effects\"\n* \"balloons\"\n* \"cameras\"\n* \"npcs\"\n* \"sents\"\n* \"dynamite\"\n* \"lamps\"\n* \"lights\"\n* \"wheels\"\n* \"thrusters\"\n* \"hoverballs\"\n* \"buttons\"\n* \"emitters\"","name":"limitType","type":"string"}},"rets":{"ret":{"text":"Returns true if limit is not hit, false if it is hit","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"CreateRagdoll","parent":"Player","type":"classfunc","description":{"text":"Creates the player's death ragdoll entity and deletes the old one.\n\nThis is normally used when a player dies, to create their death ragdoll.\n\nThe ragdoll will be created with the player's properties such as , , ,  and .\n\nYou can retrieve the entity this creates with Player:GetRagdollEntity.","page":[",PositionEntity:GetPos",",AnglesEntity:GetAngles",",PlayerColorPlayer:GetPlayerColor",",VelocityEntity:GetVelocity",",ModelEntity:GetModel"]},"realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"ConCommand","parent":"Player","type":"classfunc","description":{"text":"Runs the concommand on the player. This does not work on bots.\n\nIf you wish to directly modify the movement input of bots, use GM:StartCommand instead.","note":"Some commands/convars are blocked from being ran/changed using this function, usually to prevent harm/annoyance to clients. For a list of blocked commands, see Blocked ConCommands.","bug":"On clientside running a ConCommand on an other player will not throw any warnings or errors but will run the ConCommand on LocalPlayer() instead."},"realm":"Shared","args":{"arg":{"text":"command to run","name":"command","type":"string"}}},"example":{"description":"Kills the player using the concommand","code":"Entity( 1 ):ConCommand( \"kill\" )","output":"The Player1 dies."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"CrosshairDisable","parent":"Player","type":"classfunc","description":"Disables the default player's crosshair. Can be reenabled with Player:CrosshairEnable. This will affect WEAPON:DoDrawCrosshair.","realm":"Server"},"example":{"description":"Disables crosshair of the first player on the server.","code":"Entity( 1 ):CrosshairDisable()"},"realms":["Server"],"type":"Function"},
{"function":{"name":"CrosshairEnable","parent":"Player","type":"classfunc","description":"Enables the player's crosshair, if it was previously disabled via Player:CrosshairDisable.","realm":"Server"},"example":{"description":"Enables crosshair of the first player on the server, if it was disabled.","code":"Entity( 1 ):CrosshairEnable()"},"realms":["Server"],"type":"Function"},
{"function":{"name":"Deaths","parent":"Player","type":"classfunc","description":"Returns the player's death count","realm":"Shared","rets":{"ret":{"text":"The number of deaths the player has had.","name":"","type":"number"}}},"example":{"description":"If the player's deaths are over 10, then they cannot spawn.","code":"hook.Add( \"PlayerDeathThink\", \"BlockSpawning\", function( ply, ent, att )\n\treturn ply:Deaths() < 10 -- If less than 10 deaths then allow to spawn\nend )","output":"The player will not be able to spawn after they've died 10 times."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"DebugInfo","parent":"Player","type":"classfunc","description":"Prints the players' name and position to the console.","realm":"Server","file":{"text":"lua/includes/extensions/player.lua","line":"91-L101"}},"realms":["Server"],"type":"Function"},
{"function":{"name":"DetonateTripmines","parent":"Player","type":"classfunc","description":"Detonates all tripmines belonging to the player.","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"Crouching","parent":"Player","type":"classfunc","description":{"text":"Returns whether the player is crouching or not ( flag).","page":",FL_DUCKINGEnums/FL"},"realm":"Shared","rets":{"ret":{"text":"Whether the player is crouching.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"DoAttackEvent","parent":"Player","type":"classfunc","description":{"text":"Starts the player's attack animation. The attack animation is determined by the weapon's HoldType.\n\nSimilar to other animation event functions, calls GM:DoAnimationEvent with  as the event and no extra data.","page":",PLAYERANIMEVENT_ATTACK_PRIMARYEnums/PLAYERANIMEVENT"},"realm":"Shared"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"DoReloadEvent","parent":"Player","type":"classfunc","description":{"text":"Sends a third person reload animation event to the player.\n\nSimilar to other animation event functions, calls GM:DoAnimationEvent with  as the event and no extra data.","page":",PLAYERANIMEVENT_RELOADEnums/PLAYERANIMEVENT"},"realm":"Shared"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"DoAnimationEvent","parent":"Player","type":"classfunc","description":{"text":"Sends a third person animation event to the player.\n\nCalls GM:DoAnimationEvent with  as the event, data as the given data.","page":",PLAYERANIMEVENT_CUSTOM_GESTUREEnums/PLAYERANIMEVENT"},"realm":"Shared","args":{"arg":{"text":"The data to send.","name":"data","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"DoCustomAnimEvent","parent":"Player","type":"classfunc","description":"Sends a specified third person animation event to the player.\n\nCalls GM:DoAnimationEvent with specified arguments.","realm":"Shared","args":{"arg":[{"text":"The event to send. See Enums/PLAYERANIMEVENT.","name":"event","type":"number"},{"text":"The data to send alongside the event.","name":"data","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"DoSecondaryAttack","parent":"Player","type":"classfunc","description":{"text":"Sends a third person secondary fire animation event to the player.\n\nSimilar to other animation event functions, calls GM:DoAnimationEvent with  as the event and no extra data.","page":",PLAYERANIMEVENT_ATTACK_SECONDARYEnums/PLAYERANIMEVENT"},"realm":"Shared"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"DrawViewModel","parent":"Player","type":"classfunc","description":"Show/Hide the player's weapon's viewmodel.","realm":"Shared","args":{"arg":[{"text":"Should draw","name":"draw","type":"boolean"},{"text":"Which view model to show/hide, 0-2.","name":"vm","type":"number","default":"0"}]}},"example":{"description":"Create a ConVar object on the client realm to enable/disable the viewmodel.","code":"local cvarObject = CreateClientConVar(\"nogun\", \"1\", true, false, \"Hide the current viewmodel.\") -- Create the ConVar object\n\nhook.Add(\"HUDPaint\", \"draw_viewmodel\", function()\n\tLocalPlayer():DrawViewModel( cvarObject:GetBool() ) -- Call ConVar:GetBool() inside the parameters of DrawViewModel\nend)"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"DropNamedWeapon","parent":"Player","type":"classfunc","description":"Drops the players' weapon of a specific class.","realm":"Server","args":{"arg":[{"text":"The class to drop.","name":"class","type":"string"},{"text":"If set, launches the weapon at given position. There is a limit to how far it is willing to throw the weapon. Overrides velocity argument.","name":"target","type":"Vector","default":"nil"},{"text":"If set and previous argument is unset, launches the weapon with given velocity. If the velocity is higher than 400, it will be clamped to 400.","name":"velocity","type":"Vector","default":"nil"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"DrawWorldModel","parent":"Player","type":"classfunc","description":"Show/Hide the player's weapon's worldmodel.","realm":"Server","args":{"arg":{"text":"Should draw","name":"draw","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"DropObject","parent":"Player","type":"classfunc","description":"Drops any object the player is currently holding with either gravitygun or +Use (E key)","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"EnterVehicle","parent":"Player","type":"classfunc","description":"Enters the player into specified vehicle","realm":"Server","args":{"arg":{"text":"Vehicle the player will enter","name":"vehicle","type":"Vehicle"}}},"example":{"description":"Enters the player into the vehicle they're looking at","code":"local jeep = Entity( 1 ):GetEyeTrace().Entity\nEntity( 1 ):EnterVehicle( jeep )"},"realms":["Server"],"type":"Function"},
{"function":{"name":"DropWeapon","parent":"Player","type":"classfunc","description":"Forces the player to drop the specified weapon","realm":"Server","args":{"arg":[{"text":"Weapon to be dropped. If unset, will default to the currently equipped weapon.","name":"weapon","type":"Weapon","default":"nil"},{"text":"If set, launches the weapon at given position. There is a limit to how far it is willing to throw the weapon. Overrides velocity argument.","name":"target","type":"Vector","default":"nil"},{"text":"If set and previous argument is unset, launches the weapon with given velocity. If the velocity is higher than 400, it will be clamped to 400.","name":"velocity","type":"Vector","default":"nil"}]}},"example":[{"description":"A console command that drops all the player's weapons","code":"concommand.Add( \"drop_weapons\", function( ply )\n\tif ( ply:IsValid() ) then\n\t\t-- Loop through all player weapons and drop them.\n\t\tfor _, wep in ipairs( ply:GetWeapons() ) do\n\t\t\tply:DropWeapon( wep )\n\t\tend\n\tend\nend )"},{"description":"A console command that drops only the currently equipped weapon","code":"concommand.Add( \"drop_weapon\", function( ply )\n\tif ( ply:IsValid() ) then\n\t\tply:DropWeapon()\n\tend\nend )"}],"realms":["Server"],"type":"Function"},
{"function":{"name":"EquipSuit","parent":"Player","type":"classfunc","description":{"text":"Equips the player with the HEV suit.\n\nAllows the player to zoom, walk slowly, sprint, pickup armor batteries, use the health and armor stations and also shows the HUD.\nThe player also emits a flatline sound on death, which can be overridden with GM:PlayerDeathSound.\n\nThe player is automatically equipped with the suit on spawn, if you wish to stop that, use Player:RemoveSuit.","br":""},"realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"ExitVehicle","parent":"Player","type":"classfunc","description":"Makes the player exit the vehicle if they're in one.","realm":"Server"},"example":{"description":"Make player 1 leave his vehicle if he's driving one.","code":"Entity( 1 ):ExitVehicle()","output":"Player 1 will exit the the vehicle he's currently in."},"realms":["Server"],"type":"Function"},
{"function":{"name":"Flashlight","parent":"Player","type":"classfunc","description":"Enables/Disables the player's flashlight.Player:CanUseFlashlight must be true in order for the player's flashlight to be changed.","realm":"Server","args":{"arg":{"text":"Turns the flashlight on/off","name":"isOn","type":"boolean"}}},"example":{"description":"Turns off and disables the player's flashlight","code":"Entity( 1 ):Flashlight( false )\nEntity( 1 ):AllowFlashlight( false )"},"realms":["Server"],"type":"Function"},
{"function":{"name":"FlashlightIsOn","parent":"Player","type":"classfunc","description":"Returns true if the player's flashlight is on.","realm":"Shared","rets":{"ret":{"text":"Whether the player's flashlight is on.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Frags","parent":"Player","type":"classfunc","description":"Returns the amount of kills a player has.","realm":"Shared","rets":{"ret":{"text":"kills","name":"","type":"number"}}},"example":{"description":"Prints the users frags in console.","code":"print( Entity( 1 ):Frags() )","output":"`0`"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetActiveWeapon","parent":"Player","type":"classfunc","description":"Returns the player's active weapon.\n\nIf used on a Global.LocalPlayer() and the player is spectating another player with `OBS_MODE_IN_EYE`, the weapon returned will be of the spectated player.","realm":"Shared","rets":{"ret":{"text":"The weapon the player is currently has equipped.","name":"","type":"Weapon"}}},"example":{"description":"Prints the player's active weapon's class name.","code":"print( Entity( 1 ):GetActiveWeapon():GetClass() )","output":"The active weapon's class. For example, if you are holding the tool gun then this will be \"gmod_tool\"."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetActivity","parent":"Player","type":"classfunc","description":"Returns the player's current activity.","added":"2021.03.31","realm":"Server","rets":{"ret":{"text":"The player's current activity. See Enums/ACT.","name":"act","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetAimVector","parent":"Player","type":"classfunc","description":"Returns the direction that the player is aiming.","realm":"Shared","rets":{"ret":{"text":"The direction vector of players aim","name":"","type":"Vector"}}},"example":{"description":"Launches the player in the direction they're facing.","code":"local ply = Entity( 1 )\nply:SetVelocity( ply:GetAimVector() * 1000 )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Freeze","parent":"Player","type":"classfunc","description":{"text":"Freeze the player. Frozen players cannot move, look around, or attack. Key bindings are still called. Similar to Player:Lock but the player can still take damage.\n\nAdds or removes the  flag from the player.","page":",FL_FROZENEnums/FL","bug":"Frozen bots will still be able to look around."},"realm":"Server","file":{"text":"lua/includes/extensions/player.lua","line":"237-L249"},"args":{"arg":{"text":"Whether the player should be frozen.","name":"frozen","type":"boolean","default":"false"}}},"example":{"description":"Freezes all players","code":"for _, ply in ipairs( player.GetAll() ) do\n    ply:Freeze( true )\nend"},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetAllowWeaponsInVehicle","parent":"Player","type":"classfunc","description":"Returns whether the player is allowed to use his weapons in a vehicle or not.","realm":"Shared","rets":{"ret":{"text":"Whether the player is allowed to use his weapons in a vehicle or not.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetAllowFullRotation","parent":"Player","type":"classfunc","description":"Returns true if the players' model is allowed to rotate around the pitch and roll axis.","realm":"Shared","rets":{"ret":{"text":"Allowed","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetAmmo","parent":"Player","type":"classfunc","description":"Returns a table of all ammo the player has.","realm":"Shared","rets":{"ret":{"text":"A table with the following format\n* number Key - AmmoID to be used with functions like game.GetAmmoName.\n* number Value - Amount of ammo the player has of this kind.","name":"","type":"table"}}},"example":{"description":"Output ammo table of the default Sandbox weapon loadout.","code":"PrintTable( Entity( 1 ):GetAmmo() )","output":"```\n1\t=\t130\n2\t=\t6\n3\t=\t256\n4\t=\t256\n5\t=\t32\n6\t=\t36\n7\t=\t64\n8\t=\t3\n10\t=\t6\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetCanWalk","parent":"Player","type":"classfunc","description":"Returns true if the player is able to walk using the (default) alt key.","realm":"Shared","rets":{"ret":{"text":"AbleToWalk","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetAmmoCount","parent":"Player","type":"classfunc","description":"Gets the amount of ammo the player has.","realm":"Shared","args":{"arg":{"text":"The ammunition type. Can be either number ammo ID or string ammo name.","name":"ammotype","type":"any"}},"rets":{"ret":{"text":"The amount of ammo player has in reserve.","name":"","type":"number"}}},"example":[{"description":"A function that returns the ammo for the weapon the player is currently holding.","code":"function GetAmmoForCurrentWeapon( ply )\n\tif ( !IsValid( ply ) ) then return -1 end\n\n\tlocal wep = ply:GetActiveWeapon()\n\tif ( !IsValid( wep ) ) then return -1 end\n \n\treturn ply:GetAmmoCount( wep:GetPrimaryAmmoType() )\nend","output":"31"},{"description":"Example usage. \"pistol\" ammo type has ID of 3.","code":"print( Entity( 1 ):GetAmmoCount( 3 ) )\nprint( Entity( 1 ):GetAmmoCount( \"3\" ) )\nprint( Entity( 1 ):GetAmmoCount( \"pistol\" ) )","output":"```\n255\n0\n255\n```"}],"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetAvoidPlayers","parent":"Player","type":"classfunc","description":"Gets if the player will be pushed out of nocollided players.","realm":"Shared","rets":{"ret":{"text":"pushed","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetClassID","parent":"Player","type":"classfunc","description":"Returns the player's class id.","realm":"Shared","rets":{"ret":{"text":"The player's class id.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetCount","parent":"Player","type":"classfunc","description":"Gets total count of entities of same class.","realm":"Shared","args":{"arg":[{"text":"Entity type to get count of.","name":"type","type":"string"},{"text":"If specified, it will reduce the counter by this value. Works only serverside.","name":"minus","type":"number","default":"0"}]},"rets":{"ret":{"text":"The returned count.","name":"count","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetCanZoom","parent":"Player","type":"classfunc","description":"Determines whenever the player is allowed to use the zoom functionality.","realm":"Shared","rets":{"ret":{"text":"canZoom","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetDrivingEntity","parent":"Player","type":"classfunc","description":"Gets the entity the player is currently driving.","realm":"Shared","rets":{"ret":{"text":"DriveEntity","name":"","type":"Entity"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetCrouchedWalkSpeed","parent":"Player","type":"classfunc","description":"Returns the crouched walk speed multiplier.\n\nSee also Player:GetWalkSpeed and Player:SetCrouchedWalkSpeed.","realm":"Shared","rets":{"ret":{"text":"The crouched walk speed multiplier.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetCurrentViewOffset","parent":"Player","type":"classfunc","description":"Gets the **actual** view offset which equals the difference between the players actual position and their view when standing.\n\nDo not confuse with Player:GetViewOffset and Player:GetViewOffsetDucked","realm":"Shared","rets":{"ret":{"text":"The actual view offset.","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetCurrentCommand","parent":"Player","type":"classfunc","description":{"text":"Returns the last command which was sent by the specified player. This can only be called on the player which Global.GetPredictionPlayer() returns.","note":"When called clientside in singleplayer during WEAPON:Think, it will return nothing as the hook is not technically predicted in that instance. See the note on the page.","bug":{"text":"This will fail in GM:StartCommand.","issue":"3302"}},"realm":"Shared","rets":{"ret":{"text":"Last user commands","name":"","type":"CUserCmd"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetEntityInUse","parent":"Player","type":"classfunc","description":"Returns the entity the player is currently using, like func_tank mounted turrets or +use prop pickups.","realm":"Shared","rets":{"ret":{"text":"Entity in use, or NULL entity otherwise. For +use prop pickups, this will be NULL clientside.","name":"","type":"Entity"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetDuckSpeed","parent":"Player","type":"classfunc","description":"Returns a player's duck speed (in seconds)","realm":"Shared","rets":{"ret":{"text":"duckspeed","name":"","type":"number"}}},"example":{"description":"Gets player 1's duck speed in seconds, and prints it to console","code":"print( Entity( 1 ):GetDuckSpeed() )","output":"0.3 in console (tested)"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetDrivingMode","parent":"Player","type":"classfunc","description":"Returns driving mode of the player. See Entity Driving.","realm":"Shared","rets":{"ret":{"text":"The drive mode ID or 0 if player doesn't use the drive system.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetEyeTrace","parent":"Player","type":"classfunc","description":"Returns a table with information of what the player is looking at.\n\nThe results of this function are **cached** clientside every frame.\n\nUses util.GetPlayerTrace internally and is therefore bound by its limits.\n\nSee also Player:GetEyeTraceNoCursor.","realm":"Shared","file":{"text":"gamemodes/base/gamemode/obj_player_extend.lua","line":"172-L192"},"rets":{"ret":{"text":"Trace information, see Structures/TraceResult.","name":"","type":"table"}}},"example":{"description":"Prints the entity the player is looking at.","code":"print( Entity( 1 ):GetEyeTrace().Entity )","output":"`Entity [0][worldspawn]` in console, if you aim at world."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetFOV","parent":"Player","type":"classfunc","description":"Returns the FOV of the player.","realm":"Shared","rets":{"ret":{"text":"Field of view as a float","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetHands","parent":"Player","type":"classfunc","description":"Gets the hands entity of a player","realm":"Shared","rets":{"ret":{"text":"The hands entity if players has one","name":"","type":"Entity"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetFriendStatus","parent":"Player","type":"classfunc","description":"Returns the steam \"relationship\" towards the player.","realm":"Client","rets":{"ret":{"text":"Should return one of four different things depending on their status on your friends list: \"friend\", \"blocked\", \"none\" or \"requested\".","name":"","type":"string"}}},"example":{"description":"Prints the steam relationship towards another player","code":"print( Entity( 1 ):GetFriendStatus() )","output":"\"friend\""},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetEyeTraceNoCursor","parent":"Player","type":"classfunc","description":{"text":"Returns the trace according to the players view direction, ignoring their mouse (holding  and moving the mouse in Sandbox).\n\nThe results of this function are **cached** clientside every frame.\n\nUses util.GetPlayerTrace internally and is therefore bound by its limits.\n\nSee also Player:GetEyeTrace.","key":"C"},"realm":"Shared","file":{"text":"gamemodes/base/gamemode/obj_player_extend.lua","line":"194-L213"},"rets":{"ret":{"text":"Trace result. See Structures/TraceResult.","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetHoveredWidget","parent":"Player","type":"classfunc","description":"Returns the widget the player is hovering with his mouse.","realm":"Shared","rets":{"ret":{"text":"The hovered widget.","name":"","type":"Entity"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetInfo","parent":"Player","type":"classfunc","description":{"text":"Retrieves the value of a client-side ConVar. The ConVar must have a  flag for this to work.","page":",FCVAR_USERINFOEnums/FCVAR","warning":"The returned value is truncated to 31 bytes."},"realm":"Shared","args":{"arg":{"text":"The name of the client-side ConVar.","name":"cVarName","type":"string"}},"rets":{"ret":{"text":"The value of the ConVar.","name":"","type":"string"}}},"example":{"description":"Creates clientside ConVar `Apple` and retrieves value of it.","code":"if CLIENT then\n\tCreateConVar( \"Apple\", \"ILikeApples\", FCVAR_USERINFO )\nelse\n\tMsgN( Entity( 1 ):GetInfo( \"Apple\" ) )\nend","output":"ILikeApples"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetInfoNum","parent":"Player","type":"classfunc","description":{"text":"Retrieves the numeric value of a client-side convar, returns nil if value is not convertible to a number. The ConVar must have a  flag for this to work.","page":",FCVAR_USERINFOEnums/FCVAR"},"realm":"Shared","args":{"arg":[{"text":"The name of the ConVar to query the value of","name":"cVarName","type":"string"},{"text":"Default value if we failed to retrieve the number.","name":"default","type":"number"}]},"rets":{"ret":{"text":"The value of the ConVar or the default value","name":"","type":"number"}}},"example":[{"description":"Creates clientside ConVar 'Apple' and retrieves value of it.","code":"if CLIENT then\n\tCreateConVar( \"Apple\", \"1\", FCVAR_USERINFO )\nelse\n\tMsgN( Entity( 1 ):GetInfoNum( \"Apple\" ) )\nend","output":"`1`"},{"description":"Shows difference between Player:GetInfo and Player:GetInfoNum.","code":"if CLIENT then\n\tCreateConVar( \"Apple\", \"1\", FCVAR_USERINFO )\nelse\n\tMsgN( type( Entity( 1 ):GetInfoNum( \"Apple\", 1 ) ) )\n\tMsgN( type( Entity( 1 ):GetInfo( \"Apple\" ) ) )\nend","output":"```\nnumber\nstring\n```"}],"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetHull","parent":"Player","type":"classfunc","description":"Gets the bottom base and the top base size of the player's hull.","realm":"Shared","rets":{"ret":[{"text":"Player's hull bottom base size.","name":"","type":"Vector"},{"text":"Player's hull top base size.","name":"","type":"Vector"}]}},"example":{"description":"Prints bases' size of the hull of all players.","code":"for _, ply in ipairs( player.GetAll() ) do\n\tlocal bottom, top = ply:GetHull()\n\n\tprint(bottom)\n\tprint(top)\nend","output":"```\n-16.000000 -16.000000 0.000000\n16.000000 16.000000 72.000000\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetJumpPower","parent":"Player","type":"classfunc","description":"Returns the jump power of the player","realm":"Shared","rets":{"ret":{"text":"Jump power","name":"","type":"number"}}},"example":{"description":"Prints 1st player's jump power","code":"print( Entity( 1 ):GetJumpPower() )","output":"200"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetHullDuck","parent":"Player","type":"classfunc","description":"Gets the bottom base and the top base size of the player's crouch hull.","realm":"Shared","rets":{"ret":[{"text":"Player's crouch hull bottom base size.","name":"","type":"Vector"},{"text":"Player's crouch hull top base size.","name":"","type":"Vector"}]}},"example":{"description":"Prints bases' size of the crouch hull of all players.","code":"for _, ply in ipairs( player.GetAll() ) do\n\tlocal bottom, top = ply:GetHullDuck()\n\n\tprint(bottom)\n\tprint(top)\nend","output":"```\n-16.000000 -16.000000 0.000000\n16.000000 16.000000 36.000000\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetMaxSpeed","parent":"Player","type":"classfunc","description":"Returns the player's maximum movement speed.\n\nSee also Player:SetMaxSpeed, Player:GetWalkSpeed and Player:GetRunSpeed.","realm":"Shared","rets":{"ret":{"text":"The maximum movement speed the player can go at.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetMaxArmor","parent":"Player","type":"classfunc","description":"Returns the maximum amount of armor the player should have. Default value is 100.","realm":"Shared","added":"2020.10.14","rets":{"ret":{"text":"The new max armor value","name":"maxarmor","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetLaggedMovementValue","parent":"Player","type":"classfunc","description":"Returns the timescale multiplier of the player movement.","realm":"Shared","rets":{"ret":{"text":"The timescale multiplier, defaults to `1`.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetLadderClimbSpeed","parent":"Player","type":"classfunc","description":"Returns the player's ladder climbing speed.\n\nSee Player:GetWalkSpeed for normal walking speed, Player:GetRunSpeed for sprinting speed and Player:GetSlowWalkSpeed for slow walking speed.","realm":"Shared","added":"2020.03.17","rets":{"ret":{"text":"The ladder climbing speed.","name":"speed","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetNoCollideWithTeammates","parent":"Player","type":"classfunc","description":"Returns whenever the player is set not to collide with their teammates.","realm":"Shared","rets":{"ret":{"text":"noCollideWithTeammates","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetObserverTarget","parent":"Player","type":"classfunc","description":"Returns the entity the player is currently observing.\n\nSet using Player:SpectateEntity.","realm":"Shared","rets":{"ret":{"text":"The entity the player is currently spectating, or  if the player has no target.","name":"","type":"Entity","page":",NULLGlobal_Variables"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetPData","parent":"Player","type":"classfunc","description":{"text":"Returns a **P**layer **Data** key-value pair from the SQL database. (sv.db when called on server,  cl.db when called on client)\n\nInternally uses the sql.","warning":"This function internally uses Player:UniqueID, which can cause collisions (two or more players sharing the same PData entry). It's recommended that you don't use it. See the related wiki page for more information.","note":"PData is not networked from servers to clients!"},"realm":"Shared","file":{"text":"lua/includes/extensions/player.lua","line":"159-L171"},"args":{"arg":[{"text":"Name of the PData key","name":"key","type":"string"},{"text":"Default value if PData key doesn't exist.","name":"default","type":"any","default":"nil"}]},"rets":{"ret":{"text":"The data in the SQL database or the default value given.","name":"","type":"string"}}},"example":{"description":"Reads the key \"money\" from player 1's PData","code":"Entity( 1 ):GetPData( \"money\", 0 )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetObserverMode","parent":"Player","type":"classfunc","description":"Returns the the observer mode of the player","realm":"Shared","rets":{"ret":{"text":"Observe mode of that player, see Enums/OBS_MODE.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetName","parent":"Player","type":"classfunc","description":{"text":"Returns the player's name, this is an alias of Player:Nick.","note":"This function overrides Entity:GetName (in the Lua metatable, not in c++), keep it in mind when dealing with ents.FindByName or any engine function which requires the mapping name."},"realm":"Shared","rets":{"ret":{"text":"The player's name.","name":"","type":"string"}}},"example":{"description":"Prints the player's name","code":"print( Entity( 1 ):GetName() )","output":"Player1"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetPressedWidget","parent":"Player","type":"classfunc","description":"Returns the widget entity the player is using.\n\nHaving a pressed widget stops the player from firing his weapon to allow input to be passed onto the widget.","realm":"Shared","rets":{"ret":{"text":"The pressed widget.","name":"","type":"Entity"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetPreferredCarryAngles","parent":"Player","type":"classfunc","description":"Returns the preferred carry angles of an object, if any are set.\n\nCalls GM:GetPreferredCarryAngles with the target entity and returns the carry angles.","realm":"Server","args":{"arg":{"text":"Entity to retrieve the carry angles of.","name":"carryEnt","type":"Entity"}},"rets":{"ret":{"text":"Carry angles or nil if the entity has no preferred carry angles.","name":"","type":"Angle"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetPlayerInfo","parent":"Player","type":"classfunc","description":"Returns a table containing player information.","realm":"Client","rets":{"ret":{"text":"A table containing player information.","name":"","type":"table"}}},"example":{"description":"Example output for a bot and a player.","code":"PrintTable( Entity( 1 ):GetPlayerInfo() ) -- A player\nPrintTable( Entity( 2 ):GetPlayerInfo() ) -- A bot","output":"Player:\n```\nfriendname\t=\t\ncustomfiles:\n\t\t1\t=\t0912fb2c\n\t\t2\t=\t0912fb2c\n\t\t3\t=\t0912fb2c\n\t\t4\t=\t0912fb2c\nfakeplayer\t=\tfalse\nguid\t=\tSTEAM_0:0:18313012\nishltv\t=\tfalse\nfilesdownloaded\t=\t0\nfriendid\t=\t36626024\nname\t=\tRubat\nuserid\t=\t2\n```\n\nBot:\n```\nfriendname\t=\t\ncustomfiles:\n\t\t1\t=\t00000000\n\t\t2\t=\t00000000\n\t\t3\t=\t00000000\n\t\t4\t=\t00000000\nfakeplayer\t=\ttrue\nguid\t=\tBOT\nishltv\t=\tfalse\nfilesdownloaded\t=\t0\nfriendid\t=\t0\nname\t=\tBot01\nuserid\t=\t3\n```"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetPlayerColor","parent":"Player","type":"classfunc","description":"Returns a player model's color. The part of the model that is colored is determined by the model itself, and is different for each model. The format is Vector(r,g,b), and each color should be between 0 and 1.","realm":"Shared","rets":{"ret":{"text":"color","name":"","type":"Vector"}}},"example":{"description":"Gets player 1's model color, and prints it to console","code":"print( Entity( 1 ):GetPlayerColor() )","output":"Vector( 1, 1, 1 )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetPreviousWeapon","parent":"Player","type":"classfunc","description":"Returns the weapon the player previously had equipped.","realm":"Shared","rets":{"ret":{"text":"The previous weapon of the player.","name":"","type":"Entity","warning":"This is not guaranteed to be a weapon entity so it should be checked with Entity:IsWeapon for safety."}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetPunchAngle","parent":"Player","type":"classfunc","description":{"text":"Returns players screen punch effect angle.","deprecated":"You should use Player:GetViewPunchAngles instead."},"realm":"Shared","rets":{"ret":{"text":"The punch angle","name":"","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetRagdollEntity","parent":"Player","type":"classfunc","description":"Returns players death ragdoll. The ragdoll is created by Player:CreateRagdoll.","realm":"Shared","rets":{"ret":{"text":"The ragdoll.\n\nUnlike normal clientside ragdolls (`C_ClientRagdoll`), this will be a `C_HL2MPRagdoll` on the client, and `hl2mp_ragdoll` on the server.","name":"","type":"Entity"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetSlowWalkSpeed","parent":"Player","type":"classfunc","description":{"text":"Returns the player's slow walking speed, which is activated via  keybind.\n\nSee Player:GetWalkSpeed for normal walking speed, Player:GetRunSpeed for sprinting speed and Player:GetLadderClimbSpeed for ladder climb speed.","key":"+WALK"},"realm":"Shared","added":"2020.03.17","rets":{"ret":{"text":"The new slow walking speed.","name":"speed","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetStepSize","parent":"Player","type":"classfunc","description":"Returns the maximum height player can step onto.","realm":"Shared","rets":{"ret":{"text":"The maximum height player can get up onto without jumping, in hammer units.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetSuitPower","parent":"Player","type":"classfunc","description":{"text":"Returns the player's HEV suit power.","bug":{"text":"This will only work for the local player when used clientside.","issue":"3449"}},"realm":"Shared","rets":{"ret":{"text":"The current suit power.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetShootPos","parent":"Player","type":"classfunc","description":{"text":"Returns the position of a Player's view","note":"This is the same as calling Entity:EyePos on the player."},"realm":"Shared","rets":{"ret":{"text":"aim pos","name":"","type":"Vector"}}},"example":[{"description":"Gets player 1's shoot position, and prints it to console","code":"print( Entity( 1 ):GetShootPos() )","output":"A vector of the player's shooting position in the console."},{"description":"Prints the position of your player's camera, but using 3 different functions.\n\nThis example demonstrates that it doesn't matter whichever of these functions you use, you will get the SAME result.","code":"// run on client\nprint( LocalPlayer():GetEyeTrace().StartPos )\nprint( LocalPlayer():GetShootPos() )\nprint( LocalPlayer():EyePos() )","output":"```\n94.856689 -115.472549 -83.981430\n94.856689 -115.472549 -83.981430\n94.856689 -115.472549 -83.981430\n```"}],"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetRenderAngles","parent":"Player","type":"classfunc","description":"Returns the render angles for the player.","realm":"Shared","rets":{"ret":{"text":"The render angles of the player. Only **yaw** part of the angle seems to be present.","name":"","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetRunSpeed","parent":"Player","type":"classfunc","description":"Returns the player's sprint speed.\n\nSee also Player:SetRunSpeed, Player:GetWalkSpeed and Player:GetMaxSpeed.","realm":"Shared","rets":{"ret":{"text":"The sprint speed","name":"","type":"number"}}},"example":{"description":"Prints the players run speed in the code.","code":"print( Entity( 1 ):GetRunSpeed() )","output":"500"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetTimeoutSeconds","parent":"Player","type":"classfunc","description":"Returns the number of seconds that the player has been timing out for. You can check if a player is timing out with Player:IsTimingOut.","realm":"Server","rets":{"ret":{"text":"Timeout seconds.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetUnDuckSpeed","parent":"Player","type":"classfunc","description":"Returns a player's unduck speed (in seconds)","realm":"Shared","rets":{"ret":{"text":"unduck speed","name":"","type":"number"}}},"example":{"description":"Gets player 1's unduck speed, and prints it to console","code":"print( Entity( 1 ):GetUnDuckSpeed() )","output":"0.3 in console"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetUseEntity","parent":"Player","type":"classfunc","description":"Returns the entity the player would use if they would press their `+use` keybind.","realm":"Shared","added":"2020.06.24","rets":{"ret":{"text":"The entity that would be used or NULL.","name":"ent","type":"Entity"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetTool","parent":"Player","type":"classfunc","description":{"text":"Returns  table of players current tool, or of the one specified.","page":",TOOLStructures/TOOL"},"realm":"Shared","args":{"arg":{"text":"Classname of the tool to retrieve. ( Filename of the tool in gmod_tool/stools/ )","name":"mode","type":"string","default":"nil"}},"rets":{"ret":{"text":"TOOL table, or nil if the table wasn't found or the player doesn't have a tool gun.","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetUserGroup","parent":"Player","type":"classfunc","description":"Returns the player's user group. By default, player user groups are loaded from `garrysmod/settings/users.txt`.","realm":"Shared","file":{"text":"lua/includes/extensions/player_auth.lua","line":"34-L40"},"rets":{"ret":{"text":"The user group of the player. This will return \"user\" if player has no user group.","name":"","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetViewEntity","parent":"Player","type":"classfunc","description":"Returns the entity the player is using to see from (such as the player itself, the camera, or another entity).","realm":"Shared","rets":{"ret":{"text":"The entity the player is using to see from","name":"","type":"Entity"}}},"example":{"description":"Will print what entity the first player uses to look through.","code":"print( Entity( 1 ):GetViewEntity() )","output":"Player [1][ExamplePlayer]"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetVehicle","parent":"Player","type":"classfunc","description":"Gets the vehicle the player is driving, returns NULL ENTITY if the player is not driving.","realm":"Shared","rets":{"ret":{"text":"vehicle","name":"","type":"Vehicle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetViewOffset","parent":"Player","type":"classfunc","description":"Returns the view offset of the player which equals the difference between the players actual position and their view.\n\nSee also Player:GetViewOffsetDucked.","realm":"Shared","rets":{"ret":{"text":"New view offset, must be local vector to players Entity:GetPos","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetViewOffsetDucked","parent":"Player","type":"classfunc","description":"Returns the view offset of the player which equals the difference between the players actual position and their view when ducked.\n\nSee also Player:GetViewOffset.","realm":"Shared","rets":{"ret":{"text":"New crouching view offset, must be local vector to players Entity:GetPos","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetViewPunchAngles","parent":"Player","type":"classfunc","description":"Returns players screen punch effect angle.","realm":"Shared","rets":{"ret":{"text":"The punch angle","name":"","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetViewPunchVelocity","parent":"Player","type":"classfunc","description":"Returns client's view punch velocity. See Player:ViewPunch and Player:SetViewPunchVelocity","realm":"Shared","added":"2020.10.14","rets":{"ret":{"text":"The current view punch angle velocity.","name":"punchVel","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetWeapon","parent":"Player","type":"classfunc","description":"Returns the weapon for the specified class","realm":"Shared","args":{"arg":{"text":"Class name of weapon","name":"className","type":"string"}},"rets":{"ret":{"text":"The weapon for the specified class.","name":"","type":"Weapon"}}},"example":{"description":"Prints the weapon if the player has the toolgun","code":"print( Entity( 1 ):GetWeapon( \"gmod_tool\" ) )","output":"Something like \"Weapon [77]\" in console."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetWalkSpeed","parent":"Player","type":"classfunc","description":"Returns the player's normal walking speed. Not sprinting, not slow walking. (+walk)\n\nSee also Player:SetWalkSpeed, Player:GetMaxSpeed and Player:GetRunSpeed.","realm":"Shared","rets":{"ret":{"text":"The normal walking speed.","name":"","type":"number"}}},"example":{"description":"Gets player 1's walk speed, and prints it to console","code":"print( Entity( 1 ):GetWalkSpeed() )","output":"200 in console by default"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetViewModel","parent":"Player","type":"classfunc","description":{"text":"Returns the player's view model entity by the index.\nEach player has 3 view models by default, but only the first one is used.\n\nTo use the other viewmodels in your SWEP, see Entity:SetWeaponModel.","note":{"text":"In the Client , other players' viewmodels are not available unless they are being spectated.","page":",realmStates"}},"realm":"Shared","args":{"arg":{"text":"optional index of the view model to return, can range from 0 to 2","name":"index","type":"number","default":"0"}},"rets":{"ret":{"text":"The view model entity","name":"","type":"Entity"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetWeaponColor","parent":"Player","type":"classfunc","description":"Returns a player's weapon color. The part of the model that is colored is determined by the model itself, and is different for each model. The format is Vector(r,g,b), and each color should be between 0 and 1.","realm":"Shared","rets":{"ret":{"text":"color","name":"","type":"Vector"}}},"example":{"description":"Gets player 1's weapon color, and prints it to console","code":"print( Entity( 1 ):GetWeaponColor() )","output":"Vector( 1, 1, 1 )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetWeapons","parent":"Player","type":"classfunc","description":"Returns a table of the player's weapons.","realm":"Shared","rets":{"ret":{"text":"All the weapons the player currently has.","name":"","type":"table"}}},"example":{"description":"Prints how many weapons the player has.","code":"print( #Entity( 1 ):GetWeapons() )","output":"The number of weapons the player has (e.g. 5)."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GodDisable","parent":"Player","type":"classfunc","description":"Disables god mode on the player.","realm":"Server","file":{"text":"lua/includes/extensions/player.lua","line":"261-L269"}},"example":{"description":"Disables god mode on all players.","code":"for _, ply in ipairs( player.GetAll() ) do\n    ply:GodDisable()\nend"},"realms":["Server"],"type":"Function"},
{"function":{"name":"GodEnable","parent":"Player","type":"classfunc","description":"Enables god mode on the player.","realm":"Server","file":{"text":"lua/includes/extensions/player.lua","line":"251-L259"}},"example":{"description":"Enable god mode on all players.","code":"for _, ply in ipairs( player.GetAll() ) do\n    ply:GodEnable()\nend"},"realms":["Server"],"type":"Function"},
{"function":{"name":"GiveAmmo","parent":"Player","type":"classfunc","description":"Gives ammo to a player","realm":"Server","args":{"arg":[{"text":"Amount of ammo","name":"amount","type":"number"},{"text":"Type of ammo.\n\nThis can also be a number for ammo ID, useful for custom ammo types.\n\nYou can find a list of default ammo types .","name":"type","type":"string","page":",hereDefault_Ammo_Types"},{"text":"Hide display popup when giving the ammo","name":"hidePopup","type":"boolean","default":"false"}]},"rets":{"ret":{"text":"Ammo given.","name":"","type":"number"}}},"example":{"description":"Give the player 200 rounds for the pistol, hiding the popup.","code":"Entity( 1 ):GiveAmmo( 200, \"Pistol\", true )"},"realms":["Server"],"type":"Function"},
{"function":{"name":"Give","parent":"Player","type":"classfunc","description":{"text":"Gives the player a weapon.","note":"While this function is meant for weapons/pickupables only, it is **not** restricted to weapons. Any entity can be spawned using this function, including NPCs and SENTs."},"realm":"Server","args":{"arg":[{"text":"Class name of weapon to give the player","name":"weaponClassName","type":"string"},{"text":"Set to true to not give any ammo on weapon spawn. (Reserve ammo set by DefaultClip)","name":"bNoAmmo","type":"boolean","default":"false"}]},"rets":{"ret":{"text":"The weapon given to the player, if one was given. It will return NULL if the player already has the weapon, or the weapon entity (entity with given classname) doesn't exist.","name":"","type":"Weapon"}}},"example":[{"description":"Gives the player a toolgun","code":"Entity( 1 ):Give( \"gmod_tool\" )"},{"description":"Removes all weapons and ammo from a player and gives a weapon_base SWEP with no ammo in it.","code":"Entity( 1 ):StripWeapons()\nEntity( 1 ):StripAmmo()\nEntity( 1 ):Give( \"weapon_base\", true )"}],"realms":["Server"],"type":"Function"},
{"function":{"name":"HasWeapon","parent":"Player","type":"classfunc","description":"Returns if the player has the specified weapon","realm":"Shared","args":{"arg":{"text":"Class name of the weapon","name":"className","type":"string"}},"rets":{"ret":{"text":"True if the player has the weapon","name":"","type":"boolean"}}},"example":{"description":"prints if the player has the physgun","code":"print( Entity( 1 ):HasWeapon( \"weapon_physgun\" ) )","output":"\"true\" in console, if player 1 has Physics Gun."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"HasGodMode","parent":"Player","type":"classfunc","description":{"text":"Returns whether the player has god mode or not, contolled by Player:GodEnable and Player:GodDisable.","bug":{"text":"This is not synced between the client and server. This will cause the client to always return false even in godmode.","issue":"2038"}},"realm":"Shared","file":{"text":"lua/includes/extensions/player.lua","line":"283-L291"},"rets":{"ret":{"text":"Whether the player has god mode or not.","name":"","type":"boolean"}}},"example":{"description":"A fix for accessing this data on client side since you can't at the moment.","code":"if CLIENT then\n\tlocal meta = FindMetaTable( \"Player\" )\n\t\n\tfunction meta:HasGodMode()\n\t\treturn self:GetNWBool( \"HasGodMode\" )\n\tend\nend\n\nif SERVER then\n\tlocal meta = FindMetaTable( \"Player\" )\n\n\tmeta.DefaultGodEnable  = meta.DefaultGodEnable  or meta.GodEnable\n\tmeta.DefaultGodDisable = meta.DefaultGodDisable or meta.GodDisable\n\n\tfunction meta:GodEnable()\n\t\tself:SetNWBool( \"HasGodMode\", true )\n\t\tself:DefaultGodEnable()\n\tend\n\n\tfunction meta:GodDisable()\n\t\tself:SetNWBool( \"HasGodMode\", false )\n\t\tself:DefaultGodDisable()\n\tend\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"InVehicle","parent":"Player","type":"classfunc","description":"Returns if the player is in a vehicle","realm":"Shared","rets":{"ret":{"text":"Whether the player is in a vehicle.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsAdmin","parent":"Player","type":"classfunc","description":"Returns whether the player is an admin or not. It will also return `true` if the player is Player:IsSuperAdmin by default.\n\nInternally this is determined by Player:IsUserGroup.","realm":"Shared","file":{"text":"lua/includes/extensions/player_auth.lua","line":"5-L14"},"rets":{"ret":{"text":"True if the player is an admin or a super admin.","name":"","type":"boolean"}}},"example":{"description":"Every time a player spawns, print in the console whether they are an admin.","code":"hook.Add( \"PlayerSpawn\", \"PrintIfAdmin\", function( ply )\n    if ( ply:IsAdmin() ) then \n\t\tprint( \"It's true, \" .. ply:Nick() .. \" is an admin\" )\n    else\n\t\tprint( \"It's false, \" .. ply:Nick() .. \" is not an admin\" )\n    end\nend )","output":"```\nIt's true, Alice is an admin.\nIt's false, Bob is not an admin.\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsBot","parent":"Player","type":"classfunc","description":"Returns if the player is an bot or not","realm":"Shared","rets":{"ret":{"text":"True if the player is a bot.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IPAddress","parent":"Player","type":"classfunc","description":"Returns the player's IP address and connection port in ip:port form","realm":"Server","rets":{"ret":{"text":"The player's IP address and connection port","name":"","type":"string"}}},"example":{"description":"Prints the player's IP and port","code":"print( Entity( 1 ):IPAddress() )","output":"192.168.1.101:27005"},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsFrozen","parent":"Player","type":"classfunc","description":"Returns whether the players movement is currently frozen, controlled by Player:Freeze.","realm":"Shared","file":{"text":"lua/includes/extensions/player.lua","line":"273-L281"},"rets":{"ret":{"text":"Whether the players movement is currently frozen or not.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsConnected","parent":"Player","type":"classfunc","description":"Returns true from the point when the player is sending client info but not fully in the game until they disconnect.","realm":"Server","rets":{"ret":{"text":"isConnected","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsDrivingEntity","parent":"Player","type":"classfunc","description":"Used to find out if a player is currently 'driving' an entity (by which we mean 'right click > drive' ).","realm":"Shared","rets":{"ret":{"text":"A value representing whether or not the player is 'driving' an entity.","name":"","type":"boolean"}}},"example":{"description":"Kills every player currently 'driving' an entity.","code":"for i, ply in ipairs( player.GetAll() ) do\n    if ( ply:IsDrivingEntity() ) then\n        ply:Kill()\n    end\nend","output":"Every player 'driving' an entity will die a painful death."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsListenServerHost","parent":"Player","type":"classfunc","description":"Returns if a player is the host of the current session.","realm":"Server","rets":{"ret":{"text":"True if the player is the listen server host, false otherwise.\n\nThis will always be true in single player, and false on a dedicated server.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsPlayingTaunt","parent":"Player","type":"classfunc","description":"Returns true if the player is playing a taunt.","realm":"Shared","rets":{"ret":{"text":"Whether the player is playing a taunt.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsFullyAuthenticated","parent":"Player","type":"classfunc","description":"Returns whether the player identity was confirmed by the steam network.\n\nSee also GM:PlayerAuthed.","realm":"Server","rets":{"ret":{"text":"Whether the player has been fully authenticated or not.\n\nThis will always be true for singleplayer and the listen server host.\nThis will always be false for bots.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsMuted","parent":"Player","type":"classfunc","description":"Returns whether or not the player is muted locally.","realm":"Client","rets":{"ret":{"text":"whether or not the player is muted locally.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsSpeaking","parent":"Player","type":"classfunc","description":"Returns whenever the player is heard by the local player.","realm":"Client","rets":{"ret":{"text":"Is the player speaking or not.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsSuperAdmin","parent":"Player","type":"classfunc","description":"Returns whether the player is a super admin.\n\nInternally this is determined by Player:IsUserGroup. See also Player:IsAdmin.","realm":"Shared","file":{"text":"lua/includes/extensions/player_auth.lua","line":"22-L26"},"rets":{"ret":{"text":"True if the player is a super admin.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsTimingOut","parent":"Player","type":"classfunc","description":"Returns true if the player is timing out (i.e. is losing connection), false otherwise.","realm":"Server","rets":{"ret":{"text":"isTimingOut","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsTyping","parent":"Player","type":"classfunc","description":"Returns whether the player is typing in their chat.\n\nThis may not work properly if the server uses a custom chatbox.","realm":"Shared","rets":{"ret":{"text":"Whether the player is typing in their chat or not.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsUserGroup","parent":"Player","type":"classfunc","description":"Returns true/false if the player is in specified group or not. See Player:GetUserGroup for a way to get player's usergroup.","realm":"Shared","file":{"text":"lua/includes/extensions/player_auth.lua","line":"28-L38"},"args":{"arg":{"text":"Group to check the player for.","name":"groupname","type":"string"}},"rets":{"ret":{"text":"isInUserGroup","name":"","type":"boolean"}}},"example":{"description":"Prints in the players console \"yes, I'm awesome!\" if he's in the superadmin group.","code":"if ( Entity( 1 ):IsUserGroup( \"superadmin\" ) ) then\n    print( \"Yes, I'm awesome!\" )\nend","output":"\"Yes, I'm awesome!\" in console."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsVoiceAudible","parent":"Player","type":"classfunc","description":"Returns if the player can be heard by the local player.","realm":"Client","rets":{"ret":{"text":"isAudible","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsSuitEquipped","parent":"Player","type":"classfunc","description":{"text":"Returns whenever the player is equipped with the suit item.","bug":{"text":"This will only work for the local player when used clientside.","issue":"3449"}},"realm":"Shared","rets":{"ret":{"text":"Is the suit equipped or not.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsSprinting","parent":"Player","type":"classfunc","description":"Returns whether the player is currently sprinting or not, specifically if they are holding their sprint key and are allowed to sprint.\n\nThis will not check if the player is currently sprinting into a wall. (i.e. holding their sprint key but not moving)","realm":"Shared","rets":{"ret":{"text":"Is the player sprinting or not","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"KeyPressed","parent":"Player","type":"classfunc","description":"Gets whether a key was just pressed this tick.","realm":"Shared","args":{"arg":{"text":"Corresponds to an Enums/IN","name":"key","type":"number"}},"rets":{"ret":{"text":"Was pressed or not","name":"","type":"boolean"}}},"example":{"description":{"text":"Prints whenever the first player first starts pressing  key ( on QWERTY keyboards).","key":["+FORWARD","W"]},"code":"hook.Add( \"Tick\", \"CheckPlayer1Forward\", function()\n\tif ( Entity( 1 ):KeyPressed( IN_FORWARD ) ) then\n\t\tprint( \"Player1 just started moving forward!\" )\n\tend\nend )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsWorldClicking","parent":"Player","type":"classfunc","description":{"text":"Returns if the player is in the context menu.","note":"Although this is shared, it will only work properly on the CLIENT for the local player. Using this serverside or on other players will return false."},"realm":"Shared","rets":{"ret":{"text":"Is the player world clicking or not.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"KeyDownLast","parent":"Player","type":"classfunc","description":"Gets whether a key was down one tick ago.","realm":"Shared","args":{"arg":{"text":"The key, see Enums/IN","name":"key","type":"number"}},"rets":{"ret":{"text":"Is key down ?","name":"","type":"boolean"}}},"example":{"description":{"text":"Prints whenever the first player stopped pressing  key ( on QWERTY keyboards) last tick","key":["+FORWARD","W"]},"code":"hook.Add( \"Tick\", \"CheckPlayer1Forward\", function()\n\tif !Entity( 1 ):KeyDown( IN_FORWARD ) and Entity( 1 ):KeyDownLast( IN_FORWARD ) then\n\t\tprint( \"Player1 is no longer holding W!\" )\n\tend\nend )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"KeyReleased","parent":"Player","type":"classfunc","description":"Gets whether a key was just released this tick.","realm":"Shared","args":{"arg":{"text":"The key, see Enums/IN","name":"key","type":"number"}},"rets":{"ret":{"text":"Was released or not","name":"","type":"boolean"}}},"example":{"description":{"text":"Prints whenever the first player first stops pressing  key ( on QWERTY keyboards).","key":["+FORWARD","W"]},"code":"hook.Add( \"Tick\", \"CheckPlayer1Forward\", function()\n\tif Entity( 1 ):KeyReleased( IN_FORWARD ) then\n\t\tprint( \"Player1 just stopped moving forward!\" )\n\tend\nend )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"KeyDown","parent":"Player","type":"classfunc","description":"Gets whether a key is down. This is not networked to other players, meaning only the local client can see the keys they are pressing.","realm":"Shared","args":{"arg":{"text":"The key, see Enums/IN","name":"key","type":"number"}},"rets":{"ret":{"text":"isDown ?","name":"","type":"boolean"}}},"example":{"description":{"text":"Prints whenever the first player is holding  key ( on QWERTY keyboards).","key":["+FORWARD","W"]},"code":"hook.Add( \"Tick\", \"KeyDown_Test\", function()\n\tif ( Entity( 1 ):KeyDown( IN_FORWARD ) ) then\n\t\tprint( \"Player is pressing forward!\" )\n\tend\nend )","output":"```\nPlayer is pressing forward!\nPlayer is pressing forward!\nPlayer is pressing forward!\nPlayer is pressing forward!\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"LagCompensation","parent":"Player","type":"classfunc","description":{"text":"This allows the server to mitigate the lag of the player by moving back all the entities that can be lag compensated to the time the player attacked with his weapon.\n\nThis technique is most commonly used on things that hit other entities instantaneously, such as traces.\n\n\n\nLag compensation only works for players and entities that have been enabled with Entity:SetLagCompensated\n\nDespite being defined shared, it can only be used server-side in a .","note":"Entity:FireBullets calls this function internally.","page":",Predicted Hook~search:%3Cpredicted%3EYes","warning":"This function NEEDS to be disabled after you're done with it or it will break the movement of the entities affected!","bug":{"text":"Lag compensation does not support pose parameters.","issue":"3683"}},"realm":"Shared","args":{"arg":{"text":"The state of the lag compensation, true to enable and false to disable.","name":"lagCompensation","type":"boolean"}}},"example":{"description":"Do a crowbar-like melee trace, enabling lag compensation before doing so.","code":"function SWEP:PrimaryAttack()\n\tlocal tracedata = {}\n\ttracedata.start = self.Owner:GetShootPos()\n\ttracedata.endpos = self.Owner:GetShootPos() + self.Owner:GetAimVector() * 75\n\ttracedata.filter = self.Owner\n\ttracedata.mins =  Vector( -8 , -8 , -8 )\n\ttracedata.maxs =  Vector( 8 , 8 , 8 )\n\t\n\t-- It is recommended to use an IsPlayer check in case the weapon is being used by an NPC.\n\tif ( self.Owner:IsPlayer() ) then\n\t\tself.Owner:LagCompensation( true )\n\tend\n\t\n\tlocal tr = util.TraceHull( tracedata )\n\t\n\tif ( self.Owner:IsPlayer() ) then\n\t\tself.Owner:LagCompensation( false )\n\tend\n\t\n\tif tr.Hit then\n\t\tprint( tr.Entity )\t--your code here\n\tend\n\t\n\tself:SetNextPrimaryFire( CurTime() + 0.5 )\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Kick","parent":"Player","type":"classfunc","description":{"text":"Kicks the player from the server.","note":"This can not be run before the player has fully joined in. Use game.KickID for that."},"realm":"Server","args":{"arg":{"text":"Reason to show for disconnection.","name":"reason","type":"string","default":"No reason given","warning":"This will be shortened to ~512 chars, though this includes the command itself and the player index so will realistically be more around ~498. It is recommended to avoid going near the limit to avoid truncation."}}},"example":{"description":"Kick a player with reason \"Goodbye\"","code":"Entity( 1 ):Kick( \"Goodbye\" )"},"realms":["Server"],"type":"Function"},
{"function":{"name":"Kill","parent":"Player","type":"classfunc","description":"Kills a player and calls GM:PlayerDeath.","realm":"Server"},"example":{"description":"When the user types \"/respawn\" the user will be killed and then respawned.","code":"hook.Add( \"PlayerSay\", \"RespawnCommand\", function( ply, text, public )\n\tif ( string.lower( text ) == \"/respawn\" ) then\n\t\tply:Kill()\n\t\tply:Spawn()\n\n\t\treturn \"\"\n\tend\nend )"},"realms":["Server"],"type":"Function"},
{"function":{"name":"KillSilent","parent":"Player","type":"classfunc","description":"Kills a player without notifying the rest of the server.\n\nThis will call GM:PlayerSilentDeath instead of GM:PlayerDeath.","realm":"Server"},"example":{"description":"Silently kills the player.","code":"Entity( 1 ):KillSilent()"},"realms":["Server"],"type":"Function"},
{"function":{"name":"MotionSensorPos","parent":"Player","type":"classfunc","description":"Returns the position of a Kinect bone.","realm":"Shared","args":{"arg":{"text":"Bone to get the position of. Must be from 0 to 19.","name":"bone","type":"number"}},"rets":{"ret":{"text":"Position of the bone.","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Name","parent":"Player","type":"classfunc","description":"Returns the players name. Identical to Player:Nick and Player:GetName.","realm":"Shared","rets":{"ret":{"text":"Player's Steam name.","name":"","type":"string"}}},"example":{"description":"Prints the players name in console.","code":"print( Entity( 1 ):Name() )","output":"Player1"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Nick","parent":"Player","type":"classfunc","description":"Returns the player's nickname.","realm":"Shared","rets":{"ret":{"text":"Player's Steam name","name":"","type":"string"}}},"example":{"description":"Prints the player's nickname","code":"print( Entity( 1 ):Nick() )","output":"Player1"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Lock","parent":"Player","type":"classfunc","description":{"text":"Stops a player from using any inputs, such as moving, turning, or attacking. Key binds are still called. Similar to Player:Freeze but the player takes no damage.\n\nAdds the  and  flags to the player.","page":[",FL_FROZENEnums/FL",",FL_GODMODEEnums/FL"],"bug":"Frozen bots will still be able to look around."},"realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"LimitHit","parent":"Player","type":"classfunc","description":{"text":"Shows \"limit hit\" notification in sandbox.","note":"This function is only available in Sandbox and its derivatives."},"realm":"Shared","args":{"arg":{"text":"Type of hit limit.","name":"type","type":"string"}}},"example":{"description":"Sends a fake `limit hit` notification.","code":"for _, ply in ipairs( player.GetAll() ) do\n\tply:LimitHit( \"test\" )\nend","output":"A notification pops up saying `SBoxLimit_test\"`."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"LastHitGroup","parent":"Player","type":"classfunc","description":"Returns the hitgroup where the player was last hit.","realm":"Server","rets":{"ret":{"text":"Hitgroup, see Enums/HITGROUP","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"PickupObject","parent":"Player","type":"classfunc","description":{"text":"This makes the player hold ( same as pressing  on a small prop ) the provided entity.","key":"E","note":["Don't get this confused with picking up items like ammo or health kits","This picks up the passed entity regardless of its mass or distance from the player"]},"realm":"Server","args":{"arg":{"text":"Entity to pick up.","name":"entity","type":"Entity"}}},"example":{"description":"An extra function to make sure the object isn't held before being picked up.","code":"function PlayerPickupObject( ply, obj )\n\tif ( obj:IsPlayerHolding() ) then return end\n\n\tply:PickupObject( obj )\nend"},"realms":["Server"],"type":"Function"},
{"function":{"name":"PhysgunUnfreeze","parent":"Player","type":"classfunc","description":"Unfreezes the props player is looking at. This is essentially the same as pressing reload with the physics gun, including double press for unfreeze all.","realm":"Shared","rets":{"ret":{"text":"Number of props unfrozen.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"PacketLoss","parent":"Player","type":"classfunc","description":"Returns the packet loss of the client. It is not networked so it only returns 0 when run clientside.","realm":"Shared","rets":{"ret":{"text":"Packets lost","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"OwnerSteamID64","parent":"Player","type":"classfunc","description":{"text":"Returns the 64-bit SteamID aka CommunityID of the Steam Account that owns the Garry's Mod license this player is using. This is useful for detecting players using Steam Family Sharing.\n\nIf player is not using Steam Family Sharing, this will return the player's actual SteamID64().","note":"This data will only be available after the player has fully authenticated with Steam. See Player:IsFullyAuthenticated."},"realm":"Server","added":"2020.08.12","rets":{"ret":{"text":"The 64bit SteamID","name":"","type":"string"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"PickupWeapon","parent":"Player","type":"classfunc","description":"Forces the player to pickup an existing weapon entity. The player will not pick up the weapon if they already own a weapon of given type, or if the player could not normally have this weapon in their inventory.\n\nThis function **will** bypass GM:PlayerCanPickupWeapon.","realm":"Server","added":"2020.06.24","args":{"arg":[{"text":"The weapon to try to pick up.","name":"wep","type":"Weapon"},{"text":"If set to true, the player will only attempt to pick up the ammo from the weapon. The weapon will not be picked up even if the player doesn't have a weapon of this type, and the weapon will be removed if the player picks up any ammo from it.","name":"ammoOnly","type":"boolean","default":"false"}]},"rets":{"ret":{"text":"Whether the player succeeded in picking up the weapon or not.","name":"result","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"PlayStepSound","parent":"Player","type":"classfunc","description":"Plays the correct step sound according to what the player is staying on.","realm":"Server","args":{"arg":{"text":"Volume for the sound, in range from 0 to 1","name":"volume","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Ping","parent":"Player","type":"classfunc","description":"Returns the player's ping to server.","realm":"Shared","rets":{"ret":{"text":"The player's ping.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"PrintMessage","parent":"Player","type":"classfunc","description":{"text":"Displays a message either in their chat, console, or center of the screen. See also Global.PrintMessage.","note":"When called serverside, this uses the archaic user message system (the umsg) and hence is limited to ≈250 characters.\n\n`HUD_PRINTCENTER` will not work when this is called clientside."},"realm":"Shared","args":{"arg":[{"text":"Which type of message should be sent to the player (Enums/HUD).","name":"type","type":"number"},{"text":"Message to be sent to the player.","name":"message","type":"string"}]}},"example":{"description":"Prints into the first players chat: `I'm new here.`.","code":"Entity( 1 ):PrintMessage( HUD_PRINTTALK, \"I'm new here.\" )","output":"I'm new here."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"RemoveAllItems","parent":"Player","type":"classfunc","description":"Removes all weapons and ammo from the player.","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"RemoveAmmo","parent":"Player","type":"classfunc","description":"Removes the amount of the specified ammo from the player.","realm":"Shared","args":{"arg":[{"text":"The amount of ammunition to remove.","name":"ammoCount","type":"number"},{"text":"The name of the ammunition to remove from. This can also be a number ammoID.","name":"ammoName","type":"string"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ResetHull","parent":"Player","type":"classfunc","description":"Resets both normal and duck hulls to their default values.","realm":"Shared"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"RemovePData","parent":"Player","type":"classfunc","description":{"text":"Removes a **P**layer **Data** key-value pair from the SQL database. (sv.db when called on server,  cl.db when called on client)\n\nInternally uses the sql.","warning":"This function internally uses Player:UniqueID, which can cause collisions (two or more players sharing the same PData entry). It's recommended that you don't use it. See the related wiki page for more information."},"realm":"Shared","file":{"text":"lua/includes/extensions/player.lua","line":"184-L193"},"args":{"arg":{"text":"Key to remove","name":"key","type":"string"}},"rets":{"ret":{"text":"true is succeeded, false otherwise","name":"","type":"boolean"}}},"example":{"description":"Deletes the key \"money\" from player 1","code":"Entity( 1 ):RemovePData( \"money\" )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"RemoveSuit","parent":"Player","type":"classfunc","description":"Strips the player's suit item.","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"Say","parent":"Player","type":"classfunc","description":{"text":"Forces the player to say whatever the first argument is. Works on bots too.","note":"This function ignores the default chat message cooldown"},"realm":"Server","args":{"arg":[{"text":"The text to force the player to say.","name":"text","type":"string"},{"text":"Whether to send this message to our own team only.","name":"teamOnly","type":"boolean","default":"false"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"ScreenFade","parent":"Player","type":"classfunc","description":"Fades the screen","realm":"Shared","args":{"arg":[{"text":"Fade flags defined with Enums/SCREENFADE.","name":"flags","type":"number"},{"text":"The color of the screenfade","name":"clr","type":"number","default":"color_white"},{"text":"Fade(in/out) effect transition time ( From no fade to full fade and vice versa )","name":"fadeTime","type":"number"},{"text":"Fade effect hold time","name":"fadeHold","type":"number"}]}},"example":{"description":"Flashes the screen red to nothing over 0.3 seconds when a player gets hurt.","code":"hook.Add( \"PlayerHurt\", \"hurt_effect_fade\", function( ply )\n\tply:ScreenFade( SCREENFADE.IN, Color( 255, 0, 0, 128 ), 0.3, 0 )\nend )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SelectWeapon","parent":"Player","type":"classfunc","description":{"text":"Sets the active weapon of the player by its class name.","warning":"This will switch the weapon out of prediction, causing delay on the client and WEAPON:Deploy and WEAPON:Holster to be called out of prediction. Try using CUserCmd:SelectWeapon or input.SelectWeapon, instead.","note":"This will trigger the weapon switch event and associated animations. To switch weapons silently, use Player:SetActiveWeapon."},"realm":"Server","args":{"arg":{"text":"The class name of the weapon to switch to.\n\nIf the player doesn't have the specified weapon, nothing will happen. You can use Player:Give to give the weapon first.","name":"className","type":"string"}}},"example":[{"description":"Force the player to switch to toolgun","code":"Entity( 1 ):SelectWeapon( \"gmod_tool\" )"},{"description":"Selects a random weapon from the player's inventory and switches to it.","code":"local weapons = Entity( 1 ):GetWeapons()\nlocal weapon = weapons[ math.random( #weapons ) ]\n\nEntity( 1 ):SelectWeapon( weapon:GetClass() )"}],"realms":["Server"],"type":"Function"},
{"function":{"name":"SendLua","parent":"Player","type":"classfunc","description":{"text":"Executes a simple Lua string on the player.","note":["If you need to use this function more than once consider using net library. Send net message and make the entire code you want to execute in net.Receive on client.",{"text":"The string is limited to 254 bytes. Consider using the  for more advanced server-client interaction.","page":",net libraryNet_Library_Usage"}]},"realm":"Server","args":{"arg":{"text":"The script to execute.","name":"script","type":"string"}}},"example":{"description":"Sends \"Hello World\" to the client's console.","code":"Entity( 1 ):SendLua( \"print( 'Hello World' )\" )"},"realms":["Server"],"type":"Function"},
{"function":{"name":"SendHint","parent":"Player","type":"classfunc","description":{"text":"Sends a hint to a player.","note":"This function is only available in Sandbox and its derivatives. Since this adds `#Hint_` to the beginning of each message, you should only use it with default hint messages, or those cached with language.Add. For hints with custom text, look at notification.AddLegacy."},"realm":"Server","args":{"arg":[{"text":"Name/class/index of the hint. The text of the hint will contain this value. ( \"#Hint_\" .. name ) An example is `PhysgunFreeze`.","name":"name","type":"string"},{"text":"Delay in seconds before showing the hint","name":"delay","type":"number"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"RemoveAllAmmo","parent":"Player","type":"classfunc","description":"Removes all ammo from a certain player","realm":"Server"},"example":{"description":"A console command that removes ammo on the player that used it.","code":"concommand.Add( \"removeammo\", function( ply )\n\tply:RemoveAllAmmo()\nend )"},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetActiveWeapon","parent":"Player","type":"classfunc","description":"Sets the player's active weapon. You should use CUserCmd:SelectWeapon or Player:SelectWeapon, instead in most cases.\n\nThis function will not trigger the weapon switch events or associated equip animations. It will bypass \n GM:PlayerSwitchWeapon and the currently active weapon's WEAPON:Holster return value.","realm":"Server","args":{"arg":{"text":"The weapon to equip.","name":"weapon","type":"Weapon"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetActivity","parent":"Player","type":"classfunc","description":"Sets the player's activity.","added":"2021.03.31","realm":"Server","args":{"arg":{"text":"The new activity to set. See Enums/ACT.","name":"act","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetAmmo","parent":"Player","type":"classfunc","description":"Sets the amount of the specified ammo for the player.","realm":"Shared","args":{"arg":[{"text":"The amount of ammunition to set.","name":"ammoCount","type":"number"},{"text":"The ammunition type. Can be either number ammo ID or string ammo name.","name":"ammoType","type":"any"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetArmor","parent":"Player","type":"classfunc","description":"Sets the player armor to the argument.","realm":"Server","args":{"arg":{"text":"The amount that the player armor is going to be set to.","name":"Amount","type":"number"}}},"example":[{"description":"Sets the player armor to 100 when they types \"SetArmor\" at the console.","code":"concommand.Add( \"SetArmor\", function( ply )\n\tply:SetArmor( 100 )\nend )","output":"Sets the player armor to 100"},{"description":"Gives the player armor to first vararg when they types \"AddArmor\" at the console.","code":"concommand.Add( \"GiveArmor\", function( ply, cmd, args )\n\tlocal Armor = args[1] or 100\n\tply:SetArmor( ply:Armor() + Armor )\nend )","output":"Adds the player armor to first vararg"}],"realms":["Server"],"type":"Function"},
{"function":{"name":"SetAvoidPlayers","parent":"Player","type":"classfunc","description":"Pushes the player away from another player whenever it's inside the other players bounding box.","realm":"Shared","args":{"arg":{"text":"Avoid or not avoid.","name":"avoidPlayers","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetCanZoom","parent":"Player","type":"classfunc","description":"Sets whether the player can use the HL2 suit zoom (\"+zoom\" bind) or not.","realm":"Shared","args":{"arg":{"text":"Whether to make the player able or unable to zoom.","name":"canZoom","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetClassID","parent":"Player","type":"classfunc","description":"Sets the player's class id.","realm":"Shared","args":{"arg":{"text":"The class id the player is being set with.","name":"classID","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetCanWalk","parent":"Player","type":"classfunc","description":"Set if the player should be allowed to walk using the (default) alt key.","realm":"Shared","args":{"arg":{"text":"True allows the player to walk.","name":"abletowalk","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetCrouchedWalkSpeed","parent":"Player","type":"classfunc","description":"Sets the crouched walk speed multiplier.\n\nDoesn't work for values above 1.\n\nSee also Player:SetWalkSpeed and Player:GetCrouchedWalkSpeed.","realm":"Shared","args":{"arg":{"text":"The walk speed multiplier that crouch speed should be.","name":"speed","type":"number"}}},"example":{"description":"Set the crouch speed to be as fast as the players walk speed.","code":"Entity( 1 ):SetCrouchedWalkSpeed( 1 )","output":"The player will crouch-walk as fast as normal walking."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetCurrentViewOffset","parent":"Player","type":"classfunc","description":"Sets the **actual** view offset which equals the difference between the players actual position and their view when standing.\n\nDo not confuse with Player:SetViewOffset and Player:SetViewOffsetDucked","realm":"Shared","args":{"arg":{"text":"The new view offset.","name":"viewOffset","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetAllowWeaponsInVehicle","parent":"Player","type":"classfunc","description":{"text":"Allows player to use his weapons in a vehicle. You need to call this before entering a vehicle.","bug":[{"text":"Shooting in a vehicle fires two bullets.","issue":"1277"},{"text":"Weapon viewpunch does not decay while in a vehicle, leading to incorrect aim angles. **This is fixed in the next update.**","issue":"3261"}]},"realm":"Server","args":{"arg":{"text":"Show we allow player to use his weapons in a vehicle or not.","name":"allow","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetAllowFullRotation","parent":"Player","type":"classfunc","description":"Set if the players' model is allowed to rotate around the pitch and roll axis.","realm":"Shared","args":{"arg":{"text":"Allowed to rotate","name":"Allowed","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetDrivingEntity","parent":"Player","type":"classfunc","description":{"text":"Sets the driving entity and driving mode.\n\nUse drive.PlayerStartDriving instead, see Entity Driving.","internal":""},"realm":"Shared","args":{"arg":[{"text":"The entity the player should drive.","name":"drivingEntity","type":"Entity","default":"NULL"},{"text":"The driving mode index.","name":"drivingMode","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetDeaths","parent":"Player","type":"classfunc","description":"Sets a player's death count","realm":"Server","args":{"arg":{"text":"Number of deaths (positive or negative)","name":"deathcount","type":"number"}}},"example":{"description":"Sets the deaths of player 1 to 5","code":"Entity( 1 ):SetDeaths( 5 )","output":"None"},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetEyeAngles","parent":"Player","type":"classfunc","description":"Sets the local angle of the player's view (may rotate body too if angular difference is large)","realm":"Shared","args":{"arg":{"text":"Angle to set the view to","name":"angle","type":"Angle"}}},"example":{"description":"Points a player at Vector( 0, 0, 0 )","code":"local ply = LocalPlayer() // Or any player\nlocal vec1 = Vector( 0, 0, 0 ) -- Where we're looking at\nlocal vec2 = ply:GetShootPos() -- The player's eye pos\nply:SetEyeAngles( ( vec1 - vec2 ):Angle() ) -- Sets to the angle between the two vectors","output":"Local player will look at 0,0,0"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetDSP","parent":"Player","type":"classfunc","description":"Applies the specified sound filter to the player.","realm":"Shared","args":{"arg":[{"text":"The index of the sound filter to apply.\nPick from the [list of DSP's](https://developer.valvesoftware.com/wiki/Dsp_presets).","name":"soundFilter","type":"number"},{"text":"If set to true the sound filter will be removed faster.","name":"fastReset","type":"boolean"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetDuckSpeed","parent":"Player","type":"classfunc","description":{"text":"Sets how quickly a player ducks.","bug":{"text":"This will not work for values >= 1.","issue":"2722"}},"realm":"Shared","args":{"arg":{"text":"How quickly the player will duck.","name":"duckSpeed","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetFOV","parent":"Player","type":"classfunc","description":"Set a player's FOV (Field Of View) over a certain amount of time.","realm":"Shared","args":{"arg":[{"text":"the angle of perception (FOV). Set to 0 to return to default user FOV. ( Which is ranging from 75 to 90, depending on user settings )","name":"fov","type":"number"},{"text":"the time it takes to transition to the FOV expressed in a floating point.","name":"time","type":"number","default":"0"},{"text":"The requester or \"owner\" of the zoom event.","name":"requester","type":"Entity","default":"self","added":"2020.03.17"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetHands","parent":"Player","type":"classfunc","description":"Sets the hands entity of a player.\n\nThe hands entity is an entity introduced in Garry's Mod 13 and it's used to show the player's hands attached to the viewmodel.\nThis is similar to the approach used in L4D and CS:GO, for more information on how to implement this system in your gamemode visit Using Viewmodel Hands.","realm":"Shared","args":{"arg":{"text":"The hands entity to set","name":"hands","type":"Entity"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetHoveredWidget","parent":"Player","type":"classfunc","description":"Sets the widget that is currently hovered by the player's mouse.","realm":"Shared","args":{"arg":{"text":"The widget entity that the player is hovering.","name":"widget","type":"Entity","default":"NULL"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetFrags","parent":"Player","type":"classfunc","description":"Sets a player's frags (kills)","realm":"Server","args":{"arg":{"text":"Number of frags (positive or negative)","name":"fragcount","type":"number"}}},"example":{"description":"Sets the frags of player 1 to 9001","code":"Entity( 1 ):SetFrags( 9001 )"},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetHull","parent":"Player","type":"classfunc","description":{"text":"Sets the mins and maxs of the AABB of the players collision.\n\nSee Player:SetHullDuck for the hull while crouching/ducking.","bug":{"text":"Setting both the mins and maxs to Global.Vector(0,0,0) will crash the game.","issue":"3365"}},"realm":"Shared","args":{"arg":[{"text":"The min coordinates of the hull.","name":"hullMins","type":"Vector"},{"text":"The max coordinates of the hull.","name":"hullMaxs","type":"Vector"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetJumpPower","parent":"Player","type":"classfunc","description":"Sets the jump power, eg. the velocity the player will applied to when he jumps.","realm":"Shared","args":{"arg":{"text":"The new jump velocity.","name":"jumpPower","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetLaggedMovementValue","parent":"Player","type":"classfunc","description":{"text":"Slows down the player movement simulation by the timescale, this is used internally in the HL2 weapon stripping sequence.\n\nIt achieves such behavior by multiplying the Global.FrameTime by the specified timescale at the start of the movement simulation and then restoring it afterwards.","note":"This is reset to 1 on spawn.\n\nThere is no weapon counterpart to this, you'll have to hardcode the multiplier in the weapon or call Weapon:SetNextPrimaryFire / Weapon:SetNextSecondaryFire manually from a."},"realm":"Server","args":{"arg":{"text":"The timescale multiplier.","name":"timescale","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetLadderClimbSpeed","parent":"Player","type":"classfunc","description":"Sets the player's ladder climbing speed.\n\nSee Player:SetWalkSpeed for normal walking speed, Player:SetRunSpeed for sprinting speed and Player:SetSlowWalkSpeed for slow walking speed.","realm":"Shared","added":"2020.03.17","args":{"arg":{"text":"The ladder climbing speed.","name":"speed","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetLastHitGroup","parent":"Player","type":"classfunc","description":"Sets the hitgroup where the player was last hit.","realm":"Server","added":"2020.03.17","args":{"arg":{"text":"The hitgroup to set as the \"last hit\", see Enums/HITGROUP.","name":"hitgroup","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetMaxSpeed","parent":"Player","type":"classfunc","description":{"text":"Sets the maximum speed which the player can move at.","note":"This is called automatically by the engine. If you wish to limit player speed without setting their run/sprint speeds, see CMoveData:SetMaxClientSpeed."},"realm":"Shared","args":{"arg":{"text":"The maximum speed.","name":"walkSpeed","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetMuted","parent":"Player","type":"classfunc","description":"Sets if the player should be muted locally.","realm":"Client","args":{"arg":{"text":"Mute or unmute.","name":"mute","type":"boolean"}}},"example":{"description":"Mutes all players on the server","code":"for i, ply in ipairs( player.GetAll() ) do\n\tply:SetMuted( true )\nend"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetNoCollideWithTeammates","parent":"Player","type":"classfunc","description":{"text":"Sets whenever the player should not collide with their teammates.","note":"This will only work for teams with ID 1 to 4 due to internal Engine limitations."},"realm":"Server","args":{"arg":{"text":"True to disable, false to enable collision.","name":"shouldNotCollide","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetNoTarget","parent":"Player","type":"classfunc","description":{"text":"Sets the players visibility towards NPCs.\n\nInternally this toggles the  flag, which you can manually test for using Entity:IsFlagSet","page":",FL_NOTARGETEnums/FL"},"realm":"Server","args":{"arg":{"text":"The visibility.","name":"visibility","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetMaxArmor","parent":"Player","type":"classfunc","description":"Sets the maximum amount of armor the player should have. This affects default built-in armor pickups, but not Player:SetArmor.","realm":"Server","added":"2020.10.14","args":{"arg":{"text":"The new max armor value.","name":"maxarmor","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetObserverMode","parent":"Player","type":"classfunc","description":"Sets the players observer mode. You must start the spectating first with Player:Spectate.","realm":"Shared","args":{"arg":{"text":"Spectator mode using Enums/OBS_MODE.","name":"mode","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetHullDuck","parent":"Player","type":"classfunc","description":"Sets the mins and maxs of the AABB of the players collision when ducked.\n\nSee Player:SetHull for setting the hull while standing.","realm":"Shared","args":{"arg":[{"text":"The min coordinates of the hull.","name":"hullMins","type":"Vector"},{"text":"The max coordinates of the hull.","name":"hullMaxs","type":"Vector"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetPData","parent":"Player","type":"classfunc","description":{"text":"Writes a **P**layer **Data** key-value pair to the SQL database. (sv.db when called on server,  cl.db when called on client)\n\nInternally uses the sql.","warning":"This function internally uses Player:UniqueID, which can cause collisions (two or more players sharing the same PData entry). It's recommended that you don't use it. See the related wiki page for more information.","note":"PData is not networked from servers to clients!"},"realm":"Shared","file":{"text":"lua/includes/extensions/player.lua","line":"173-L182"},"args":{"arg":[{"text":"Name of the PData key","name":"key","type":"string"},{"text":"Value to write to the key (**must** be an SQL valid data type, such as a string or integer)","name":"value","type":"any"}]},"rets":{"ret":{"text":"Whether the operation was successful or not","name":"","type":"boolean"}}},"example":{"description":"Sets the key \"money\" from player 1's PData to 100","code":"Entity( 1 ):SetPData( \"money\", 100 )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetRenderAngles","parent":"Player","type":"classfunc","description":"Sets the render angles of a player.","realm":"Shared","args":{"arg":{"text":"The new render angles to set","name":"ang","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetRunSpeed","parent":"Player","type":"classfunc","description":{"text":"Sets the player's sprint speed.\n\nSee also Player:GetRunSpeed, Player:SetWalkSpeed and Player:SetMaxSpeed.","note":"player_default class run speed is: 600"},"realm":"Shared","args":{"arg":{"text":"The new sprint speed when sv_friction is below 10. Higher sv_friction values will result in slower speed.\n\nHas to be 7 or above or the player won't be able to move.","name":"runSpeed","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetPressedWidget","parent":"Player","type":"classfunc","description":"Sets the widget that is currently in use by the player's mouse.\n\nHaving a pressed widget stops the player from firing his weapon to allow input to be passed onto the widget.","realm":"Shared","args":{"arg":{"text":"The widget the player is currently using.","name":"pressedWidget","type":"Entity","default":"NULL"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetPlayerColor","parent":"Player","type":"classfunc","description":"Sets the player model's color. The part of the model that is colored is determined by the model itself, and is different for each model.","realm":"Shared","args":{"arg":{"text":"This is the color to be set. The format is Vector(r, g, b), and each color should be between 0 and 1.","name":"Color","type":"Vector"}}},"example":[{"description":"When a player spawns their color will be red.","code":"hook.Add( \"PlayerSpawn\", \"PlayerColor\", function( ply )\n\tply:SetPlayerColor( Vector( 1, 0, 0 ) )\nend)"},{"description":"A function you could use to set the player's color to a Global.Color rather than a Vector.","code":"function SetColor( ply, color )\n\tply:SetPlayerColor( Vector( color.r / 255, color.g / 255, color.b / 255 ) )\nend"}],"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetStepSize","parent":"Player","type":"classfunc","description":"Sets the maximum height a player can step onto without jumping.","realm":"Shared","args":{"arg":{"text":"The new maximum height the player can step onto without jumping","name":"stepHeight","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetSuitPower","parent":"Player","type":"classfunc","description":{"text":"Sets the player's HEV suit power.","bug":{"text":"This will only work for the local player when used clientside.","issue":"3449"}},"realm":"Shared","args":{"arg":{"text":"The new suit power.","name":"power","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetSlowWalkSpeed","parent":"Player","type":"classfunc","description":{"text":"Sets the player's slow walking speed, which is activated via  keybind.\n\nSee Player:SetWalkSpeed for normal walking speed, Player:SetRunSpeed for sprinting speed and Player:SetLadderClimbSpeed for ladder climb speed.","key":"+WALK"},"realm":"Shared","added":"2020.03.17","args":{"arg":{"text":"The new slow walking speed.","name":"speed","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetTeam","parent":"Player","type":"classfunc","description":"Sets the player to the chosen team.","realm":"Server","args":{"arg":{"text":"The team that the player is being set to.","name":"Team","type":"number"}}},"example":{"description":"Sets the players team to the first argument when writing \"set_team\" into the console and respawns the player afterwards, ex. \"set_team 1\".","code":"concommand.Add( \"set_team\", function( ply, cmd, args )\n\tlocal Team = args[1] or 1\n\tply:SetTeam( Team )\n\tply:Spawn()\nend )","output":"Sets the player to team 1 and respawns them."},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetUserGroup","parent":"Player","type":"classfunc","description":"Sets the usergroup of the player.","realm":"Server","file":{"text":"lua/includes/extensions/player_auth.lua","line":"49-L55"},"args":{"arg":{"text":"The user group of the player.","name":"groupName","type":"string"}}},"example":{"description":"Make the player superadmin and print their group.","code":"Entity( 1 ):SetUserGroup( \"superadmin\" )\nprint( Entity( 1 ):GetUserGroup() )","output":"```\nsuperadmin\n```"},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetViewEntity","parent":"Player","type":"classfunc","description":"Attaches the players view to the position and angles of the specified entity.","realm":"Server","args":{"arg":{"text":"The entity to attach the player view to.","name":"viewEntity","type":"Entity"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetViewOffset","parent":"Player","type":"classfunc","description":"Sets the **desired** view offset which equals the difference between the players actual position and their view when standing.\n\nIf you want to set **actual** view offset, use Player:SetCurrentViewOffset\n\nSee also Player:SetViewOffsetDucked for **desired** view offset when crouching.","realm":"Shared","args":{"arg":{"text":"The new desired view offset when standing.","name":"viewOffset","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetSuppressPickupNotices","parent":"Player","type":"classfunc","description":"Sets whenever to suppress the pickup notification for the player.","realm":"Shared","args":{"arg":{"text":"Whenever to suppress the notice or not.","name":"doSuppress","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetupHands","parent":"Player","type":"classfunc","description":"Sets up the players view model hands. Calls GM:PlayerSetHandsModel to set the model of the hands.","realm":"Server","file":{"text":"lua/includes/extensions/player.lua","line":"214-L229"},"args":{"arg":{"text":"If the player is spectating an entity, this should be the entity the player is spectating, so we can use its hands model instead.","name":"ent","type":"Entity"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetViewOffsetDucked","parent":"Player","type":"classfunc","description":"Sets the **desired** view offset which equals the difference between the players actual position and their view when crouching.\n\nIf you want to set **actual** view offset, use Player:SetCurrentViewOffset\n\nSee also Player:SetViewOffset for **desired** view offset when standing.","realm":"Shared","args":{"arg":{"text":"The new desired view offset when crouching.","name":"viewOffset","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetViewPunchAngles","parent":"Player","type":"classfunc","description":"Sets client's view punch angle, but not the velocity. See Player:ViewPunch","realm":"Shared","args":{"arg":{"text":"The angle to set.","name":"punchAngle","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetUnDuckSpeed","parent":"Player","type":"classfunc","description":"Sets how quickly a player un-ducks","realm":"Shared","args":{"arg":{"text":"How quickly the player will un-duck","name":"UnDuckSpeed","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetViewPunchVelocity","parent":"Player","type":"classfunc","description":"Sets client's view punch velocity. See Player:ViewPunch and Player:SetViewPunchAngles","realm":"Shared","added":"2020.10.14","args":{"arg":{"text":"The angle velocity to set.","name":"punchVel","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetWeaponColor","parent":"Player","type":"classfunc","description":"Sets the player weapon's color. The part of the model that is colored is determined by the model itself, and is different for each model.","realm":"Shared","args":{"arg":{"text":"This is the color to be set. The format is Vector(r,g,b), and each color should be between 0 and 1.","name":"Color","type":"Vector"}}},"example":{"description":"When a player spawns their weapon's color will be red.","code":"hook.Add(\"PlayerSpawn\", \"SpawnSetColor\", function( ply )\n\tply:SetWeaponColor( Vector( 1, 0, 0 ) )\nend )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ShouldDrawLocalPlayer","parent":"Player","type":"classfunc","description":"Returns whether the player's player model will be drawn at the time the function is called.","realm":"Client","rets":{"ret":{"text":"`true` if the player's playermodel is visible","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ShouldDropWeapon","parent":"Player","type":"classfunc","description":{"text":"Sets whether the player's current weapon should drop on death.","note":{"text":"This is reset on spawn to the 's **DropWeaponOnDie** field by player_manager.OnPlayerSpawn.","page":",player classPlayer_Classes"}},"realm":"Server","args":{"arg":{"text":"Whether to drop the player's current weapon or not","name":"drop","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SimulateGravGunDrop","parent":"Player","type":"classfunc","description":"Signals the entity that it was dropped by the gravity gun.","realm":"Server","args":{"arg":{"text":"Entity that was dropped.","name":"ent","type":"Entity"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SimulateGravGunPickup","parent":"Player","type":"classfunc","description":"Signals the entity that it was picked up by the gravity gun. This call is only required if you want to simulate the situation of picking up objects.","realm":"Server","args":{"arg":{"text":"The entity picked up","name":"ent","type":"Entity"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SpectateEntity","parent":"Player","type":"classfunc","description":"Makes the player spectate the entity.\n\nTo get the applied spectated entity, use Player:GetObserverTarget.","realm":"Server","args":{"arg":{"text":"Entity to spectate.","name":"entity","type":"Entity"}}},"example":{"description":"Creates a entity, spectates it and after 5 seconds, stops spectating it.","code":"local ent = ents.Create( \"prop_physics\" )\nent:SetModel( \"models/hunter/misc/sphere025x025.mdl\" )\nent:SetPos( Vector( 0, 0, 0 ) )\nent:Spawn()\n \nfor _, ply in ipairs( player.GetAll() ) do\n\tply:Spectate( OBS_MODE_CHASE )\n\tply:SpectateEntity( ent )\n\tply:StripWeapons()\n\n\ttimer.Simple( 5, function()\n\t\tif IsValid( ply ) then\n\t\t\tply:UnSpectate()\n\t\t\tply:Spawn()\n\t\tend\n\tend )\nend"},"realms":["Server"],"type":"Function"},
{"function":{"name":"Spectate","parent":"Player","type":"classfunc","description":{"text":"Starts spectate mode for given player. This will also affect the players movetype in some cases.","bug":{"text":"Using this function while spectating the player's own ragdoll will cause it to teleport it to the center of the map. You will spectate the ragdoll even after it's been teleported. This only happens on the client of the player spectating the ragdoll and is purely client-side.","issue":"4608"}},"realm":"Server","args":{"arg":{"text":"Spectate mode, see Enums/OBS_MODE.","name":"mode","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SprayDecal","parent":"Player","type":"classfunc","description":"Makes a player spray their decal.","realm":"Server","args":{"arg":[{"text":"The location to spray from","name":"sprayOrigin","type":"Vector"},{"text":"The location to spray to","name":"sprayEndPos","type":"Vector"}]}},"example":{"description":"Makes the player spray their decal 5000 units away.","code":"local ply = Entity( 1 )\nlocal eyepos = ply:EyePos()\nply:SprayDecal( eyepos, eyepos + ply:GetAimVector() * 5000 )"},"realms":["Server"],"type":"Function"},
{"function":{"name":"SprintDisable","parent":"Player","type":"classfunc","description":{"text":"Disables the sprint on the player.","bug":{"text":"Not working - use Player:SetRunSpeed or CMoveData:SetMaxSpeed in a GM:Move hook, instead.","issue":"2390"}},"realm":"Server"},"example":{"description":"Stops and prevents player with ID 1 from sprinting","code":"Entity( 1 ):SprintDisable()"},"realms":["Server"],"type":"Function"},
{"function":{"name":"StartSprinting","parent":"Player","type":"classfunc","description":{"text":"Doesn't appear to do anything.","deprecated":"This appears to be a direct binding to internal functionality that is overridden by the engine every frame so calling these functions may not have any or expected effect."},"realm":"Shared"},"example":{"description":"An example alternative to this function.","code":{"text":"local vDelay = 0\nlocal prevDown = 0\nhook.Add( \"StartCommand\", \"TestFunc\", function( ply, cmd )\n    if ( cmd:KeyDown( IN_FORWARD ) and prevDown == false ) then\n        vDelay = CurTime() + 0.4\n    elseif ( cmd:KeyDown( IN_FORWARD ) ) then\n        if ( vDelay","curtime":{"then":"","cmd:setbuttons":"","bit.bor":"","cmd:getbuttons":"","in_speed":"","end":"","prevdown":"cmd:KeyDown(","in_forward":"","ode":"ode"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SprintEnable","parent":"Player","type":"classfunc","description":{"text":"Enables the sprint on the player.","bug":{"text":"Not working - use Player:SetRunSpeed or CMoveData:SetMaxSpeed in a GM:Move hook, instead.","issue":"2390"}},"realm":"Server"},"example":{"description":{"text":"Allows the player with ID 1 to use the sprint ( by default) feature.","key":"SHIFT"},"code":"Entity( 1 ):SprintEnable()"},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetWalkSpeed","parent":"Player","type":"classfunc","description":{"text":"Sets the player's normal walking speed. Not sprinting, not slow walking .\n\n\nSee also Player:SetSlowWalkSpeed, Player:GetWalkSpeed, Player:SetCrouchedWalkSpeed, Player:SetMaxSpeed and Player:SetRunSpeed.","key":"+walk","bug":{"text":"Using a speed of 0 can lead to prediction errors.","issue":"2030"},"note":"player_default class run speed is: 400"},"realm":"Shared","args":{"arg":{"text":"The new walk speed when sv_friction is below 10. Higher sv_friction values will result in slower speed.\n\nHas to be 7 or above or the player won't be able to move.","name":"walkSpeed","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ShowProfile","parent":"Player","type":"classfunc","description":"Opens the player steam profile page in the steam overlay browser.","realm":"Client"},"example":{"description":"Frame with all players and when click on it open Steam Profile.","code":"local frame = vgui.Create( \"DFrame\" )\nframe:Center()\nframe:SetSize( 300, 100 )\nframe:SetTitle( \"Show Steam Profile\" )\n\nfor i, ply in ipairs(player.GetHumans()) do\n\tlocal addbutton = vgui.Create( \"DButton\", frame )\n\taddbutton:SetPos( ( i * 75 ) - 50, 50 )\n\taddbutton:SetSize( 75, 20 )\n\taddbutton:SetText( ply:Name() )\n\taddbutton.DoClick = function()\n\t\tply:ShowProfile()\n\tend\nend"},"realms":["Client"],"type":"Function"},
{"function":{"name":"StartWalking","parent":"Player","type":"classfunc","description":{"text":"When used in a GM:SetupMove hook, this function will force the player to walk, as well as preventing the player from sprinting.","deprecated":"This appears to be a direct binding to internal functionality that is overridden by the engine every frame so calling these functions may not have any or expected effect."},"realm":"Shared"},"example":{"description":"Example usage, forces the player to walk. (+walk console command)","code":"hook.Add( \"SetupMove\", \"TestFunc\", function( ply, mv, cmd )\n\tply:StartWalking()\nend )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SteamID","parent":"Player","type":"classfunc","description":{"text":"Returns the player's SteamID.\n\nFor Bots this will return `BOT` on the server and on the client it returns `NULL`.\n\nSee Player:AccountID for a shorter version of the SteamID and Player:SteamID64 for the Community/Profile formatted SteamID.","bug":{"text":"In singleplayer, this will be `STEAM_ID_PENDING` serverside. **This is fixed in the next update.**","issue":"2614"}},"realm":"Shared","rets":{"ret":{"text":"SteamID","name":"","type":"string"}}},"example":{"description":"Prints the EntityID, Name and SteamID of all players.","code":"for _, ply in ipairs( player.GetAll() ) do\n\tprint( \"[\" .. ply:EntIndex() .. \"]\", ply:Name(), ply:SteamID() )\nend","output":"A list consisting of every player's EntityID, Name & SteamID on the server."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SteamID64","parent":"Player","type":"classfunc","description":{"text":"Returns the player's 64-bit SteamID aka CommunityID.\n\nSee Player:AccountID for a shorter version of the SteamID and Player:SteamID for the normal version of the SteamID.","bug":{"text":"In singleplayer, this will return `no value` serverside.\n\nIn a `-multirun` environment, this will return `no value` serverside for all \"copies\" of a player.\n\n**This is fixed in the next update.**","issue":"2614"},"note":"For bots, this will return `90071996842377216` (equivalent to `STEAM_0:0:0`) for the first bot to join.\n\nFor each additional bot, the number increases by 1. So the next bot will be `90071996842377217` (`STEAM_0:1:0`) then `90071996842377218` (`STEAM_0:0:1`) and so on.\n\nIt returns `no value` for bots clientside."},"realm":"Shared","rets":{"ret":{"text":"Player's 64-bit SteamID aka CommunityID.","name":"","type":"string"}}},"example":{"description":"Prints the 64bit SteamID of player","code":"print( Entity( 1 ):SteamID64() )","output":"64bit SteamID (about 20 digits)"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"StopSprinting","parent":"Player","type":"classfunc","description":{"text":"When used in a GM:SetupMove hook, this function will prevent the player from sprinting.\n\nWhen +walk is engaged, the player will still be able to sprint to half speed (normal run speed) as opposed to full sprint speed without this function.","deprecated":"This appears to be a direct binding to internal functionality that is overridden by the engine every frame so calling these functions may not have any or expected effect."},"realm":"Shared"},"example":{"description":"Example usage, disables sprinting at all times.","code":"hook.Add( \"SetupMove\", \"TestFunc\", function( ply, mv, cmd )\n\tply:StopSprinting()\nend )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"StopZooming","parent":"Player","type":"classfunc","description":"Turns off the zoom mode of the player. (+zoom console command)\n\nBasically equivalent of entering \"-zoom\" into player's console.","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"StripWeapon","parent":"Player","type":"classfunc","description":"Removes the specified weapon class from a certain player","realm":"Server","args":{"arg":{"text":"The weapon class to remove","name":"weapon","type":"string"}}},"example":{"description":"Removes the crowbar from the player with the ID 1","code":"Entity( 1 ):StripWeapon( \"weapon_crowbar\" )","output":"Crowbar removed from player 1"},"realms":["Server"],"type":"Function"},
{"function":{"name":"StopWalking","parent":"Player","type":"classfunc","description":{"text":"When used in a GM:SetupMove hook, this function behaves unexpectedly by preventing the player from sprinting similar to Player:StopSprinting.","deprecated":"This appears to be a direct binding to internal functionality that is overridden by the engine every frame so calling these functions may not have any or expected effect."},"realm":"Shared"},"example":{"description":"Disables Sprinting, not Walking.","code":"hook.Add( \"SetupMove\", \"TestFunc\", function( ply, mv, cmd )\n\tply:StopWalking()\nend )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"StripWeapons","parent":"Player","type":"classfunc","description":"Removes all weapons from a certain player","realm":"Server"},"example":{"description":"Removes all the weapons from the player with the ID 1","code":"Entity( 1 ):StripWeapons()","output":"Player 1 has no weapons anymore"},"realms":["Server"],"type":"Function"},
{"function":{"name":"SuppressHint","parent":"Player","type":"classfunc","description":{"text":"Prevents a hint from showing up.","note":"This function is only available in Sandbox and its derivatives"},"realm":"Server","args":{"arg":{"text":"Hint name/class/index to prevent from showing up","name":"name","type":"string"}}},"example":{"description":"Removes three default Sandbox hints (taken from the source code of the Sandbox gamemode):","code":"-- Hint type: Show opening menu hint\n-- ... Suppress this hint =>\nply:SuppressHint( \"OpeningMenu\" )\n\n-- Hint type: Tell them how to turn the hints off\n-- ... Suppress this hint =>\nply:SuppressHint( \"Annoy1\" )\nply:SuppressHint( \"Annoy2\" )\n\n-- Other default Hint types: PhysgunFreeze, PhysgunUse, VehicleView ..."},"realms":["Server"],"type":"Function"},
{"function":{"name":"StripAmmo","parent":"Player","type":"classfunc","description":"Removes all ammo from the player.","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"SwitchToDefaultWeapon","parent":"Player","type":"classfunc","description":"Attempts to switch the player weapon to the one specified in the \"cl_defaultweapon\" convar, if the player does not own the specified weapon nothing will happen.\n\nIf you want to switch to a specific weapon, use: Player:SetActiveWeapon","realm":"Server","file":{"text":"lua/includes/extensions/player.lua","line":"195-L206"}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Team","parent":"Player","type":"classfunc","description":"Returns the player's team ID.\n\nReturns 0 clientside when the game is not fully loaded.","realm":"Shared","rets":{"ret":{"text":"The player's team's index number, as in the Enums/TEAM or a custom team defined in team.SetUp.","name":"","type":"number"}}},"example":{"description":"Prints the name of the player's team","code":"print( team.GetName( Entity( 1 ):Team() ) )","output":"Something like \"Unassigned\" in console."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"TimeConnected","parent":"Player","type":"classfunc","description":{"text":"Returns the time in seconds since the player connected.","note":"Bots will always return value 0."},"realm":"Server","rets":{"ret":{"name":"connectTime","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"TraceHullAttack","parent":"Player","type":"classfunc","description":{"text":"Performs a trace hull and applies damage to the entities hit, returns the first entity hit.","warning":"Hitting the victim entity with this function in ENTITY:OnTakeDamage can cause infinite loops."},"realm":"Server","args":{"arg":[{"text":"The start position of the hull trace.","name":"startPos","type":"Vector"},{"text":"The end position of the hull trace.","name":"endPos","type":"Vector"},{"text":"The minimum coordinates of the hull.","name":"mins","type":"Vector"},{"text":"The maximum coordinates of the hull.","name":"maxs","type":"Vector"},{"text":"The damage to be applied.","name":"damage","type":"number"},{"text":"Bitflag specifying the damage type, see Enums/DMG.","name":"damageFlags","type":"number"},{"text":"The force to be applied to the hit object.","name":"damageForce","type":"number"},{"text":"Whether to apply damage to all hit NPCs or not.","name":"damageAllNPCs","type":"boolean"}]},"rets":{"ret":{"text":"The hit entity","name":"","type":"Entity"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"TranslateWeaponActivity","parent":"Player","type":"classfunc","description":"Translates Enums/ACT according to the holdtype of players currently held weapon.","realm":"Shared","args":{"arg":{"text":"The initial Enums/ACT","name":"act","type":"number"}},"rets":{"ret":{"text":"Translated Enums/ACT","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"UniqueIDTable","parent":"Player","type":"classfunc","description":"Returns a table that will stay allocated for the specific player between connects until the server shuts down. Note, that this table is not synchronized between client and server.","realm":"Shared","args":{"arg":{"text":"Unique table key.","name":"key","type":"any"}},"rets":{"ret":{"text":"The table that contains any info you have put in it.","name":"","type":"table"}}},"example":{"description":"Example usage","code":"local table = Entity( 1 ):UniqueIDTable( \"mytable\" )\ntable.MyValue = \"test\"\n\n// Somewhere else\nlocal table = Entity( 1 ):UniqueIDTable( \"mytable\" )\nprint( table.MyValue )\nlocal table = Entity( 1 ):UniqueIDTable( \"mytable_other\" )\nprint( table.MyValue )","output":"\"test\"\n\nnil"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"UniqueID","parent":"Player","type":"classfunc","description":{"text":"Returns a 32 bit integer that remains constant for a player across joins/leaves and across different servers. This can be used when a string is inappropriate - e.g. in a database primary key.","deprecated":"Use Player:SteamID64, Player:SteamID or Player:AccountID to uniquely identify players instead.","warning":"**This function has collisions,** where more than one player has the same UniqueID. It is **highly** recommended to use Player:AccountID, Player:SteamID or Player:SteamID64 instead, which are guaranteed to be unique to each player.","note":"In Singleplayer, this function will always return 1."},"realm":"Shared","rets":{"ret":{"text":"The player's Unique ID","name":"","type":"number"}}},"example":[{"description":"Gets the Unique ID of a player.","code":"Entity( 1 ):UniqueID()","output":"Something like 1592073762"},{"description":"Functional equivalent of this function.","code":"local ply = Entity( 1 )\nlocal uniqueid = util.CRC( \"gm_\" .. ply:SteamID() .. \"_gm\" )\nprint( uniqueid )","output":"Something like 1592073762"}],"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"UnfreezePhysicsObjects","parent":"Player","type":"classfunc","description":"Unfreezes all objects the player has frozen with their Physics Gun. Same as double pressing R while holding Physics Gun.","realm":"Shared"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"UnSpectate","parent":"Player","type":"classfunc","description":"Stops the player from spectating another entity.","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"UnLock","parent":"Player","type":"classfunc","description":{"text":"Unlocks the player movement if locked previously.\n\nWill disable godmode for the player if locked previously.","br":""},"realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"UserID","parent":"Player","type":"classfunc","description":"Returns the player's ID.\nYou can use Global.Player() to get the player by their ID.","realm":"Shared","rets":{"ret":{"text":"The player's user ID","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetAngles","parent":"ProjectedTexture","type":"classfunc","description":"Returns the angle of the ProjectedTexture, which were previously set by ProjectedTexture:SetAngles","realm":"Client","rets":{"ret":{"text":"The angles of the ProjectedTexture.","name":"","type":"Angle"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ViewPunchReset","parent":"Player","type":"classfunc","description":"Resets the player's view punch (and the view punch velocity, read more at Player:ViewPunch) effect back to normal.","realm":"Shared","args":{"arg":{"text":"Reset all ViewPunch below this threshold.","name":"tolerance","type":"number","default":"0"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"VoiceVolume","parent":"Player","type":"classfunc","description":"Returns the players voice volume, how loud the player's voice communication currently is, as a normal number. Doesn't work on local player unless the voice_loopback convar is set to 1.","realm":"Client","rets":{"ret":{"text":"The voice volume.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetColor","parent":"ProjectedTexture","type":"classfunc","description":{"text":"Returns the color of the ProjectedTexture, which was previously set by ProjectedTexture:SetColor.","bug":{"text":"The returned color will not have the color metatable.","issue":"2407"}},"realm":"Client","rets":{"ret":{"text":"Color, the color of the ProjectedTexture.","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetBrightness","parent":"ProjectedTexture","type":"classfunc","description":"Returns the brightness of the ProjectedTexture, which was previously set by ProjectedTexture:SetBrightness","realm":"Client","rets":{"ret":{"text":"The brightness of the ProjectedTexture.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ViewPunch","parent":"Player","type":"classfunc","description":"Simulates a push on the client's screen. This **adds** view punch velocity, and does not touch the current view punch angle, for which you can use Player:SetViewPunchAngles.","realm":"Shared","args":{"arg":{"text":"The angle in which to push the player's screen.","name":"PunchAngle","type":"Angle"}}},"example":{"description":"Knocks the player's camera upward","code":"Entity( 1 ):ViewPunch( Angle( -10, 0, 0 ) )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetConstantAttenuation","parent":"ProjectedTexture","type":"classfunc","description":"Returns the constant attenuation of the projected texture, which can also be set by ProjectedTexture:SetConstantAttenuation.","realm":"Client","rets":{"ret":{"text":"The constant attenuation","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetEnableShadows","parent":"ProjectedTexture","type":"classfunc","description":"Returns whether shadows are enabled for this ProjectedTexture, which was previously set by ProjectedTexture:SetEnableShadows","realm":"Client","rets":{"ret":{"text":"Whether shadows are enabled.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetLinearAttenuation","parent":"ProjectedTexture","type":"classfunc","description":"Returns the linear attenuation of the projected texture, which can also be set by ProjectedTexture:SetLinearAttenuation.","realm":"Client","rets":{"ret":{"text":"The linear attenuation.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetOrthographic","parent":"ProjectedTexture","type":"classfunc","description":"Returns the current orthographic settings of the Projected Texture. To set these values, use ProjectedTexture:SetOrthographic.","realm":"Client","rets":{"ret":[{"text":"Whether or not this projected texture is orthographic. When false, nothing else is returned.","name":"","type":"boolean"},{"text":"left","name":"","type":"number"},{"text":"top","name":"","type":"number"},{"text":"right","name":"","type":"number"},{"text":"bottom","name":"","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetNearZ","parent":"ProjectedTexture","type":"classfunc","description":"Returns the NearZ value of the ProjectedTexture, which was previously set by ProjectedTexture:SetNearZ","realm":"Client","rets":{"ret":{"text":"NearZ of the ProjectedTexture.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetPos","parent":"ProjectedTexture","type":"classfunc","description":"Returns the position of the ProjectedTexture, which was previously set by ProjectedTexture:SetPos","realm":"Client","rets":{"ret":{"text":"The position of the ProjectedTexture.","name":"","type":"Vector"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetQuadraticAttenuation","parent":"ProjectedTexture","type":"classfunc","description":"Returns the quadratic attenuation of the projected texture, which can also be set by ProjectedTexture:SetQuadraticAttenuation.","realm":"Client","rets":{"ret":{"text":"The quadratic attenuation","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetShadowDepthBias","parent":"ProjectedTexture","type":"classfunc","description":"Returns the shadow depth bias of the projected texture.\n\nSet by ProjectedTexture:SetShadowDepthBias.","added":"2021.03.31","realm":"Client","rets":{"ret":{"text":"The current shadow depth bias.","name":"bias","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetShadowSlopeScaleDepthBias","parent":"ProjectedTexture","type":"classfunc","description":"Returns the shadow depth slope scale bias of the projected texture.\n\nSet by ProjectedTexture:SetShadowSlopeScaleDepthBias.","added":"2021.03.31","realm":"Client","rets":{"ret":{"text":"The current shadow depth slope scale bias.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetShadowFilter","parent":"ProjectedTexture","type":"classfunc","description":"Returns the shadow \"filter size\" of the projected texture. `0` is fully pixelated, higher values will blur the shadow more.\n\nSet by ProjectedTexture:SetShadowFilter.","added":"2021.03.31","realm":"Client","rets":{"ret":{"text":"The current shadow filter size.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetTargetEntity","parent":"ProjectedTexture","type":"classfunc","description":"Returns the target entity of this projected texture.","added":"2021.03.31","realm":"Client","rets":{"ret":{"text":"The current target entity.","name":"","type":"Entity"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetFarZ","parent":"ProjectedTexture","type":"classfunc","description":"Returns the projection distance of the ProjectedTexture, which was previously set by ProjectedTexture:SetFarZ","realm":"Client","rets":{"ret":{"text":"The projection distance of the ProjectedTexture.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetTexture","parent":"ProjectedTexture","type":"classfunc","description":"Returns the texture of the ProjectedTexture, which was previously set by ProjectedTexture:SetTexture","realm":"Client","rets":{"ret":{"text":"The texture of the ProjectedTexture.","name":"","type":"ITexture"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetTexture","parent":"ProjectedTexture","type":"classfunc","description":"Returns the texture of the ProjectedTexture, which was previously set by ProjectedTexture:SetTexture","realm":"Client","rets":{"ret":{"text":"The texture of the ProjectedTexture.","name":"","type":"ITexture"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetTextureFrame","parent":"ProjectedTexture","type":"classfunc","description":"Returns the texture frame of the ProjectedTexture, which was previously set by ProjectedTexture:SetTextureFrame","realm":"Client","rets":{"ret":{"text":"The texture frame.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetVerticalFOV","parent":"ProjectedTexture","type":"classfunc","description":"Returns the vertical FOV of the ProjectedTexture, which was previously set by ProjectedTexture:SetVerticalFOV or ProjectedTexture:SetFOV","realm":"Client","rets":{"ret":{"text":"The vertical FOV of the ProjectedTexture.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsValid","parent":"ProjectedTexture","type":"classfunc","description":"Returns true if the projected texture is valid (i.e. has not been removed), false otherwise.\n\nInstead of calling this directly it's a good idea to call Global.IsValid in case the variable is nil.\n\n\n```\nIsValid( ptexture )\n```\n\n\nThis not only checks whether the projected texture is valid - but also checks whether it's nil.","realm":"Client","rets":{"ret":{"text":"Whether the projected texture is valid.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Remove","parent":"ProjectedTexture","type":"classfunc","description":"Removes the projected texture. After calling this, ProjectedTexture:IsValid will return false, and any hooks with the projected texture as the identifier will be automatically deleted.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetAngles","parent":"ProjectedTexture","type":"classfunc","description":"Sets the angles (direction) of the projected texture.\n\nYou must call ProjectedTexture:Update after using this function for it to take effect.","realm":"Client","args":{"arg":{"name":"angle","type":"Angle"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetBrightness","parent":"ProjectedTexture","type":"classfunc","description":"Sets the brightness of the projected texture.\n\nYou must call ProjectedTexture:Update after using this function for it to take effect.","realm":"Client","args":{"arg":{"text":"The brightness to give the projected texture.","name":"brightness","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetColor","parent":"ProjectedTexture","type":"classfunc","description":"Sets the color of the projected texture.\n\nYou must call ProjectedTexture:Update after using this function for it to take effect.","realm":"Client","args":{"arg":{"text":"Must be a Color.\n\nUnlike other projected textures, this color can only go up to 255.","name":"color","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetEnableShadows","parent":"ProjectedTexture","type":"classfunc","description":{"text":"Enable or disable shadows cast from the projected texture.\n\n\n\nYou must call ProjectedTexture:Update after using this function for it to take effect.","note":{"text":"as with all types of projected textures (including the player's flashlight and env_projectedtexture), there can only be 8 projected textures with shadows enabled in total. This limit can be increased with the launch parameter: -numshadowtextures limit where limit is the new limit. Naturally, many projected lights with shadows enabled will drastically decrease framerate.","br":["",""]}},"realm":"Client","args":{"arg":{"name":"newState","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetFarZ","parent":"ProjectedTexture","type":"classfunc","description":"Sets the distance at which the projected texture ends.\n\nYou must call ProjectedTexture:Update after using this function for it to take effect.","realm":"Client","args":{"arg":{"name":"farZ","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetConstantAttenuation","parent":"ProjectedTexture","type":"classfunc","description":"Sets the constant attenuation of the projected texture.\n\nSee also ProjectedTexture:SetLinearAttenuation and ProjectedTexture:SetQuadraticAttenuation.\n\nYou must call ProjectedTexture:Update after using this function for it to take effect.","realm":"Client","args":{"arg":{"name":"constAtten","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetLinearAttenuation","parent":"ProjectedTexture","type":"classfunc","description":"Sets the linear attenuation of the projected texture.\n\nSee also ProjectedTexture:SetConstantAttenuation and ProjectedTexture:SetQuadraticAttenuation.\n\nThe default value of linear attenuation when the projected texture is created is 100. (others are 0, as you are not supposed to mix them)\n\nYou must call ProjectedTexture:Update after using this function for it to take effect.","realm":"Client","args":{"arg":{"name":"linearAtten","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetNearZ","parent":"ProjectedTexture","type":"classfunc","description":{"text":"Sets the distance at which the projected texture begins its projection.\n\nYou must call ProjectedTexture:Update after using this function for it to take effect.","note":["Setting this to 0 will disable the projected texture completely! This may be useful if you want to disable a projected texture without actually removing it","This seems to affect the rendering of shadows - a higher Near Z value will have shadows begin to render closer to their casting object. Comparing a low Near Z value (like 1) with a normal one (12) or high one (1000) is the easiest way to understand this artifact"]},"realm":"Client","args":{"arg":{"name":"nearZ","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetHorizontalFOV","parent":"ProjectedTexture","type":"classfunc","description":"Sets the horizontal angle of projection without affecting the vertical angle.\n\nYou must call ProjectedTexture:Update after using this function for it to take effect.","realm":"Client","args":{"arg":{"text":"The new horizontal Field Of View for the projected texture. Must be in range between 0 and 180.","name":"hFOV","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetQuadraticAttenuation","parent":"ProjectedTexture","type":"classfunc","description":"Sets the quadratic attenuation of the projected texture.\n\nSee also ProjectedTexture:SetLinearAttenuation and ProjectedTexture:SetConstantAttenuation.\n\nYou must call ProjectedTexture:Update after using this function for it to take effect.","realm":"Client","args":{"arg":{"name":"quadAtten","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetOrthographic","parent":"ProjectedTexture","type":"classfunc","description":"Changes the current projected texture between orthographic and perspective projection.\n\nYou must call ProjectedTexture:Update after using this function for it to take effect.","realm":"Client","args":{"arg":[{"text":"When false, all other arguments are ignored and the texture is reset to perspective projection.","name":"orthographic","type":"boolean"},{"text":"The amount of units left from the projected texture's origin to project.","name":"left","type":"number"},{"text":"The amount of units upwards from the projected texture's origin to project.","name":"top","type":"number"},{"text":"The amount of units right from the projected texture's origin to project.","name":"right","type":"number"},{"text":"The amount of units downwards from the projected texture's origin to project.","name":"bottom","type":"number"}]}},"example":{"description":"Set the projected texture back to perspective projection.","code":"ProjectedTexture:SetOrthographic( false )\nProjectedTexture:Update()"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetPos","parent":"ProjectedTexture","type":"classfunc","description":"Move the Projected Texture to the specified position.\n\nYou must call ProjectedTexture:Update after using this function for it to take effect.","realm":"Client","args":{"arg":{"name":"position","type":"Vector"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetShadowDepthBias","parent":"ProjectedTexture","type":"classfunc","description":{"text":"Sets the shadow depth bias of the projected texture.\n\nThe initial value is `0.0001`. Normal projected textures obey the value of the `mat_depthbias_shadowmap` ConVar.","validate":"You must call ProjectedTexture:Update after using this function for it to take effect."},"added":"2021.03.31","realm":"Client","args":{"arg":{"text":"The shadow depth bias to set.","name":"bias","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetShadowFilter","parent":"ProjectedTexture","type":"classfunc","description":{"text":"Sets the shadow \"filter size\" of the projected texture. `0` is fully pixelated, higher values will blur the shadow more. The initial value is the value of `r_projectedtexture_grain` ConVar.","validate":"You must call ProjectedTexture:Update after using this function for it to take effect."},"added":"2021.03.31","realm":"Client","args":{"arg":{"text":"The shadow filter size to set.","name":"filter","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetTexture","parent":"ProjectedTexture","type":"classfunc","description":"Sets the texture to be projected.\n\nYou must call ProjectedTexture:Update after using this function for it to take effect.","realm":"Client","args":{"arg":{"text":"The name of the texture. Can also be an ITexture.","name":"texture","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetTargetEntity","parent":"ProjectedTexture","type":"classfunc","description":{"text":"Sets the target entity for this projected texture, meaning it will only be lighting the given entity and the world.","validate":"You must call ProjectedTexture:Update after using this function for it to take effect."},"added":"2021.03.31","realm":"Client","args":{"arg":{"text":"The target entity, or `NULL` to reset.","name":"target","type":"Entity","default":"NULL"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetShadowSlopeScaleDepthBias","parent":"ProjectedTexture","type":"classfunc","description":{"text":"Sets the shadow depth slope scale bias of the projected texture.\n\nThe initial value is `2`. Normal projected textures obey the value of the `mat_slopescaledepthbias_shadowmap` ConVar.","validate":"You must call ProjectedTexture:Update after using this function for it to take effect."},"added":"2021.03.31","realm":"Client","args":{"arg":{"text":"The shadow depth slope scale bias to set.","name":"bias","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetTextureFrame","parent":"ProjectedTexture","type":"classfunc","description":"For animated textures, this will choose which frame in the animation will be projected.\n\nYou must call ProjectedTexture:Update after using this function for it to take effect.","realm":"Client","args":{"arg":{"text":"The frame index to use.","name":"frame","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetVerticalFOV","parent":"ProjectedTexture","type":"classfunc","description":"Sets the vertical angle of projection without affecting the horizontal angle.\n\nYou must call ProjectedTexture:Update after using this function for it to take effect.","realm":"Client","args":{"arg":{"text":"The new vertical Field Of View for the projected texture. Must be in range between 0 and 180.","name":"vFOV","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Update","parent":"ProjectedTexture","type":"classfunc","description":"Updates the Projected Light and applies all previously set parameters.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetFOV","parent":"ProjectedTexture","type":"classfunc","description":"Sets the angle of projection.\n\nYou must call ProjectedTexture:Update after using this function for it to take effect.","realm":"Client","args":{"arg":{"text":"Must be higher than 0 and lower than 180","name":"fov","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddTask","parent":"Schedule","type":"classfunc","description":"Adds a task to the schedule. See also Schedule:AddTaskEx if you wish to customize task start and run function names.\n\nSee also ENTITY:StartSchedule, NPC:StartEngineTask, and NPC:RunEngineTask.","realm":"Server","args":{"arg":[{"text":"Custom task name","name":"taskname","type":"string"},{"text":"Task data to be passed into the NPC's functions","name":"taskdata","type":"any"}]}},"example":{"description":"This creates a new schedule with a task named \"HelloWorld\" that is defined to print the taskdata passed in.","code":{"text":"local schdHello = ai_schedule.New( \"SayHello\" )\nschdHello:AddTask( \"HelloWorld\", \"HELLO\" )\n\n-- Called when the task is initiated (started)\nfunction ENT:TaskStart_HelloWorld( data )\n    print(data)\n\n    -- Set a variable that is 5 seconds in the future so the task can complete when we tick past it\n    self.TaskEndTime = CurTime() + 5\nend\n\n-- Called every think until the task is completed\nfunction ENT:Task_HelloWorld(data)\n    print( data, \"again\" )\n\n    -- Check if the 5 seconds have passed\n    if CurTime()","self.taskendtime":{"then":"","self:taskcomplete":"","end":"","ode":"ode","output":"Prints \"HELLO\" in the console, then prints \"HELLO again\" on every NPC think until 5 seconds have passed."}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"EngTask","parent":"Schedule","type":"classfunc","description":"Adds an engine task to the schedule.","realm":"Server","args":{"arg":[{"text":"Task name, see [ai_task.h](https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/server/ai_task.h#L89-L502)","name":"taskname","type":"string"},{"text":"Task data, can be a float.","name":"taskdata","type":"number"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"NumTasks","parent":"Schedule","type":"classfunc","description":"Returns the number of tasks in the schedule.","realm":"Server","rets":{"ret":{"text":"The number of tasks in this schedule.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Init","parent":"Schedule","type":"classfunc","description":{"text":"Initialises the Schedule. Called by ai_schedule.New when the Schedule is created.","internal":""},"realm":"Server","args":{"arg":{"text":"The name passed from ai_schedule.New.","name":"debugName","type":"string"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Pop","parent":"Stack","type":"classfunc","description":"Pop an item from the stack","realm":"Shared","file":{"text":"lua/includes/extensions/util.lua","line":"251"},"args":{"arg":{"text":"Amount of items you want to pop.","name":"amount","type":"number","default":"1"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Push","parent":"Stack","type":"classfunc","description":"Push an item onto the stack","realm":"Shared","file":{"text":"lua/includes/extensions/util.lua","line":"238"},"args":{"arg":{"text":"The item you want to push","name":"object","type":"any"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Size","parent":"Stack","type":"classfunc","description":"Returns the size of the stack","realm":"Shared","file":{"text":"lua/includes/extensions/util.lua","line":"285"},"rets":{"ret":{"text":"The size of the stack","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Top","parent":"Stack","type":"classfunc","description":"Get the item at the top of the stack","realm":"Shared","file":{"text":"lua/includes/extensions/util.lua","line":"273"},"rets":{"ret":{"text":"The item at the top of the stack","name":"","type":"any"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetMaterial","parent":"SurfaceInfo","type":"classfunc","description":"Returns the brush surface's material.","realm":"Shared","rets":{"ret":{"text":"Material of one portion of a brush model.","name":"","type":"IMaterial"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetVertices","parent":"SurfaceInfo","type":"classfunc","description":"Returns a list of vertices the brush surface is built from.","realm":"Shared","rets":{"ret":{"text":"A list of Vector points. This will usually be 4 corners of a quadrilateral in counter-clockwise order.","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsNoDraw","parent":"SurfaceInfo","type":"classfunc","description":{"text":"Checks if the brush surface is a nodraw surface, meaning it will not be drawn by the engine.","note":"This internally checks the SURFDRAW_NODRAW flag."},"realm":"Shared","rets":{"ret":{"text":"Returns true if this surface won't be drawn.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsSky","parent":"SurfaceInfo","type":"classfunc","description":{"text":"Checks if the brush surface is displaying the skybox.","note":"This internally checks the SURFDRAW_SKY flag."},"realm":"Shared","rets":{"ret":{"text":"Returns true if the surface is the sky.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"AddTaskEx","parent":"Schedule","type":"classfunc","description":"Adds a task to the schedule with completely custom function names.\n\nSee also Schedule:AddTask.","realm":"Server","args":{"arg":[{"text":"The full name of a function on the entity's table to be ran when the task is started.","name":"start","type":"string"},{"text":"The full name of a function on the entity's table to be ran when the task is continuously running.","name":"run","type":"string"},{"text":"Task data to be passed into the NPC's functions","name":"data","type":"number"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Init","parent":"Task","type":"classfunc","description":{"text":"Initialises the AI task. Called by ai_task.New.","internal":""},"realm":"Server","file":{"text":"lua/includes/modules/ai_task.lua","line":"L29-L31"}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetTask","parent":"Schedule","type":"classfunc","description":"Returns the task at the given index.","realm":"Server","args":{"arg":{"text":"Task index.","name":"num","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsWater","parent":"SurfaceInfo","type":"classfunc","description":{"text":"Checks if the brush surface is water.","note":"This internally checks the SURFDRAW_WATER flag."},"realm":"Shared","rets":{"ret":{"text":"Returns true if the surface is water.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"InitFunctionName","parent":"Task","type":"classfunc","description":"Initialises the AI task as NPC method-based.","realm":"Server","file":{"text":"lua/includes/modules/ai_task.lua","line":"56"},"args":{"arg":[{"text":"The name of the NPC method to call on task start.","name":"startname","type":"string"},{"text":"The name of the NPC method to call on task run.","name":"runname","type":"string"},{"name":"taskdata","type":"number"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsEngineType","parent":"Task","type":"classfunc","description":"Determines if the task is an engine task (`TYPE_ENGINE`, 1).","realm":"Server","file":{"text":"lua/includes/modules/ai_task.lua","line":"67"}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsFNameType","parent":"Task","type":"classfunc","description":"Determines if the task is an NPC method-based task (`TYPE_FNAME`, 2).","realm":"Server","file":{"text":"lua/includes/modules/ai_task.lua","line":"75"}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Run","parent":"Task","type":"classfunc","description":"Runs the AI task.","realm":"Server","file":{"text":"lua/includes/modules/ai_task.lua","line":"112"},"args":{"arg":{"text":"The NPC to run the task on.","name":"target","type":"NPC"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"InitEngine","parent":"Task","type":"classfunc","description":"Initialises the AI task as an engine task.","realm":"Server","file":{"text":"lua/includes/modules/ai_task.lua","line":"L36-L43"},"args":{"arg":[{"text":"The name of the task.","name":"taskname","type":"string"},{"name":"taskdata","type":"number"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Run_FName","parent":"Task","type":"classfunc","description":{"text":"Runs the AI task as an NPC method. This requires the task to be of type `TYPE_FNAME`.","internal":""},"realm":"Server","file":{"text":"lua/includes/modules/ai_task.lua","line":"125"},"args":{"arg":{"text":"The NPC to run the task on.","name":"target","type":"NPC"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Start","parent":"Task","type":"classfunc","description":"Starts the AI task.","realm":"Server","file":{"text":"lua/includes/modules/ai_task.lua","line":"83"},"args":{"arg":{"text":"The NPC to start the task on.","name":"target","type":"NPC"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Start_FName","parent":"Task","type":"classfunc","description":{"text":"Starts the AI task as an NPC method.","internal":""},"realm":"Server","file":{"text":"lua/includes/modules/ai_task.lua","line":"99"},"args":{"arg":{"text":"The NPC to start the task on.","name":"target","type":"NPC"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Allowed","parent":"Tool","type":"classfunc","description":"Returns whether the tool is allowed to be used or not. This function ignores the SANDBOX:CanTool hook.\n\nBy default this will always return true clientside and uses `TOOL.AllowedCVar`which is a ConVar object pointing to  `toolmode_allow_*toolname*` convar on the server.","realm":"Shared","file":{"text":"gamemodes/sandbox/entities/weapons/gmod_tool/stool.lua","line":"90"},"rets":{"ret":{"text":"Returns true if the tool is allowed.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"BuildConVarList","parent":"Tool","type":"classfunc","description":"Builds a list of all ConVars set via the ClientConVar variable on the Structures/TOOL and their default values. This is used for the preset system.","realm":"Shared","file":{"text":"gamemodes/sandbox/entities/weapons/gmod_tool/stool.lua","line":"67"},"rets":{"ret":{"text":"A list of all convars and their default values.","name":"convars","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ClearObjects","parent":"Tool","type":"classfunc","description":"Clears all objects previously set with Tool:SetObject.","realm":"Shared","file":{"text":"gamemodes/sandbox/entities/weapons/gmod_tool/object.lua","line":"34"}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"CheckObjects","parent":"Tool","type":"classfunc","description":{"text":"Checks all added objects to see if they're still valid, if not, clears the list of objects.","internal":"This is called automatically for most toolgun actions so you shouldn't need to use it."},"realm":"Shared","file":{"text":"gamemodes/sandbox/entities/weapons/gmod_tool/stool.lua","line":"117"}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"CreateConVars","parent":"Tool","type":"classfunc","description":{"text":"Creates clientside ConVars based on the ClientConVar table specified in the tool structure. Also creates the 'toolmode_allow_X' ConVar.","internal":"This is called automatically for all tools."},"realm":"Shared","file":{"text":"gamemodes/sandbox/entities/weapons/gmod_tool/stool.lua","line":"33"}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetClientNumber","parent":"Tool","type":"classfunc","description":"Attempts to grab a clientside tool ConVar.","realm":"Shared","file":{"text":"gamemodes/sandbox/entities/weapons/gmod_tool/stool.lua","line":"84"},"args":{"arg":[{"text":"Name of the convar to retrieve. The function will automatically add the \"mytoolfilename_\" part to it.","name":"name","type":"string"},{"text":"The default value to return in case the lookup fails.","name":"default","type":"number","default":"0"}]},"rets":{"ret":{"text":"The value of the requested ConVar.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetEnt","parent":"Tool","type":"classfunc","description":"Retrieves an Entity previously stored using Tool:SetObject.","realm":"Shared","file":{"text":"gamemodes/sandbox/entities/weapons/gmod_tool/object.lua","line":"48"},"args":{"arg":{"text":"The id of the object which was set in Tool:SetObject.","name":"id","type":"number"}},"rets":{"ret":{"text":"Associated Entity with given id.","name":"","type":"Entity"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetHelpText","parent":"Tool","type":"classfunc","description":"Returns a language key based on this tool's name and the current stage it is on.","realm":"Shared","file":{"text":"gamemodes/sandbox/entities/weapons/gmod_tool/object.lua","line":"163"},"rets":{"ret":{"text":"The returned language key, for example `\"#tool.weld.1\"`","name":"key","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetBone","parent":"Tool","type":"classfunc","description":"Retrieves a physics bone number previously stored using Tool:SetObject.","realm":"Shared","file":{"text":"gamemodes/sandbox/entities/weapons/gmod_tool/object.lua","line":"81"},"args":{"arg":{"text":"The id of the object which was set in Tool:SetObject.","name":"id","type":"number"}},"rets":{"ret":{"text":"Associated physics bone with given id.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetClientInfo","parent":"Tool","type":"classfunc","description":"Attempts to grab a clientside tool ConVar.","realm":"Shared","file":{"text":"gamemodes/sandbox/entities/weapons/gmod_tool/stool.lua","line":"78"},"args":{"arg":{"text":"Name of the convar to retrieve. The function will automatically add the \"mytoolfilename_\" part to it.","name":"name","type":"string"}},"rets":{"ret":{"text":"The value of the requested ConVar.","name":"","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Create","parent":"Tool","type":"classfunc","description":{"text":"Initializes the tool object","internal":"This is called automatically for all tools."},"realm":"Shared","file":{"text":"gamemodes/sandbox/entities/weapons/gmod_tool/stool.lua","line":"11"},"rets":{"ret":{"text":"The created tool object.","name":"tool","type":"Tool"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetMode","parent":"Tool","type":"classfunc","description":"Returns the name of the current tool mode.","realm":"Shared","file":{"text":"gamemodes/sandbox/entities/weapons/gmod_tool/stool.lua","line":"101"},"rets":{"ret":{"text":"The current tool mode.","name":"","type":"string"}}},"example":{"description":"The Toolgun weapon has a similar function, checking weapon class is strongly recommended as GetMode() is not available on all weapons.","code":"local wep = Entity( 1 ):GetActiveWeapon()\nif ( IsValid( wep ) && wep:GetClass() == \"gmod_tool\" ) then\n\tprint( wep:GetMode() )\nend","output":"```\nremover\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetNormal","parent":"Tool","type":"classfunc","description":"Retrieves an normal vector previously stored using Tool:SetObject.","realm":"Shared","file":{"text":"gamemode/sandbox/entities/weapons/gmod_tool/object.lua","line":"85"},"args":{"arg":{"text":"The id of the object which was set in Tool:SetObject.","name":"id","type":"number"}},"rets":{"ret":{"text":"Associated normal vector with given id.","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetLocalPos","parent":"Tool","type":"classfunc","description":"Retrieves an local vector previously stored using Tool:SetObject.\nSee also Tool:GetPos.","realm":"Shared","file":{"text":"gamemode/sandbox/entities/weapons/gmod_tool/object.lua","line":"76"},"args":{"arg":{"text":"The id of the object which was set in Tool:SetObject.","name":"id","type":"number"}},"rets":{"ret":{"text":"Associated local vector with given id.","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetOwner","parent":"Tool","type":"classfunc","description":"Returns the owner of this tool.","realm":"Shared","file":{"text":"gamemodes/sandbox/entities/weapons/gmod_tool/stool.lua","line":"103"},"rets":{"ret":{"text":"Player using the tool","name":"","type":"Entity"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetPhys","parent":"Tool","type":"classfunc","description":"Retrieves an PhysObj previously stored using Tool:SetObject.\nSee also Tool:GetEnt.","realm":"Shared","file":{"text":"gamemodes/sandbox/entities/weapons/gmod_tool/object.lua","line":"100-L108"},"args":{"arg":{"text":"The id of the object which was set in Tool:SetObject.","name":"id","type":"number"}},"rets":{"ret":{"text":"Associated PhysObj with given id. If it wasn't specified, returns current PhysObj of associated Entity.","name":"","type":"PhysObj"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetOperation","parent":"Tool","type":"classfunc","description":"Returns the current operation of the tool set by Tool:SetOperation.","realm":"Shared","file":{"text":"gamemodes/sandbox/entities/weapons/gmod_tool/object.lua","line":"28"},"rets":{"ret":{"text":"The current operation the tool is at.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetPos","parent":"Tool","type":"classfunc","description":"Retrieves an vector previously stored using Tool:SetObject. See also Tool:GetLocalPos.","realm":"Shared","file":{"text":"gamemode/sandbox/entities/weapons/gmod_tool/object.lua","line":"61"},"args":{"arg":{"text":"The id of the object which was set in Tool:SetObject.","name":"id","type":"number"}},"rets":{"ret":{"text":"Associated vector with given id. The vector is converted from Tool:GetLocalPos.","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetStage","parent":"Tool","type":"classfunc","description":"Returns the current stage of the tool set by Tool:SetStage.","realm":"Shared","file":{"text":"gamemodes/sandbox/entities/weapons/gmod_tool/object.lua","line":"16"},"rets":{"ret":{"text":"The current stage of the current operation the tool is at.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetServerInfo","parent":"Tool","type":"classfunc","description":"Attempts to grab a serverside tool ConVar.\nThis will not do anything on client, despite the function being defined shared.","realm":"Shared","file":{"text":"gamemodes/sandbox/entities/weapons/gmod_tool/stool.lua","line":"59"},"args":{"arg":{"text":"Name of the convar to retrieve. The function will automatically add the \"mytoolfilename_\" part to it.","name":"name","type":"string"}},"rets":{"ret":{"text":"The value of the requested ConVar.","name":"","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"MakeGhostEntity","parent":"Tool","type":"classfunc","description":"Initializes the ghost entity with the given model. Removes any old ghost entity if called multiple times.\n\nThe ghost is a regular prop_physics entity in singleplayer games, and a clientside prop in multiplayer games.","realm":"Shared","file":{"text":"gamemodes/sandbox/entities/weapons/gmod_tool/ghostentity.lua","line":"6"},"args":{"arg":[{"text":"The model of the new ghost entity","name":"model","type":"string"},{"text":"Position to initialize the ghost entity at, usually not needed since this is updated in Tool:UpdateGhostEntity.","name":"pos","type":"Vector"},{"text":"Angle to initialize the ghost entity at, usually not needed since this is updated in Tool:UpdateGhostEntity.","name":"angle","type":"Angle"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"NumObjects","parent":"Tool","type":"classfunc","description":{"text":"Returns the amount of stored objects ( Entitys ) the tool has.","validate":"Are TOOLs limited to 4 entities?"},"realm":"Shared","file":{"text":"gamemodes/sandbox/entities/weapons/gmod_tool/object.lua","line":"149"},"rets":{"ret":{"text":"The amount of stored objects, or Tool:GetStage clientide.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ReleaseGhostEntity","parent":"Tool","type":"classfunc","description":"Removes any ghost entity created for this tool.","realm":"Shared","file":{"text":"gamemodes/sandbox/entities/weapons/gmod_tool/ghostentity.lua","line":"68"}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetObject","parent":"Tool","type":"classfunc","description":"Stores an Entity for later use in the tool.\n\nThe stored values can be retrieved by Tool:GetEnt, Tool:GetPos, Tool:GetLocalPos, Tool:GetPhys, Tool:GetBone and Tool:GetNormal","realm":"Shared","file":{"text":"gamemodes/sandbox/entities/weapons/gmod_tool/object.lua","line":"112"},"args":{"arg":[{"text":"The id of the object to store.","name":"id","type":"number"},{"text":"The entity to store.","name":"ent","type":"Entity"},{"text":"The position to store.","name":"pos","type":"Vector","note":"this position is in **global space** and is internally converted to **local space** relative to the object, so when you retrieve it later it will be corrected to the object's new position"},{"text":"The physics object to store.","name":"phys","type":"PhysObj"},{"text":"The hit bone to store.","name":"bone","type":"number"},{"text":"The hit normal to store.","name":"normal","type":"Vector"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetStage","parent":"Tool","type":"classfunc","description":"Sets the current stage of the tool. Does nothing clientside.\n\nSee also Tool:SetOperation.","realm":"Shared","file":{"text":"/gamemodes/sandbox/entities/weapons/gmod_tool/object.lua","line":"8-L14"},"args":{"arg":{"text":"The new stage to set.","name":"stage","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"StartGhostEntity","parent":"Tool","type":"classfunc","description":"Initializes the ghost entity based on the supplied entity.","realm":"Shared","file":{"text":"gamemodes/sandbox/entities/weapons/gmod_tool/ghostentity.lua","line":"54"},"args":{"arg":{"text":"The entity to copy ghost parameters off","name":"ent","type":"Entity"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"UpdateData","parent":"Tool","type":"classfunc","description":{"text":"Sets the tool's stage to how many stored objects the tool has.","internal":"Called on deploy automatically"},"realm":"Shared","file":{"text":"gamemodes/sandbox/entities/weapons/gmod_tool/object.lua","line":"2"}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"UpdateGhostEntity","parent":"Tool","type":"classfunc","description":"Updates the position and orientation of the ghost entity based on where the toolgun owner is looking along with data from object with id 1 set by Tool:SetObject.\n\nThis should be called in the tool's TOOL:Think hook.\n\nThis command is only used for tools that move props, such as easy weld, axis and motor. If you want to update a ghost like the thruster tool does it for example, check its [source code](https://github.com/Facepunch/garrysmod/blob/master/garrysmod/gamemodes/sandbox/entities/weapons/gmod_tool/stools/thruster.lua#L179).","realm":"Shared","file":{"text":"gamemodes/sandbox/entities/weapons/gmod_tool/ghostentity.lua","line":"101"}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Add","parent":"Vector","type":"classfunc","description":"Adds the values of the argument vector to the orignal vector. This functions the same as vector1 + vector2 without creating a new vector object, skipping object construction and garbage collection.","realm":"Shared","args":{"arg":{"text":"The vector to add.","name":"vector","type":"Vector"}}},"example":[{"description":"Adds the components of the vectors together.","code":"a = Vector(1, 1, 1)\na:Add(Vector(1, 2, 3))\nprint(a)","output":"2 3 4"},{"description":"If you don't want to set your vector to the result, and just return a new vector as the result. You can use a '+' operator to add two vectors together. The original vector will remain unchanged.","code":"a = Vector(1, 1, 1)\nprint(a + Vector(1, 2, 3))","output":"2 3 4"}],"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Angle","parent":"Vector","type":"classfunc","description":"Returns an angle representing the normal of the vector.","realm":"Shared","rets":{"ret":{"text":"The angle/direction of the vector.","name":"","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Distance","parent":"Vector","type":"classfunc","description":{"text":"Returns the euclidean distance between the vector and the other vector.","note":"This function is more expensive than Vector:DistToSqr. However, please see the notes for Vector:DistToSqr before using it as squared distances are not the same as euclidean distances."},"realm":"Shared","args":{"arg":{"text":"The vector to get the distance to.","name":"otherVector","type":"Vector"}},"rets":{"ret":{"text":"Distance between the vectors.","name":"","type":"number"}}},"example":{"description":"Gets the distance from A to B.","code":"print( Vector( 0, 0, 0 ):Distance( Vector( 2, 3, 4 ) ) )","output":"```\n5.3851647377014\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Cross","parent":"Vector","type":"classfunc","description":"Calculates the cross product of this vector and the passed one.\n\nThe cross product of two vectors is a 3-dimensional vector with a direction perpendicular (at right angles) to both of them (according to the right-hand rule), and magnitude equal to the area of parallelogram they span. This is defined as the product of the magnitudes, the sine of the angle between them, and unit (normal) vector `n` defined by the right-hand rule:\n:**a** × **b** = |**a**| |**b**| sin(θ) **n̂**\nwhere **a** and **b** are vectors, and **n̂** is a unit vector (magnitude of 1) perpendicular to both.","realm":"Shared","args":{"arg":{"text":"Vector to calculate the cross product with.","name":"otherVector","type":"Vector"}},"rets":{"ret":{"text":"The cross product of the two vectors.","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"AngleEx","parent":"Vector","type":"classfunc","description":"Returns the angle of the vector, but instead of assuming that up is Global.Vector( 0, 0, 1 ) (Like Vector:Angle does) you can specify which direction is 'up' for the angle.","realm":"Shared","args":{"arg":{"text":"The up direction vector","name":"up","type":"Vector"}},"rets":{"ret":{"text":"The angle","name":"","type":"Angle"}}},"example":[{"description":"Shows usage of the function","code":"print( Vector( 0, 0, 100 ):AngleEx( Vector( 0, 0, 0 ) ) )","output":"Angle( -90.000, -0.000, 0.000 )"},{"description":"Use forward and up vector to produce angle. These two lines below will\n\t\treturn the same angle","code":"local e = ents.Create(\"prop_physics\")\n\t\tprint(e:GetAngles())\n\t\tprint(e:GetForward():AngleEx(e:GetUp()))"}],"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Div","parent":"Vector","type":"classfunc","description":"Divide the vector by the given number, that means x, y and z are divided by that value. This will change the value of the original vector, see example 2 for division without changing the value.","realm":"Shared","args":{"arg":{"text":"The value to divide the vector with.","name":"divisor","type":"number"}}},"example":[{"description":"Divides a vector by 255.","code":"a = Vector(255, 130, 0)\na:Div(255)\nprint(a)","output":"```\n1 0.509804 0\n```"},{"description":"If you don't want to set your vector to the result, and just return a new vector as the result. You can use a ' / ' operator to divide a vector with a divisor.","code":"a = Vector(255, 255, 255)\nprint(a/255)","output":"```\n1 1 1\n```"}],"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"DistToSqr","parent":"Vector","type":"classfunc","description":{"text":"Returns the squared distance of 2 vectors, this is faster than Vector:Distance as calculating the square root is an expensive process.","note":"Squared distances should not be summed. If you need to sum distances, use Vector:Distance.\n\nWhen performing a distance check, ensure the distance being checked against is squared. See example code below."},"realm":"Shared","args":{"arg":{"text":"The vector to calculate the distance to.","name":"otherVec","type":"Vector"}},"rets":{"ret":{"text":"Squared distance to the vector.","name":"","type":"number"}}},"example":{"description":"Checks if a player is within `dist` units of another player in the most efficient way possible.","code":{"text":"function PlayerWithinBounds( ply, target, dist )\n\t-- Square the input distance in order to perform our distance check on Source units.\n\tlocal distSqr = dist * dist\n\n\treturn ply:GetPos():DistToSqr( target:GetPos() )","distsqr":{"end":"","print":"","playerwithinbounds":"","entity1":"","entity2":"","ode":"ode","output":"```\ntrue\n```"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetOperation","parent":"Tool","type":"classfunc","description":"Sets the current operation of the tool. Does nothing clientside. See also Tool:SetStage.\n\nOperations and stages work as follows:\n* Operation 1\n* * Stage 1\n* * Stage 2\n* * Stage 3\n* Operation 2\n* * Stage 1\n* * Stage 2\n* * Stage ...","realm":"Shared","file":{"text":"gamemodes/sandbox/entities/weapons/gmod_tool/object.lua","line":"20"},"args":{"arg":{"text":"The new operation ID to set.","name":"operation","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Dot","parent":"Vector","type":"classfunc","description":{"text":"Returns the [dot product](https://en.wikipedia.org/wiki/Dot_product#Geometric_definition)  of this vector and the passed one.\n\nThe dot product of two vectors is the product of their magnitudes (lengths), and the cosine of the angle between them:\n**a · b** = |**a**| |**b**| cos(θ) \nwhere **a** and **b** are vectors.\nSee Vector:Length for obtaining magnitudes.\n\nA dot product returns just the cosine of the angle if both vectors are normalized, and zero if the vectors are at right angles to each other.","br":["","","","","",""]},"realm":"Shared","args":{"arg":{"text":"The vector to calculate the dot product with","name":"otherVector","type":"Vector"}},"rets":{"ret":{"text":"The dot product between the two vectors","name":"","type":"number"}}},"example":[{"description":"Get the angle of two opposite normalized vectors.","code":"local a = Vector(0, 1, 0)\nlocal b = Vector(0, -1, 0)\n\nlocal dot = a:Dot(b) -- returns the cos(ang) of the two vectors because they're both of length 1\nprint(\"Radians\", math.acos(dot)) -- the inverse of the cosine to get the angle\nprint(\"Degrees\", math.deg(math.acos(dot))) -- Convert radians to degrees","output":{"text":"Radians    3.1415926535898\nDegrees    180","br":""}},{"description":"Calculates whether the player is looking in the direction of an entity. This is often faster than traces, but it produces a slightly different result.\n\nThe player is looking in the direction of the entity if the angle between the aimvector and the vector from the player to the entity is less than 22.5 degrees (or pi / 8 radians).","code":"local directionAngCos = math.cos(math.pi / 8)\nlocal aimVector = ply:GetAimVector()\n-- The vector that goes from the player's shoot pos to the entity's position\nlocal entVector = ent:GetPos() - ply:GetShootPos() \nlocal angCos = aimVector:Dot(entVector) / entVector:Length()\nprint(angCos >= directionAngCos)","output":"This script will say if the player is looking in the direction of the entity."},{"description":"A function to make sure the player is looking somewhere.","code":"function IsLookingAt(ply, targetVec)\n\tlocal diff = targetVec - ply:GetShootPos()\n\treturn ply:GetAimVector():Dot(diff) / diff:Length() >= 0.95 \nend","output":"Returns true if ply is looking at (or close to) the target."}],"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"DotProduct","parent":"Vector","type":"classfunc","description":{"text":"Returns the dot product of the two vectors.","deprecated":"This is an alias of Vector:Dot. Use that instead."},"realm":"Shared","args":{"arg":{"text":"The other vector.","name":"Vector","type":"Vector"}},"rets":{"ret":{"text":"Dot Product","name":"","type":"number"}}},"example":{"description":"A function to make sure the player is looking somewhere.","code":"function IsLookingAt( ply, targetVec )\n return ply:GetAimVector():DotProduct( ( targetVec - ply:GetPos() + Vector(70) ):GetNormalized() ) < 0.95 \nend","output":"Returns true if ply is looking at (or close to) the target."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetNormal","parent":"Vector","type":"classfunc","description":{"text":"Returns a normalized version of the vector. This is a alias of Vector:GetNormalized.","deprecated":"Use Vector:GetNormalized instead."},"realm":"Shared","rets":{"ret":{"text":"Normalized version of the vector.","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsEqualTol","parent":"Vector","type":"classfunc","description":"Returns if the vector is equal to another vector with the given tolerance.","realm":"Shared","args":{"arg":[{"text":"The vector to compare to.","name":"compare","type":"Vector"},{"text":"The tolerance range.","name":"tolerance","type":"number"}]},"rets":{"ret":{"text":"Are the vectors equal or not.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetNormalized","parent":"Vector","type":"classfunc","description":"Returns a normalized version of the vector. Normalized means vector with same direction but with length of 1.\n\nThis does not affect the vector you call it on; to do this, use Vector:Normalize.","realm":"Shared","rets":{"ret":{"text":"Normalized version of the vector.","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Length2DSqr","parent":"Vector","type":"classfunc","description":"Returns the squared length of the vectors x and y value, x² + y².\n\nThis is faster than Vector:Length2D as calculating the square root is an expensive process.","realm":"Shared","rets":{"ret":{"text":"Squared length of the vector in two dimensions","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Length2D","parent":"Vector","type":"classfunc","description":{"text":"Returns the length of the vector in two dimensions, without the Z axis.","warning":"This is a relatively expensive process since it uses the square root. It is recommended that you use Vector:Length2DSqr whenever possible."},"realm":"Shared","rets":{"ret":{"text":"Length of the vector in two dimensions, √(x² + y²)","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Length","parent":"Vector","type":"classfunc","description":{"text":"Returns the [Euclidean length](https://en.wikipedia.org/wiki/Euclidean_vector#Length) of the vector: √(x² + y² + z²).","warning":"This is a relatively expensive process since it uses the square root. It is recommended that you use Vector:LengthSqr whenever possible."},"realm":"Shared","rets":{"ret":{"text":"Length of the vector.","name":"","type":"number"}}},"example":{"description":"Gets the length of the vector.","code":"print( Vector( 15, 16, 17 ):Length() )","output":"```\n27.748874664307\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Mul","parent":"Vector","type":"classfunc","description":"Scales the vector by the given number (that means x, y and z are multiplied by that value) or Vector.","realm":"Shared","args":{"arg":{"text":"The value to scale the vector with.","name":"multiplier","type":"number"}}},"example":[{"description":"Scales a vector by 250.","code":"a = Vector(1, 1, 1)\na:Mul(250)\nprint(a)","output":"```\n250 250 250\n```"},{"description":"If you don't want to set your vector to the result, and just return a new vector as the result. You can use a ' * ' operator to multiply a vector with a scalar.","code":"a = Vector(1, 1, 1)\nprint(a*250)","output":"```\n250 250 250\n```"}],"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Normalize","parent":"Vector","type":"classfunc","description":"Normalizes the given vector. This changes the vector you call it on, if you want to return a normalized copy without affecting the original, use Vector:GetNormalized.","realm":"Shared"},"example":{"description":"Normalizes Vector(4, 3, 2).","code":"local test = Vector(4, 3, 2)\ntest:Normalize()\nMsgN( test )","output":"0.7428 0.5571 0.3714."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"LengthSqr","parent":"Vector","type":"classfunc","description":"Returns the squared length of the vector, x² + y² + z².\n\nThis is faster than Vector:Length as calculating the square root is an expensive process.","realm":"Shared","rets":{"ret":{"text":"Squared length of the vector","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Rotate","parent":"Vector","type":"classfunc","description":"Rotates a vector by the given angle.\nDoesn't return anything, but rather changes the original vector.","realm":"Shared","args":{"arg":{"text":"The angle to rotate the vector by.","name":"rotation","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Set","parent":"Vector","type":"classfunc","description":"Copies the values from the second vector to the first vector.","realm":"Shared","args":{"arg":{"text":"The vector to copy from.","name":"vector","type":"Vector"}}},"example":{"description":"Sets vector B to vector A's value.","code":"a = Vector(1, 2, 3)\nb = Vector()\nb:Set(a)\nprint(b)","output":"1, 2, 3."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetUnpacked","parent":"Vector","type":"classfunc","description":"Sets the x, y, and z of the vector.","realm":"Shared","args":{"arg":[{"text":"The x component","name":"x","type":"number"},{"text":"The y component","name":"y","type":"number"},{"text":"The z component","name":"z","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Sub","parent":"Vector","type":"classfunc","description":"Substracts the values of the second vector from the orignal vector, this function can be used to avoid garbage collection.","realm":"Shared","args":{"arg":{"text":"The other vector.","name":"vector","type":"Vector"}}},"example":[{"description":"Subtracts vector A's components with the other vector.","code":"a = Vector(5, 6, 7)\na:Sub(Vector(1, 2, 3))\nprint(a)","output":"```\n4 4 4\n```"},{"description":"If you don't want to set your vector to the result, and just return a new vector as the result. You can use a ' - ' operator to subtract two vectors from each other.","code":"a = Vector(5, 6, 7)\nprint(a-Vector(1, 2, 3))","output":"```\n4 4 4\n```"}],"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ToColor","parent":"Vector","type":"classfunc","description":{"text":"Translates the Vector (values ranging from 0 to 1) into a Color. This will also range the values from 0 - 1 to 0 - 255.\n\nx * 255 -> r\ny * 255 -> g\nz * 255 -> b\n\nThis is the opposite of Color:ToVector","br":["",""]},"realm":"Shared","rets":{"ret":{"text":"The created Color.","name":"","type":"table"}}},"example":{"description":"Get the Player1's player model color but in RGB","code":"print( Entity( 1 ):GetPlayerColor( ):ToColor( ) )","output":"Prints the player color of Player1 in RGB instead of a Vector"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ToScreen","parent":"Vector","type":"classfunc","description":{"text":"Returns where on the screen the specified position vector would appear. A related function is gui.ScreenToVector, which converts a 2D coordinate to a 3D direction.","note":"Should be called from a 3D rendering environment or after cam.Start3D or it may not work correctly.","bug":[{"text":"Errors in a render hook can make this value incorrect until the player restarts their game.","issue":"462"},{"text":"cam.Start3D or 3D context cam.Start with non-default parameters incorrectly sets the reference FOV for this function, causing incorrect return values. This can be fixed by creating and ending a default 3D context (cam.Start3D with no arguments).","issue":"1404"}]},"realm":"Client","rets":{"ret":{"text":"The created Structures/ToScreenData.","name":"","type":"table"}}},"example":{"description":"Draw some text on certain entities/positions in-world.","code":"hook.Add( \"HUDPaint\", \"ToScreenExample\", function()\n\n\t-- Get a list of all props and draw a marker on screen for each prop\n\tfor _, ent in ipairs( ents.FindByClass( \"prop_*\" ) ) do\n\n\t\tlocal point = ent:GetPos() + ent:OBBCenter() -- Gets the position of the entity, specifically the center\n\t\tlocal data2D = point:ToScreen() -- Gets the position of the entity on your screen\n\n\t\t-- The position is not visible from our screen, don't draw and continue onto the next prop\n\t\tif ( not data2D.visible ) then continue end\n\n\t\t-- Draw a simple text over where the prop is\n\t\tdraw.SimpleText( \"Prop here\", \"Default\", data2D.x, data2D.y, Color( 255, 255, 255 ), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )\n\n\tend\n\nend )","output":{"upload":{"src":"70c/8d7e20f173a4dae.png","size":"485139","name":"image.png"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ToTable","parent":"Vector","type":"classfunc","description":"Returns the vector as a table with three elements.","realm":"Shared","rets":{"ret":{"text":"The table with elements 1 = x, 2 = y, 3 = z.","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Unpack","parent":"Vector","type":"classfunc","description":"Returns the x, y, and z of the vector.","realm":"Shared","rets":{"ret":[{"text":"x or Vector[1].","name":"","type":"number"},{"text":"y or Vector[2].","name":"","type":"number"},{"text":"z or Vector[3].","name":"","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"WithinAABox","parent":"Vector","type":"classfunc","description":"Returns whenever the given vector is in a box created by the 2 other vectors.","realm":"Shared","args":{"arg":[{"text":"The first vector.","name":"boxStart","type":"Vector"},{"text":"The second vector.","name":"boxEnd","type":"Vector"}]},"rets":{"ret":{"text":"Is the vector in the box or not","name":"","type":"boolean"}}},"example":{"description":"Checks if player is within a certain area on the map.","code":"-- Position to test, we get the position of first player on the server\nlocal testPos = Entity( 1 ):GetPos()\n\n-- Positions to test, in this case we test if the player is in spawn area of gm_construct\nlocal pos1 = Vector( 1119, 895, 63 )\nlocal pos2 = Vector( 656, -896, -144 )\n\n-- This will return true if the player is within the tested area\nprint( testPos:WithinAABox( pos1, pos2 ) )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsZero","parent":"Vector","type":"classfunc","description":"Checks whenever all fields of the vector are 0.","realm":"Shared","rets":{"ret":{"text":"Do all fields of the vector equal 0 or not","name":"","type":"boolean"}}},"example":{"description":"Confirm that the Vector is indeed 0.","code":"a = Vector(0, 0, 0)\nprint(a:IsZero())","output":"true"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Zero","parent":"Vector","type":"classfunc","description":"Sets x, y and z to 0.","realm":"Shared"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"EnableEngine","parent":"Vehicle","type":"classfunc","description":"Sets whether the engine is enabled or disabled, i.e. can be started or not.","realm":"Server","args":{"arg":{"text":"Enable or disable the engine","name":"enable","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"CheckExitPoint","parent":"Vehicle","type":"classfunc","description":"Tries to find an Exit Point for leaving vehicle, if one is unobstructed in the direction given.","realm":"Server","args":{"arg":[{"text":"Yaw/roll from vehicle angle to check for exit","name":"yaw","type":"number"},{"text":"Distance from origin to drop player","name":"distance","type":"number"}]},"rets":{"ret":{"text":"Returns the vector for exit position or nil if cannot exit that way.","name":"","type":"Vector"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"BoostTimeLeft","parent":"Vehicle","type":"classfunc","description":"Returns the remaining boosting time left.","realm":"Server","rets":{"ret":{"text":"The remaining boosting time left","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetAmmo","parent":"Vehicle","type":"classfunc","description":"Returns information about the ammo of the vehicle","realm":"Client","rets":{"ret":[{"text":"Ammo type of the vehicle ammo","name":"","type":"number"},{"text":"Clip size","name":"","type":"number"},{"text":"Count","name":"","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetCameraDistance","parent":"Vehicle","type":"classfunc","description":"Returns third person camera distance.","realm":"Shared","file":{"text":"lua/includes/extensions/entity.lua","line":"565-L569"},"rets":{"ret":{"text":"Camera distance","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetOperatingParams","parent":"Vehicle","type":"classfunc","description":"Returns some info about the vehicle.","realm":"Server","rets":{"ret":{"text":"The operating params. See Structures/OperatingParams.","name":"","type":"table"}}},"example":{"description":"Example output on a default Half-Life 2 Jeep.","code":"PrintTable( Entity(1):GetVehicle():GetOperatingParams() )","output":"```\nRPM\t=\t19.902961730957\ngear\t=\t0\nisTorqueBoosting\t=\tfalse\nspeed\t=\t-0.67361652851105\nsteeringAngle\t=\t0\nwheelsInContact\t=\t4\n```"},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetMaxSpeed","parent":"Vehicle","type":"classfunc","description":"Returns the max speed of the vehicle in MPH.","realm":"Server","rets":{"ret":{"text":"The max speed of the vehicle in MPH","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetPassenger","parent":"Vehicle","type":"classfunc","description":"Gets the passenger of the vehicle, returns NULL if no drivers is present.","realm":"Shared","args":{"arg":{"text":"The index of the passenger","name":"passenger","type":"number"}},"rets":{"ret":{"text":"The passenger","name":"","type":"Entity"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetRPM","parent":"Vehicle","type":"classfunc","description":"Returns the current RPM of the vehicle. This value is fake and doesn't actually affect the vehicle movement.","realm":"Server","rets":{"ret":{"text":"The RPM.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetPassengerSeatPoint","parent":"Vehicle","type":"classfunc","description":"Returns the seat position and angle of a given passenger seat.","realm":"Server","args":{"arg":{"text":"The passenger role. ( 1 is the driver )","name":"role","type":"number"}},"rets":{"ret":[{"text":"The seat position","name":"","type":"Vector"},{"text":"The seat angle","name":"","type":"Angle"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetSteering","parent":"Vehicle","type":"classfunc","description":"Returns the current steering of the vehicle.","realm":"Server","rets":{"ret":{"text":"The current steering of the vehicle.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetSpeed","parent":"Vehicle","type":"classfunc","description":"Returns the current speed of the vehicle in MPH.","realm":"Server","rets":{"ret":{"text":"The speed of the vehicle in MPH","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetDriver","parent":"Vehicle","type":"classfunc","description":"Gets the driver of the vehicle, returns `NULL` if no driver is present.","realm":"Shared","rets":{"ret":{"text":"The driver of the vehicle.","name":"","type":"Entity"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetSteeringDegrees","parent":"Vehicle","type":"classfunc","description":"Returns the maximum steering degree of the vehicle","realm":"Server","rets":{"ret":{"text":"The maximum steering degree of the vehicle","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetThirdPersonMode","parent":"Vehicle","type":"classfunc","description":"Returns if vehicle has thirdperson mode enabled or not.","realm":"Shared","file":{"text":"lua/includes/extensions/entity.lua","line":"553-L557"},"rets":{"ret":{"text":"Returns true if third person mode enabled, false otherwise","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetHLSpeed","parent":"Vehicle","type":"classfunc","description":"Returns the current speed of the vehicle in Half-Life Hammer Units (in/s). Same as Entity:GetVelocity + Vector:Length.","realm":"Server","rets":{"ret":{"text":"The speed of the vehicle","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetThrottle","parent":"Vehicle","type":"classfunc","description":"Returns the current throttle of the vehicle.","realm":"Server","rets":{"ret":{"text":"The current throttle of the vehicle","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetVehicleParams","parent":"Vehicle","type":"classfunc","description":"Returns the vehicle parameters of given vehicle.","realm":"Server","rets":{"ret":{"text":"The vehicle parameters. See Structures/VehicleParams","name":"","type":"table"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetVehicleClass","parent":"Vehicle","type":"classfunc","description":"Returns the vehicle class name. This is only useful for Sandbox spawned vehicles or any vehicle that properly sets the vehicle class with Vehicle:SetVehicleClass.","realm":"Shared","file":{"text":"lua/includes/extensions/entity.lua","line":"541-L545"},"rets":{"ret":{"text":"The class name of the vehicle.","name":"","type":"string"}}},"example":{"description":"Prints the spawn menu name of the vehicle the player is currently in.","code":"local c = Entity(1):GetVehicle():GetVehicleClass()\nif ( !list.Get( \"Vehicles\" )[ c ] ) then return end\nlocal t = list.Get( \"Vehicles\" )[ c ]\nprint( t.Name )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetVehicleViewPosition","parent":"Vehicle","type":"classfunc","description":"Returns the view position and forward angle of a given passenger seat.","realm":"Shared","args":{"arg":{"text":"The passenger role. 0 is the driver. This parameter seems to be ignored by the game engine and is therefore optional.","name":"role","type":"number","default":"0"}},"rets":{"ret":[{"text":"The view position, will be 0, 0, 0 on failure","name":"","type":"Vector"},{"text":"The view angles, will be 0, 0, 0 on failure","name":"","type":"Angle"},{"text":"The field of view, will be 0 on failure","name":"","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetWheelBaseHeight","parent":"Vehicle","type":"classfunc","description":"Returns the base wheel height.","realm":"Server","args":{"arg":{"text":"The wheel to get the base wheel height of.","name":"wheel","type":"number"}},"rets":{"ret":{"text":"The base wheel height.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetWheelContactPoint","parent":"Vehicle","type":"classfunc","description":"Returns the wheel contact point.","realm":"Server","args":{"arg":{"text":"The wheel to check","name":"wheel","type":"number"}},"rets":{"ret":[{"text":"The contact position","name":"","type":"Vector"},{"text":"The Surface Properties ID of hit surface.","name":"","type":"number"},{"text":"Whether the wheel is on ground or not","name":"","type":"boolean"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetWheelCount","parent":"Vehicle","type":"classfunc","description":"Returns the wheel count of the vehicle","realm":"Server","rets":{"ret":{"text":"The amount of wheels","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetWheel","parent":"Vehicle","type":"classfunc","description":"Returns the PhysObj of given wheel.","realm":"Server","args":{"arg":{"text":"The wheel to retrieve","name":"wheel","type":"number"}},"rets":{"ret":{"text":"The wheel","name":"","type":"PhysObj"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"HasBoost","parent":"Vehicle","type":"classfunc","description":"Returns whether this vehicle has boost at all.","realm":"Server","rets":{"ret":{"text":"Whether this vehicle has boost at all.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"HasBrakePedal","parent":"Vehicle","type":"classfunc","description":"Returns whether this vehicle has a brake pedal. See Vehicle:SetHasBrakePedal.","realm":"Server","rets":{"ret":{"text":"Whether this vehicle has a brake pedal or not.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsBoosting","parent":"Vehicle","type":"classfunc","description":"Returns whether this vehicle is currently boosting or not.","realm":"Server","rets":{"ret":{"text":"Whether this vehicle is currently boosting or not.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetWheelTotalHeight","parent":"Vehicle","type":"classfunc","description":"Returns the total wheel height.","realm":"Server","args":{"arg":{"text":"The wheel to get the base wheel height of.","name":"wheel","type":"number"}},"rets":{"ret":{"text":"The total wheel height.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsEngineEnabled","parent":"Vehicle","type":"classfunc","description":"Returns whether the engine is enabled or not, i.e. whether it can be started.","realm":"Server","rets":{"ret":{"text":"Whether the engine is enabled","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsEngineStarted","parent":"Vehicle","type":"classfunc","description":"Returns whether the engine is started or not.","realm":"Server","rets":{"ret":{"text":"Whether the engine is started or not.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsValidVehicle","parent":"Vehicle","type":"classfunc","description":"Returns true if the vehicle object is a valid or not. This will return false when Vehicle functions are not usable on the vehicle.","realm":"Shared","rets":{"ret":{"text":"Is the vehicle a valid vehicle or not","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetBoost","parent":"Vehicle","type":"classfunc","description":"Sets the boost. It is possible that this function does not work while the vehicle has a valid driver in it.","realm":"Server","args":{"arg":{"text":"The new boost value","name":"boost","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetCameraDistance","parent":"Vehicle","type":"classfunc","description":"Sets the third person camera distance of the vehicle.","realm":"Shared","file":{"text":"lua/includes/extensions/entity.lua","line":"559-L563"},"args":{"arg":{"text":"Camera distance to set to","name":"distance","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsVehicleBodyInWater","parent":"Vehicle","type":"classfunc","description":"Returns whether this vehicle's engine is underwater or not. ( Internally the attachment point \"engine\" or \"vehicle_engine\" is checked )","realm":"Server","rets":{"ret":{"text":"Whether this vehicle's engine is underwater or not.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetHandbrake","parent":"Vehicle","type":"classfunc","description":"Turns on or off the Jeep handbrake so it can roll without a driver inside.\n\nDoes nothing while the vehicle has a driver in it.","realm":"Server","args":{"arg":{"text":"true to turn on, false to turn off.","name":"handbrake","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetHasBrakePedal","parent":"Vehicle","type":"classfunc","description":"Sets whether this vehicle has a brake pedal.","realm":"Server","args":{"arg":{"text":"Whether this vehicle has a brake pedal","name":"brakePedal","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"ReleaseHandbrake","parent":"Vehicle","type":"classfunc","description":"Releases the vehicle's handbrake (Jeep) so it can roll without any passengers.\n\nThis will be overwritten if the vehicle has a driver. Same as Vehicle:SetHandbrake( false )","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetMaxReverseThrottle","parent":"Vehicle","type":"classfunc","description":"Sets maximum reverse throttle","realm":"Server","args":{"arg":{"text":"The new maximum throttle. This number must be negative.","name":"maxRevThrottle","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetSpringLength","parent":"Vehicle","type":"classfunc","description":"Sets spring length of given wheel","realm":"Server","args":{"arg":[{"text":"The wheel to change spring length of","name":"wheel","type":"number"},{"text":"The new spring length","name":"length","type":"number"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetSteering","parent":"Vehicle","type":"classfunc","description":{"text":"Sets the steering of the vehicle.","validate":"The correct range, 0 to 1 or -1 to 1"},"realm":"Server","args":{"arg":[{"text":"Angle of the front wheels (-1 to 1)","name":"front","type":"number"},{"text":"Angle of the rear wheels (-1 to 1)","name":"rear","type":"number"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetSteeringDegrees","parent":"Vehicle","type":"classfunc","description":"Sets the maximum steering degrees of the vehicle","realm":"Server","args":{"arg":{"text":"The new maximum steering degree","name":"steeringDegrees","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetMaxThrottle","parent":"Vehicle","type":"classfunc","description":"Sets maximum forward throttle","realm":"Server","args":{"arg":{"text":"The new maximum throttle.","name":"maxThrottle","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetThrottle","parent":"Vehicle","type":"classfunc","description":"Sets the throttle of the vehicle. It is possible that this function does not work with a valid driver in it.","realm":"Server","args":{"arg":{"text":"The new throttle.","name":"throttle","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetThirdPersonMode","parent":"Vehicle","type":"classfunc","description":"Sets the third person mode state.","realm":"Shared","file":{"text":"lua/includes/extensions/entity.lua","line":"547-L551"},"args":{"arg":{"text":"Enable or disable the third person mode for this vehicle","name":"enable","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetVehicleClass","parent":"Vehicle","type":"classfunc","description":{"text":"Sets the vehicle class name.","internal":""},"realm":"Shared","file":{"text":"lua/includes/extensions/entity.lua","line":"535-L539"},"args":{"arg":{"text":"The vehicle class name to set","name":"class","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetVehicleEntryAnim","parent":"Vehicle","type":"classfunc","description":"Sets whether the entry or exit camera animation should be played or not.","realm":"Server","args":{"arg":{"text":"Whether the entry or exit camera animation should be played or not.","name":"bOn","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetVehicleParams","parent":"Vehicle","type":"classfunc","description":{"text":"Sets the vehicle parameters for given vehicle.","note":"Not all variables from the Structures/VehicleParams can be set."},"realm":"Server","args":{"arg":{"text":"The new new vehicle parameters. See Structures/VehicleParams.","name":"params","type":"table"}}},"example":{"description":"Adds 25 horsepower to every vehicle spawned.","code":"hook.Add(\"PlayerSpawnedVehicle\", \"VehicleParamsExample\", function(ply, entity)\n\n    local params = entity:GetVehicleParams()\n\n    params.engine.horsepower = params.engine.horsepower + 25\n\n    entity:SetVehicleParams(params)\n\nend)"},"realms":["Server"],"type":"Function"},
{"function":{"name":"StartEngine","parent":"Vehicle","type":"classfunc","description":"Starts or stops the engine.","realm":"Server","args":{"arg":{"text":"True to start, false to stop.","name":"start","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetAngles","parent":"VMatrix","type":"classfunc","description":"Returns the absolute rotation of the matrix.","realm":"Shared","rets":{"ret":{"text":"Absolute rotation of the matrix","name":"","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetWheelFriction","parent":"Vehicle","type":"classfunc","description":"Sets friction of given wheel.  This function may be broken.","realm":"Server","args":{"arg":[{"text":"The wheel to change the friction of","name":"wheel","type":"number"},{"text":"The new friction to set","name":"friction","type":"number"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetField","parent":"VMatrix","type":"classfunc","description":"Returns a specific field in the matrix.","realm":"Shared","args":{"arg":[{"text":"Row of the field whose value is to be retrieved, from 1 to 4","name":"row","type":"number"},{"text":"Column of the field whose value is to be retrieved, from 1 to 4","name":"column","type":"number"}]},"rets":{"ret":{"text":"The value of the specified field","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetForward","parent":"VMatrix","type":"classfunc","description":"Gets the forward direction of the matrix.\n\nie. The first column of the matrix, excluding the w coordinate.","realm":"Shared","rets":{"ret":{"text":"The forward direction of the matrix.","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetInverse","parent":"VMatrix","type":"classfunc","description":"Returns an inverted matrix without modifying the original matrix.\n\nInverting the matrix will fail if its [determinant](https://en.wikipedia.org/wiki/Determinant) is 0 or close to 0. (ie. its \"scale\" in any direction is 0.)\n\nSee also VMatrix:GetInverseTR.","realm":"Shared","rets":{"ret":{"text":"The inverted matrix if possible, nil otherwise","name":"","type":"VMatrix"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetInverseTR","parent":"VMatrix","type":"classfunc","description":"Returns an inverted matrix without modifying the original matrix. This function will not fail, but only works correctly on matrices that contain only translation and/or rotation.\n\nUsing this function on a matrix with modified scale may return an incorrect inverted matrix.\n\nTo get the inverse of a matrix that contains other modifications, see VMatrix:GetInverse.","realm":"Shared","rets":{"ret":{"text":"The inverted matrix.","name":"","type":"VMatrix"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetRight","parent":"VMatrix","type":"classfunc","description":"Gets the right direction of the matrix.\n\nie. The second column of the matrix, negated, excluding the w coordinate.","realm":"Shared","rets":{"ret":{"text":"The right direction of the matrix.","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetTranslation","parent":"VMatrix","type":"classfunc","description":"Returns the absolute translation of the matrix.","realm":"Shared","rets":{"ret":{"text":"Absolute translation of the matrix","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetUp","parent":"VMatrix","type":"classfunc","description":"Gets the up direction of the matrix.\n\nie. The third column of the matrix, excluding the w coordinate.","realm":"Shared","rets":{"ret":{"text":"The up direction of the matrix.","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Identity","parent":"VMatrix","type":"classfunc","description":"Initializes the matrix as Identity matrix.","realm":"Shared"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetScale","parent":"VMatrix","type":"classfunc","description":"Returns the absolute scale of the matrix.","realm":"Shared","rets":{"ret":{"text":"Absolute scale of the matrix","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Invert","parent":"VMatrix","type":"classfunc","description":"Inverts the matrix.\n\nInverting the matrix will fail if its [determinant](https://en.wikipedia.org/wiki/Determinant) is 0 or close to 0. (ie. its \"scale\" in any direction is 0.)\n\nIf the matrix cannot be inverted, it does not get modified.\n\nSee also VMatrix:InvertTR.","realm":"Shared","rets":{"ret":{"text":"Whether the matrix was inverted or not","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsIdentity","parent":"VMatrix","type":"classfunc","description":"Returns whether the matrix is equal to Identity matrix or not.","realm":"Shared","rets":{"ret":{"text":"Is the matrix an Identity matrix or not","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"InvertTR","parent":"VMatrix","type":"classfunc","description":"Inverts the matrix. This function will not fail, but only works correctly on matrices that contain only translation and/or rotation.\n\nUsing this function on a matrix with modified scale may return an incorrect inverted matrix.\n\nTo invert a matrix that contains other modifications, see VMatrix:Invert.","realm":"Shared"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsRotationMatrix","parent":"VMatrix","type":"classfunc","description":"Returns whether the matrix is a rotation matrix or not.\n\nTechnically it checks if the forward, right and up vectors are orthogonal and normalized.","realm":"Shared","rets":{"ret":{"text":"Is the matrix a rotation matrix or not","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsZero","parent":"VMatrix","type":"classfunc","description":"Checks whenever all fields of the matrix are 0, aka if this is a [null matrix](https://en.wikipedia.org/wiki/Zero_matrix).","realm":"Shared","rets":{"ret":{"text":"If the matrix is a null matrix.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Scale","parent":"VMatrix","type":"classfunc","description":"Scales the matrix by the given vector.\n\nPostmultiplies the matrix by a scaling matrix (A = AS).","realm":"Shared","args":{"arg":{"text":"Vector to scale with matrix with.","name":"scale","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Rotate","parent":"VMatrix","type":"classfunc","description":"Rotates the matrix by the given angle.\n\nPostmultiplies the matrix by a rotation matrix (A = AR).","realm":"Shared","args":{"arg":{"text":"Rotation.","name":"rotation","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ScaleTranslation","parent":"VMatrix","type":"classfunc","description":"Scales the absolute translation with the given value.","realm":"Shared","args":{"arg":{"text":"Value to scale the translation with.","name":"scale","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Set","parent":"VMatrix","type":"classfunc","description":"Copies values from the given matrix object.","realm":"Shared","args":{"arg":{"text":"The matrix to copy values from.","name":"src","type":"VMatrix"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetAngles","parent":"VMatrix","type":"classfunc","description":"Sets the absolute rotation of the matrix.","realm":"Shared","args":{"arg":{"text":"New angles.","name":"angle","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetField","parent":"VMatrix","type":"classfunc","description":"Sets a specific field in the matrix.","realm":"Shared","args":{"arg":[{"text":"Row of the field to be set, from 1 to 4","name":"row","type":"number"},{"text":"Column of the field to be set, from 1 to 4","name":"column","type":"number"},{"text":"The value to set in that field","name":"value","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetScale","parent":"VMatrix","type":"classfunc","description":"Modifies the scale of the matrix while preserving the rotation and translation.","realm":"Shared","args":{"arg":{"text":"The scale to set.","name":"scale","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetForward","parent":"VMatrix","type":"classfunc","description":"Sets the forward direction of the matrix.\n\nie. The first column of the matrix, excluding the w coordinate.","realm":"Shared","args":{"arg":{"text":"The forward direction of the matrix.","name":"forward","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetTranslation","parent":"VMatrix","type":"classfunc","description":"Sets the absolute translation of the matrix.","realm":"Shared","args":{"arg":{"text":"New translation.","name":"translation","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetRight","parent":"VMatrix","type":"classfunc","description":"Sets the right direction of the matrix.\n\nie. The second column of the matrix, negated, excluding the w coordinate.","realm":"Shared","args":{"arg":{"text":"The right direction of the matrix.","name":"forward","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ToTable","parent":"VMatrix","type":"classfunc","description":"Converts the matrix to a 4x4 table. See Global.Matrix function.","realm":"Shared","rets":{"ret":{"text":"The 4x4 table.","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetUp","parent":"VMatrix","type":"classfunc","description":"Sets the up direction of the matrix.\n\nie. The third column of the matrix, excluding the w coordinate.","realm":"Shared","args":{"arg":{"text":"The up direction of the matrix.","name":"forward","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetUnpacked","parent":"VMatrix","type":"classfunc","description":"Sets each component of the matrix.","realm":"Shared","args":{"arg":[{"name":"e11","type":"number"},{"name":"e12","type":"number"},{"name":"e13","type":"number"},{"name":"e14","type":"number"},{"name":"e21","type":"number"},{"name":"e22","type":"number"},{"name":"e23","type":"number"},{"name":"e24","type":"number"},{"name":"e31","type":"number"},{"name":"e32","type":"number"},{"name":"e33","type":"number"},{"name":"e34","type":"number"},{"name":"e41","type":"number"},{"name":"e42","type":"number"},{"name":"e43","type":"number"},{"name":"e44","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Translate","parent":"VMatrix","type":"classfunc","description":"Translates the matrix by the given vector aka. adds the vector to the translation.\n\nPostmultiplies the matrix by a translation matrix (A = AT).","realm":"Shared","args":{"arg":{"text":"Vector to translate the matrix by.","name":"translation","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Unpack","parent":"VMatrix","type":"classfunc","description":"Returns each component of the matrix, expanding rows before columns.","realm":"Shared","rets":{"ret":[{"text":"VMatrix:GetField(1, 1)","name":"","type":"number"},{"text":"VMatrix:GetField(1, 2)","name":"","type":"number"},{"text":"VMatrix:GetField(1, 3)","name":"","type":"number"},{"text":"VMatrix:GetField(1, 4)","name":"","type":"number"},{"text":"VMatrix:GetField(2, 1)","name":"","type":"number"},{"text":"VMatrix:GetField(2, 2)","name":"","type":"number"},{"text":"VMatrix:GetField(2, 3)","name":"","type":"number"},{"text":"VMatrix:GetField(2, 4)","name":"","type":"number"},{"text":"VMatrix:GetField(3, 1)","name":"","type":"number"},{"text":"VMatrix:GetField(3, 2)","name":"","type":"number"},{"text":"VMatrix:GetField(3, 3)","name":"","type":"number"},{"text":"VMatrix:GetField(3, 4)","name":"","type":"number"},{"text":"VMatrix:GetField(4, 1)","name":"","type":"number"},{"text":"VMatrix:GetField(4, 2)","name":"","type":"number"},{"text":"VMatrix:GetField(4, 3)","name":"","type":"number"},{"text":"VMatrix:GetField(4, 4)","name":"","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"AllowsAutoSwitchTo","parent":"Weapon","type":"classfunc","description":"Returns whether the weapon allows to being switched to when a better ( Weapon:GetWeight ) weapon is being picked up.","realm":"Shared","rets":{"ret":{"text":"Whether the weapon allows to being switched to.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"AllowsAutoSwitchFrom","parent":"Weapon","type":"classfunc","description":"Returns whether the weapon allows to being switched from when a better ( Weapon:GetWeight ) weapon is being picked up.","realm":"Shared","rets":{"ret":{"text":"Whether the weapon allows to being switched from.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Zero","parent":"VMatrix","type":"classfunc","description":"Sets all components of the matrix to 0, also known as a [null matrix](https://en.wikipedia.org/wiki/Zero_matrix).\n\nThis function is more efficient than setting each element manually.","realm":"Shared"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Clip1","parent":"Weapon","type":"classfunc","description":{"text":"Returns how much primary ammo is in the magazine.","note":"This is not shared between clients and will instead return the maximum primary clip size."},"realm":"Shared","rets":{"ret":{"text":"The amount of primary ammo in the magazine.","name":"","type":"number"}}},"example":{"description":"Prints the amount of primary ammo in the magazine of the weapon the 1st player has equipped.","code":"print( Entity( 1 ):GetActiveWeapon():Clip1() )","output":"Will print 45 for fully loaded SMG1."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Clip2","parent":"Weapon","type":"classfunc","description":{"text":"Returns how much secondary ammo is in the magazine.","note":"This is not shared between clients and will instead return the maximum secondary clip size."},"realm":"Shared","rets":{"ret":{"text":"The amount of secondary ammo in the magazine.","name":"","type":"number"}}},"example":{"description":"Prints the amount of secondary ammo in the magazine of the weapon the 1st player has equipped.","code":"print( Entity( 1 ):GetActiveWeapon():Clip2() )","output":"Will print -1 for all HL2 weapons."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"CallOnClient","parent":"Weapon","type":"classfunc","description":{"text":"Calls a SWEP function on client.","warning":"This uses the usermessage internally, because of that, the combined length of the arguments of this function may not exceed 254 bytes/characters or the function will cease to function!"},"realm":"Shared","args":{"arg":[{"text":"Name of function to call. If you want to call SWEP:MyFunc() on client, you type in \"MyFunc\"","name":"functionName","type":"string"},{"text":"Arguments for the function, separated by spaces.","name":"arguments","type":"string","default":"","note":"Only the second argument is passed as argument and must be a string"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"DefaultReload","parent":"Weapon","type":"classfunc","description":{"text":"Forces the weapon to reload while playing given animation.","note":"This will stop the Weapon:Think function from getting called while the weapon is reloading!"},"realm":"Shared","args":{"arg":{"text":"Sequence to use as reload animation. Uses the Enums/ACT.","name":"act","type":"number"}},"rets":{"ret":{"text":"Did reloading actually take place","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetActivity","parent":"Weapon","type":"classfunc","description":{"text":"Returns the sequence enumeration number that the weapon is playing.","bug":{"text":"This can return inconsistent results between the server and client.","issue":"2543"}},"realm":"Shared","rets":{"ret":{"text":"Current activity, see Enums/ACT. Returns 0 if the weapon doesn't have active sequence.","name":"","type":"number"}}},"example":{"description":"This will return the ACT_ENUM that is currently active for the weapon.","code":"local wep = Entity(1):GetActiveWeapon()\n \nif ( IsValid( wep ) ) then // Makes sure that wep exists\n \n    print( wep:GetActivity() ) // Prints the sequence number\n \nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetHoldType","parent":"Weapon","type":"classfunc","description":"Returns the hold type of the weapon.","realm":"Shared","rets":{"ret":{"text":"The hold type of the weapon. You can find a list of default hold types .","name":"","type":"string","page":",hereHold_Types"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetMaxClip1","parent":"Weapon","type":"classfunc","description":"Returns maximum primary clip size","realm":"Shared","rets":{"ret":{"text":"Maximum primary clip size","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetNextPrimaryFire","parent":"Weapon","type":"classfunc","description":"Gets the next time the weapon can primary fire. ( Can call WEAPON:PrimaryAttack )","realm":"Shared","rets":{"ret":{"text":"The time, relative to Global.CurTime","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetPrintName","parent":"Weapon","type":"classfunc","description":{"text":"Returns the non-internal name of the weapon, that should be for displaying.","note":["If that returns an untranslated message (#HL2_XX), use language.GetPhrase to see the \"nice\" name.","If SWEP.PrintName is not set in the Weapon or the Weapon Base then \"<MISSING SWEP PRINT NAME>\" will be returned."]},"realm":"Shared","rets":{"ret":{"text":"The \"nice\" name of the weapon.","name":"","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetPrimaryAmmoType","parent":"Weapon","type":"classfunc","description":"Gets the primary ammo type of the given weapon.","realm":"Shared","rets":{"ret":{"text":"The ammo type ID, or -1 if not found.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetMaxClip2","parent":"Weapon","type":"classfunc","description":"Returns maximum secondary clip size","realm":"Shared","rets":{"ret":{"text":"Maximum secondary clip size","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetNextSecondaryFire","parent":"Weapon","type":"classfunc","description":"Gets the next time the weapon can secondary fire. ( Can call WEAPON:SecondaryAttack )","realm":"Shared","rets":{"ret":{"text":"The time, relative to Global.CurTime","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetSecondaryAmmoType","parent":"Weapon","type":"classfunc","description":"Gets the ammo type of the given weapons secondary fire.","realm":"Shared","rets":{"ret":{"text":"The secondary ammo type ID, or -1 if not found.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetSlot","parent":"Weapon","type":"classfunc","description":{"text":"Returns the slot of the weapon.","note":"The slot numbers start from 0."},"realm":"Shared","rets":{"ret":{"text":"The slot of the weapon.","name":"","type":"number"}}},"example":{"description":"How you could use this function to check if a weapon slot was empty or not.","code":"function IsSlotEmpty( ply, slot )\n\tslot = slot - 1 -- take away 1 from the slot number you want since it starts from 0\n\n\tfor _, v in ipairs( ply:GetWeapons() ) do -- get all the weapons the player has and loop through them\n\t\tif v:GetSlot() == slot then return false end -- check if the slot is the slot you wanted to check, if it is, return false\n\tend\n\n\treturn true -- otherwise return true\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetWeaponViewModel","parent":"Weapon","type":"classfunc","description":"Returns the view model of the weapon.","realm":"Shared","rets":{"ret":{"text":"The view model of the weapon.","name":"","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetSlotPos","parent":"Weapon","type":"classfunc","description":"Returns slot position of the weapon","realm":"Shared","rets":{"ret":{"text":"The slot position of the weapon","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetWeaponWorldModel","parent":"Weapon","type":"classfunc","description":"Returns the world model of the weapon.","realm":"Shared","rets":{"ret":{"text":"The world model of the weapon.","name":"","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetWeight","parent":"Weapon","type":"classfunc","description":"Returns the \"weight\" of the weapon, which is used when deciding which Weapon is better by the engine.","realm":"Shared","rets":{"ret":{"text":"The weapon \"weight\".","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"HasAmmo","parent":"Weapon","type":"classfunc","description":{"text":"Returns whether the weapon has ammo left or not. It will return false when there's no ammo left in the magazine **and** when there's no reserve ammo left.","note":"This will return true for weapons like crowbar, gravity gun, etc."},"realm":"Shared","rets":{"ret":{"text":"Whether the weapon has ammo or not.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsCarriedByLocalPlayer","parent":"Weapon","type":"classfunc","description":"Returns whenever the weapon is carried by the local player.","realm":"Client","rets":{"ret":{"text":"Is the weapon is carried by the local player or not","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsScripted","parent":"Weapon","type":"classfunc","description":"Checks if the weapon is a SWEP or a built-in weapon.","realm":"Shared","rets":{"ret":{"text":"Returns true if weapon is scripted ( SWEP ), false if not ( A built-in HL2 weapon )","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SendWeaponAnim","parent":"Weapon","type":"classfunc","description":"Forces weapon to play activity/animation.","realm":"Shared","args":{"arg":{"text":"Activity to play. See the Enums/ACT (specifically ACT_VM_).","name":"act","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"LastShootTime","parent":"Weapon","type":"classfunc","description":"Returns the time since this weapon last fired a bullet with Entity:FireBullets in seconds. It is not networked.","realm":"Shared","rets":{"ret":{"text":"The time in seconds when the last bullet was fired.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsWeaponVisible","parent":"Weapon","type":"classfunc","description":"Returns whether the weapon is visible. The term visibility is not exactly what gets checked here, first it checks if the owner is a player, then checks if the active view model has EF_NODRAW flag NOT set.","realm":"Shared","rets":{"ret":{"text":"Is visible or not","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetActivity","parent":"Weapon","type":"classfunc","description":"Sets the activity the weapon is playing.\n\nSee also Weapon:GetActivity.","added":"2021.03.31","realm":"Shared","args":{"arg":{"text":"The new activity to set, see Enums/ACT.","name":"act","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetHoldType","parent":"Weapon","type":"classfunc","description":{"text":"Sets the hold type of the weapon. This function also calls WEAPON:SetWeaponHoldType and properly networks it to all clients.","note":"This only works on scripted weapons.","bug":"Using this function on weapons held by bots will not network holdtype changes to clients if the world model is set to an empty string (SWEP.WorldModel = \"\")."},"realm":"Shared","args":{"arg":{"text":"Name of the hold type. You can find all default hold types","name":"name","type":"string","page":",hereHold_Types"}}},"example":{"description":{"text":"Puts a players hands down by its sides on .","page":",reloadWEAPON:Reload"},"code":"function SWEP:Reload()\n\tself:SetHoldType( \"normal\" )\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetClip2","parent":"Weapon","type":"classfunc","description":"Lets you change the number of bullets in the given weapons secondary clip.","realm":"Shared","args":{"arg":{"text":"The amount of bullets the clip should contain","name":"ammo","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetClip1","parent":"Weapon","type":"classfunc","description":"Lets you change the number of bullets in the given weapons primary clip.","realm":"Shared","args":{"arg":{"text":"The amount of bullets the clip should contain","name":"ammo","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetLastShootTime","parent":"Weapon","type":"classfunc","description":"Sets the time since this weapon last fired in seconds. Used in conjunction with Weapon:LastShootTime","realm":"Shared","args":{"arg":{"text":"The time in seconds when the last time the weapon was fired.","name":"time","type":"number","default":"CurTime()"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetNextSecondaryFire","parent":"Weapon","type":"classfunc","description":"Sets when the weapon can alt-fire again. Time should be based on Global.CurTime.","realm":"Shared","args":{"arg":{"text":"Time when player should be able to use secondary fire again","name":"time","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"BalloonPopped","parent":"achievements","type":"libraryfunc","description":{"text":"Adds one to the count of balloons burst. Once this count reaches 1000, the 'Popper' achievement is unlocked.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetNextPrimaryFire","parent":"Weapon","type":"classfunc","description":{"text":"Sets when the weapon can fire again. Time should be based on Global.CurTime.","bug":{"text":"This will fire extra bullets if the time is set to less than Global.CurTime.","issue":"3786"}},"realm":"Shared","args":{"arg":{"text":"Time when player should be able to use primary fire again","name":"time","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetCount","parent":"achievements","type":"libraryfunc","description":"Retrieves progress of given achievement","realm":"Client and Menu","args":{"arg":{"text":"The ID of achievement to retrieve progress of. Note: IDs start from 0, not 1.","name":"achievementID","type":"number"}}},"example":{"description":"Will print achievement progress for all of your achievements into console","code":"for i = 0, achievements.Count() - 1 do\n\tprint( achievements.GetCount( i ) )\nend","output":"Prints achievement progress for all of your achievements into console.\nNote: Non-progress based achievements will have 0, even if they are completed"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"EatBall","parent":"achievements","type":"libraryfunc","description":{"text":"Adds one to the count of balls eaten. Once this count reaches 200, the 'Ball Eater' achievement is unlocked.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetDesc","parent":"achievements","type":"libraryfunc","description":"Retrieves description of given achievement","realm":"Client and Menu","args":{"arg":{"text":"The ID of achievement to retrieve description of. Note: IDs start from 0, not 1.","name":"achievementID","type":"number"}},"rets":{"ret":{"text":"Description of an achievement","name":"","type":"string"}}},"example":{"description":"Will print achievement descriptions for all of your achievements into console","code":"for i = 0, achievements.Count() - 1 do\n\tprint( achievements.GetDesc( i ) )\nend","output":"Prints achievement descriptions for all of your achievements into console."},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"Count","parent":"achievements","type":"libraryfunc","description":"Returns the amount of achievements in Garry's Mod.","realm":"Client and Menu","rets":{"ret":{"text":"The amount of achievements available.","name":"","type":"number"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"GetGoal","parent":"achievements","type":"libraryfunc","description":"Retrieves progress goal of given achievement","realm":"Client and Menu","args":{"arg":{"text":"The ID of achievement to retrieve goal of. Note: IDs start from 0, not 1.","name":"achievementID","type":"number"}},"rets":{"ret":{"text":"Progress goal of an achievement","name":"","type":"number"}}},"example":{"description":"Will print achievement progress and goals for all of your achievements into console","code":"for i = 0, achievements.Count() - 1 do\n\tprint( achievements.GetCount( i ) .. \" / \" .. achievements.GetGoal( i ) )\nend","output":"Prints achievement progress and goals for all of your achievements into console."},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"GetName","parent":"achievements","type":"libraryfunc","description":"Retrieves name of given achievement","realm":"Client and Menu","args":{"arg":{"text":"The ID of achievement to retrieve name of. Note: IDs start from 0, not 1.","name":"achievementID","type":"number"}},"rets":{"ret":{"text":"Name of an achievement","name":"","type":"string"}}},"example":{"description":"Will print all achievement names into console","code":"for i = 0, achievements.Count() - 1 do\n\tprint( achievements.GetName( i ) )\nend","output":"Prints all achievement names into console"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"IncBaddies","parent":"achievements","type":"libraryfunc","description":{"text":"Adds one to the count of baddies killed. Once this count reaches 1000, the 'War Zone' achievement is unlocked.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"IncBystander","parent":"achievements","type":"libraryfunc","description":{"text":"Adds one to the count of innocent animals killed. Once this count reaches 1000, the 'Innocent Bystander' achievement is unlocked.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"IncGoodies","parent":"achievements","type":"libraryfunc","description":{"text":"Adds one to the count of friendly NPCs killed. Once this count reaches 1000, the 'Bad Friend' achievement is unlocked.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SpawnedNPC","parent":"achievements","type":"libraryfunc","description":{"text":"Adds one to the count of NPCs spawned. Once this count reaches 1000, the 'Procreator' achievement is unlocked.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsAchieved","parent":"achievements","type":"libraryfunc","description":"Used in GMod 12 in the achievements menu to show the user if they have unlocked certain achievements.","realm":"Client and Menu","args":{"arg":{"text":"Internal Achievement ID number","name":"AchievementID","type":"number"}},"rets":{"ret":{"text":"Returns true if the given achievementID is achieved.","name":"","type":"boolean"}}},"example":{"description":"Prints true if you got the achievement.","code":"print(\"Did you get achievement number 7?, \" .. achievements.IsAchieved(7))","output":"boolean true (assuming you have unlocked achievement 7)"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"SpawnedProp","parent":"achievements","type":"libraryfunc","description":{"text":"Adds one to the count of props spawned. Once this count reaches 5000, the 'Creator' achievement is unlocked.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SpawnMenuOpen","parent":"achievements","type":"libraryfunc","description":{"text":"Adds one to the count of how many times the spawnmenu has been opened. Once this count reaches 100,000, the 'Menu User' achievement is unlocked.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"Remover","parent":"achievements","type":"libraryfunc","description":{"text":"Adds one to the count of things removed. Once this count reaches 5000, the 'Destroyer' achievement is unlocked.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetScheduleID","parent":"ai","type":"libraryfunc","description":"Translates a schedule name to its corresponding ID.","realm":"Server","args":{"arg":{"text":"Then schedule name. In most cases, this will be the same as the Enums/SCHED name.","name":"sched","type":"string"}},"rets":{"ret":{"text":"The schedule ID, see Enums/SCHED. Returns -1 if the schedule name isn't valid.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SpawnedRagdoll","parent":"achievements","type":"libraryfunc","description":{"text":"Adds one to the count of ragdolls spawned. Once this count reaches 2000, the 'Dollhouse' achievement is unlocked.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetTaskID","parent":"ai","type":"libraryfunc","description":"Translates a task name to its corresponding ID.","realm":"Server","args":{"arg":{"text":"The task name.","name":"task","type":"string"}},"rets":{"ret":{"text":"The task ID, see [ai_task.h](https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/server/ai_task.h#L89-L502). Returns -1 if the schedule name isn't valid.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetSquadMembers","parent":"ai","type":"libraryfunc","description":"Returns all members of a given squad.","realm":"Server","added":"2021.01.27","args":{"arg":{"text":"The squad name.","name":"squad","type":"string"}},"rets":{"ret":{"text":"A table of NPCs.","name":"","type":"table"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetSquadMemberCount","parent":"ai","type":"libraryfunc","description":"Returns the amount of members a given squad has.","realm":"Server","added":"2021.01.27","args":{"arg":{"text":"The squad name.","name":"squad","type":"string"}},"rets":{"ret":{"text":"The member count.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"New","parent":"ai_schedule","type":"libraryfunc","description":"Creates a schedule for scripted NPC.","realm":"Server","file":{"text":"lua/includes/modules/ai_schedule.lua","line":"96"},"args":{"arg":{"text":"Name of the schedule.","name":"name","type":"string"}},"rets":{"ret":{"text":"A table containing schedule information to be used with ENTITY:StartSchedule.","name":"","type":"table"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetSquadLeader","parent":"ai","type":"libraryfunc","description":"Returns the squad leader of the given squad.","realm":"Server","added":"2021.01.27","args":{"arg":{"text":"The squad name.","name":"squad","type":"string"}},"rets":{"ret":{"text":"The squad leader.","name":"","type":"NPC"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"New","parent":"ai_task","type":"libraryfunc","description":"Create a new empty task. Used by Schedule:AddTask and Schedule:EngTask.","realm":"Server","file":{"text":"lua/includes/modules/ai_task.lua","line":"112-123"},"rets":{"ret":{"text":"The new task object.","name":"","type":"Task"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Set","parent":"baseclass","type":"libraryfunc","description":"Add a new base class that can be derived by others. This is done automatically for:\n* widgets\n* panels\n* drive modes\n* entities\n* weapons\n* gamemodes (with prefix \"gamemode_\")","realm":"Shared and Menu","file":{"text":"lua/includes/modules/baseclass.lua","line":"43-L58"},"args":{"arg":[{"text":"The name of this base class. Must be completely unique.","name":"name","type":"string"},{"text":"The base class.","name":"tab","type":"table"}]}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Get","parent":"baseclass","type":"libraryfunc","description":"Gets the base class of an an object.\n\nThis is used not just by entities, but also by widgets, panels, drive modes, weapons and gamemodes (with \"gamemode_\" prefix).\n\nThe keyword **DEFINE_BASECLASS** translates into a call to this function. In the engine, it is replaced with:\n\n```\nlocal BaseClass = baseclass.Get\n```","realm":"Shared and Menu","file":{"text":"lua/includes/modules/baseclass.lua","line":"32-L41"},"args":{"arg":{"text":"The child class.","name":"name","type":"string"}},"rets":{"ret":{"text":"The base class's meta table.","name":"","type":"table"}}},"example":{"description":"Inherits the weapon from weapon_csbasegun and calls its base functions","code":"AddCSLuaFile()\nDEFINE_BASECLASS( \"weapon_csbasegun\" ) //this is equivalent to local BaseClass = baseclass.Get( \"weapon_csbasegun\" )\n\n//omitted generic swep definitions\n\nfunction SWEP:Initialize()\n\tBaseClass.Initialize( self ) //calls SWEP:Initialize() from weapon_csbasegun\n\tself:SetHoldType( \"pistol\" )\nend\n\nfunction SWEP:Deploy()\n\tself:SetAccuracy( 0.9 )\n\treturn BaseClass.Deploy( self ) //calls SWEP:Deploy() from weapon_csbasegun and returns its result\nend\n\nfunction SWEP:SetupDataTables()\n\tBaseClass.SetupDataTables( self ) //calls SWEP:SetupDataTables() from weapon_csbasegun and inits its dtvars\nend"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"bnot","parent":"bit","type":"libraryfunc","description":"Returns the bitwise not of the value.","realm":"Shared and Menu","args":{"arg":{"text":"The value to be inverted.","name":"value","type":"number"}},"rets":{"ret":{"text":"bitwiseNot","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"arshift","parent":"bit","type":"libraryfunc","description":"Returns the arithmetically shifted value.","realm":"Shared and Menu","args":{"arg":[{"text":"The value to be manipulated.","name":"value","type":"number"},{"text":"Amounts of bits to shift.","name":"shiftCount","type":"number"}]},"rets":{"ret":{"text":"shiftedValue","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"band","parent":"bit","type":"libraryfunc","description":"Performs the bitwise \"and\" for all values specified.","realm":"Shared and Menu","args":{"arg":[{"text":"The value to be manipulated.","name":"value","type":"number"},{"text":"Values bit to perform bitwise \"and\" with. Optional.","name":"otherValues","type":"number","default":"nil"}]},"rets":{"ret":{"text":"Result of bitwise \"and\" operation.","name":"","type":"number"}}},"example":{"code":"local a = 170    -- 10101010 in binary form\nlocal b = 146    -- 10010010 in binary form\nprint( bit.band( a, b ) )","output":"130 (10000010 in binary form)"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"bor","parent":"bit","type":"libraryfunc","description":"Returns the bitwise OR of all values specified.","realm":"Shared and Menu","args":{"arg":[{"text":"The first value.","name":"value1","type":"number"},{"text":"Extra values to be evaluated. (must all be numbers)","name":"...","type":"vararg"}]},"rets":{"ret":{"text":"The bitwise OR result between all numbers.","name":"","type":"number"}}},"example":[{"description":"Performs the bitwise OR operation between three values","code":"local a = math.BinToInt(\"1000\")\nlocal b = math.BinToInt(\"0100\")\nlocal c = math.BinToInt(\"0001\")\n\nlocal result = bit.bor(a, b, c)\n\nprint(math.IntToBin(result))\nprint(result)","output":"```\n1101\n13\n```"},{"description":"Adding multiple capabilities to an NPC.","code":"NPC:CapabilitiesAdd( bit.bor( CAP_MOVE_GROUND, CAP_ANIMATEDFACE, CAP_TURN_HEAD ) )"}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"bswap","parent":"bit","type":"libraryfunc","description":"Swaps the byte order.","realm":"Shared and Menu","args":{"arg":{"text":"The value to be byte swapped.","name":"value","type":"number"}},"rets":{"ret":{"text":"swapped","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"rol","parent":"bit","type":"libraryfunc","description":"Returns the left rotated value.","realm":"Shared and Menu","args":{"arg":[{"text":"The value to be manipulated.","name":"value","type":"number"},{"text":"Amounts of bits to rotate left by.","name":"shiftCount","type":"number"}]},"rets":{"ret":{"text":"shiftedValue","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"bxor","parent":"bit","type":"libraryfunc","description":"Returns the bitwise xor of all values specified.","realm":"Shared and Menu","args":{"arg":[{"text":"The value to be manipulated.","name":"value","type":"number"},{"text":"Values bit xor with. Optional.","name":"otherValues","type":"number","default":"nil"}]},"rets":{"ret":{"text":"bitwiseXOr","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"lshift","parent":"bit","type":"libraryfunc","description":"Returns the left shifted value.","realm":"Shared and Menu","args":{"arg":[{"text":"The value to be manipulated.","name":"value","type":"number"},{"text":"Amounts of bits to shift left by.","name":"shiftCount","type":"number"}]},"rets":{"ret":{"text":"shiftedValue","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"ror","parent":"bit","type":"libraryfunc","description":"Returns the right rotated value.","realm":"Shared and Menu","args":{"arg":[{"text":"The value to be manipulated.","name":"value","type":"number"},{"text":"Amounts of bits to rotate right by.","name":"shiftCount","type":"number"}]},"rets":{"ret":{"text":"shiftedValue","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"rshift","parent":"bit","type":"libraryfunc","description":"Returns the right shifted value.","realm":"Shared and Menu","args":{"arg":[{"text":"The value to be manipulated.","name":"value","type":"number"},{"text":"Amounts of bits to shift right by.","name":"shiftCount","type":"number"}]},"rets":{"ret":{"text":"shiftedValue","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"tobit","parent":"bit","type":"libraryfunc","description":"Normalizes the specified value and clamps it in the range of a signed 32bit integer.","realm":"Shared and Menu","args":{"arg":{"text":"The value to be normalized.","name":"value","type":"number"}},"rets":{"ret":{"text":"swapped","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"ApplyShake","parent":"cam","type":"libraryfunc","description":"Shakes the screen at a certain position.","realm":"Client","args":{"arg":[{"text":"Origin of the shake.","name":"pos","type":"Vector"},{"text":"Angles of the shake.","name":"angles","type":"Angle"},{"text":"The shake factor.","name":"factor","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"tohex","parent":"bit","type":"libraryfunc","description":"Returns the hexadecimal representation of the number with the specified digits.","realm":"Shared and Menu","args":{"arg":[{"text":"The value to be normalized.","name":"value","type":"number"},{"text":"The number of digits. Optional","name":"digits","type":"number","default":"8"}]},"rets":{"ret":{"text":"hexString","name":"","type":"string"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"End2D","parent":"cam","type":"libraryfunc","description":{"text":"Switches the renderer back to the previous drawing mode from a 2D context.","bug":{"text":"This will crash the game if there is no context to end.","issue":"1091"}},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"End","parent":"cam","type":"libraryfunc","description":{"text":"Switches the renderer back to the previous drawing mode from a 3D context.\n\nThis function is an alias of cam.End3D.","bug":{"text":"This will crash the game if there is no context to end.","issue":"1091"}},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"End3D","parent":"cam","type":"libraryfunc","description":{"text":"Switches the renderer back to the previous drawing mode from a 3D context.","bug":{"text":"This will crash the game if there is no context to end.","issue":"1091"}},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetModelMatrix","parent":"cam","type":"libraryfunc","description":{"text":"Returns the currently active model matrix.","validate":"Does this actually mean the matrix on top of the stack? Probably"},"realm":"Client","rets":{"ret":{"text":"The currently active matrix.","name":"","type":"VMatrix"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"End3D2D","parent":"cam","type":"libraryfunc","description":{"text":"Switches the renderer back to the previous drawing mode from a 3D2D context.","bug":{"text":"This will crash the game if there is no context to end.","issue":"1091"}},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"EndOrthoView","parent":"cam","type":"libraryfunc","description":"Switches the renderer back to the previous drawing mode from a 3D orthographic rendering context.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"IgnoreZ","parent":"cam","type":"libraryfunc","description":"Tells the renderer to ignore the depth buffer and draw any upcoming operation \"ontop\" of everything that was drawn yet.\n\nThis is identical to calling `render.DepthRange( 0, 0.01 )` for `true` and  `render.DepthRange( 0, 1 )` for `false`. See render.DepthRange.","realm":"Client","args":{"arg":{"text":"Determines whenever to ignore the depth buffer or not.","name":"ignoreZ","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Start","parent":"cam","type":"libraryfunc","description":{"text":"Sets up a new rendering context. This is an extended version of cam.Start3D and cam.Start2D. Must be finished by cam.End3D or cam.End2D.","bug":{"text":"This will not update current view properties for 3D contexts.","issue":"2682"}},"realm":"Client","args":{"arg":{"text":"Render context config. See Structures/RenderCamData","name":"dataTbl","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"PushModelMatrix","parent":"cam","type":"libraryfunc","description":{"text":"Pushes the specified matrix onto the render matrix stack. Unlike opengl, this will replace the current model matrix.","note":"This does not work with cam.Start3D2D if `multiply` is false."},"realm":"Client","args":{"arg":[{"text":"The matrix to push.","name":"matrix","type":"VMatrix"},{"text":"If set, multiplies given matrix with currently active matrix (cam.GetModelMatrix) before pushing.","name":"multiply","type":"boolean","default":"false"}]}},"example":[{"description":"Rotates and scales text in the center of the screen.","code":"local custom_vector = Vector( 1, 1, 1 )\n\nhook.Add(\"HUDPaint\", \"2d rotation test\", function()\n\tlocal w, h = ScrW(), ScrH()\n\tlocal t = RealTime() * 50\n\t\n\tlocal m = Matrix()\n\tlocal center = Vector( w / 2, h / 2 )\n\n\tm:Translate( center )\n\tm:Rotate( Angle( 0, t, 0 ) )\n\tm:Scale( custom_vector * math.sin( t / 100 ) * 10 )\n\tm:Translate( -center )\n\n\tcam.PushModelMatrix( m )\n\t\tsurface.SetFont( \"DermaDefault\" )\n\t\tsurface.SetTextColor( 255, 255, 255, 255 )\n\t\tsurface.SetTextPos( w / 2, h / 2 )\n\t\tsurface.DrawText( \"LOLLOLOLOL\" )\n\tcam.PopModelMatrix()\t\nend)"},{"description":"Simple function to draw rotated text.","code":"function draw.RotatedText( text, x, y, font, color, ang)\n\trender.PushFilterMag( TEXFILTER.ANISOTROPIC )\n\trender.PushFilterMin( TEXFILTER.ANISOTROPIC )\n\n\tlocal m = Matrix()\n\tm:Translate( Vector( x, y, 0 ) )\n\tm:Rotate( Angle( 0, ang, 0 ) )\n\n\tsurface.SetFont( font )\n\tlocal w, h = surface.GetTextSize( text )\n\n\tm:Translate( -Vector( w / 2, h / 2, 0 ) )\n\n\tcam.PushModelMatrix( m )\n\t\tdraw.DrawText( text, font, 0, 0, color )\n\tcam.PopModelMatrix()\n\n\trender.PopFilterMag()\n\trender.PopFilterMin()\nend"}],"realms":["Client"],"type":"Function"},
{"function":{"name":"Start3D2D","parent":"cam","type":"libraryfunc","description":{"text":"Sets up a new 2D rendering context. Must be finished by cam.End3D2D. This function pushes a new matrix onto the stack. (cam.PushModelMatrix)\n\nMatrix formula:\n```\nlocal m = Matrix()\nm:SetAngles(angles)\nm:SetTranslation(pos)\nm:SetScale(Vector(scale, -scale, 1))\n```","rendercontext":[{"hook":"true","type":"2D"},{"hook":"false","type":"3D"}],"warning":"This should be closed by cam.End3D2D otherwise the game crashes"},"realm":"Client","args":{"arg":[{"text":"Origin of the 3D2D context, ie. the top left corner, (0, 0).","name":"pos","type":"Vector"},{"text":"Angles of the 3D2D context.\n+x in the 2d context corresponds to +x of the angle (its forward direction).\n+y in the 2d context corresponds to -y of the angle (its right direction).\n\nIf (dx, dy) are your desired (+x, +y) unit vectors, the angle you want is dx:AngleEx(dx:Cross(-dy)).","name":"angles","type":"Angle"},{"text":"The scale of the render context.\nIf scale is 1 then 1 pixel in 2D context will equal to 1 unit in 3D context.","name":"scale","type":"number"}]}},"example":[{"description":"Makes a floating rectangle with text above where the player is looking at, pointing at the player","code":"hook.Add(\"PostDrawOpaqueRenderables\", \"example\", function()\n\t-- Get the game's camera angles\n\tlocal angle = EyeAngles()\n\n\t-- Only use the Yaw component of the angle\n\tangle = Angle( 0, angle.y, 0 )\n\n\t-- Apply some animation to the angle\n\tangle.y = angle.y + math.sin( CurTime() ) * 10\n\n\t-- Correct the angle so it points at the camera\n\t-- This is usually done by trial and error using Up(), Right() and Forward() axes\n\tangle:RotateAroundAxis( angle:Up(), -90 )\n\tangle:RotateAroundAxis( angle:Forward(), 90 )\n\n\t-- A trace just for a position\n\tlocal trace = LocalPlayer():GetEyeTrace()\n\tlocal pos = trace.HitPos\n\n\t-- Raise the hitpos off the ground by 20 units and apply some animation\n\tpos = pos + Vector( 0, 0, math.cos( CurTime() / 2 ) + 20 )\n\n\t-- Notice the scale is small, so text looks crispier\n\tcam.Start3D2D( pos, angle, 0.1 )\n\t\t-- Get the size of the text we are about to draw\n\t\tlocal text = \"Testing\"\n\t\tsurface.SetFont( \"Default\" )\n\t\tlocal tW, tH = surface.GetTextSize( \"Testing\" )\n\n\t\t-- This defines amount of padding for the box around the text\n\t\tlocal pad = 5\n\n\t\t-- Draw a rectable. This has to be done before drawing the text, to prevent overlapping\n\t\t-- Notice how we start drawing in negative coordinates\n\t\t-- This is to make sure the 3d2d display rotates around our position by its center, not left corner\n\t\tsurface.SetDrawColor( 0, 0, 0, 255 )\n\t\tsurface.DrawRect( -tW / 2 - pad, -pad, tW + pad * 2, tH + pad * 2 )\n\n\t\t-- Draw some text\n\t\tdraw.SimpleText( \"Testing\", \"Default\", -tW / 2, 0, color_white )\n\tcam.End3D2D()\nend )"},{"code":"hook.Add(\"PostDrawOpaqueRenderables\", \"example\", function()\n\tlocal trace = LocalPlayer():GetEyeTrace()\n\tlocal angle = trace.HitNormal:Angle()\n\t\t\n\trender.DrawLine( trace.HitPos, trace.HitPos + 8 * angle:Forward(), Color( 255, 0, 0 ), true )\n\trender.DrawLine( trace.HitPos, trace.HitPos + 8 * -angle:Right(), Color( 0, 255, 0 ), true )\n\trender.DrawLine( trace.HitPos, trace.HitPos + 8 * angle:Up(), Color( 0, 0, 255 ), true )\n\t\t\n\tcam.Start3D2D( trace.HitPos, angle, 1 )\n\t\tsurface.SetDrawColor( 255, 165, 0, 255 )\n\t\tsurface.DrawRect( 0, 0, 8, 8 )\n\t\trender.DrawLine( Vector( 0, 0, 0 ), Vector( 8, 8, 8 ), Color( 100, 149, 237, 255 ), true )\n\tcam.End3D2D()\nend )","output":{"image":{"src":"cam.Start3D2D_example_1.png"}}}],"realms":["Client"],"type":"Function"},
{"function":{"name":"Start2D","parent":"cam","type":"libraryfunc","file":{"text":"lua/includes/extensions/client/render.lua","line":"107-L111"},"description":{"text":"Sets up a new 2D rendering context. Must be finished by cam.End2D.\n\nThis is almost always used with a render target from the render. To set its position use render.SetViewPort with a target already stored.","note":"This will put an identity matrix at the top of the model matrix stack. If you are trying to use cam.PushModelMatrix, call it after this function and not before.","rendercontext":{"hook":"true","type":"2D"}},"realm":"Client"},"example":{"description":"Sets the viewport then draws on the view with 2d methods","code":"local oldW, oldH = ScrW(), ScrH()\nrender.SetViewPort( 0, 100, 50, 50 )\ncam.Start2D()\n\tsurface.SetDrawColor( 255, 255, 255 )\n\tsurface.DrawLine( 10, 10, 100, 100 )\ncam.End2D()\nrender.SetViewPort( 0, 0, oldW, oldH )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"Start3D","parent":"cam","type":"libraryfunc","file":{"text":"lua/includes/extensions/client/render.lua","line":"113-L142"},"description":{"text":"Sets up a new 3D rendering context. Must be finished by cam.End3D.\n\nFor more advanced settings such as an orthographic view, use cam.Start instead.","rendercontext":{"hook":"true","type":"3D"},"note":"Both zNear and zFar need a value before any of them work.\n\nzNear also requires a value higher than 0.","bug":[{"text":"Negative x/y values won't work.","issue":"1995"},{"text":"This will not update current view properties.","issue":"2682"}]},"realm":"Client","args":{"arg":[{"text":"Render cam position.","name":"pos","type":"Vector","default":"EyePos()"},{"text":"Render cam angles.","name":"angles","type":"Angle","default":"EyeAngles()"},{"text":"Field of view.","name":"fov","type":"number","default":"nil"},{"text":"X coordinate of where to start the new view port.","name":"x","type":"number","default":"0"},{"text":"Y coordinate of where to start the new view port.","name":"y","type":"number","default":"0"},{"text":"Width of the new viewport.","name":"w","type":"number","default":"ScrW()"},{"text":"Height of the new viewport.","name":"h","type":"number","default":"ScrH()"},{"text":"Distance to near clipping plane.","name":"zNear","type":"number","default":"nil"},{"text":"Distance to far clipping plane.","name":"zFar","type":"number","default":"nil"}]}},"example":{"description":"Set up a 3D rendering environment in a 2D rendering hook to render models on HUD.","code":"hook.Add( \"HUDPaint\", \"3d_camera_example\", function()\n\tcam.Start3D()\n\t\tfor id, ply in ipairs( player.GetAll() ) do\n\t\t\tply:DrawModel()\n\t\tend\n\tcam.End3D()\nend )","output":"All players can be seen through walls."},"realms":["Client"],"type":"Function"},
{"function":{"name":"PopModelMatrix","parent":"cam","type":"libraryfunc","description":"Pops the current active rendering matrix from the stack and reinstates the previous one.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetChatBoxPos","parent":"chat","type":"libraryfunc","description":"Returns the chatbox position.","realm":"Client","rets":{"ret":[{"text":"The X coordinate of the chatbox's position.","name":"","type":"number"},{"text":"The Y coordinate of the chatbox's position.","name":"","type":"number"}]}},"example":{"description":"Prints the x and y coordinates of the chatbox.","code":"print( chat.GetChatBoxPos() )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"StartOrthoView","parent":"cam","type":"libraryfunc","description":"Sets up a new 3d context using orthographic projection.","realm":"Client","args":{"arg":[{"text":"The left plane offset.","name":"leftOffset","type":"number"},{"text":"The top plane offset.","name":"topOffset","type":"number"},{"text":"The right plane offset.","name":"rightOffset","type":"number"},{"text":"The bottom plane offset.","name":"bottomOffset","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Close","parent":"chat","type":"libraryfunc","description":"Closes the chat window.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddText","parent":"chat","type":"libraryfunc","description":"Adds text to the local player's chat box (which only they can read).","realm":"Client","args":{"arg":{"text":"The arguments. Arguments can be:\n* table - Color. Will set the color for all following strings until the next Color argument.\n* string - Text to be added to the chat box.\n* Player - Adds the name of the player in the player's team color to the chat box.\n* any - Any other type, such as Entity will be converted to string and added as text.","name":"arguments","type":"vararg"}}},"example":{"description":"Prints the player's name and current weapon to their chat area.","code":"local ply = LocalPlayer()\nchat.AddText( Color( 100, 100, 255 ), ply, \", you are holding \", Color( 100, 255, 100 ), ply:GetActiveWeapon():GetClass() )","output":{"image":{"src":"chat_AddText.png","alt":"center"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetChatBoxSize","parent":"chat","type":"libraryfunc","description":"Returns the chatbox size.","realm":"Client","rets":{"ret":[{"text":"The width of the chatbox.","name":"","type":"number"},{"text":"The height of the chatbox.","name":"","type":"number"}]}},"example":{"description":"Prints the width and the height of the chatbox.","code":"print( chat.GetChatBoxSize() )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"PlaySound","parent":"chat","type":"libraryfunc","description":"Plays the chat \"tick\" sound.","realm":"Client"},"example":{"description":"Plays an obnoxious tick sound.","code":"chat.PlaySound()"},"realms":["Client"],"type":"Function"},
{"function":{"name":"Add","parent":"cleanup","type":"libraryfunc","description":"Adds an entity to a player's cleanup list.","realm":"Server","file":{"text":"lua/includes/modules/cleanup.lua","line":"59-L74"},"args":{"arg":[{"text":"Who's cleanup list to add the entity to.","name":"pl","type":"Player"},{"text":"The type of cleanup.","name":"type","type":"string"},{"text":"The entity to add to the player's cleanup list.","name":"ent","type":"Entity"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Open","parent":"chat","type":"libraryfunc","description":"Opens the chat window.","realm":"Client","args":{"arg":{"text":"If equals 1, opens public chat, otherwise opens team chat","name":"mode","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"CC_AdminCleanup","parent":"cleanup","type":"libraryfunc","description":{"text":"Called by the `gmod_admin_cleanup` console command. Allows admins to clean up the server.","internal":""},"realm":"Server","file":{"text":"lua/includes/modules/cleanup.lua","line":"148-L200"},"args":{"arg":[{"text":"The player that called the console command.","name":"pl","type":"Player"},{"text":"The console command that called this function.","name":"command","type":"string"},{"text":"First and only arg is the cleanup type.","name":"args","type":"table"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"CC_Cleanup","parent":"cleanup","type":"libraryfunc","description":{"text":"Called by the `gmod_cleanup` console command. Allows players to cleanup their own props.","internal":""},"realm":"Server","file":{"text":"lua/includes/modules/cleanup.lua","line":"98-L146"},"args":{"arg":[{"text":"The player that called the console command.","name":"pl","type":"Player"},{"text":"The console command that called this function.","name":"command","type":"string"},{"text":"First and only arg is the cleanup type.","name":"args","type":"table"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetTable","parent":"cleanup","type":"libraryfunc","description":"Gets the table of cleanup types.","realm":"Shared","file":{"text":"lua/includes/modules/cleanup.lua","line":"31-L33"},"rets":{"ret":{"text":"A list of cleanup types.","name":"","type":"table"}}},"example":{"description":"Example of output table structure.","code":"PrintTable( cleanup.GetTable() )","output":"```\n1\t=\tprops\n2\t=\tragdolls\n3\t=\teffects\n4\t=\tnpcs\n5\t=\tconstraints\n6\t=\tropeconstraints\n7\t=\tsents\n8\t=\tvehicles\n9\t=\tballoons\n10\t=\tbuttons\n11\t=\tcameras\n12\t=\tduplicates\n13\t=\tdynamite\n14\t=\temitters\n15\t=\thoverballs\n16\t=\tlamps\n17\t=\tlights\n18\t=\tnocollide\n19\t=\tthrusters\n20\t=\ttrails\n21\t=\twheels\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetList","parent":"cleanup","type":"libraryfunc","description":"Gets the cleanup list.","realm":"Server","file":{"text":"lua/includes/modules/cleanup.lua","line":"40-L42"}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Register","parent":"cleanup","type":"libraryfunc","description":"Registers a new cleanup type.","realm":"Shared","file":{"text":"lua/includes/modules/cleanup.lua","line":"17-L29"},"args":{"arg":{"text":"Name of type.","name":"type","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"UpdateUI","parent":"cleanup","type":"libraryfunc","description":"Repopulates the clients cleanup menu","realm":"Client","file":{"text":"lua/includes/modules/cleanup.lua","line":"207"}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Add","parent":"concommand","type":"libraryfunc","description":{"text":"Creates a console command that runs a function in lua with optional autocompletion function and help text.","bug":{"text":"This will fail if the concommand was previously removed with concommand.Remove in a different realm (creating a command on the client that was removed from the server and vice-versa).","issue":"1183"}},"realm":"Shared and Menu","file":{"text":"lua/includes/modules/concommand.lua","line":"28"},"args":{"arg":[{"text":"The command name to be used in console.\n\nThis cannot be a name of existing console command or console variable. It will silently fail if it is.","name":"name","type":"string"},{"text":"The function to run when the concommand is executed. Arguments passed are:\n* Player ply - The player that ran the concommand. NULL entity if command was entered with the dedicated server console.\n* string cmd - The concommand string (if one callback is used for several concommands).\n* table args - A table of all string arguments.\n* string argStr - The arguments as a string.","name":"callback","type":"function"},{"text":"The function to call which should return a table of options for autocompletion. ()\n\nThis only properly works on the client since it is **not** networked. Arguments passed are:\n* string cmd - The concommand this autocompletion is for.\n* string args - The arguments typed so far.","name":"autoComplete","type":"function","default":"nil","page":",Autocompletion TutorialAutocomplete_Tutorial"},{"text":"The text to display should a user run 'help cmdName'.","name":"helpText","type":"string","default":"nil"},{"text":"Concommand modifier flags. See Enums/FCVAR.","name":"flags","type":"number","default":"0"}]}},"example":[{"description":"Adds a concommand `killyourself` which will kill the user.","code":"concommand.Add(\"killyourself\", function( ply, cmd, args )\n    ply:Kill()\n    print(\"You killed yourself!\")\nend)"},{"description":"A concommand that prints the SteamID and nickname of every player on the server.","code":"concommand.Add( \"retrieveplayers\", function()  \n\tfor _, ply in ipairs( player.GetAll() ) do\n\t\tprint( ply:Nick() .. \", \" .. ply:SteamID() .. \"\\n\" )\n\tend\nend)"}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"AutoComplete","parent":"concommand","type":"libraryfunc","description":{"text":"Used by the engine to call the autocomplete function for a console command, and retrieve returned options.","internal":""},"realm":"Shared and Menu","file":{"text":"lua/includes/modules/concommand.lua","line":"67"},"args":{"arg":[{"text":"Name of command","name":"command","type":"string"},{"text":"Arguments given to the command","name":"arguments","type":"string"}]},"rets":{"ret":{"text":"Possibilities for auto-completion. This is the return value of the auto-complete callback.","name":"","type":"table"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"ReplaceEntity","parent":"cleanup","type":"libraryfunc","description":"Replaces one entity in the cleanup module with another","realm":"Server","file":{"text":"lua/includes/modules/cleanup.lua","line":"76"},"args":{"arg":[{"text":"Old entity","name":"from","type":"Entity"},{"text":"New entity","name":"to","type":"Entity"}]},"rets":{"ret":{"text":"Whether any action was taken.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Remove","parent":"concommand","type":"libraryfunc","description":{"text":"Removes a console command.","bug":[{"text":"This will not always remove the command from auto-complete.","issue":"1183"},{"text":"concommand.Add will fail if the concommand was previously removed with this function in a different realm (creating a command on the client that was removed from the server and vice-versa).","issue":"1183"}]},"realm":"Shared and Menu","file":{"text":"lua/includes/modules/concommand.lua","line":"39"},"args":{"arg":{"text":"The name of the command to be removed.","name":"name","type":"string"}}},"example":{"description":"Removes the built-in concommand \"gmod_camera\" which would normally quickly select the camera swep","code":"concommand.Remove(\"gmod_camera\")"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"GetTable","parent":"concommand","type":"libraryfunc","description":"Returns the tables of all console command callbacks, and autocomplete functions, that were added to the game with concommand.Add.","realm":"Shared and Menu","file":{"text":"lua/includes/modules/concommand.lua","line":"20"},"rets":{"ret":[{"text":"Table of command callback functions.","name":"","type":"table"},{"text":"Table of command autocomplete functions.","name":"","type":"table"}]}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Run","parent":"concommand","type":"libraryfunc","description":{"text":"Used by the engine to run a console command's callback function. This will only be called for commands that were added with Global.AddConsoleCommand, which concommand.Add calls internally. An error is sent to the player's chat if no callback is found.\n\nThis will still be called for concommands removed with concommand.Remove but will return false.","internal":"You might be looking for Global.RunConsoleCommand or Player:ConCommand."},"realm":"Shared and Menu","file":{"text":"lua/includes/modules/concommand.lua","line":"49"},"args":{"arg":[{"text":"Player to run concommand on","name":"ply","type":"Player"},{"text":"Command name","name":"cmd","type":"string"},{"text":"Command arguments.\nCan be table or string","name":"args","type":"any"},{"text":"string of all arguments sent to the command","name":"argumentString","type":"string"}]},"rets":{"ret":{"text":"`true` if the console command with the given name exists, and `false` if it doesn't.","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"AddConstraintTable","parent":"constraint","type":"libraryfunc","description":"Stores information about constraints in an entity's table.","realm":"Server","file":{"text":"lua/includes/modules/constraint.lua","line":"375"},"args":{"arg":[{"text":"The entity to store the information on.","name":"ent1","type":"Entity"},{"text":"The constraint to store in the entity's table.","name":"constrt","type":"Entity"},{"text":"Optional. If different from `ent1`, the info will also be stored in the table for this entity.","name":"ent2","type":"Entity","default":"nil"},{"text":"Optional. Same as `ent2`.","name":"ent3","type":"Entity","default":"nil"},{"text":"Optional. Same as `ent2`.","name":"ent4","type":"Entity","default":"nil"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"AddConstraintTableNoDelete","parent":"constraint","type":"libraryfunc","description":"Stores info about the constraints on the entity's table. The only difference between this and constraint.AddConstraintTable is that the constraint does not get deleted when the entity is removed.","realm":"Server","file":{"text":"lua/includes/modules/constraint.lua","line":"397"},"args":{"arg":[{"text":"The entity to store the information on.","name":"ent1","type":"Entity"},{"text":"The constraint to store in the entity's table.","name":"constrt","type":"Entity"},{"text":"Optional. If different from `ent1`, the info will also be stored in the table for this entity.","name":"ent2","type":"Entity","default":"nil"},{"text":"Optional. Same as `ent2`.","name":"ent3","type":"Entity","default":"nil"},{"text":"Optional. Same as `ent2`.","name":"ent4","type":"Entity","default":"nil"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"AdvBallsocket","parent":"constraint","type":"libraryfunc","description":"Creates an advanced ballsocket (ragdoll) constraint.\n\nUses a https://developer.valvesoftware.com/wiki/Phys_ragdollconstraint","realm":"Server","file":{"text":"lua/includes/modules/constraint.lua","line":"842"},"args":{"arg":[{"text":"First entity.","name":"Ent1","type":"Entity"},{"text":"Second entity.","name":"Ent2","type":"Entity"},{"text":"Bone of first entity (0 for non-ragdolls)","name":"Bone1","type":"number"},{"text":"Bone of second entity (0 for non-ragdolls)","name":"Bone2","type":"number"},{"text":"Position on the first entity, in its local space coordinates.","name":"LPos1","type":"Vector"},{"text":"Position on the second entity, in its local space coordinates.","name":"LPos2","type":"Vector"},{"text":"Amount of force until it breaks (0 = unbreakable)","name":"forcelimit","type":"number"},{"text":"Amount of torque (rotation speed) until it breaks (0 = unbreakable)","name":"torquelimit","type":"number"},{"text":"Minimum angle in rotations around the X axis local to the constraint.","name":"xmin","type":"number"},{"text":"Minimum angle in rotations around the Y axis local to the constraint.","name":"ymin","type":"number"},{"text":"Minimum angle in rotations around the Z axis local to the constraint.","name":"zmin","type":"number"},{"text":"Maximum angle in rotations around the X axis local to the constraint.","name":"xmax","type":"number"},{"text":"Maximum angle in rotations around the Y axis local to the constraint.","name":"ymax","type":"number"},{"text":"Maximum angle in rotations around the Z axis local to the constraint.","name":"zmax","type":"number"},{"text":"Rotational friction in the X axis local to the constraint.","name":"xfric","type":"number"},{"text":"Rotational friction in the Y axis local to the constraint.","name":"yfric","type":"number"},{"text":"Rotational friction in the Z axis local to the constraint.","name":"zfric","type":"number"},{"text":"Only limit rotation, free movement.","name":"onlyrotation","type":"number"},{"text":"Whether the entities should be no-collided.","name":"nocollide","type":"number"}]},"rets":{"ret":{"text":"A phys_ragdollconstraint entity. Will return false if the constraint could not be created.","name":"","type":"Entity"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Ballsocket","parent":"constraint","type":"libraryfunc","description":"Creates a ballsocket joint.","realm":"Server","file":{"text":"lua/includes/modules/constraint.lua","line":"1203"},"args":{"arg":[{"text":"First entity","name":"Ent1","type":"Entity"},{"text":"Second entity","name":"Ent2","type":"Entity"},{"text":"Bone of first entity (0 for non-ragdolls)","name":"Bone1","type":"number"},{"text":"Bone of second entity (0 for non-ragdolls)","name":"Bone2","type":"number"},{"text":"Centerposition of the joint, relative to the **second** entity.","name":"LocalPos","type":"Vector"},{"text":"Amount of force until it breaks (0 = unbreakable)","name":"forcelimit","type":"number"},{"text":"Amount of torque (rotation speed) until it breaks (0 = unbreakable)","name":"torquelimit","type":"number"},{"text":"Whether the entities should be nocollided","name":"nocollide","type":"number"}]},"rets":{"ret":{"text":"Constraint. Will return false if the constraint could not be created.","name":"","type":"Entity"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"CanConstrain","parent":"constraint","type":"libraryfunc","description":"Basic checks to make sure that the specified entity and bone are valid. Returns false if we should not be constraining the entity.","realm":"Server","file":{"text":"lua/includes/modules/constraint.lua","line":"278"},"args":{"arg":[{"text":"The entity to check","name":"ent","type":"Entity"},{"text":"The bone of the entity to check (use 0 for mono boned ents)","name":"bone","type":"number"}]},"rets":{"ret":{"text":"shouldConstrain","name":"","type":"boolean"}}},"example":{"description":"From modules/constraint.lua","code":"function Weld( Ent1, Ent2, Bone1, Bone2, forcelimit, nocollide, deleteonbreak )\n if ( !CanConstrain( Ent1, Bone1 ) ) then return false end\n if ( !CanConstrain( Ent2, Bone2 ) ) then return false end"},"realms":["Server"],"type":"Function"},
{"function":{"name":"Axis","parent":"constraint","type":"libraryfunc","description":"Creates an axis constraint.","realm":"Server","file":{"text":"lua/includes/modules/constraint.lua","line":"779"},"args":{"arg":[{"text":"First entity.","name":"Ent1","type":"Entity"},{"text":"Second entity.","name":"Ent2","type":"Entity"},{"text":"Bone of first entity (0 for non-ragdolls)","name":"Bone1","type":"number"},{"text":"Bone of second entity (0 for non-ragdolls)","name":"Bone2","type":"number"},{"text":"Position on the first entity, in its local space coordinates.","name":"LPos1","type":"Vector"},{"text":"Position on the second entity, in its local space coordinates.","name":"LPos2","type":"Vector"},{"text":"Amount of force until it breaks (0 = unbreakable)","name":"forcelimit","type":"number"},{"text":"Amount of torque (rotational force) until it breaks (0 = unbreakable)","name":"torquelimit","type":"number"},{"text":"Constraint friction.","name":"friction","type":"number"},{"text":"Whether the entities should be no-collided.","name":"nocollide","type":"number"},{"text":"If you include the LocalAxis then LPos2 will not be used in the final constraint. However, LPos2 is still a required argument.","name":"LocalAxis","type":"Vector"},{"text":"Whether or not to add the constraint info on the entity table. See constraint.AddConstraintTable.","name":"DontAddTable","type":"boolean"}]},"rets":{"ret":{"text":"Constraint. Will return false if the constraint could not be created.","name":"","type":"Entity"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"CreateKeyframeRope","parent":"constraint","type":"libraryfunc","description":"Creates a rope without any constraint.","realm":"Server","file":{"text":"lua/includes/modules/constraint.lua","line":"289-L338"},"args":{"arg":[{"text":"Starting position of the rope.","name":"pos","type":"Vector"},{"text":"Width of the rope.","name":"width","type":"number"},{"text":"Material of the rope.","name":"material","type":"string"},{"text":"Constraint for the rope.","name":"Constraint","type":"Entity"},{"text":"First entity.","name":"Ent1","type":"Entity"},{"text":"Position of first end of the rope. Local to Ent1.","name":"LPos1","type":"Vector"},{"text":"Bone of first entity (0 for non-ragdolls)","name":"Bone1","type":"number"},{"text":"Second entity.","name":"Ent2","type":"Entity"},{"text":"Position of second end of the rope. Local to Ent2.","name":"LPos2","type":"Vector"},{"text":"Bone of second entity (0 for non-ragdolls)","name":"Bone2","type":"number"},{"text":"(Optional) Any additional key/values to be set on the rope.","name":"kv","type":"table"}]},"rets":{"ret":{"text":"rope","name":"","type":"Entity"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"CreateStaticAnchorPoint","parent":"constraint","type":"libraryfunc","description":"Creates an invisible, non-moveable anchor point in the world to which things can be attached.","realm":"Server","file":{"text":"lua/includes/modules/constraint.lua","line":"674"},"args":{"arg":{"text":"The position to spawn the anchor at","name":"pos","type":"Vector"}},"rets":{"ret":[{"text":"anchor","name":"","type":"Entity"},{"text":"physicsObject,","name":"","type":"PhysObj"},{"text":"bone","name":"","type":"number"},{"text":"LPos","name":"","type":"Vector"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Elastic","parent":"constraint","type":"libraryfunc","description":"Creates an elastic constraint.","realm":"Server","file":{"text":"lua/includes/modules/constraint.lua","line":"559"},"args":{"arg":[{"text":"First entity.","name":"Ent1","type":"Entity"},{"text":"Second entity","name":"Ent2","type":"Entity"},{"text":"Bone of first entity (0 for non-ragdolls)","name":"Bone1","type":"number"},{"text":"Bone of second entity (0 for non-ragdolls)","name":"Bone2","type":"number"},{"text":"Position of first end of the rope. Local to Ent1.","name":"LPos1","type":"Vector"},{"text":"Position of second end of the rope. Local to Ent2.","name":"LPos2","type":"Vector"},{"name":"constant","type":"number"},{"name":"damping","type":"number"},{"name":"rdamping","type":"number"},{"text":"The material of the rope.","name":"material","type":"string"},{"text":"Width of rope.","name":"width","type":"number"},{"name":"stretchonly","type":"boolean"}]},"rets":{"ret":[{"text":"Constraint. Will return false if the constraint could not be created.","name":"","type":"Entity"},{"text":"rope.  Will return nil if the constraint could not be created.","name":"","type":"Entity"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Find","parent":"constraint","type":"libraryfunc","description":"Returns the constraint of a specified type between two entities, if it exists","realm":"Server","file":{"text":"lua/includes/modules/constraint.lua","line":"246"},"args":{"arg":[{"text":"The first entity to check","name":"ent1","type":"Entity"},{"text":"The second entity to check","name":"ent2","type":"Entity"},{"text":"The type of constraint, case sensitive. List of default constrains is as follows:\n* `Weld`\n* `Axis`\n* `AdvBallsocket`\n* `Rope`\n* `Elastic`\n* `NoCollide`\n* `Motor`\n* `Pulley`\n* `Ballsocket`\n* `Winch`\n* `Hydraulic`\n* `Muscle`\n* `Keepupright`\n* `Slider`","name":"type","type":"string"},{"text":"The bone number for the first entity (0 for monoboned entities)","name":"bone1","type":"number"},{"text":"The bone number for the second entity","name":"bone2","type":"number"}]},"rets":{"ret":{"text":"constraint","name":"","type":"Entity"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"FindConstraint","parent":"constraint","type":"libraryfunc","description":"Returns the first constraint of a specific type directly connected to the entity found","realm":"Server","file":{"text":"lua/includes/modules/constraint.lua","line":"1582"},"args":{"arg":[{"text":"The entity to check","name":"ent","type":"Entity"},{"text":"The type of constraint, case sensitive. List of default constrains is as follows:\n* `Weld`\n* `Axis`\n* `AdvBallsocket`\n* `Rope`\n* `Elastic`\n* `NoCollide`\n* `Motor`\n* `Pulley`\n* `Ballsocket`\n* `Winch`\n* `Hydraulic`\n* `Muscle`\n* `Keepupright`\n* `Slider`","name":"type","type":"string"}]},"rets":{"ret":{"text":"The constraint table, set with constraint.AddConstraintTable","name":"","type":"table"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"FindConstraintEntity","parent":"constraint","type":"libraryfunc","description":"Returns the other entity involved in the first constraint of a specific type directly connected to the entity","realm":"Server","file":{"text":"lua/includes/modules/constraint.lua","line":"1601"},"args":{"arg":[{"text":"The entity to check","name":"ent","type":"Entity"},{"text":"The type of constraint, case sensitive. List of default constrains is as follows:\n* `Weld`\n* `Axis`\n* `AdvBallsocket`\n* `Rope`\n* `Elastic`\n* `NoCollide`\n* `Motor`\n* `Pulley`\n* `Ballsocket`\n* `Winch`\n* `Hydraulic`\n* `Muscle`\n* `Keepupright`\n* `Slider`","name":"type","type":"string"}]},"rets":{"ret":{"text":"The other entity.","name":"","type":"Entity"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"ForgetConstraints","parent":"constraint","type":"libraryfunc","description":"Make this entity forget any constraints it knows about. Note that this will not actually remove the constraints.","realm":"Server","file":{"text":"lua/includes/modules/constraint.lua","line":"1551"},"args":{"arg":{"text":"The entity that will forget its constraints.","name":"ent","type":"Entity"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"FindConstraints","parent":"constraint","type":"libraryfunc","description":"Returns a table of all constraints of a specific type directly connected to the entity","realm":"Server","file":{"text":"lua/includes/modules/constraint.lua","line":"1561"},"args":{"arg":[{"text":"The entity to check","name":"ent","type":"Entity"},{"text":"The type of constraint, case sensitive. List of default constrains is as follows:\n* `Weld`\n* `Axis`\n* `AdvBallsocket`\n* `Rope`\n* `Elastic`\n* `NoCollide`\n* `Motor`\n* `Pulley`\n* `Ballsocket`\n* `Winch`\n* `Hydraulic`\n* `Muscle`\n* `Keepupright`\n* `Slider`","name":"type","type":"string"}]},"rets":{"ret":{"text":"All the constraints of this entity.","name":"","type":"table"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetAllConstrainedEntities","parent":"constraint","type":"libraryfunc","description":"Returns a table of all entities recursively constrained to an entitiy.","realm":"Server","file":{"text":"lua/includes/modules/constraint.lua","line":"1620"},"args":{"arg":[{"text":"The entity to check","name":"ent","type":"Entity"},{"text":"Table used to return result. Optional.","name":"ResultTable","type":"table","default":"nil"}]},"rets":{"ret":{"text":"A table containing all of the constrained entities. This includes all entities constrained to entities constrained to the supplied entity, etc.","name":"","type":"table"}}},"example":{"description":"Adapted from stools/remover.lua","code":"-- Remove this entity and everything constrained\nfunction TOOL:RightClick( trace )\n\tif ( !IsValid( trace.Entity ) or trace.Entity:IsPlayer() ) then return false end\n\t-- Loop through all the entities in the system\n\tfor _, Entity in pairs( constraint.GetAllConstrainedEntities( trace.Entity ) ) do\n\t\tDoRemoveEntity( Entity )\n\tend\n\treturn true\nend"},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetTable","parent":"constraint","type":"libraryfunc","description":"Returns a table of all constraints directly connected to the entity","realm":"Server","file":{"text":"lua/includes/modules/constraint.lua","line":"1500-L1542"},"args":{"arg":{"text":"The entity to check","name":"ent","type":"Entity"}},"rets":{"ret":{"text":"A list of all constraints connected to the entity.","name":"","type":"table"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"HasConstraints","parent":"constraint","type":"libraryfunc","description":"Returns true if the entity has constraints attached to it","realm":"Server","file":{"text":"lua/includes/modules/constraint.lua","line":"1479"},"args":{"arg":{"text":"The entity to check","name":"ent","type":"Entity"}},"rets":{"ret":{"text":"Whether the entity has any constraints or not.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Hydraulic","parent":"constraint","type":"libraryfunc","description":"Creates a Hydraulic constraint.","realm":"Server","file":{"text":"lua/includes/modules/constraint.lua","line":"1324"},"args":{"arg":[{"text":"The player that will be used to call numpad.OnDown.","name":"pl","type":"Player"},{"text":"First entity.","name":"Ent1","type":"Entity"},{"text":"Second entity.","name":"Ent2","type":"Entity"},{"text":"Bone of first entity (0 for non-ragdolls),","name":"Bone1","type":"number"},{"text":"Bone of second entity (0 for non-ragdolls).","name":"Bone2","type":"number"},{"name":"LPos1","type":"Vector"},{"name":"LPos2","type":"Vector"},{"name":"Length1","type":"number"},{"name":"Length2","type":"number"},{"text":"The width of the rope.","name":"width","type":"number"},{"text":"The key binding, corresponding to an Enums/KEY","name":"key","type":"number"},{"text":"Whether the hydraulic is fixed.","name":"fixed","type":"number"},{"name":"speed","type":"number"},{"text":"The material of the rope.","name":"material","type":"string"}]},"rets":{"ret":[{"text":"Constraint. Will return false if the constraint could not be created.","name":"","type":"Entity"},{"text":"rope. Will return nil if the constraint could not be created.","name":"","type":"Entity"},{"text":"controller. Can return nil depending on how the constraint was created. Will return nil if the constraint could not be created.","name":"","type":"Entity"},{"text":"slider. Can return nil depending on how the constraint was created. Will return nil if the constraint could not be created.","name":"","type":"Entity"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Keepupright","parent":"constraint","type":"libraryfunc","description":{"text":"Creates a keep upright constraint.","note":"This function only works on prop_physics or prop_ragdoll."},"realm":"Server","file":{"text":"lua/includes/modules/constraint.lua","line":"631"},"args":{"arg":[{"text":"The entity to keep upright","name":"ent","type":"Entity"},{"text":"The angle defined as \"upright\"","name":"ang","type":"Angle"},{"text":"The bone of the entity to constrain (0 for boneless)","name":"bone","type":"number"},{"text":"Basically, the strength of the constraint","name":"angularLimit","type":"number"}]},"rets":{"ret":{"text":"The created constraint, if any or false if the constraint failed to set","name":"","type":"Entity"}}},"example":{"description":"Adds a console command that makes whatever prop the player is looking at to be kept upright.","code":"concommand.Add( \"keep_upright\",function( ply, cmd, args )\n\tlocal tr = ply:GetEyeTrace()\n\n\tlocal ent = tr.Entity\n\tif ( !IsValid( ent ) ) then return end\n\n\tconstraint.Keepupright( ent, ent:GetAngles(), tr.PhysicsBone, 999999 )\nend )"},"realms":["Server"],"type":"Function"},
{"function":{"name":"Motor","parent":"constraint","type":"libraryfunc","description":"Creates a motor constraint.","realm":"Server","file":{"text":"lua/includes/modules/constraint.lua","line":"966"},"args":{"arg":[{"text":"First entity.","name":"Ent1","type":"Entity"},{"text":"Second entity.","name":"Ent2","type":"Entity"},{"text":"Bone of first entity (0 for non-ragdolls)","name":"Bone1","type":"number"},{"text":"Bone of second entity (0 for non-ragdolls)","name":"Bone2","type":"number"},{"name":"LPos1","type":"Vector"},{"name":"LPos2","type":"Vector"},{"name":"friction","type":"number"},{"name":"torque","type":"number"},{"name":"forcetime","type":"number"},{"text":"Whether the entities should be no-collided.","name":"nocollide","type":"number"},{"text":"Whether the constraint is on toggle.","name":"toggle","type":"number"},{"text":"The player that will be used to call numpad.OnDown and numpad.OnUp.","name":"pl","type":"Player"},{"text":"Amount of force until it breaks (0 = unbreakable)","name":"forcelimit","type":"number"},{"text":"The key binding for \"forward\", corresponding to an Enums/KEY","name":"numpadkey_fwd","type":"number"},{"text":"The key binding for \"backwards\", corresponding to an Enums/KEY","name":"numpadkey_bwd","type":"number"},{"name":"direction","type":"number"},{"name":"LocalAxis","type":"Vector"}]},"rets":{"ret":[{"text":"Constraint. Will return false if the constraint could not be created.","name":"","type":"Entity"},{"text":"axis. Will return nil if the constraint could not be created.","name":"","type":"Entity"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Muscle","parent":"constraint","type":"libraryfunc","description":"Creates a muscle constraint.","realm":"Server","file":{"text":"lua/includes/modules/constraint.lua","line":"1400"},"args":{"arg":[{"text":"The player that will be used to call numpad.OnDown.","name":"pl","type":"Player"},{"text":"First entity.","name":"Ent1","type":"Entity"},{"text":"Second entity.","name":"Ent2","type":"Entity"},{"text":"Bone of first entity (0 for non-ragdolls)","name":"Bone1","type":"number"},{"text":"Bone of second entity (0 for non-ragdolls)","name":"Bone2","type":"number"},{"name":"LPos1","type":"Vector"},{"name":"LPos2","type":"Vector"},{"name":"Length1","type":"number"},{"name":"Length2","type":"number"},{"text":"Width of the rope.","name":"width","type":"number"},{"text":"The key binding, corresponding to an Enums/KEY","name":"key","type":"number"},{"text":"Whether the constraint is fixed.","name":"fixed","type":"number"},{"name":"period","type":"number"},{"name":"amplitude","type":"number"},{"name":"starton","type":"boolean"},{"text":"Material of the rope.","name":"material","type":"string"}]},"rets":{"ret":[{"text":"Constraint. Will return false if the constraint could not be created.","name":"","type":"Entity"},{"text":"rope. Will return nil if the constraint could not be created.","name":"","type":"Entity"},{"text":"controller. Will return nil if the constraint could not be created.","name":"","type":"Entity"},{"text":"slider. Will return nil if the fixed argument is not 1 or if the constraint could not be created.","name":"","type":"Entity"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Pulley","parent":"constraint","type":"libraryfunc","description":"Creates a pulley constraint.","realm":"Server","file":{"text":"lua/includes/modules/constraint.lua","line":"1133"},"args":{"arg":[{"name":"Ent1","type":"Entity"},{"name":"Ent4","type":"Entity"},{"name":"Bone1","type":"number"},{"name":"Bone4","type":"number"},{"name":"LPos1","type":"Vector"},{"name":"LPos4","type":"Vector"},{"name":"WPos2","type":"Vector"},{"name":"WPos3","type":"Vector"},{"text":"Amount of force until it breaks (0 = unbreakable)","name":"forcelimit","type":"number"},{"text":"Whether the constraint is rigid.","name":"rigid","type":"boolean"},{"text":"Width of the rope.","name":"width","type":"number"},{"text":"Material of the rope.","name":"material","type":"string"}]},"rets":{"ret":{"text":"Constraint. Will return false if the constraint could not be created.","name":"","type":"Entity"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"NoCollide","parent":"constraint","type":"libraryfunc","description":{"text":"Creates an no-collide \"constraint\". Disables collision between two entities.","note":"Does not work with players."},"realm":"Server","file":{"text":"lua/includes/modules/constraint.lua","line":"917"},"args":{"arg":[{"text":"First entity.","name":"Ent1","type":"Entity"},{"text":"Second entity.","name":"Ent2","type":"Entity"},{"text":"Bone of first entity (0 for non-ragdolls).","name":"Bone1","type":"number"},{"text":"Bone of second entity (0 for non-ragdolls).","name":"Bone2","type":"number"}]},"rets":{"ret":{"text":"Constraint. Will return false if the constraint could not be created.","name":"","type":"Entity"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"RemoveAll","parent":"constraint","type":"libraryfunc","description":"Attempts to remove all constraints associated with an entity","realm":"Server","file":{"text":"lua/includes/modules/constraint.lua","line":"214"},"args":{"arg":{"text":"The entity to remove constraints from","name":"ent","type":"Entity"}},"rets":{"ret":[{"text":"Whether any constraints were removed","name":"","type":"boolean"},{"text":"Number of constraints removed","name":"","type":"number"}]}},"example":{"description":"From stools/remover.lua","code":"-- Reload removes all constraints on the targetted entity\nfunction TOOL:Reload( trace )\n\tif ( !IsValid( trace.Entity ) or trace.Entity:IsPlayer() ) then return false end\n\treturn constraint.RemoveAll( trace.Entity )\nend"},"realms":["Server"],"type":"Function"},
{"function":{"name":"Slider","parent":"constraint","type":"libraryfunc","description":"Creates a slider constraint.","realm":"Server","file":{"text":"lua/includes/modules/constraint.lua","line":"692"},"args":{"arg":[{"text":"First entity.","name":"Ent1","type":"Entity"},{"text":"Second entity.","name":"Ent2","type":"Entity"},{"text":"Bone of first entity (0 for non-ragdolls),","name":"Bone1","type":"number"},{"text":"Bone of second entity (0 for non-ragdolls).","name":"Bone2","type":"number"},{"name":"LPos1","type":"Vector"},{"name":"LPos2","type":"Vector"},{"text":"The width of the rope.","name":"width","type":"number"},{"text":"The material of the rope.","name":"material","type":"string"}]},"rets":{"ret":[{"text":"Constraint. Will return false if the constraint could not be created.","name":"","type":"Entity"},{"text":"rope. Will return nil if the constraint could not be created.","name":"","type":"Entity"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"RemoveConstraints","parent":"constraint","type":"libraryfunc","description":"Attempts to remove all constraints of a specified type associated with an entity","realm":"Server","file":{"text":"lua/includes/modules/constraint.lua","line":"171"},"args":{"arg":[{"text":"The entity to check","name":"ent","type":"Entity"},{"text":"The constraint type to remove (eg. \"Weld\", \"Elastic\", \"NoCollide\")","name":"type","type":"string"}]},"rets":{"ret":[{"text":"Whether we removed any constraints or not","name":"","type":"boolean"},{"text":"The amount of constraints removed","name":"","type":"number"}]}},"example":{"description":"From stools/axis.lua","code":"function TOOL:Reload( trace )\n if (!trace.Entity:IsValid() or trace.Entity:IsPlayer() ) then return false end\n local bool = constraint.RemoveConstraints( trace.Entity, \"Axis\" )\n return bool\nend"},"realms":["Server"],"type":"Function"},
{"function":{"name":"Rope","parent":"constraint","type":"libraryfunc","description":"Creates a rope constraint - with rope!","realm":"Server","file":{"text":"lua/includes/modules/constraint.lua","line":"484"},"args":{"arg":[{"text":"First entity","name":"Ent1","type":"Entity"},{"text":"Second entity","name":"Ent2","type":"Entity"},{"text":"Bone of first entity (0 for non-ragdolls)","name":"Bone1","type":"number"},{"text":"Bone of second entity (0 for non-ragdolls)","name":"Bone2","type":"number"},{"text":"Position of first end of the rope. Local to Ent1.","name":"LPos1","type":"Vector"},{"text":"Position of second end of the rope. Local to Ent2.","name":"LPos2","type":"Vector"},{"text":"Length of the rope.","name":"length","type":"number"},{"text":"Amount to add to the length of the rope. Works as it does in the Rope tool.","name":"addlength","type":"number"},{"text":"Amount of force until it breaks (0 = unbreakable).","name":"forcelimit","type":"number"},{"text":"Width of the rope.","name":"width","type":"number"},{"text":"Material of the rope.","name":"material","type":"string"},{"text":"Whether the constraint is rigid.","name":"rigid","type":"boolean"}]},"rets":{"ret":[{"text":"Constraint. Will be a keyframe_rope if you roping to the same bone on the same entity. Will return false if the constraint could not be created.","name":"","type":"Entity"},{"text":"rope. Will return nil if \"Constraint\" is a keyframe_rope or if the constraint could not be created.","name":"","type":"Entity"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Weld","parent":"constraint","type":"libraryfunc","description":"Creates a weld constraint","realm":"Server","file":{"text":"lua/includes/modules/constraint.lua","line":"419"},"args":{"arg":[{"text":"The first entity","name":"ent1","type":"Entity"},{"text":"The second entity","name":"ent2","type":"Entity"},{"text":"The bonenumber of the first entity (0 for monoboned entities) \n\nPhysObj number for ragdolls, see: Entity:TranslateBoneToPhysBone.","name":"bone1","type":"number"},{"text":"The bonenumber of the second entity","name":"bone2","type":"number"},{"text":"The amount of force appliable to the constraint before it will break (0 is never)","name":"forcelimit","type":"number"},{"text":"Should ent1 be nocollided to ent2 via this constraint","name":"nocollide","type":"boolean"},{"text":"If true, when ent2 is removed, ent1 will also be removed","name":"deleteent1onbreak","type":"boolean"}]},"rets":{"ret":{"text":"constraint","name":"","type":"Entity"}}},"example":{"description":"Adapted from stools/thruster.lua","code":"function TOOL:LeftClick( trace )\n /* Boilerplate stool code to extract ClientConVars to variables */\n local thruster = MakeThruster( ply, model, Ang, trace.HitPos, key, key_bk, force, toggle, effect, damageable, soundname )\n local weld = constraint.Weld( thruster, trace.Entity, 0, trace.PhysicsBone, 0, collision == 0, true )\n -- If you remove the entity thrusters are welded to, the thruster is removed as well\nend"},"realms":["Server"],"type":"Function"},
{"function":{"name":"Winch","parent":"constraint","type":"libraryfunc","description":"Creates a Winch constraint.","realm":"Server","file":{"text":"lua/includes/modules/constraint.lua","line":"1253"},"args":{"arg":[{"text":"The player that will be used to call numpad.OnDown and numpad.OnUp.","name":"pl","type":"Player"},{"text":"First entity.","name":"Ent1","type":"Entity"},{"text":"Second entity.","name":"Ent2","type":"Entity"},{"text":"Bone of first entity (0 for non-ragdolls),","name":"Bone1","type":"number"},{"text":"Bone of second entity (0 for non-ragdolls).","name":"Bone2","type":"number"},{"name":"LPos1","type":"Vector"},{"name":"LPos2","type":"Vector"},{"text":"The width of the rope.","name":"width","type":"number"},{"text":"The key binding for \"forward\", corresponding to an Enums/KEY","name":"fwd_bind","type":"number"},{"text":"The key binding for \"backwards\", corresponding to an Enums/KEY","name":"bwd_bind","type":"number"},{"text":"Forward speed.","name":"fwd_speed","type":"number"},{"text":"Backwards speed.","name":"bwd_speed","type":"number"},{"text":"The material of the rope.","name":"material","type":"string"},{"text":"Whether the winch should be on toggle.","name":"toggle","type":"boolean"}]},"rets":{"ret":[{"text":"Constraint. Can return nil. Will return false if the constraint could not be created.","name":"","type":"Entity"},{"text":"rope. Will return nil if the constraint could not be created.","name":"","type":"Entity"},{"text":"controller. Can return nil.","name":"","type":"Entity"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetPhysProp","parent":"construct","type":"libraryfunc","description":"Sets props physical properties.","realm":"Server","file":{"text":"lua/includes/modules/construct.lua","line":"16"},"args":{"arg":[{"text":"The player. This variable is not used and can be left out.","name":"ply","type":"Player"},{"text":"The entity to apply properties to","name":"ent","type":"Entity"},{"text":"You can use this or the argument below. This will be used in case you don't provide argument below.","name":"physObjID","type":"number"},{"text":"The physics object to apply the properties to","name":"physObj","type":"PhysObj"},{"text":"The table containing properties to apply. See Structures/PhysProperties","name":"data","type":"table"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Clear","parent":"controlpanel","type":"libraryfunc","description":"Clears ALL the control panels ( for tools )","realm":"Client","file":{"text":"lua/includes/modules/controlpanel.lua","line":"30"}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Magnet","parent":"construct","type":"libraryfunc","description":"Creates a magnet.","realm":"Server","file":{"text":"lua/includes/modules/construct.lua","line":"94"},"args":{"arg":[{"text":"Player that will have the numpad control over the magnet","name":"ply","type":"Player"},{"text":"The position of the magnet","name":"pos","type":"Vector"},{"text":"The angles of the magnet","name":"ang","type":"Angle"},{"text":"The model of the maget","name":"model","type":"string"},{"text":"Material of the magnet ( texture )","name":"material","type":"string"},{"text":"The key to toggle the magnet, see Enums/KEY","name":"key","type":"number"},{"text":"Maximum amount of objects the magnet can hold","name":"maxObjects","type":"number"},{"text":"Strength of the magnet","name":"strength","type":"number"},{"text":"If > 0, disallows the magnet to pull objects towards it","name":"nopull","type":"number","default":"0"},{"text":"If > 0, allows rotation of the objects attached","name":"allowrot","type":"number","default":"0"},{"text":"If > 0, enabled from spawn","name":"startOn","type":"number","default":"0"},{"text":"If != 0, pressing the key toggles the magnet, otherwise you'll have to hold the key to keep it enabled","name":"toggle","type":"number"},{"text":"Velocity to set on spawn","name":"vel","type":"Vector","default":"Vector( 0, 0, 0 )"},{"text":"Angular velocity to set on spawn","name":"aVel","type":"Angle","default":"Angle( 0, 0, 0 )"},{"text":"Freeze the magnet on start","name":"frozen","type":"boolean","default":"false"}]},"rets":{"ret":{"text":"The magnet","name":"","type":"Entity"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Get","parent":"controlpanel","type":"libraryfunc","description":"Returns (or creates if not exists) a control panel.","realm":"Client","file":{"text":"lua/includes/modules/constraint.lua","line":"6"},"args":{"arg":{"text":"The name of the panel. For normal tools this will be equal to `TOOL.Mode` (the tool's filename without the extension).\n\nWhen you create a tool/option via spawnmenu.AddToolMenuOption, the internal control panel name is `TOOL.Mode .. \"_\" .. tool_tab:lower() .. \"_\" .. tool_category:lower()`.","name":"name","type":"string"}},"rets":{"ret":{"text":"The ControlPanel panel.","name":"","type":"Panel"}}},"example":{"description":"Get the Contextmenus panel for the weld tool.","code":"local ControlPanel = controlpanel.Get( \"Weld\" )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetNumber","parent":"cookie","type":"libraryfunc","description":"Gets the value of a cookie on the client as a number.","realm":"Shared and Menu","file":{"text":"lua/includes/modules/cookie.lua","line":"84"},"args":{"arg":[{"text":"The name of the cookie that you want to get.","name":"name","type":"string"},{"text":"Value to return if the cookie does not exist.","name":"default","type":"any","default":"nil"}]},"rets":{"ret":{"text":"The cookie value","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Delete","parent":"cookie","type":"libraryfunc","description":"Deletes a cookie on the client.","realm":"Shared and Menu","file":{"text":"lua/includes/modules/cookie.lua","line":"94"},"args":{"arg":{"text":"The name of the cookie that you want to delete.","name":"name","type":"string"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"GetString","parent":"cookie","type":"libraryfunc","description":"Gets the value of a cookie on the client as a string.","realm":"Shared and Menu","file":{"text":"lua/includes/modules/cookie.lua","line":"74"},"args":{"arg":[{"text":"The name of the cookie that you want to get.","name":"name","type":"string"},{"text":"Value to return if the cookie does not exist.","name":"default","type":"any","default":"nil"}]},"rets":{"ret":{"text":"The cookie value","name":"","type":"string"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"create","parent":"coroutine","type":"libraryfunc","description":"Creates a coroutine of the given function.","realm":"Shared and Menu","args":{"arg":{"text":"The function for the coroutine to use.","name":"func","type":"function"}},"rets":{"ret":{"text":"coroutine","name":"","type":"thread"}}},"example":{"description":"Display the location of each player in an endless loop, but only one player per frame.","code":"local function displayer()\n\tlocal players\n\n\twhile true do -- endless loop: you must guarantee that coroutine.yield() is always called!\n\t\tplayers = player.GetAll()\n\t\t\n\t\tif not next( players ) then -- empty table\n\t\t\tcoroutine.yield() -- guarantee a pause in coroutine even with an empty table\n\t\telse\n\t\t\tfor _, ply in ipairs( players ) do\n\t\t\t\tcoroutine.yield() -- We yield here so what you may do next will start immediatly when this for loop finishes.\n\t\t\t\t\n\t\t\t\tif IsValid( ply ) then -- The player ply may be disconnected now!\n\t\t\t\t\tprint( ply:Nick(), \"is located at\", ply:GetPos() )\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\nend\n\t\nlocal co\nhook.Add( \"Think\", \"DisplayPlayersLocation\", function()\n\tif not co or not coroutine.resume( co ) then\n\t\tco = coroutine.create( displayer )\n\t\tcoroutine.resume( co )\n\tend\nend )","output":"```\nCustom Nickname\tis located at\t10.102 59.04 -100.96\nSuperBoss\tis located at\t55.85 1209.11 -100.96\nCustom Nickname\tis located at\t11.126 51.92 -100.96\n...\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"running","parent":"coroutine","type":"libraryfunc","description":"Returns the active coroutine or nil if we are not within a coroutine.","realm":"Shared and Menu","rets":{"ret":{"text":"coroutine","name":"","type":"thread"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Set","parent":"cookie","type":"libraryfunc","description":"Sets the value of a cookie, which is saved automatically by the sql.\n\nThese are stored in the *.db files - cl.db for clients, mn.db for menu state and sv.db for servers.","realm":"Shared and Menu","file":{"text":"lua/includes/modules/cookie.lua","line":"105"},"args":{"arg":[{"text":"The name of the cookie that you want to set.","name":"key","type":"string"},{"text":"Value to store in the cookie.","name":"value","type":"string"}]}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"wait","parent":"coroutine","type":"libraryfunc","description":"Yields the coroutine for the given duration before continuing.\n\nThis only works inside a coroutine.\n\nThis function uses Global.CurTime instead of Global.RealTime.","realm":"Shared","file":{"text":"lua/includes/extensions/coroutine.lua","line":"15"},"args":{"arg":{"text":"The number of seconds to wait","name":"duration","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"status","parent":"coroutine","type":"libraryfunc","description":"Returns the status of the coroutine passed to it, the possible statuses are \"suspended\", \"running\", and \"dead\".","realm":"Shared and Menu","args":{"arg":{"text":"Coroutine to check the status of.","name":"coroutine","type":"thread"}},"rets":{"ret":{"text":"status","name":"","type":"string"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"resume","parent":"coroutine","type":"libraryfunc","description":"Resumes the given coroutine and passes the given vararg to either the function arguments or the coroutine.yield that is inside that function and returns whatever yield is called with the next time or by the final return in the function.","realm":"Shared and Menu","args":{"arg":[{"text":"Coroutine to resume.","name":"coroutine","type":"thread"},{"text":"Arguments to be returned by coroutine.yield.","name":"args","type":"vararg"}]},"rets":{"ret":[{"text":"If the executed thread code had no errors occur within it.","name":"","type":"boolean"},{"text":"If an error occurred, this will be a string containing the error message. Otherwise, this will be arguments that were yielded.","name":"","type":"vararg"}]}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"wrap","parent":"coroutine","type":"libraryfunc","description":"Returns a function which calling is equivalent with calling coroutine.resume with the coroutine and all extra parameters.\n\nThe values returned by the returned function only contain the values passed to the inner coroutine.yield call and do not include the *no error* status that coroutine.resume provides. In case of failure, an error is thrown instead.","realm":"Shared and Menu","args":{"arg":{"text":"Coroutine to resume.","name":"coroutine","type":"function"}},"rets":{"ret":{"text":"func","name":"","type":"function"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"AddChangeCallback","parent":"cvars","type":"libraryfunc","description":{"text":"Adds a callback to be called when the named convar changes.","bug":[{"text":"This does not callback convars in the menu state.","issue":"1440"},{"text":"This does not callback convars on the client with FCVAR_GAMEDLL and convars on the server without FCVAR_GAMEDLL.","issue":"3503"},{"text":"This does not callback convars on the client with FCVAR_REPLICATED.","issue":"3740"}]},"realm":"Shared and Menu","args":{"arg":[{"text":"The name of the convar to add the change callback to.","name":"name","type":"string"},{"text":"The function to be called when the convar changes. The arguments passed are:\n* string convar - The name of the convar.\n* string oldValue - The old value of the convar.\n* string newValue - The new value of the convar.","name":"callback","type":"function"},{"text":"If set, you will be able to remove the callback using cvars.RemoveChangeCallback.","name":"identifier","type":"string","default":"nil"}]}},"example":{"description":"Called when convar changes.","code":"cvars.AddChangeCallback(\"convar name\", function(convar_name, value_old, value_new)\n    print(convar_name, value_old, value_new)\nend)","output":"\"convar name\" 2 5"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"yield","parent":"coroutine","type":"libraryfunc","description":"Pauses the active coroutine and passes all additional variables to the call of coroutine.resume that resumed the coroutine last time, and returns all additional variables that were passed to the previous call of resume.","realm":"Shared and Menu","args":{"arg":{"text":"Arguments to be returned by the last call of coroutine.resume","name":"returnValue","type":"vararg"}},"rets":{"ret":{"text":"Arguments that were set previously by coroutine.resume","name":"","type":"vararg"}}},"example":{"description":"Demonstrates the use of using varargs as a return value.","code":"local co = coroutine.create( function()\n\tcoroutine.yield( \"Hello world!\" )\nend )\nprint( coroutine.resume( co ) )","output":"true, \"Hello world!\""},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Bool","parent":"cvars","type":"libraryfunc","description":"Retrieves console variable as a boolean.","realm":"Shared and Menu","args":{"arg":[{"text":"Name of console variable","name":"cvar","type":"string"},{"text":"The value to return if the console variable does not exist","name":"default","type":"boolean","default":"false"}]},"rets":{"ret":{"text":"Retrieved value","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Number","parent":"cvars","type":"libraryfunc","description":"Retrieves console variable as a number.","realm":"Shared and Menu","args":{"arg":[{"text":"Name of console variable","name":"cvar","type":"string"},{"text":"The value to return if the console variable does not exist","name":"default","type":"any","default":"nil"}]},"rets":{"ret":{"text":"Retrieved value","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"GetConVarCallbacks","parent":"cvars","type":"libraryfunc","description":"Returns a table of the given ConVars callbacks.","realm":"Shared and Menu","args":{"arg":[{"text":"The name of the ConVar.","name":"name","type":"string"},{"text":"Whether or not to create the internal callback table for given ConVar if there isn't one yet.\n\n\nThis argument is internal and should not be used.","name":"createIfNotFound","type":"boolean","default":"false"}]},"rets":{"ret":{"text":"A table of the convar's callbacks, or nil if the convar doesn't exist.","name":"","type":"table"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"OnConVarChanged","parent":"cvars","type":"libraryfunc","description":{"text":"Called by the engine when a convar value changes.","internal":"You are probably looking for cvars.AddChangeCallback."},"realm":"Shared and Menu","args":{"arg":[{"text":"Convar name","name":"name","type":"string"},{"text":"The old value of the convar","name":"oldVal","type":"string"},{"text":"The new value of the convar","name":"newVal","type":"string"}]}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"RemoveChangeCallback","parent":"cvars","type":"libraryfunc","description":"Removes a callback for a convar using the the callback's identifier. The identifier should be the third argument specified for cvars.AddChangeCallback.","realm":"Shared and Menu","args":{"arg":[{"text":"The name of the convar to remove the callback from.","name":"name","type":"string"},{"text":"The callback's identifier.","name":"indentifier","type":"string"}]}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"String","parent":"cvars","type":"libraryfunc","description":"Retrieves console variable as a string.","realm":"Shared and Menu","args":{"arg":[{"text":"Name of console variable","name":"cvar","type":"string"},{"text":"The value to return if the console variable does not exist","name":"default","type":"any","default":"nil"}]},"rets":{"ret":{"text":"Retrieved value","name":"","type":"string"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"debug","parent":"debug","type":"libraryfunc","description":"Enters an interactive mode with the user, running each string that the user enters. Using simple commands and other debug facilities, the user can inspect global and local variables, change their values, evaluate expressions, and so on. A line containing only the word cont finishes this function, so that the caller continues its execution.\n\n* Commands for debug.debug are not lexically nested within any function, and so have no direct access to local variables.\n* This only works on the source dedicated server.\n* To exit this interactive mode, you can press Ctrl + Z then Enter OR type the word 'cont' on a single line and press enter.","realm":"Shared and Menu"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"gethook","parent":"debug","type":"libraryfunc","description":"Returns the current hook settings of the passed thread. The thread argument can be omitted. This is unrelated to . More information on hooks can be found at http://www.lua.org/pil/23.2.html","realm":"Shared and Menu","args":{"arg":{"text":"Which thread to retrieve its hook from","name":"thread","type":"thread","default":"nil"}},"rets":{"ret":[{"text":"Hook function","name":"","type":"function"},{"text":"Hook mask","name":"","type":"string"},{"text":"Hook count","name":"","type":"number"}]}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"getfenv","parent":"debug","type":"libraryfunc","description":"Returns the environment of the passed object. This can be set with debug.setfenv","realm":"Shared and Menu","args":{"arg":{"text":"Object to get environment of","name":"object","type":"table"}},"rets":{"ret":{"text":"Environment","name":"","type":"table"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"getinfo","parent":"debug","type":"libraryfunc","description":"Returns debug information about a function.","realm":"Shared and Menu","args":{"arg":[{"text":"Takes either a function or a number representing the stack level as an argument. Stack level 0 always corresponds to the debug.getinfo call, 1 would be the function calling debug.getinfo, and so on.\n\nReturns useful information about that function in a table.","name":"funcOrStackLevel","type":"function"},{"text":"A string whose characters specify the information to be retrieved.\n\n* f - Populates the func field.\n* l - Populates the currentline field.\n* L - Populates the activelines field.\n* n - Populates the name and namewhat fields - only works if stack level is passed rather than function pointer.\n* S - Populates the location fields (lastlinedefined, linedefined, short_src, source and what).\n* u - Populates the argument and upvalue fields (isvararg, nparams, nups)","name":"fields","type":"string","default":"flnSu"}]},"rets":{"ret":{"text":"A table as a Structures/DebugInfo containing information about the function you passed. Can return nil if the stack level didn't point to a valid stack frame.","name":"","type":"table"}}},"example":{"description":"Let's find out information about net.Receive, such as which file it's defined in, the line it starts and the line it ends, and if it's defined in Lua, or C plus additional information.","code":"PrintTable( debug.getinfo( net.Receive ) )","output":"```\n[linedefined] \t\t= 7\n[currentline] \t\t= -1\n[func] \t\t\t= function: 0x1a8fae90\n[isvararg] \t\t= false\n[namewhat] \t\t=\n[lastlinedefined] \t= 11\n[source] \t\t= @lua/includes/modules/net.lua\n[nups] \t\t\t= 0\n[what] \t\t\t= Lua\n[nparams] \t\t= 2\n[short_src] \t\t= lua/includes/modules/net.lua\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"getregistry","parent":"debug","type":"libraryfunc","description":{"text":"Returns the internal Lua registry table.\n\nThe Lua registry is used by the engine and binary modules to create references to Lua values. Avoid creating entries into the registry with a number as the key, as they are reserved for the reference system.","warning":"Improper editing of the registry can result in unintended side effects, including crashing of the game."},"realm":"Shared and Menu","rets":{"ret":{"text":"The Lua registry","name":"","type":"table"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"getmetatable","parent":"debug","type":"libraryfunc","description":"Returns the metatable of an object. This function ignores the metatable's __metatable field.","realm":"Shared and Menu","args":{"arg":{"text":"The object to retrieve the metatable from.","name":"object","type":"any"}},"rets":{"ret":{"text":"The metatable of the given object.","name":"","type":"table"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"getlocal","parent":"debug","type":"libraryfunc","description":{"text":"Gets the name and value of a local variable indexed from the level.","warning":"When a function has a tailcall return, you cannot access the locals of this function."},"realm":"Shared and Menu","args":{"arg":[{"text":"The thread","name":"thread","type":"thread","default":"Current thread"},{"text":"The level above the thread. \n* 0 = the function that was called (most always this function)'s arguments\n* 1 = the thread that had called this function.\n* 2 = the thread that had called the function that started the thread that called this function.\n\nA function defined in Lua can also be passed as the level. The index will specify the parameter's name to be returned (a parameter will have a value of nil).","name":"level","type":"number"},{"text":"The variable's index you want to get.\n* 1 = the first local defined in the thread\n* 2 = the second local defined in the thread\n* etc...","name":"index","type":"number"}]},"rets":{"ret":[{"text":"The name of the variable.\n\nSometimes this will be `(*temporary)` if the local variable had no name.","name":"","type":"string","note":"Variables with names starting with **(** are **internal variables**."},{"text":"The value of the local variable.","name":"","type":"any"}]}},"example":[{"description":"Gets all the local variables of the current thread and stores them in a table.","code":"local name, value\nlocal NIL = {} -- to represent nil variables\nlocal locals = {}\nlocal i = 1\n\nwhile( true ) do\n    name, value = debug.getlocal( 1, i )\n    if ( name == nil ) then break end\n    locals[ name ] = value == nil and NIL or value\n\ti = i + 1\nend\n\nfor k, v in pairs( locals ) do \n\tprint( k, v )\nend","output":"```\nlocals\ttable: 0x274a8dc0\nvalue\ttable: 0x274a8d98\nNIL\ttable: 0x274a8d98\nname\ttable: 0x274a8d98\ni\t5\n```"},{"description":"Prints the parameter names for hook.Add.","code":"local print = print\nlocal getlocal = debug.getlocal\n\nlocal function PrintFunctionParameters( func )\n\tlocal k = 2\n\tlocal param = getlocal( func, 1 )\n\twhile param ~= nil do\n\t\tprint( param )\n\t\tparam = getlocal( func, k )\n\t\tk = k + 1\n\tend\nend\n\nPrintFunctionParameters( hook.Add )","output":"```\nevent_name\nname\nfunc\n```"}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"setfenv","parent":"debug","type":"libraryfunc","description":"Sets the environment of the passed object.","realm":"Shared and Menu","args":{"arg":[{"text":"Object to set environment of","name":"object","type":"table"},{"text":"Environment to set","name":"env","type":"table"}]},"rets":{"ret":{"text":"The object","name":"","type":"table"}}},"example":{"description":"create a new environment and setfenv Display inside it","code":"local newenvironment = {}\n\nfunction newenvironment.log( msg )\n\tprint( msg )\nend\n\nlocal function Display()\n\tlog( \"yay\" )\nend\n\ndebug.setfenv( Display , newenvironment )\n\nDisplay()","output":"```\nyay\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"sethook","parent":"debug","type":"libraryfunc","description":"Sets the given function as a Lua hook. This is completely different to gamemode hooks. The thread argument can be completely omitted and calling this function with no arguments will remove the current hook. This is used by default for infinite loop detection. More information on hooks can be found at http://www.lua.org/pil/23.2.html\n\nHooks are not always ran when code that has been compiled by LuaJIT's JIT compiler is being executed. This means that relying on them for infinite loop protection is unwise.","realm":"Shared and Menu","args":{"arg":[{"text":"Thread to set the hook on. This argument can be omited","name":"thread","type":"thread"},{"text":"Function for the hook to call","name":"hook","type":"function"},{"text":"The hook's mask","name":"mask","type":"string"},{"text":"How often to call the hook (in instructions). 0 for every instruction","name":"count","type":"number"}]}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"getupvalue","parent":"debug","type":"libraryfunc","description":"Used for getting variable values in an index from the passed function. This does nothing for C functions.","realm":"Shared and Menu","args":{"arg":[{"text":"Function to get the upvalue indexed from.","name":"func","type":"function"},{"text":"The index in the upvalue array. The max number of entries can be found in debug.getinfo's \"\" key.","name":"index","type":"number","page":",nupsStructures/DebugInfo"}]},"rets":{"ret":[{"text":"Name of the upvalue. Will be nil if the index was out of range (< 1 or > debug.getinfo.nups), or the function was defined in C.","name":"","type":"string"},{"text":"Value of the upvalue.","name":"","type":"any"}]}},"example":{"description":"Prints the upvalues of some local functions.","code":"local foo = 5\nlocal bar = \"hello\"\nlocal test = { \"table\", true, \"variable\" }\n\nlocal function DoSomethingWithFoo()\n\t-- This code won't be run but the function\n\t-- has to reference the variable for\n\t-- it to be counted as an upvalue\n\tfoo = foo + 1\nend\n\nlocal function DoSomethingWithFooAndBar()\n\tfoo = foo / 2\n\tbar = bar .. \" world\"\nend\n\nlocal function DoSomethingWithBarAndTest()\n\ttest[1] = bar .. \"reader!\"\nend\n\n\n-- level = stack level to get local variables of\n-- returns a table with string keys representing the variable name\nlocal function GetUpvalues( func )\n\tlocal info = debug.getinfo( func, \"uS\" )\n\tlocal variables = {}\n\n\t-- Upvalues can't be retrieved from C functions\n\tif ( info != nil && info.what == \"Lua\" ) then\n\t\tlocal upvalues = info.nups\n\n\t\tfor i = 1, upvalues do\n\t\t\tlocal key, value = debug.getupvalue( func, i )\n\t\t\tvariables[ key ] = value\n\t\tend\n\tend\n\n\treturn variables\nend\n\nprint( \"DoSomethingWithFoo:\" )\nPrintTable( GetUpvalues( DoSomethingWithFoo ) )\n\nprint( \"\\nDoSomethingWithFooAndBar:\" )\nPrintTable( GetUpvalues( DoSomethingWithFooAndBar ) )\n\nprint( \"\\nDoSomethingWithBarAndTest:\" )\nPrintTable( GetUpvalues( DoSomethingWithBarAndTest ) )","output":"```\nDoSomethingWithFoo:\nfoo\t=\t5\n\nDoSomethingWithFooAndBar:\nbar\t=\thello\nfoo\t=\t5\n\nDoSomethingWithBarAndTest:\nbar\t=\thello\ntest:\n\t\t1\t=\ttable\n\t\t2\t=\ttrue\n\t\t3\t=\tvariable\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"setmetatable","parent":"debug","type":"libraryfunc","description":"Sets the object's metatable. Unlike Global.setmetatable, this function works regardless of whether the first object passed is a valid table or not; this function even works on primitive datatypes such as numbers, functions, and even nil.","realm":"Shared and Menu","args":{"arg":[{"text":"Object to set the metatable for.","name":"object","type":"any"},{"text":"The metatable to set for the object.\nIf this argument is nil, then the object's metatable is removed.","name":"metatable","type":"table"}]},"rets":{"ret":{"text":"true if the object's metatable was set successfully.","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"setlocal","parent":"debug","type":"libraryfunc","description":{"text":"Sets a local variable's value.","removed":"This function was removed due to security concerns."},"realm":"Shared and Menu","args":{"arg":[{"text":"The thread","name":"thread","type":"thread","default":"Current Thread"},{"text":"The level above the thread. \n0 is the function that was called (most always this function)'s arguments\n\n1 is the thread that had called this function.\n\n2 is the thread that had called the function that started the thread that called this function.","name":"level","type":"number"},{"text":"The variable's index you want to get.\n\n1 = the first local defined in the thread\n\n2 = the second local defined in the thread","name":"index","type":"number"},{"text":"The value to set the local to","name":"value","type":"any","default":"nil"}]},"rets":{"ret":{"text":"The name of the local variable if the local at the index exists, otherwise nil is returned.","name":"","type":"string"}}},"example":{"description":"Prints the local variables, sets them, then prints the variables again.","code":"local var1 = \"Luke, I am not your father.\"\nlocal var2 = \"PMFPMF\"\n\n(function()\n\tprint(\"Getting the locals now!\")\n\tPrintTable({debug.getlocal(2, 1)})\n\tPrintTable({debug.getlocal(2, 2)})\n\n\tprint(\"\\nSetting the locals now!\")\n\tprint(debug.setlocal(2, 1, \"I'm actually your mother.\"))\n\tprint(debug.setlocal(2, 2, \"Chemo-chi\"))\n\tprint(debug.setlocal(2, 3, \"nil should be returned here!\"))\n\n\tprint(\"\\nHere are the locals after being set!\")\n\tPrintTable({debug.getlocal(2, 1)})\n\tPrintTable({debug.getlocal(2, 2)})\nend)()","output":"```\nGetting the locals now!\n1\t=\tvar1\n2\t=\tLuke, I am not your father.\n1\t=\tvar2\n2\t=\tPMFPMF\n\nSetting the locals now!\nvar1\nvar2\nnil\n\nHere are the locals after being set!\n1\t=\tvar1\n2\t=\tI'm actually your mother.\n1\t=\tvar2\n2\t=\tChemo-chi\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Trace","parent":"debug","type":"libraryfunc","description":"Prints out the lua function call stack to the console.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/debug.lua","line":"24"}},"example":{"description":"Prints the current call stack.","code":"debug.Trace()","output":"```\nTrace: \n 1: Line 32 \"Trace\" lua/includes/extensions/debug.lua\n 2: Line 1 \"(null)\" LuaCmd\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"traceback","parent":"debug","type":"libraryfunc","description":"Returns a full execution stack trace.","realm":"Shared and Menu","args":{"arg":[{"text":"Thread (ie. error object from xpcall error handler) to build traceback for. If this argument is not set to a proper thread it will act as the next argument.","name":"thread","type":"thread","default":"current thread"},{"text":"Appended at the beginning of the traceback.","name":"message","type":"string","default":"nil"},{"text":"Which level to start the traceback.","name":"level","type":"number","default":"1"}]},"rets":{"ret":{"text":"A dump of the execution stack.","name":"","type":"string"}}},"example":[{"description":"Prints the traceback into console.","code":"print(debug.traceback())","output":"> print(debug.traceback())...\nstack traceback:\n```\n\n        lua_run:1: in main chunk\n```"},{"description":"Defines two functions that are later visible in the traceback. Enter \"lua_run TracebackTest()\" into the development console to achieve exact results.","code":"function TracebackTest()\n     AnotherTracebackFunction()\nend\n\nfunction AnotherTracebackFunction()\n     print(debug.traceback())\nend","output":"stack traceback:\n```\n\n        lua_run:1: in function 'AnotherTracebackFunction'\n        lua_run:1: in function 'TracebackTest'\n        lua_run:1: in main chunk\n```"}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"setupvalue","parent":"debug","type":"libraryfunc","description":{"text":"Sets the variable indexed from func","removed":"This function was removed due to security concerns."},"realm":"Shared and Menu","args":{"arg":[{"text":"The function to index the upvalue from","name":"func","type":"function"},{"text":"The index from func","name":"index","type":"number"},{"text":"The value to set the upvalue to.","name":"val","type":"any","default":"nil"}]},"rets":{"ret":{"text":"Returns nil if there is no upvalue with the given index, otherwise it returns the upvalue's name.","name":"","type":"string"}}},"example":{"description":"An example demonstrating a function overwrite.","code":"local function my_isfunction(f)\n\treturn type(f) == \"function\" or f == \"coolguy\"\t\nend\n\nprint(debug.setupvalue(hook.Add, 1, my_isfunction))"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Axis","parent":"debugoverlay","type":"libraryfunc","description":{"text":"Displays an axis indicator at the specified position.","note":"This function will silently fail if the **developer** ConVar is set to 0"},"realm":"Shared","args":{"arg":[{"text":"Position origin","name":"origin","type":"Vector"},{"text":"Angle of the axis","name":"ang","type":"Angle"},{"text":"Size of the axis","name":"size","type":"number"},{"text":"Number of seconds to appear","name":"lifetime","type":"number","default":"1"},{"text":"If true, will draw on top of everything; ignoring the Z buffer","name":"ignoreZ","type":"boolean","default":"false"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"upvalueid","parent":"debug","type":"libraryfunc","description":{"text":"Returns an unique identifier for the upvalue indexed from func","removed":"This function was removed due to security concerns."},"realm":"Shared and Menu","args":{"arg":[{"text":"The function to index the upvalue from","name":"func","type":"function"},{"text":"The index from func","name":"index","type":"number"}]},"rets":{"ret":{"text":"A unique identifier","name":"","type":"number"}}},"example":{"description":"Small example showing the type of the returned data.","code":"print(type(debug.upvalueid(hook.Add, 1)))","output":"userdata"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"upvaluejoin","parent":"debug","type":"libraryfunc","description":{"text":"Make the n1-th upvalue of the Lua closure f1 refer to the n2-th upvalue of the Lua closure f2.","removed":"This function was removed due to security concerns."},"realm":"Shared and Menu","args":{"arg":[{"name":"f1","type":"function"},{"name":"n1","type":"number"},{"name":"f2","type":"function"},{"name":"n2","type":"number"}]}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"BoxAngles","parent":"debugoverlay","type":"libraryfunc","description":{"text":"Displays a solid colored rotated box at the specified position.","note":"This function will silently fail if the **developer** ConVar is set to 0."},"realm":"Shared","args":{"arg":[{"text":"World position","name":"pos","type":"Vector"},{"text":"The mins of the box (lowest corner)","name":"mins","type":"Vector"},{"text":"The maxs of the box (highest corner)","name":"maxs","type":"Vector"},{"text":"The angle to draw the box at","name":"ang","type":"Angle"},{"text":"Amount of seconds to show the box","name":"lifetime","type":"number","default":"1"},{"text":"The color of the box. Uses the Color","name":"color","type":"table","default":"Color( 255, 255, 255 )"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Box","parent":"debugoverlay","type":"libraryfunc","description":{"text":"Displays a solid coloured box at the specified position.","note":"This function will silently fail if the **developer** ConVar is set to 0."},"realm":"Shared","args":{"arg":[{"text":"Position origin","name":"origin","type":"Vector"},{"text":"Minimum bounds of the box","name":"mins","type":"Vector"},{"text":"Maximum bounds of the box","name":"maxs","type":"Vector"},{"text":"Number of seconds to appear","name":"lifetime","type":"number","default":"1"},{"text":"The color of the box. Uses the Color","name":"color","type":"table","default":"Color( 255, 255, 255 )"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Cross","parent":"debugoverlay","type":"libraryfunc","description":{"text":"Creates a coloured cross at the specified position for the specified time.","note":"This function will silently fail if the **developer** ConVar is set to 0."},"realm":"Shared","args":{"arg":[{"text":"Position origin","name":"position","type":"Vector"},{"text":"Size of the cross","name":"size","type":"number"},{"text":"Number of seconds the cross to appear","name":"lifetime","type":"number","default":"1"},{"text":"The color of the cross. Uses the Color","name":"color","type":"table","default":"Color( 255, 255, 255 )"},{"text":"If true, will draw on top of everything; ignoring the Z buffer","name":"ignoreZ","type":"boolean","default":"false"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"EntityTextAtPosition","parent":"debugoverlay","type":"libraryfunc","description":{"text":"Displays 2D text at the specified coordinates.","note":"This function will silently fail if the **developer** ConVar is set to 0."},"realm":"Shared","args":{"arg":[{"text":"The position in 3D to display the text.","name":"pos","type":"Vector"},{"text":"Line of text, will offset text on the to display the new line unobstructed","name":"line","type":"number"},{"text":"The text to display","name":"text","type":"string"},{"text":"Number of seconds to appear","name":"lifetime","type":"number","default":"1"},{"text":"The color of the box. Uses the Color","name":"color","type":"table","default":"Color( 255, 255, 255 )"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Sphere","parent":"debugoverlay","type":"libraryfunc","description":{"text":"Displays a coloured sphere at the specified position.","note":"This function will silently fail if the **developer** ConVar is set to 0."},"realm":"Shared","args":{"arg":[{"text":"Position origin","name":"origin","type":"Vector"},{"text":"Size of the sphere","name":"size","type":"number"},{"text":"Number of seconds to appear","name":"lifetime","type":"number","default":"1"},{"text":"The color of the sphere. Uses the Color","name":"color","type":"table","default":"Color( 255, 255, 255 )"},{"text":"If true, will draw on top of everything; ignoring the Z buffer","name":"ignoreZ","type":"boolean","default":"false"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Grid","parent":"debugoverlay","type":"libraryfunc","description":{"text":"Draws a 3D grid of limited size in given position.","note":"This function will silently fail if the **developer** ConVar is set to 0."},"realm":"Shared","args":{"arg":{"name":"position","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ScreenText","parent":"debugoverlay","type":"libraryfunc","description":{"text":"Displays text triangle at the specified coordinates.","note":"This function will silently fail if the **developer** ConVar is set to 0."},"realm":"Shared","args":{"arg":[{"text":"The position of the text, from 0 ( left ) to 1 ( right ).","name":"x","type":"number"},{"text":"The position of the text, from 0 ( top ) to 1 ( bottom ).","name":"y","type":"number"},{"text":"The text to display","name":"text","type":"string"},{"text":"Number of seconds to appear","name":"lifetime","type":"number","default":"1"},{"text":"The color of the box. Uses the Color","name":"color","type":"table","default":"Color( 255, 255, 255 )"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Line","parent":"debugoverlay","type":"libraryfunc","description":{"text":"Displays a coloured line at the specified position.","note":"This function will silently fail if the **developer** ConVar is set to 0."},"realm":"Shared","args":{"arg":[{"text":"First position of the line","name":"pos1","type":"Vector"},{"text":"Second position of the line","name":"pos2","type":"Vector"},{"text":"Number of seconds to appear","name":"lifetime","type":"number","default":"1"},{"text":"The color of the line. Uses the Color","name":"color","type":"table","default":"Color( 255, 255, 255 )"},{"text":"If true, will draw on top of everything; ignoring the Z buffer","name":"ignoreZ","type":"boolean","default":"false"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Color","parent":"derma","type":"libraryfunc","description":"Gets the color from a Derma skin of a panel and returns default color if not found","realm":"Client and Menu","args":{"arg":[{"name":"name","type":"string"},{"name":"pnl","type":"Panel"},{"text":"The default color in case of failure.","name":"default","type":"table"}]}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"SweptBox","parent":"debugoverlay","type":"libraryfunc","description":{"text":"Displays \"swept\" box, two boxes connected with lines by their verices.","note":"This function will silently fail if the **developer** ConVar is set to 0."},"realm":"Shared","args":{"arg":[{"text":"The start position of the box.","name":"vStart","type":"Vector"},{"text":"The end position of the box.","name":"vEnd","type":"Vector"},{"text":"The \"minimum\" edge of the box.","name":"vMins","type":"Vector"},{"text":"The \"maximum\" edge of the box.","name":"vMaxs","type":"Vector"},{"name":"ang","type":"Angle"},{"text":"Number of seconds to appear","name":"lifetime","type":"number","default":"1"},{"text":"The color of the box. Uses the Color","name":"color","type":"table","default":"Color( 255, 255, 255 )"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Triangle","parent":"debugoverlay","type":"libraryfunc","description":{"text":"Displays a colored triangle at the specified coordinates.","note":"This function will silently fail if the **developer** ConVar is set to 0."},"realm":"Shared","args":{"arg":[{"text":"First point of the triangle","name":"pos1","type":"Vector"},{"text":"Second point of the triangle","name":"pos2","type":"Vector"},{"text":"Third point of the triangle","name":"pos3","type":"Vector"},{"text":"Number of seconds to appear","name":"lifetime","type":"number","default":"1"},{"text":"The color of the box. Uses the Color","name":"color","type":"table","default":"Color( 255, 255, 255 )"},{"text":"If true, will draw on top of everything; ignoring the Z buffer","name":"ignoreZ","type":"boolean","default":"false"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"DefineSkin","parent":"derma","type":"libraryfunc","description":"Defines a new skin so that it is usable by Derma. The default skin can be found in `garrysmod/lua/skins/default.lua`","realm":"Client and Menu","args":{"arg":[{"text":"Name of the skin","name":"name","type":"string"},{"text":"Description of the skin","name":"descriptions","type":"string"},{"text":"Table containing skin data","name":"skin","type":"table"}]}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"DefineControl","parent":"derma","type":"libraryfunc","description":"Defines a new Derma control with an optional base.\n\nThis calls vgui.Register internally, but also does the following:\n* Adds the control to derma.GetControlList\n* Adds a key \"Derma\" - This is returned by derma.GetControlList\n* Makes a global table with the name of the control (This is technically deprecated and should not be relied upon)\n* If reloading (i.e. called this function with name of an existing panel), updates all existing instances of panels with this name. (Updates functions, calls PANEL:PreAutoRefresh and PANEL:PostAutoRefresh, etc.)","realm":"Client and Menu","args":{"arg":[{"text":"Name of the newly created control","name":"name","type":"string"},{"text":"Description of the control","name":"description","type":"string"},{"text":"Table containing control methods and properties","name":"tab","type":"table"},{"text":"Derma control to base the new control off of","name":"base","type":"string"}]},"rets":{"ret":{"text":"A table containing the new control's methods and properties","name":"","type":"table"}}},"example":{"description":"Defines a new control based off of DTextEntry that prints to the console whenever it is changed","code":"local PANEL = {}\n\nfunction PANEL:OnChange()\n    print(self:GetValue())\nend\n\nderma.DefineControl(\"MyTextEntry\", \"Printing text entry control\", PANEL, \"DTextEntry\")"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"GetControlList","parent":"derma","type":"libraryfunc","description":"Returns the derma.Controls table, a list of all derma controls registered with derma.DefineControl.","realm":"Client and Menu","rets":{"ret":{"text":"A listing of all available derma-based controls. See derma.Controls for structure and contents.","name":"","type":"table"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"Text","parent":"debugoverlay","type":"libraryfunc","description":{"text":"Displays text at the specified position.","note":"This function will silently fail if the **developer** ConVar is set to 0."},"realm":"Shared","args":{"arg":[{"text":"Position origin","name":"origin","type":"Vector"},{"text":"String message to display","name":"text","type":"string"},{"text":"Number of seconds to appear","name":"lifetime","type":"number","default":"1"},{"text":"Clip text that is obscured","name":"viewCheck","type":"boolean","default":"false"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetDefaultSkin","parent":"derma","type":"libraryfunc","description":"Returns the default skin table, which can be changed with the hook GM:ForceDermaSkin","realm":"Client and Menu","rets":{"ret":{"text":"Skin table","name":"","type":"table"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"RefreshSkins","parent":"derma","type":"libraryfunc","description":"Clears all cached panels so that they reassess which skin they should be using.","realm":"Client and Menu"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"GetSkinTable","parent":"derma","type":"libraryfunc","description":"Returns a copy of the table containing every Derma skin","realm":"Client and Menu","rets":{"ret":{"text":"Table of every Derma skin","name":"","type":"table"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"SkinChangeIndex","parent":"derma","type":"libraryfunc","description":"Returns how many times derma.RefreshSkins has been called.","realm":"Client and Menu","rets":{"ret":{"text":"Amount of times derma.RefreshSkins has been called.","name":"","type":"number"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"GetNamedSkin","parent":"derma","type":"libraryfunc","description":"Returns the skin table of the skin with the supplied name","realm":"Client and Menu","args":{"arg":{"text":"Name of skin","name":"name","type":"string"}},"rets":{"ret":{"text":"Skin table","name":"","type":"table"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"SkinHook","parent":"derma","type":"libraryfunc","description":"Calls the specified hook for the given panel","realm":"Client and Menu","args":{"arg":[{"text":"The type of hook to run","name":"type","type":"string"},{"text":"The name of the hook to run","name":"name","type":"string"},{"text":"The panel to call the hook for","name":"panel","type":"Panel"},{"text":"The width of the panel","name":"w","type":"number"},{"text":"The height of the panel","name":"h","type":"number"}]},"rets":{"ret":{"text":"The returned variable from the skin hook","name":"","type":"any"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"SkinTexture","parent":"derma","type":"libraryfunc","description":"Returns a function to draw a specified texture of panels skin.","realm":"Client and Menu","args":{"arg":[{"text":"The identifier of the texture","name":"name","type":"string"},{"text":"Panel to get the skin of.","name":"pnl","type":"Panel"},{"text":"What to return if we failed to retrieve the texture","name":"fallback","type":"any","default":"nil"}]},"rets":{"ret":{"text":"A function that is created with the GWEN to draw a texture.","name":"","type":"function"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"CallReceiverFunction","parent":"dragndrop","type":"libraryfunc","description":{"text":"Calls the receiver function of hovered panel.","internal":""},"realm":"Client and Menu","file":{"text":"lua/includes/extensions/client/panel/dragdrop.lua","line":"171"},"args":{"arg":[{"text":"true if the mouse was released, false if we right clicked.","name":"bDoDrop","type":"boolean"},{"text":"The command value. This should be the ID of the clicked dropdown menu ( if right clicked, or nil )","name":"command","type":"number"},{"text":"The local to the panel mouse cursor X position when the click happened.","name":"mx","type":"number"},{"text":"The local to the panel  mouse cursor Y position when the click happened.","name":"my","type":"number"}]}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"Drop","parent":"dragndrop","type":"libraryfunc","description":{"text":"Handles the drop action of drag'n'drop library.","internal":""},"realm":"Client and Menu","file":{"text":"lua/includes/extensions/client/panel/dragdrop.lua","line":"42"}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"Clear","parent":"dragndrop","type":"libraryfunc","description":"Clears all the internal drag'n'drop variables.","realm":"Client and Menu","file":{"text":"lua/includes/extensions/client/panel/dragdrop.lua","line":"11"}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"HandleDroppedInGame","parent":"dragndrop","type":"libraryfunc","description":"If returns true, calls dragndrop.StopDragging in dragndrop.Drop. Seems to be broken and does nothing. Is it for override?","realm":"Client and Menu","file":{"text":"lua/includes/extensions/client/panel/dragdrop.lua","line":"34"}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"GetDroppable","parent":"dragndrop","type":"libraryfunc","description":"Returns a table of currently dragged panels.","realm":"Client and Menu","file":{"text":"lua/includes/extensions/client/panel/dragdrop.lua","line":"158"},"args":{"arg":{"text":"If set, the function will return only the panels with this Panel:Droppable name.","name":"name","type":"string","default":"nil"}},"rets":{"ret":{"text":"A table of all panels that are being currently dragged, if any.","name":"","type":"table"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"HoverThink","parent":"dragndrop","type":"libraryfunc","description":{"text":"Handles the hover think. Called from dragndrop.Think.","internal":""},"realm":"Client and Menu","file":{"text":"lua/includes/extensions/client/panel/dragdrop.lua","line":"560"}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"IsDragging","parent":"dragndrop","type":"libraryfunc","description":"Returns whether the user is dragging something with the drag'n'drop system.","realm":"Client and Menu","file":{"text":"lua/includes/extensions/client/panel/dragdrop.lua","line":"26"},"rets":{"ret":{"text":"True if the user is dragging something with the drag'n'drop system.","name":"","type":"boolean"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"StartDragging","parent":"dragndrop","type":"libraryfunc","description":{"text":"Starts the drag'n'drop.","internal":""},"realm":"Client and Menu","file":{"text":"lua/includes/extensions/client/panel/dragdrop.lua","line":"81"}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"Think","parent":"dragndrop","type":"libraryfunc","description":{"text":"Handles all the drag'n'drop processes. Calls dragndrop.UpdateReceiver and dragndrop.HoverThink.","internal":""},"realm":"Client and Menu","file":{"text":"lua/includes/extensions/client/panel/dragdrop.lua","line":"190"}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"Think","parent":"dragndrop","type":"libraryfunc","description":{"text":"Handles all the drag'n'drop processes. Calls dragndrop.UpdateReceiver and dragndrop.HoverThink.","internal":""},"realm":"Client and Menu","file":{"text":"lua/includes/extensions/client/panel/dragdrop.lua","line":"190"}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"UpdateReceiver","parent":"dragndrop","type":"libraryfunc","description":{"text":"Updates the receiver to drop the panels onto. Called from dragndrop.Think.","internal":""},"realm":"Client and Menu","file":{"text":"lua/includes/extensions/client/panel/dragdrop.lua","line":"127"}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"GetFontHeight","parent":"draw","type":"libraryfunc","description":{"text":"Returns the height of the specified font in pixels. This is equivalent to the height of the character `W`. See surface.GetTextSize.","rendercontext":{"hook":"false","type":"2D"}},"realm":"Client and Menu","file":{"text":"lua/includes/modules/draw.lua","line":"33-L49"},"args":{"arg":{"text":"Name of the font to get the height of.","name":"font","type":"string"}},"rets":{"ret":{"text":"The font height","name":"","type":"number"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"NoTexture","parent":"draw","type":"libraryfunc","description":{"text":"Sets drawing texture to a default white texture (vgui/white) via surface.SetMaterial. Useful for resetting the drawing texture.","rendercontext":{"hook":"false","type":"2D"}},"realm":"Client and Menu","file":{"text":"lua/includes/modules/draw.lua","line":"302-L304"}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"DrawText","parent":"draw","type":"libraryfunc","description":{"text":"Simple draw text at position, but this will expand newlines and tabs.\n\n\n\nSee also MarkupObject for limited width and markup support.","rendercontext":{"hook":"false","type":"2D"}},"realm":"Client and Menu","file":{"text":"lua/includes/modules/draw.lua","line":"116-L162"},"args":{"arg":[{"text":"Text to be drawn.","name":"text","type":"string"},{"text":"Name of font to draw the text in. See surface.CreateFont to create your own, or Default Fonts for a list of default fonts.","name":"font","type":"string","default":"DermaDefault"},{"text":"The X Coordinate.","name":"x","type":"number","default":"0"},{"text":"The Y Coordinate.","name":"y","type":"number","default":"0"},{"text":"Color to draw the text in. Uses the Color.","name":"color","type":"table","default":"Color( 255, 255, 255, 255 )"},{"text":"Where to align the text horizontally. Uses the Enums/TEXT_ALIGN.","name":"xAlign","type":"number","default":"TEXT_ALIGN_LEFT"}]}},"example":{"description":"Makes a message saying \"Hello there!\" pop up in the center of your screen.","code":"hook.Add(\"HUDPaint\", \"HelloThere\", function() \n\tdraw.DrawText(\"Hello there!\", \"TargetID\", ScrW() * 0.5, ScrH() * 0.25, Color(255,255,255,255), TEXT_ALIGN_CENTER)\nend)","output":"Hello there!"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"RoundedBox","parent":"draw","type":"libraryfunc","description":{"text":"Draws a rounded rectangle.","note":"If you intend to draw a non-rounded rectangle, then it's more efficient to use surface.DrawRect.","rendercontext":{"hook":"false","type":"2D"}},"realm":"Client and Menu","file":{"text":"lua/includes/modules/draw.lua","line":"164-L173"},"args":{"arg":[{"text":"Radius of the rounded corners, works best with a multiple of 2.","name":"cornerRadius","type":"number"},{"text":"The x coordinate of the top left of the rectangle.","name":"x","type":"number"},{"text":"The y coordinate of the top left of the rectangle.","name":"y","type":"number"},{"text":"The width of the rectangle.","name":"width","type":"number"},{"text":"The height of the rectangle.","name":"height","type":"number"},{"text":"The color to fill the rectangle with. Uses the Color.","name":"color","type":"table"}]}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"SimpleText","parent":"draw","type":"libraryfunc","description":{"text":"Draws text on the screen.","note":"This function does not handle newlines properly. See draw.DrawText for a function that does.","rendercontext":{"hook":"false","type":"2D"}},"realm":"Client and Menu","file":{"text":"lua/includes/modules/draw.lua","line":"51-L94"},"args":{"arg":[{"text":"The text to be drawn.","name":"text","type":"string"},{"text":"The font. See surface.CreateFont to create your own, or see Default Fonts for a list of default fonts.","name":"font","type":"string","default":"DermaDefault"},{"text":"The X Coordinate.","name":"x","type":"number","default":"0"},{"text":"The Y Coordinate.","name":"y","type":"number","default":"0"},{"text":"The color of the text. Uses the Color.","name":"color","type":"table","default":"Color( 255, 255, 255, 255 )"},{"text":"The alignment of the X coordinate using Enums/TEXT_ALIGN.","name":"xAlign","type":"number","default":"TEXT_ALIGN_LEFT"},{"text":"The alignment of the Y coordinate using Enums/TEXT_ALIGN.","name":"yAlign","type":"number","default":"TEXT_ALIGN_TOP"}]},"rets":{"ret":[{"text":"The width of the text. Same value as if you were calling surface.GetTextSize.","name":"","type":"number"},{"text":"The height of the text. Same value as if you were calling surface.GetTextSize.","name":"","type":"number"}]}},"example":{"description":"Example usage","code":"hook.Add( \"HUDPaint\", \"HelloThere\", function()\n\tdraw.SimpleText( \"Hello there!\", \"DermaDefault\", 50, 50, color_white )\nend )"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"Text","parent":"draw","type":"libraryfunc","description":{"text":"Works like draw.SimpleText but uses a table structure instead.","rendercontext":{"hook":"false","type":"2D"}},"realm":"Client and Menu","file":{"text":"lua/includes/modules/draw.lua","line":"255-L263"},"args":{"arg":{"text":"The text properties. See the Structures/TextData","name":"textdata","type":"table"}},"rets":{"ret":[{"text":"Width of drawn text","name":"","type":"number"},{"text":"Height of drawn text","name":"","type":"number"}]}},"example":{"description":"Example usage","code":"hook.Add( \"HUDPaint\", \"drawTextExample\", function()\n\tdraw.Text( {\n\t\ttext = \"test\",\n\t\tpos = { 50, 50 }\n\t} )\nend )"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"SimpleTextOutlined","parent":"draw","type":"libraryfunc","description":{"text":"Creates a simple line of text that is outlined.","rendercontext":{"hook":"false","type":"2D"}},"realm":"Client and Menu","file":{"text":"lua/includes/modules/draw.lua","line":"96-L114"},"args":{"arg":[{"text":"The text to draw.","name":"Text","type":"string"},{"text":"The font name to draw with. See surface.CreateFont to create your own, or  for a list of default fonts.","name":"font","type":"string","default":"DermaDefault","page":",hereDefault_Fonts"},{"text":"The X Coordinate.","name":"x","type":"number","default":"0"},{"text":"The Y Coordinate.","name":"y","type":"number","default":"0"},{"text":"The color of the text. Uses the Color.","name":"color","type":"table","default":"Color( 255, 255, 255, 255 )"},{"text":"The alignment of the X Coordinate using Enums/TEXT_ALIGN.","name":"xAlign","type":"number","default":"TEXT_ALIGN_LEFT"},{"text":"The alignment of the Y Coordinate using Enums/TEXT_ALIGN.","name":"yAlign","type":"number","default":"TEXT_ALIGN_TOP"},{"text":"Width of the outline.","name":"outlinewidth","type":"number"},{"text":"Color of the outline. Uses the Color.","name":"outlinecolor","type":"table","default":"Color( 255, 255, 255, 255 )"}]},"rets":{"ret":[{"text":"The width of the text. Same value as if you were calling surface.GetTextSize.","name":"","type":"number"},{"text":"The height of the text. Same value as if you were calling surface.GetTextSize.","name":"","type":"number"}]}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"TextShadow","parent":"draw","type":"libraryfunc","description":{"text":"Works like draw.Text, but draws the text as a shadow.","rendercontext":{"hook":"false","type":"2D"}},"realm":"Client and Menu","file":{"text":"lua/includes/modules/draw.lua","line":"265-L285"},"args":{"arg":[{"text":"The text properties. See Structures/TextData","name":"textdata","type":"table"},{"text":"How far away the shadow appears.","name":"distance","type":"number"},{"text":"How visible the shadow is (0-255).","name":"alpha","type":"number","default":"200"}]}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"RoundedBoxEx","parent":"draw","type":"libraryfunc","description":{"text":"Draws a rounded rectangle. This function also lets you specify which corners are drawn rounded.","rendercontext":{"hook":"false","type":"2D"}},"realm":"Client and Menu","file":{"text":"lua/includes/modules/draw.lua","line":"175-L233"},"args":{"arg":[{"text":"Radius of the rounded corners, works best with a power of 2 number.","name":"cornerRadius","type":"number"},{"text":"The x coordinate of the top left of the rectangle.","name":"x","type":"number"},{"text":"The y coordinate of the top left of the rectangle.","name":"y","type":"number"},{"text":"The width of the rectangle.","name":"width","type":"number"},{"text":"The height of the rectangle.","name":"height","type":"number"},{"text":"The color to fill the rectangle with. Uses the Color.","name":"color","type":"table"},{"text":"Whether the top left corner should be rounded.","name":"roundTopLeft","type":"boolean","default":"false"},{"text":"Whether the top right corner should be rounded.","name":"roundTopRight","type":"boolean","default":"false"},{"text":"Whether the bottom left corner should be rounded.","name":"roundBottomLeft","type":"boolean","default":"false"},{"text":"Whether the bottom right corner should be rounded.","name":"roundBottomRight","type":"boolean","default":"false"}]}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"TexturedQuad","parent":"draw","type":"libraryfunc","description":{"text":"Draws a texture with a table structure.","rendercontext":{"hook":"false","type":"2D"}},"realm":"Client and Menu","file":{"text":"lua/includes/modules/draw.lua","line":"288-L300"},"args":{"arg":{"text":"The texture properties. See Structures/TextureData.","name":"texturedata","type":"table"}}},"example":{"description":"Example usage with a random texture.","code":"local texturedQuadStructure = {\n\ttexture = surface.GetTextureID( \"phoenix_storms/amraam\" ),\n\tcolor   = Color( 255, 0, 255, 255 ),\n\tx \t= 0,\n\ty \t= 0,\n\tw \t= 512,\n\th \t= 512\n}\n\ndraw.TexturedQuad( texturedQuadStructure )","output":"Renders the texture."},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"CalcView","parent":"drive","type":"libraryfunc","description":{"text":"Optionally alter the view.","internal":""},"realm":"Shared","args":{"arg":[{"text":"The player","name":"ply","type":"Player"},{"text":"The view, see Structures/ViewData","name":"view","type":"table"}]},"rets":{"ret":{"text":"true if succeeded","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"DestroyMethod","parent":"drive","type":"libraryfunc","description":{"text":"Destroys players current driving method.","internal":""},"realm":"Shared","args":{"arg":{"text":"The player to affect","name":"ply","type":"Player"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"CreateMove","parent":"drive","type":"libraryfunc","description":{"text":"Clientside, the client creates the cmd (usercommand) from their input device (mouse, keyboard) and then it's sent to the server. Restrict view angles here.","internal":""},"realm":"Shared","args":{"arg":{"text":"The user command","name":"cmd","type":"CUserCmd"}},"rets":{"ret":{"text":"true if succeeded","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"WordBox","parent":"draw","type":"libraryfunc","description":{"text":"Draws a rounded box with text in it.","rendercontext":{"hook":"false","type":"2D"}},"realm":"Client and Menu","file":{"text":"lua/includes/modules/draw.lua","line":"235-L253"},"args":{"arg":[{"text":"Size of border, should be multiple of 2. Ideally this will be 8 or 16.","name":"bordersize","type":"number"},{"text":"The X Coordinate.","name":"x","type":"number"},{"text":"The Y Coordinate.","name":"y","type":"number"},{"text":"Text to draw.","name":"text","type":"string"},{"text":"Font to draw in. See surface.CreateFont to create your own, or  for a list of default fonts.","name":"font","type":"string","page":",hereDefault_Fonts"},{"text":"The box color. Uses the Color.","name":"boxcolor","type":"table"},{"text":"The text color. Uses the Color.","name":"textcolor","type":"table"}]},"rets":{"ret":[{"text":"The width of the word box.","name":"","type":"number"},{"text":"The height of the word box.","name":"","type":"number"}]}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"End","parent":"drive","type":"libraryfunc","description":"Player has stopped driving the entity.","realm":"Shared","args":{"arg":[{"text":"The player","name":"ply","type":"Player"},{"text":"The entity","name":"ent","type":"Entity"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"FinishMove","parent":"drive","type":"libraryfunc","description":{"text":"The move is finished. Copy mv back into the target.","internal":""},"realm":"Shared","args":{"arg":[{"text":"The player","name":"ply","type":"Player"},{"text":"The move data","name":"mv","type":"CMoveData"}]},"rets":{"ret":{"text":"true if succeeded","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetMethod","parent":"drive","type":"libraryfunc","description":{"text":"Returns ( or creates if inexistent ) a driving method.","internal":""},"realm":"Shared","args":{"arg":{"text":"The player","name":"ply","type":"Player"}},"rets":{"ret":{"text":"A method object.","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetMethod","parent":"drive","type":"libraryfunc","description":{"text":"Returns ( or creates if inexistent ) a driving method.","internal":""},"realm":"Shared","args":{"arg":{"text":"The player","name":"ply","type":"Player"}},"rets":{"ret":{"text":"A method object.","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetMethod","parent":"drive","type":"libraryfunc","description":{"text":"Returns ( or creates if inexistent ) a driving method.","internal":""},"realm":"Shared","args":{"arg":{"text":"The player","name":"ply","type":"Player"}},"rets":{"ret":{"text":"A method object.","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"PlayerStopDriving","parent":"drive","type":"libraryfunc","description":"Stops the player from driving anything. ( For example a prop in sandbox )","realm":"Shared","args":{"arg":{"text":"The player to affect","name":"ply","type":"Player"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"StartMove","parent":"drive","type":"libraryfunc","description":{"text":"The user command is received by the server and then converted into a move. This is also run clientside when in multiplayer, for prediction to work.","internal":""},"realm":"Shared","args":{"arg":[{"text":"The player","name":"ply","type":"Player"},{"text":"The move data","name":"mv","type":"CMoveData"},{"text":"The user command","name":"cmd","type":"CUserCmd"}]},"rets":{"ret":{"text":"true if succeeded","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Start","parent":"drive","type":"libraryfunc","description":"Called when the player first starts driving this entity","realm":"Shared","args":{"arg":[{"text":"The player","name":"ply","type":"Player"},{"text":"The entity","name":"ent","type":"Entity"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Register","parent":"drive","type":"libraryfunc","description":"Registers a new entity drive.","realm":"Shared","args":{"arg":[{"text":"The name of the drive.","name":"name","type":"string"},{"text":"The data required to create the drive. This includes the functions used by the drive.","name":"data","type":"table"},{"text":"The base of the drive.","name":"base","type":"string"}]}},"example":{"description":"Adds a noclip drive type.","code":"drive.Register( \"drive_noclip\", \n{\n\t--\n\t-- Called before each move. You should use your entity and cmd to \n\t-- fill mv with information you need for your move.\n\t--\n\tStartMove =  function( self, mv, cmd )\n\n\t\t--\n\t\t-- Update move position and velocity from our entity\n\t\t--\n\t\tmv:SetOrigin( self.Entity:GetNetworkOrigin() )\n\t\tmv:SetVelocity( self.Entity:GetAbsVelocity() )\n\n\tend,\n\n\t--\n\t-- Runs the actual move. On the client when there's \n\t-- prediction errors this can be run multiple times.\n\t-- You should try to only change mv.\n\t--\n\tMove = function( self, mv )\n\n\t\t--\n\t\t-- Set up a speed, go faster if shift is held down\n\t\t--\n\t\tlocal speed = 0.0005 * FrameTime()\n\t\tif ( mv:KeyDown( IN_SPEED ) ) then speed = 0.005 * FrameTime() end\n\n\t\t--\n\t\t-- Get information from the movedata\n\t\t--\n\t\tlocal ang = mv:GetMoveAngles()\n\t\tlocal pos = mv:GetOrigin()\n\t\tlocal vel = mv:GetVelocity()\n\n\t\t--\n\t\t-- Add velocities. This can seem complicated. On the first line\n\t\t-- we're basically saying get the forward vector, then multiply it\n\t\t-- by our forward speed (which will be > 0 if we're holding W, < 0 if we're\n\t\t-- holding S and 0 if we're holding neither) - and add that to velocity.\n\t\t-- We do that for right and up too, which gives us our free movement.\n\t\t--\n\t\tvel = vel + ang:Forward() * mv:GetForwardSpeed() * speed\n\t\tvel = vel + ang:Right() * mv:GetSideSpeed() * speed\n\t\tvel = vel + ang:Up() * mv:GetUpSpeed() * speed\n\n\t\t--\n\t\t-- We don't want our velocity to get out of hand so we apply\n\t\t-- a little bit of air resistance. If no keys are down we apply\n\t\t-- more resistance so we slow down more.\n\t\t--\n\t\tif ( math.abs(mv:GetForwardSpeed()) + math.abs(mv:GetSideSpeed()) + math.abs(mv:GetUpSpeed()) < 0.1 ) then\n\t\t\tvel = vel * 0.90\n\t\telse\n\t\t\tvel = vel * 0.99\n\t\tend\n\n\t\t--\n\t\t-- Add the velocity to the position (this is the movement)\n\t\t--\n\t\tpos = pos + vel\n\n\t\t--\n\t\t-- We don't set the newly calculated values on the entity itself\n\t\t-- we instead store them in the movedata. These get applied in FinishMove.\n\t\t--\n\t\tmv:SetVelocity( vel )\n\t\tmv:SetOrigin( pos )\n\n\tend,\n\n\t--\n\t-- The move is finished. Use mv to set the new positions\n\t-- on your entities/players.\n\t--\n\tFinishMove =  function( self, mv )\n\n\t\t--\n\t\t-- Update our entity!\n\t\t--\n\t\tself.Entity:SetNetworkOrigin( mv:GetOrigin() )\n\t\tself.Entity:SetAbsVelocity( mv:GetVelocity() )\n\t\tself.Entity:SetAngles( mv:GetMoveAngles() )\n\n\t\t--\n\t\t-- If we have a physics object update that too. But only on the server.\n\t\t--\n\t\tif ( SERVER && IsValid( self.Entity:GetPhysicsObject() ) ) then\n\n\t\t\tself.Entity:GetPhysicsObject():EnableMotion( true )\n\t\t\tself.Entity:GetPhysicsObject():SetPos( mv:GetOrigin() );\n\t\t\tself.Entity:GetPhysicsObject():Wake()\n\t\t\tself.Entity:GetPhysicsObject():EnableMotion( false )\n\n\t\tend\n\n\tend,\n\n\t--\n\t-- Calculates the view when driving the entity\n\t--\n\tCalcView =  function( self, view )\n\n\t\t--\n\t\t-- Use the utility method on drive_base.lua to give us a 3rd person view\n\t\t--\n\t\tlocal idealdist = math.max( 10, self.Entity:BoundingRadius() ) * 4\n\n\t\tself:CalcView_ThirdPerson( view, idealdist, 2, { self.Entity } )\n\n\tend,\n\n}, \"drive_base\" );"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Allow","parent":"duplicator","type":"libraryfunc","description":"Allow this entity to be duplicated","realm":"Shared","file":{"text":"lua/includes/modules/duplicator.lua","line":"297-L304"},"args":{"arg":{"text":"An entity's classname","name":"classname","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ApplyEntityModifiers","parent":"duplicator","type":"libraryfunc","description":"Calls every function registered with duplicator.RegisterEntityModifier on the entity.","realm":"Server","file":{"text":"lua/includes/modules/duplicator.lua","line":"794-L811"},"args":{"arg":[{"text":"The player whose entity this is","name":"ply","type":"Player"},{"text":"The entity in question","name":"ent","type":"Entity"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"ApplyBoneModifiers","parent":"duplicator","type":"libraryfunc","description":"Calls every function registered with duplicator.RegisterBoneModifier on each bone the ent has.","realm":"Server","file":{"text":"lua/includes/modules/duplicator.lua","line":"814-L844"},"args":{"arg":[{"text":"The player whose entity this is","name":"ply","type":"Player"},{"text":"The entity in question","name":"ent","type":"Entity"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"ClearEntityModifier","parent":"duplicator","type":"libraryfunc","description":"Clears/removes the chosen entity modifier from the entity.","realm":"Server","file":{"text":"lua/includes/modules/duplicator.lua","line":"461-L471"},"args":{"arg":[{"text":"The entity the modification is stored on","name":"ent","type":"Entity"},{"text":"The key of the stored entity modifier","name":"key","type":"any"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Copy","parent":"duplicator","type":"libraryfunc","description":"Copies the entity, and all of its constraints and entities, then returns them in a table.","realm":"Server","file":{"text":"lua/includes/modules/duplicator.lua","line":"548-L582"},"args":{"arg":[{"text":"The entity to duplicate. The function will automatically copy all constrained entities.","name":"ent","type":"Entity"},{"text":"A preexisting table to add entities and constraints in from.\nUses the same table format as the table returned from this function.","name":"tableToAdd","type":"table","default":"{}"}]},"rets":{"ret":{"text":"A table containing duplication info which includes the following members:\n* table Entities\n* table Constraints\n* Vector Mins\n* Vector Maxs\n\nThe values of Mins & Maxs from the table are returned from duplicator.WorkoutSize","name":"","type":"table"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"CopyEntTable","parent":"duplicator","type":"libraryfunc","description":"Returns a table with some entity data that can be used to create a new entity with duplicator.CreateEntityFromTable","realm":"Server","file":{"text":"lua/includes/modules/duplicator.lua","line":"492-L501"},"args":{"arg":{"text":"The entity table to save","name":"ent","type":"Entity"}},"rets":{"ret":{"text":"See Structures/EntityCopyData","name":"","type":"table"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"CreateConstraintFromTable","parent":"duplicator","type":"libraryfunc","description":{"text":"Creates a constraint from a saved/copied constraint table.","internal":""},"realm":"Server","file":{"text":"lua/includes/modules/duplicator.lua","line":"652-L695"},"args":{"arg":[{"text":"Saved/copied constraint table","name":"constraint","type":"table"},{"text":"The list of entities that are to be constrained","name":"entityList","type":"table"}]},"rets":{"ret":{"text":"The newly created constraint entity","name":"","type":"Entity"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"CopyEnts","parent":"duplicator","type":"libraryfunc","description":"Copies the passed table of entities to save for later.","realm":"Server","file":{"text":"lua/includes/modules/duplicator.lua","line":"584-L596"},"args":{"arg":{"text":"A table of entities to save/copy.","name":"ents","type":"table"}},"rets":{"ret":{"text":"A table containing duplication info which includes the following members:\n* table Entities\n* table Constraints\n* Vector Mins\n* Vector Maxs","name":"","type":"table"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"CreateEntityFromTable","parent":"duplicator","type":"libraryfunc","description":"\"Create an entity from a table.\" \n\n\nThis creates an entity using the data in EntTable.\n\n\nIf an entity factory has been registered for the entity's Class, it will be called. \n\n\nOtherwise, duplicator.GenericDuplicatorFunction will be called instead.","realm":"Server","file":{"text":"lua/includes/modules/duplicator.lua","line":"598-L649"},"args":{"arg":[{"text":"The player who wants to create something","name":"ply","type":"Player"},{"text":"The duplication data to build the entity with. See Structures/EntityCopyData","name":"entTable","type":"table"}]},"rets":{"ret":{"text":"The newly created entity","name":"","type":"Entity"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"DoFlex","parent":"duplicator","type":"libraryfunc","description":"Restores the flex data using Entity:SetFlexWeight and Entity:SetFlexScale","realm":"Server","file":{"text":"lua/includes/modules/duplicator.lua","line":"370-L386"},"args":{"arg":[{"text":"The entity to restore the flexes on","name":"ent","type":"Entity"},{"text":"The flexes to restore","name":"flex","type":"table"},{"text":"The flex scale to apply. (Flex scale is unchanged if omitted)","name":"scale","type":"number","default":"nil"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"DoBoneManipulator","parent":"duplicator","type":"libraryfunc","description":"\"Restores the bone's data.\"\n\n\nLoops through Bones and calls Entity:ManipulateBoneScale, Entity:ManipulateBoneAngles and Entity:ManipulateBonePosition on ent with the table keys and the subtable values s, a and p respectively.","realm":"Server","file":{"text":"lua/includes/modules/duplicator.lua","line":"388-L404"},"args":{"arg":[{"text":"The entity to be bone manipulated","name":"ent","type":"Entity"},{"text":"Table with a Structures/BoneManipulationData for every bone (that has manipulations applied) using the bone ID as the table index.","name":"bones","type":"table"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"DoGenericPhysics","parent":"duplicator","type":"libraryfunc","description":"\"Applies bone data, generically.\"\n\n\nIf data contains a PhysicsObjects table, it moves, re-angles and if relevent freezes all specified bones, first converting from local coordinates to world coordinates.","realm":"Server","file":{"text":"lua/includes/modules/duplicator.lua","line":"936-L942"},"args":{"arg":[{"text":"The entity to be applied upon","name":"ent","type":"Entity"},{"text":"The player who owns the entity. Unused in function as of early 2013","name":"ply","type":"Player","default":"nil"},{"text":"The data to be applied onto the entity","name":"data","type":"table"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"DoGeneric","parent":"duplicator","type":"libraryfunc","description":"\"Applies generic every-day entity stuff for ent from table data.\"\n\n\nDepending on the values of Model, Angle, Pos, Skin, Flex, Bonemanip, ModelScale, ColGroup, Name, and BodyG (table of multiple values) in the data table, this calls Entity:SetModel, Entity:SetAngles, Entity:SetPos, Entity:SetSkin, duplicator.DoFlex, duplicator.DoBoneManipulator, Entity:SetModelScale, Entity:SetCollisionGroup, Entity:SetName, Entity:SetBodygroup on ent.\n\n\nIf ent has a RestoreNetworkVars function, it is called with data.DT.","realm":"Server","file":{"text":"lua/includes/modules/duplicator.lua","line":"944-L948"},"args":{"arg":[{"text":"The entity to be applied upon","name":"ent","type":"Entity"},{"text":"The data to be applied onto the entity","name":"data","type":"table"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"FindEntityClass","parent":"duplicator","type":"libraryfunc","description":"Returns the entity class factory registered with duplicator.RegisterEntityClass.","realm":"Shared","file":{"text":"lua/includes/modules/duplicator.lua","line":"352-L360"},"args":{"arg":{"text":"The name of the entity class factory","name":"name","type":"string"}},"rets":{"ret":{"text":"Is compromised of the following members:\n* function Func - The function that creates the entity\n* table Args - Arguments to pass to the function","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GenericDuplicatorFunction","parent":"duplicator","type":"libraryfunc","description":"\"Generic function for duplicating stuff\" \n\n\nThis is called when duplicator.CreateEntityFromTable can't find an entity factory to build with. It calls duplicator.DoGeneric and duplicator.DoGenericPhysics to apply standard duplicator stored things such as the model and position.","realm":"Server","file":{"text":"lua/includes/modules/duplicator.lua","line":"406-L442"},"args":{"arg":[{"text":"The player who wants to create something","name":"ply","type":"Player"},{"text":"The duplication data to build the entity with","name":"data","type":"table"}]},"rets":{"ret":{"text":"The newly created entity","name":"","type":"Entity"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetAllConstrainedEntitiesAndConstraints","parent":"duplicator","type":"libraryfunc","description":{"text":"Fills entStorageTable with all of the entities in a group connected with constraints. Fills constraintStorageTable with all of the constrains constraining the group.","internal":""},"realm":"Server","file":{"text":"lua/includes/modules/duplicator.lua","line":"847-L897"},"args":{"arg":[{"text":"The entity to start from","name":"ent","type":"Entity"},{"text":"The table the entities will be inserted into","name":"entStorageTable","type":"table"},{"text":"The table the constraints will be inserted into","name":"constraintStorageTable","type":"table"}]},"rets":{"ret":[{"text":"entStorageTable","name":"","type":"table"},{"text":"constraintStorageTable","name":"","type":"table"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsAllowed","parent":"duplicator","type":"libraryfunc","description":"Returns whether the entity can be duplicated or not","realm":"Shared","file":{"text":"lua/includes/modules/duplicator.lua","line":"306-L313"},"args":{"arg":{"text":"An entity's classname","name":"classname","type":"string"}},"rets":{"ret":{"text":"Returns true if the entity can be duplicated (nil otherwise)","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"RegisterBoneModifier","parent":"duplicator","type":"libraryfunc","description":{"text":"Registers a function to be called on each of an entity's bones when duplicator.ApplyBoneModifiers is called.","note":"This function is available to call on the client, but registered functions aren't used anywhere!"},"realm":"Shared","file":{"text":"lua/includes/modules/duplicator.lua","line":"365"},"args":{"arg":[{"text":"The type of the key doesn't appear to matter, but it is preferable to use a string.","name":"key","type":"any"},{"text":"Function called on each bone that an ent has. Called during duplicator.ApplyBoneModifiers.\nFunction parameters are:\n* Player ply\n* Entity ent\n* number boneID\n* PhysObj bone\n* table data\n\n\nThe data table that is passed to boneModifier is set with duplicator.StoreBoneModifier","name":"boneModifier","type":"function"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Paste","parent":"duplicator","type":"libraryfunc","description":"\"Given entity list and constraint list, create all entities and return their tables\"\n\nCalls duplicator.CreateEntityFromTable on each sub-table of EntityList. If an entity is actually created, it calls ENTITY:OnDuplicated with the entity's duplicator data, then duplicator.ApplyEntityModifiers, duplicator.ApplyBoneModifiers and finally  ENTITY:PostEntityPaste is called.\n\nThe constraints are then created with duplicator.CreateConstraintFromTable.","realm":"Server","file":{"text":"lua/includes/modules/duplicator.lua","line":"697-L791"},"args":{"arg":[{"text":"The player who wants to create something","name":"Player","type":"Player"},{"text":"A table of duplicator data to create the entities from","name":"EntityList","type":"table"},{"text":"A table of duplicator data to create the constraints from","name":"ConstraintList","type":"table"}]},"rets":{"ret":[{"text":"List of created entities","name":"","type":"table"},{"text":"List of created constraints","name":"","type":"table"}]}},"example":{"description":"Code used for a TOOL to copy duplication data on right click and paste it with its original info on left click.","code":"function TOOL:LeftClick( trace )\n\tif (SERVER) then\n\t\tduplicator.Paste(self:GetOwner(),Dupe.Entities,Dupe.Constraints)\n\t\tprint(\"PASTED\")\n\tend\n\treturn true\nend\n \nfunction TOOL:RightClick( trace )\n\tif (SERVER and IsValid(trace.Entity)) then\n\t\tDupe = duplicator.Copy(trace.Entity)\n\t\tprint(\"COPIED\")\n\tend\n\treturn true\nend"},"realms":["Server"],"type":"Function"},
{"function":{"name":"RegisterConstraint","parent":"duplicator","type":"libraryfunc","description":"Register a function used for creating a duplicated constraint.","realm":"Shared","file":{"text":"lua/includes/modules/duplicator.lua","line":"324-L334"},"args":{"arg":[{"text":"The unique name of new constraint","name":"name","type":"string"},{"text":"Function to be called when this constraint is created","name":"callback","type":"function"},{"text":"Arguments passed to the callback function","name":"...","type":"any"}]}},"example":{"description":"This is from lua/includes/modules/constraint.lua, it registers the Weld Constraint.","code":"duplicator.RegisterConstraint( \"Weld\", Weld, \"Ent1\", \"Ent2\", \"Bone1\", \"Bone2\", \"forcelimit\", \"nocollide\", \"deleteonbreak\" )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"RegisterEntityClass","parent":"duplicator","type":"libraryfunc","description":{"text":"This allows you to specify a specific function to be run when your SENT is pasted with the duplicator, instead of relying on the generic automatic functions.","note":"Automatically calls duplicator.Allow for the entity class."},"realm":"Shared","file":{"text":"lua/includes/modules/duplicator.lua","line":"338-L350"},"args":{"arg":[{"text":"The ClassName of the entity you wish to register a factory for","name":"name","type":"string"},{"text":"The factory function you want to have called. It should have the arguments (Player, ...) where ... is whatever arguments you request to be passed. It also should return the entity created, otherwise duplicator.Paste result will not include it!","name":"function","type":"function"},{"text":"Strings of the names of arguments you want passed to function the from the Structures/EntityCopyData. As a special case, \"Data\" will pass the whole structure.","name":"args","type":"vararg"}]}},"example":{"description":"Prints the datatable and then lets the duplicator do it's job","code":"duplicator.RegisterEntityClass(\"prop_physics\", function(ply, data)\n\tPrintTable(data)\n\treturn duplicator.GenericDuplicatorFunction(ply, data)\nend, \"Data\")","output":"```\nSkin = 0\nMins = -14.357550 -14.390250 -25.934851\nFlex:\n\tColGroup = 0\nPos = -292.415070 -157.575043 -12262.056641\nPhysicsObjects:\n\t0:\n\t\tFrozen = false\n\t\tPos = 13.750092 0.490356 -4.675781\n\t\tAngle = 0.057 87.808 -0.031\nClass = prop_physics\nFlexScale = 1\nMaxs = 14.438149 14.405550 25.995348\nModel = models/props_borealis/bluebarrel001.mdl\nAngle = 0.057 134.318 -0.031\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"RegisterEntityModifier","parent":"duplicator","type":"libraryfunc","description":"This allows you to register tweaks to entities. For instance, if you were making an \"unbreakable\" addon, you would use this to enable saving the \"unbreakable\" state of entities between duplications.\n\nThis function registers a piece of generic code that is run on all entities with this modifier. In order to have it actually run, use duplicator.StoreEntityModifier.\n\nThis function does nothing when run clientside.","realm":"Shared","file":{"text":"lua/includes/modules/duplicator.lua","line":"366"},"args":{"arg":[{"text":"An identifier for your modification. This is not limited, so be verbose. `Person's 'Unbreakable' mod` is far less likely to cause conflicts than `unbreakable`","name":"name","type":"string"},{"text":"The function to be called for your modification. It should have the arguments (`Player`, `Entity`, `Data`), where data is what you pass to duplicator.StoreEntityModifier.","name":"func","type":"function"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"RemoveMapCreatedEntities","parent":"duplicator","type":"libraryfunc","description":"Help to remove certain map created entities before creating the saved entities\nThis is obviously so we don't get duplicate props everywhere.\nIt should be called before calling Paste.","realm":"Server","file":{"text":"lua/includes/modules/duplicator.lua","line":"916-L931"}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetLocalAng","parent":"duplicator","type":"libraryfunc","description":"\"When a copy is copied it will be translated according to these.\nIf you set them - make sure to set them back to 0 0 0!\"","realm":"Shared","file":{"text":"lua/includes/modules/duplicator.lua","line":"322"},"args":{"arg":{"text":"The angle to offset all pastes from","name":"v","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"StoreEntityModifier","parent":"duplicator","type":"libraryfunc","description":"Stores an entity modifier into an entity for saving","realm":"Server","file":{"text":"lua/includes/modules/duplicator.lua","line":"444-L459"},"args":{"arg":[{"text":"The entity to store modifier in","name":"entity","type":"Entity"},{"text":"Unique modifier name as defined in duplicator.RegisterEntityModifier","name":"name","type":"string"},{"text":"Modifier data","name":"data","type":"table"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetLocalPos","parent":"duplicator","type":"libraryfunc","description":"\"When a copy is copied it will be translated according to these.\nIf you set them - make sure to set them back to 0 0 0!\"","realm":"Shared","file":{"text":"lua/includes/modules/duplicator.lua","line":"321"},"args":{"arg":{"text":"The position to offset all pastes from","name":"v","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"WorkoutSize","parent":"duplicator","type":"libraryfunc","description":"\"Work out the AABB size\"","realm":"Server","file":{"text":"lua/includes/modules/duplicator.lua","line":"503-L546"},"args":{"arg":{"text":"A table of entity duplication datums.","name":"Ents","type":"table"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"StoreBoneModifier","parent":"duplicator","type":"libraryfunc","description":"Stores bone mod data for a registered bone modification function","realm":"Server","file":{"text":"lua/includes/modules/duplicator.lua","line":"473-L490"},"args":{"arg":[{"text":"The entity to add bone mod data to","name":"ent","type":"Entity"},{"text":"The bone ID.\nSee Entity:GetPhysicsObjectNum","name":"boneID","type":"number"},{"text":"The key for the bone modification","name":"key","type":"any"},{"text":"The bone modification data that is passed to the bone modification function","name":"data","type":"table"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Bubbles","parent":"effects","type":"libraryfunc","description":"Creates a bunch of bubbles inside a defined box.","realm":"Shared","added":"2020.04.29","args":{"arg":[{"text":"The lowest extents of the box.","name":"mins","type":"Vector"},{"text":"The highest extents of the box.","name":"maxs","type":"Vector"},{"text":"How many bubbles to spawn. There's a hard limit of 500 tempents at any time.","name":"count","type":"number"},{"text":"How high the bubbles can fly up before disappearing.","name":"height","type":"number"},{"text":"How quickly the bubbles move.","name":"speed","type":"number","default":"0"},{"text":"Delay in seconds after the function call and before the effect actually spawns.","name":"delay","type":"number","default":"0"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"BeamRingPoint","parent":"effects","type":"libraryfunc","description":"Creates a \"beam ring point\" effect.","realm":"Shared","added":"2020.04.29","args":{"arg":[{"text":"The origin position of the effect.","name":"pos","type":"Vector"},{"text":"How long the effect will be drawing for, in seconds.","name":"lifetime","type":"number"},{"text":"Initial radius of the effect.","name":"startRad","type":"number"},{"text":"Final radius of the effect, at the end of the effect's lifetime.","name":"endRad","type":"number"},{"text":"How thick the beam should be.","name":"width","type":"number"},{"text":"How noisy the beam should be.","name":"amplitude","type":"number"},{"text":"Beam's Global.Color.","name":"color","type":"table"},{"text":"Extra info, all optional. A table with the following keys: (any combination)\n* number speed - ?\n* number spread - ?\n* number delay - Delay in seconds after which the effect should appear.\n* number flags- Beam flags.\n* number framerate - texture framerate.\n* string material - The material to use instead of the default one.","name":"extra","type":"table"}]}},"example":[{"code":"effects.BeamRingPoint( Entity(1):GetEyeTrace().HitPos + Vector( 0, 0, 10 ), 1, 0, 200, 10, 0, Color( 255, 255, 255 ) )","output":{"upload":{"src":"70c/8d7eac74df02356.png","size":"291360","name":"image.png"}}},{"code":"function ENT:DoExplosion()\n\t-- boom\n\tself:EmitSound(\"NPC_CombineBall.Explosion\")\n\tutil.ScreenShake(self:GetPos(), 20, 150, 1, 1250)\n\t\n\tlocal data = EffectData()\n\tdata:SetOrigin(self:GetPos())\n\tutil.Effect(\"cball_explode\",data)\n\t\n\teffects.BeamRingPoint(self:GetPos(), 0.2, 12, 1024, 64, 0, Color(255,255,225,32),{\n\t\tspeed=0,\n\t\tspread=0,\n\t\tdelay=0,\n\t\tframerate=2,\n\t\tmaterial=\"sprites/lgtning.vmt\"\n\t})\n\t-- Shockring\n\teffects.BeamRingPoint(self:GetPos(), 0.5, 12, 1024, 64, 0, Color(255,255,225,64),{\n\t\tspeed=0,\n\t\tspread=0,\n\t\tdelay=0,\n\t\tframerate=2,\n\t\tmaterial=\"sprites/lgtning.vmt\"\n\t})\n\tself:Remove()\nend","output":"Very closely emulates a Combine Ball explosion."}],"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Create","parent":"effects","type":"libraryfunc","description":{"text":"Returns the table of the effect specified.","internal":"You are looking for util.Effect."},"realm":"Client","args":{"arg":{"text":"Effect name.","name":"name","type":"string"}},"rets":{"ret":{"text":"Effect table.","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"BubbleTrail","parent":"effects","type":"libraryfunc","description":"Creates a bubble trail effect, the very same you get when shooting underwater.","realm":"Shared","added":"2020.04.29","args":{"arg":[{"text":"The start position of the effect.","name":"startPos","type":"Vector"},{"text":"The end position of the effects.","name":"endPos","type":"Vector"},{"text":"How many bubbles to spawn. There's a hard limit of 500 tempents at any time.","name":"count","type":"number"},{"text":"How high the bubbles can fly up before disappearing.","name":"height","type":"number"},{"text":"How quickly the bubbles move.","name":"speed","type":"number","default":"0"},{"text":"Delay in seconds after the function call and before the effect actually spawns.","name":"delay","type":"number","default":"0"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetList","parent":"effects","type":"libraryfunc","description":{"text":"Returns a list of all Lua-defined effects.","internal":""},"realm":"Client","added":"2020.04.29","rets":{"ret":{"text":"The effects table.","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Register","parent":"effects","type":"libraryfunc","description":{"text":"Registers a new effect.","internal":""},"realm":"Client","args":{"arg":[{"text":"Effect table.","name":"effect_table","type":"table"},{"text":"Effect name.","name":"name","type":"string"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ActiveGamemode","parent":"engine","type":"libraryfunc","description":"Returns the name of the currently running gamemode.","realm":"Shared and Menu","rets":{"ret":{"text":"The active gamemode's name. This is the name of the gamemode's folder.","name":"","type":"string"}}},"example":{"description":"Prints out the name of the active gamemode.","code":"print( engine.ActiveGamemode() )","output":"```\nsandbox\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"CloseServer","parent":"engine","type":"libraryfunc","description":"Closes the server and completely exits.\n\nThis is only functional when running in server test mode (launch option -systemtest). Server test mode is used internally at Facepunch as part of the build process to make sure that the dedicated servers aren't crashing on startup.","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetAddons","parent":"engine","type":"libraryfunc","description":"Returns a list of addons the player have subscribed to on the workshop.\n\nThis list will also include \"Floating\" .gma addons that are mounted by the game, but not the folder addons.","realm":"Shared and Menu","rets":{"ret":{"text":"A table with 8 keys (downloaded, models, title, file, mounted, wsid, size, updated).","name":"","type":"table"}}},"example":{"description":"Will return a list of all the workshop addons you have downloaded / are downloading.","code":"PrintTable( engine.GetAddons() )","output":"```\n1:\n\t\tdownloaded\t=\ttrue \n\t\tmodels\t\t=\t0 \n\t\ttitle\t\t=\tTitle of Addon \n\t\tfile\t\t=\taddons/title_of_addon_123456789.gma \n\t\tmounted\t\t=\ttrue\n\t\twsid\t\t=\t123456789\n\t\tsize\t\t= \t13379999\n\t\tupdated\t\t=\t37419284747\n\t\ttags\t\t=\n\t\ttimeadded\t=\t4157213484\n\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"GetDemoPlaybackStartTick","parent":"engine","type":"libraryfunc","description":"When starting playing a demo, engine.GetDemoPlaybackTick will be reset and its old value will be added to this functions return value.","realm":"Client and Menu","rets":{"ret":{"name":"","type":"number"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"GetDemoPlaybackTick","parent":"engine","type":"libraryfunc","description":"Current tick of currently loaded demo.\n\nIf not playing a demo, it will return amount of ticks since last demo playback.","realm":"Client and Menu","rets":{"ret":{"text":"The amount of ticks of currently loaded demo.","name":"","type":"number"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"GetDemoPlaybackTimeScale","parent":"engine","type":"libraryfunc","description":"Returns time scale of demo playback.\n\nIf not during demo playback, returns 1.","realm":"Client and Menu","rets":{"ret":{"text":"The time scale of demo playback, value of demo_timescale console variable.","name":"","type":"number"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"GetDemoPlaybackTotalTicks","parent":"engine","type":"libraryfunc","description":"Returns total amount of ticks of currently loaded demo.\n\nIf not playing a demo, returns 0 or the value of last played demo.","realm":"Client and Menu","rets":{"ret":{"text":"Total amount of ticks of currently loaded demo.","name":"","type":"number"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"GetGames","parent":"engine","type":"libraryfunc","description":"Returns an array of tables corresponding to all games from which Garry's Mod supports mounting content.","realm":"Shared and Menu","rets":{"ret":{"text":"A table of tables containing all mountable games","name":"","type":"table"}}},"example":{"description":"Prints out a list of games, their Steam AppIds, titles and status (owned, installed, mounted).","code":"PrintTable( engine.GetGames() )","output":"```\n1:\n depot = 220\n title = Half-Life 2\n owned = true\n folder = hl2\n mounted = true\n installed = true\n2:\n depot = 240\n title = Counter-Strike\n owned = false\n folder = cstrike\n mounted = false\n installed = false\n3:\n depot = 300\n title = Day of Defeat\n owned = false\n folder = dod\n mounted = false\n installed = false\n4:\n depot = 440\n title = Team Fortress 2\n owned = true\n folder = tf\n mounted = true\n installed = true\n```\n\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"GetGamemodes","parent":"engine","type":"libraryfunc","description":"Returns a table containing info for all installed gamemodes","realm":"Shared and Menu","rets":{"ret":{"text":"gamemodes","name":"","type":"table"}}},"example":{"description":"Prints out a list of gamemodes and various info","code":"PrintTable( engine.GetGamemodes() )","output":"```\n1:\n title = Base\n workshopid = \n menusystem = false\n maps = \n name = base\n2:\n title = Sandbox\n workshopid = \n menusystem = true\n maps = ^gm_| ^gmod_\n name = sandbox\n```\n\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"IsPlayingDemo","parent":"engine","type":"libraryfunc","description":"Returns true if we're currently playing a demo.\n\nYou will notice that there's no server-side version of this. That's because there is no server when playing a demo. Demos are both recorded and played back purely clientside.","realm":"Client and Menu","rets":{"ret":{"text":"Whether the game is currently playing a demo or not.","name":"","type":"boolean"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"GetUserContent","parent":"engine","type":"libraryfunc","description":{"text":"Returns the UGC (demos, saves and dupes) the player have subscribed to on the workshop.","deprecated":"Used internally for in-game menus, may be merged in the future into engine.GetAddons."},"realm":"Shared and Menu","rets":{"ret":{"text":"Returns a table with 6 keys (title, type, tags, wsid, timeadded)","name":"","type":"table"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"IsRecordingDemo","parent":"engine","type":"libraryfunc","description":"Returns true if the game is currently recording a demo file (.dem) using gm_demo","realm":"Client and Menu","rets":{"ret":{"text":"Whether the game is currently recording a demo or not.","name":"","type":"boolean"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"LightStyle","parent":"engine","type":"libraryfunc","description":{"text":"This is a direct binding to the function `engine->LightStyle`. This function allows you to change the default light style of the map - so you can make lighting lighter or darker. You’ll need to call render.RedownloadAllLightmaps clientside to refresh the lightmaps to this new color.","bug":{"text":"Calling this function with arguments 0 and \"a\" will cause dynamic lights such as those produced by the Light tool to stop working.","issue":"3626"}},"realm":"Server","args":{"arg":[{"text":"The lightstyle to edit. 0 to 63. If you want to edit map lighting, you want to set this to 0.","name":"lightstyle","type":"number"},{"text":"The pattern to change the lightstyle to. `a` is the darkest, `z` is the brightest. You can use stuff like \"abcxyz\" to make flashing patterns. The normal brightness for a map is `m`. Values over `z` are allowed, `~` for instance.","name":"pattern","type":"string"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"OpenDupe","parent":"engine","type":"libraryfunc","description":"Loads a duplication from the local filesystem.","realm":"Client","args":{"arg":{"text":"Name of the file. e.g, engine.OpenDupe(\"dupes/8b809dd7a1a9a375e75be01cdc12e61f.dupe\")","name":"dupeName","type":"string"}},"rets":{"ret":{"text":"Compressed dupeData. Use util.JSONToTable to make it into a format useable by the duplicator tool.","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetMounted","parent":"engine","type":"libraryfunc","description":"Sets the mounting options for mountable content.","realm":"Menu","args":{"arg":[{"text":"The depot id of the game to mount.","name":"depotID","type":"string"},{"text":"The mount state, true to mount, false to unmount","name":"doMount","type":"boolean"}]}},"realms":["Menu"],"type":"Function"},
{"function":{"name":"TickCount","parent":"engine","type":"libraryfunc","description":"Returns the number of ticks since the game server started.","realm":"Shared","rets":{"ret":{"text":"Number of ticks since the game server started.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ServerFrameTime","parent":"engine","type":"libraryfunc","description":"Returns an estimate of the server's performance. Equivalent to calling Global.FrameTime from the server, according to source code.","realm":"Client","rets":{"ret":[{"text":"Frame time.","name":"","type":"number"},{"text":"Server Framerate Std Deviation.","name":"","type":"number"}]}},"example":{"description":"Get the servers tickrate. Can be used to indicate lag.","code":"print( \"Server Tick: \" .. ( 1 / engine.ServerFrameTime() ) )","output":"```\nServer Tick: 66.666668156783\n```"},"realms":["Client"],"type":"Function"},
{"function":{"name":"VideoSettings","parent":"engine","type":"libraryfunc","description":"Returns video recording settings set by video.Record. Used by Demo-To-Video feature.","realm":"Client","rets":{"ret":{"text":"The video recording settings, see Structures/VideoData.","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"WriteDupe","parent":"engine","type":"libraryfunc","description":"Saves a duplication as a file.","realm":"Client","args":{"arg":[{"text":"Dupe table, encoded by util.TableToJSON and compressed by util.Compress","name":"dupe","type":"string"},{"text":"The dupe icon, created by render.Capture","name":"jpeg","type":"string"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"TickInterval","parent":"engine","type":"libraryfunc","description":"Returns the number of seconds between each gametick.","realm":"Shared and Menu","rets":{"ret":{"text":"Number of seconds between each gametick.","name":"","type":"number"}}},"example":{"code":"print(1 / engine.TickInterval())","output":"66.666668156783 (servertick is 66)"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"WriteSave","parent":"engine","type":"libraryfunc","description":"Stores savedata into the game (can be loaded using the LoadGame menu)","realm":"Client","args":{"arg":[{"text":"Data generated by gmsave.SaveMap","name":"saveData","type":"string"},{"text":"Name the save will have.","name":"name","type":"string"},{"text":"When the save was saved during the game (Put CurTime here)","name":"time","type":"number"},{"text":"The map the save is used for.","name":"map","type":"string"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"CreateClientProp","parent":"ents","type":"libraryfunc","description":"Creates a clientside only prop. See also Global.ClientsideModel.\n\nFor physics to work you **must** use the _model_ argument, a simple `SetModel` call will not be enough.","realm":"Client","args":{"arg":{"text":"The model for the entity to be created.","name":"model","type":"string","default":"models/error.mdl","warning":"Model must be precached with util.PrecacheModel on the server before usage."}},"rets":{"ret":{"text":"Created entity (`C_PhysPropClientside`).","name":"","type":"Entity"}}},"example":[{"description":"Creates a clientside prop at the player location.","code":"function GhostBarrel( ply )\n\tlocal c_Model = ents.CreateClientProp()\n\tc_Model:SetPos( ply:GetPos() )\n\tc_Model:SetModel( \"models/props_borealis/bluebarrel001.mdl\" )\n\tc_Model:SetParent( ply )\n\tc_Model:Spawn()\nend"},{"description":"Creates a clientside prop with physics.","code":"concommand.Add( \"testent\", function( ply )\n\tlocal plyTr = ply:GetEyeTrace()\n\n\tlocal csEnt = ents.CreateClientProp( \"models/props_combine/combine_light001b.mdl\" )\n\tcsEnt:SetPos( plyTr.HitPos + plyTr.HitNormal * 24 )\n\tcsEnt:Spawn()\nend )"}],"realms":["Client"],"type":"Function"},
{"function":{"name":"CreateClientside","parent":"ents","type":"libraryfunc","description":"Creates a clientside only scripted entity. The scripted entity must be of \"anim\" type.","realm":"Client","args":{"arg":{"text":"The class name of the entity to create.","name":"class","type":"string"}},"rets":{"ret":{"text":"Created entity.","name":"","type":"Entity"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Create","parent":"ents","type":"libraryfunc","description":{"text":"Creates an entity. This function will fail and return `NULL` if the networked-edict limit is hit (around **8176**), or the provided entity class doesn't exist.","warning":"Do not use before GM:InitPostEntity has been called, otherwise the server will crash!\nIf you need to perform entity creation when the game starts, create a hook for GM:InitPostEntity and do it there."},"realm":"Server","args":{"arg":{"text":"The classname of the entity to create.","name":"class","type":"string"}},"rets":{"ret":{"text":"The created entity, or `NULL` if failed.","name":"","type":"Entity"}}},"example":{"description":"Creates a gmod_button entity near `Vector(0, 0, 0)`.","code":"local button = ents.Create( \"gmod_button\" )\nbutton:SetModel( \"models/dav0r/buttons/button.mdl\" )\nbutton:SetPos( Vector( 0, 0, 100 ) )\nbutton:Spawn()"},"realms":["Server"],"type":"Function"},
{"function":{"name":"FindAlongRay","parent":"ents","type":"libraryfunc","description":"Returns a table of all entities along the ray. The ray does not stop on collisions, meaning it will go through walls/entities.","realm":"Shared","args":{"arg":[{"text":"The start position of the ray","name":"start","type":"Vector"},{"text":"The end position of the ray","name":"end","type":"Vector"},{"text":"The mins corner of the ray","name":"mins","type":"Vector","default":"nil"},{"text":"The maxs corner of the ray","name":"maxs","type":"Vector","default":"nil"}]},"rets":{"ret":{"text":"Table of the found entities.","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"FindByClass","parent":"ents","type":"libraryfunc","description":{"text":"Gets all entities with the given class, supports wildcards. This works internally by iterating over ents.GetAll. Even if internally ents.GetAll is used, It is faster to use ents.FindByClass than ents.GetAll with a single class comparison.","note":"Asterisks (*) are the only wildcard supported."},"realm":"Shared","args":{"arg":{"text":"The class of the entities to find.","name":"class","type":"string"}},"rets":{"ret":{"text":"A table containing all found entities","name":"","type":"table"}}},"example":{"description":"Prints the location of every prop on the map.","code":"for k, v in ipairs( ents.FindByClass( \"prop_*\" ) ) do\n\tprint( v:GetPos() )\nend","output":"The location of each prop on the map. In gm_construct, the output might be as follows:\n\n\n```\n-2936.288818 -1376.545532 -73.852913\n-2943.928467 -1375.800171 -84.964996\n-2932.637695 -1288.051636 -76.791924\n-2064.000000 -183.000000 -179.216003\n-2384.000000 -183.000000 -179.216003\n-2704.000000 -183.000000 -179.216003\n-1744.000000 -183.000000 -179.216003\n-1424.000000 -183.000000 -179.216003\n-3019.895020 -1095.824829 -78.900757\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"FindByClassAndParent","parent":"ents","type":"libraryfunc","description":"Finds all entities that are of given class and are children of given entity. This works internally by iterating over ents.GetAll.","realm":"Shared","file":{"text":"lua/includes/extensions/ents.lua","line":"2"},"args":{"arg":[{"text":"The class of entities to search for","name":"class","type":"string"},{"text":"Parent of entities that are being searched for","name":"parent","type":"Entity"}]},"rets":{"ret":{"text":"A table of found entities or nil if none are found","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"FindByModel","parent":"ents","type":"libraryfunc","description":{"text":"Gets all entities with the given model, supports wildcards. This works internally by iterating over ents.GetAll.","bug":{"text":"This currently only supports trailing asterisks (*) for wildcards.","issue":"2872"}},"realm":"Shared","args":{"arg":{"text":"The model of the entities to find.","name":"model","type":"string"}},"rets":{"ret":{"text":"A table of all found entities.","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"FindByName","parent":"ents","type":"libraryfunc","description":{"text":"Gets all entities with the given hammer targetname. This works internally by iterating over ents.GetAll.\n\n\n\nDoesn't do anything on client.","note":"A player's Name is his nickname, see Player:GetName"},"realm":"Shared","args":{"arg":{"text":"The targetname to look for","name":"name","type":"string"}},"rets":{"ret":{"text":"A table of all found entities","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"FindInBox","parent":"ents","type":"libraryfunc","description":{"text":"Returns all entities within the specified box.","note":"Clientside entities will not be returned by this function.","warning":"There is a limit of 512 entities for the output!"},"realm":"Shared","args":{"arg":[{"text":"The box minimum coordinates.","name":"boxMins","type":"Vector"},{"text":"The box maximum coordinates.","name":"boxMaxs","type":"Vector"}]},"rets":{"ret":{"text":"A table of all found entities.","name":"","type":"table"}}},"example":{"description":"Returns a table of players in a box using ents.FindInBox","code":"function ents.FindPlayersInBox( vCorner1, vCorner2 )\n\tlocal tEntities = ents.FindInBox( vCorner1, vCorner2 )\n\tlocal tPlayers = {}\n\tlocal iPlayers = 0\n\t\n\tfor i = 1, #tEntities do\n\t\tif ( tEntities[ i ]:IsPlayer() ) then\n\t\t\tiPlayers = iPlayers + 1\n\t\t\ttPlayers[ iPlayers ] = tEntities[ i ]\n\t\tend\n\tend\n\t\n\treturn tPlayers, iPlayers\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"FindInPVS","parent":"ents","type":"libraryfunc","description":{"text":"Finds all entities that lie within a [PVS](https://developer.valvesoftware.com/wiki/PVS).","note":"The function won't take in to account Global.AddOriginToPVS and the like."},"realm":"Server","args":{"arg":{"text":"Entity or Vector to find entities within the PVS of. If a player is given, this function will use the player's view entity.","name":"viewPoint","type":"any"}},"rets":{"ret":{"text":"The found Entitys.","name":"","type":"table"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"FindInSphere","parent":"ents","type":"libraryfunc","description":{"text":"Gets all entities within the specified sphere.","note":"Clientside entities will not be returned by this function."},"realm":"Shared","args":{"arg":[{"text":"Center of the sphere.","name":"origin","type":"Vector"},{"text":"Radius of the sphere.","name":"radius","type":"number"}]},"rets":{"ret":{"text":"A table of all found Entitys. Has a limit of 1024 entities.","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"FindInCone","parent":"ents","type":"libraryfunc","description":{"text":"Finds and returns all entities within the specified cone. Only entities whose Entity:WorldSpaceCenter is within the cone are considered to be in it.\n\nThe \"cone\" is actually a conical \"slice\" of an axis-aligned box (see: ents.FindInBox). The image to the right shows approximately how this function would look in 2D. Due to this, the entity may be farther than the specified range!","image":{"src":"ents.FindInCone.png","alt":"2D_visualization_of_the_actual_shape_of_the_cone,_click_to_enlarge"},"note":"Clientside entities will not be returned by this function.","warning":"If there are more than 512 entities in the axis-aligned box around the origin, then the result may be incomplete!"},"realm":"Shared","args":{"arg":[{"text":"The tip of the cone.","name":"origin","type":"Vector"},{"text":"Direction of the cone.","name":"normal","type":"Vector"},{"text":"The range of the cone/box around the origin.","name":"range","type":"number","note":"The function internally adds 1 to this argument before using it."},{"text":"The  of the angle between the center of the cone to its edges, which is half the overall angle of the cone.\n\n1 makes a 0° cone, 0.707 makes approximately 90°, 0 makes 180°, and so on.","name":"angle_cos","type":"number","page":",cosinemath.cos"}]},"rets":{"ret":{"text":"A table of all found Entitys.","name":"","type":"table"}}},"example":{"description":"An example usage of this function. This example shows which entities are being returned by the function with red lines and the range with white transparent box.","code":"local mat = Material( \"models/shiny\" )\nmat:SetFloat( \"$alpha\", 0.5 )\n\nhook.Add( \"PostDrawOpaqueRenderables\", \"conetest\", function()\n\tlocal size = 200\n\tlocal dir = LocalPlayer():GetAimVector()\n\tlocal angle = math.cos( math.rad( 15 ) ) -- 15 degrees\n\tlocal startPos = LocalPlayer():EyePos()\n\n\tlocal entities = ents.FindInCone( startPos, dir, size, angle )\n\n\t-- draw the outer box\n\tlocal mins = Vector( -size, -size, -size )\n\tlocal maxs = Vector( size, size, size )\n\n\trender.SetMaterial( mat )\n\trender.DrawWireframeBox( startPos, Angle( 0, 0, 0 ), mins, maxs, color_white, true )\n\trender.DrawBox( startPos, Angle( 0, 0, 0 ), -mins, -maxs, color_white )\n\n\t-- draw the lines\n\tfor id, ent in ipairs( entities ) do\n\t\trender.DrawLine( ent:WorldSpaceCenter() - dir * ( ent:WorldSpaceCenter()-startPos ):Length(), ent:WorldSpaceCenter(), Color( 255, 0, 0 ) )\n\tend\nend )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetAll","parent":"ents","type":"libraryfunc","description":"Returns a table of all existing entities. The table is sequential","realm":"Shared","rets":{"ret":{"text":"Table of all existing Entitys.","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetByIndex","parent":"ents","type":"libraryfunc","description":"Returns an entity by its index. Same as Global.Entity.","realm":"Shared","args":{"arg":{"text":"The index of the entity.","name":"entIdx","type":"number"}},"rets":{"ret":{"text":"The entity if it exists.","name":"","type":"Entity"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetCount","parent":"ents","type":"libraryfunc","description":{"text":"Gives you the amount of currently existing entities.","note":"Similar to **#**ents.GetAll() but with better performance since the entity table doesn't have to be generated. If ents.GetAll is already being called for iteration, than using the **#** operator on the table will be faster than calling this function since it is JITted."},"realm":"Shared","args":{"arg":{"text":"Include entities with the FL_KILLME flag. This will skip an internal loop, and the function will be more efficient as a byproduct.","name":"IncludeKillMe","type":"boolean","default":"false"}},"rets":{"ret":{"text":"Number of entities","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetEdictCount","parent":"ents","type":"libraryfunc","description":"Returns the amount of networked entities, which is limited to 8192. ents.Create will fail somewhere between 8064 and 8176 - this can vary based on the amount of existing temp ents.","realm":"Server","rets":{"ret":{"text":"Number of networked entities","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetMapCreatedEntity","parent":"ents","type":"libraryfunc","description":"Returns entity that has given Entity:MapCreationID.","realm":"Server","args":{"arg":{"text":"Entity's creation id","name":"id","type":"number"}},"rets":{"ret":{"text":"Found entity","name":"","type":"Entity"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"FireTargets","parent":"ents","type":"libraryfunc","description":"Fires a use event.","realm":"Server","args":{"arg":[{"text":"Name of the target entity.","name":"target","type":"string"},{"text":"Activator of the event.","name":"activator","type":"Entity"},{"text":"Caller of the event.","name":"caller","type":"Entity"},{"text":"Use type. See the Enums/USE.","name":"usetype","type":"number"},{"text":"This value is passed to ENTITY:Use, but isn't used by any default entities in the engine.","name":"value","type":"number"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Append","parent":"file","type":"libraryfunc","description":"Appends a file relative to the `data` folder.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/file.lua","line":"31-L39"},"args":{"arg":[{"text":"The file's name.","name":"name","type":"string"},{"text":"The content which should be appended to the file.","name":"content","type":"string"}]}},"example":{"description":"Adds \"Append!\" to `helloworld.txt`, then prints it.","code":"file.Append( \"helloworld.txt\", \"Append!\" )\n\nprint( file.Read( \"helloworld.txt\", \"DATA\" ) )","output":"This is the content!Append!"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"AsyncRead","parent":"file","type":"libraryfunc","description":"Returns the content of a file asynchronously.\n\nAll limitations of file.Read also apply.","realm":"Shared and Menu","added":"2021.03.31","args":{"arg":[{"text":"The name of the file.","name":"fileName","type":"string"},{"text":"The path to look for the files and directories in. See  for a list of valid paths.","name":"gamePath","type":"string","page":",this listFile_Search_Paths"},{"text":"A callback function that will be called when the file read operation finishes. Arguments are:\n* string fileName - The `fileName` argument above.\n* string gamePath - The `gamePath` argument above.\n* number status - The status of the operation.\n* string data - The entirety of the data of the file.","name":"callback","type":"function"},{"text":"If `true` the file will be read synchronously.","name":"sync","type":"boolean","default":"false"}]}},"example":{"description":"Prints the SteamIDs of players who will be automatically assigned to a user group when they connect to a server (Sandbox gamemode and derived).","code":"file.AsyncRead( \"settings/users.txt\", \"GAME\", function( fileName, gamePath, status, data )\n\tif ( status == FSASYNC_OK ) then\n\t\tPrintTable( util.KeyValuesToTable( data ) )\n\tend\nend)","output":"```\nadmin:\n                garry   =       STEAM_0:1:7099\nsuperadmin:\n                garry   =       STEAM_0:1:7099\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Delete","parent":"file","type":"libraryfunc","description":"Deletes a file or `empty` folder that is relative to the **data** folder. You can't remove any files outside of **data** folder.","realm":"Shared and Menu","args":{"arg":{"text":"The file name.","name":"name","type":"string"}}},"example":{"description":"Deletes **data/helloworld.txt** file.","code":"file.Delete( \"helloworld.txt\" )"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"CreateDir","parent":"file","type":"libraryfunc","description":"Creates a directory that is relative to the `data` folder.","realm":"Shared and Menu","args":{"arg":{"text":"The directory's name.","name":"name","type":"string"}}},"example":[{"description":"Creates a directory named `sample` in the `data` folder.","code":"file.CreateDir(\"sample\")"},{"description":"This function will create all subfolders you specify.","code":"file.CreateDir(\"a/b/c/d/e/f/g\")","output":"A folder named `a` is created in the data folder, which contains the folder named `b`, which contains a folder named `c`, etc."}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Exists","parent":"file","type":"libraryfunc","description":{"text":"Returns a boolean of whether the file or directory exists or not.","bug":{"text":"This will sometimes return false clientside for directories received from the server via a clientside lua file. You can work around this by using file.Find with the path to the directory followed by a wildcard (no trailing forward slash) and see if the directory is inside the returned directories table (**see second example)**.","issue":"1038"}},"realm":"Shared and Menu","args":{"arg":[{"text":"The file or directory's name.","name":"name","type":"string"},{"text":"The path to look for the files and directories in. See  for a list of valid paths.","name":"gamePath","type":"string","page":",this listFile_Search_Paths"}]},"rets":{"ret":{"text":"Returns `true` if the file exists and `false` if it does not.","name":"","type":"boolean"}}},"example":[{"description":"Prints whether the `data` folder exists in the base directory.","code":"print( file.Exists( \"data\", \"GAME\" ) )","output":"```\ntrue\n```"},{"description":"Workaround for issue [#1038](https://github.com/Facepunch/garrysmod-issues/issues/1038).","code":"local _, folders = file.Find( \"path/to/dir*\", \"LUA\" )\n\nfor _, v in ipairs( folders ) do\n\tif v == \"dir\" then\n\t\tprint( \"Directory found!\" )\n\t\tbreak\n\tend\nend"}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Find","parent":"file","type":"libraryfunc","description":"Returns a list of files and directories inside a single folder.","realm":"Shared and Menu","args":{"arg":[{"text":"The wildcard to search for. `models/*.mdl` will list **.mdl** files in the `models/` folder.","name":"name","type":"string"},{"text":"The path to look for the files and directories in. See  for a list of valid paths.","name":"path","type":"string","page":",this listFile_Search_Paths"},{"text":"The sorting to be used, **optional**.\n\n* `nameasc` sort the files ascending by name.\n* `namedesc` sort the files descending by name.\n* `dateasc` sort the files ascending by date.\n* `datedesc` sort the files descending by date.","name":"sorting","type":"string","default":"nameasc"}]},"rets":{"ret":[{"text":"A table of found files, or `nil` if the path is invalid","name":"","type":"table"},{"text":"A table of found directories, or `nil` if the path is invalid","name":"","type":"table"}]}},"example":{"description":"Prints the first file and the first directory in the `data` folder.","code":"local files, directories = file.Find( \"*\", \"DATA\" )\n\nprint( \"File: \" .. files[1], \"Folder: \" .. directories[1] )","output":"```\nFile: helloworld.txt\nFolder: ctp\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Open","parent":"file","type":"libraryfunc","description":"Attempts to open a file with the given mode.","realm":"Shared and Menu","args":{"arg":[{"text":"The files name. See file.Write for details on filename restrictions when writing to files.","name":"fileName","type":"string"},{"text":"The mode to open the file in. Possible values are:\n* **r** - read mode\n* **w** - write mode\n* **a** - append mode\n* **rb** - binary read mode\n* **wb** - binary write mode\n* **ab** - binary append mode","name":"fileMode","type":"string"},{"text":"The path to look for the files and directories in. See  for a list of valid paths.","name":"gamePath","type":"string","page":",this listFile_Search_Paths"}]},"rets":{"ret":{"text":"The opened file object, or `nil` if it failed to open due to it not existing or being used by another process.","name":"File","type":"file_class"}}},"example":{"description":"Open a file in read only mode, reads a line, tells where the current file pointer is at and then closes the file handle.","code":"local f = file.Open( \"cfg/mapcycle.txt\", \"r\", \"MOD\" )\nprint( f:ReadLine() )\nprint( f:ReadLine() )\nprint( f:Tell() )\nf:Close()","output":"```\n//\n// Default mapcycle file for Garry's Mod.\n45\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"IsDir","parent":"file","type":"libraryfunc","description":{"text":"Returns whether the given file is a directory or not.","bug":{"text":"This will sometimes return false clientside for directories received from the server via a clientside lua file. You can work around this by using file.Find with the path to the directory followed by a wildcard (no trailing forward slash) and see if the directory is inside the returned directories table (**see second example)**.","issue":"1038"}},"realm":"Shared and Menu","args":{"arg":[{"text":"The file or directory's name.","name":"fileName","type":"string"},{"text":"The path to look for the files and directories in. See  for a list of valid paths.","name":"gamePath","type":"string","page":",this listFile_Search_Paths"}]},"rets":{"ret":{"text":"`true` if the given path is a directory or `false` if it's a file.","name":"","type":"boolean"}}},"example":[{"description":"Prints if `helloworld.txt` is a directory.","code":"print( file.IsDir( \"helloworld.txt\", \"DATA\" ) )","output":"```\nfalse\n```"},{"description":"Workaround for issue [#1038](https://github.com/Facepunch/garrysmod-issues/issues/1038).","code":"local _, folders = file.Find( \"path/to/dir*\", \"LUA\" )\n\nfor _, v in ipairs( folders ) do\n\tif v == \"dir\" then\n\t\tprint( \"Directory found!\" )\n\t\tbreak\n\tend\nend"}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Read","parent":"file","type":"libraryfunc","description":{"text":"Returns the content of a file.","warning":"Beware of casing -- some filesystems are case-sensitive. SRCDS on Linux seems to force file/directory creation to lowercase, but will not modify read operations."},"realm":"Shared and Menu","file":{"text":"lua/includes/extensions/file.lua","line":"4-L19"},"args":{"arg":[{"text":"The name of the file.","name":"fileName","type":"string"},{"text":"The path to look for the files and directories in. See  for a list of valid paths.","name":"gamePath","type":"string","page":",this listFile_Search_Paths"}]},"rets":{"ret":{"text":"The data from the file as a string, or `nil` if the file isn't found.","name":"","type":"string"}}},"example":{"description":"Prints out the content of `helloworld.txt`.","code":"print( file.Read( \"helloworld.txt\", \"DATA\" ) )","output":"```\nThis is the content!\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Rename","parent":"file","type":"libraryfunc","description":"Attempts to rename a file with the given name to another given name.\n\nThis function is constrained to the `data/` folder.","realm":"Shared and Menu","args":{"arg":[{"text":"The original file or folder name. See file.Write for details on filename restrictions when writing to files.\n\n**This argument will be forced lowercase.**","name":"orignalFileName","type":"string"},{"text":"The target file or folder name. See file.Write for details on filename restrictions when writing to files.\n\n**This argument will be forced lowercase.**","name":"targetFileName","type":"string"}]},"rets":{"ret":{"text":"`true` on success, `false` otherwise.","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Time","parent":"file","type":"libraryfunc","description":"Returns when the file or folder was last modified in Unix time.","realm":"Shared and Menu","args":{"arg":[{"text":"The **file** or **folder** path.","name":"path","type":"string"},{"text":"The path to look for the files and directories in. See  for a list of valid paths.","name":"gamePath","type":"string","page":",this listFile_Search_Paths"}]},"rets":{"ret":{"text":"Seconds passed since Unix epoch.","name":"","type":"number"}}},"example":[{"description":"Prints out the last modified date of **file** helloworld.txt","code":"print( os.date(\"%d.%m.%Y\", file.Time(\"helloworld.txt\", \"DATA\") ) )","output":"04.08.2012"},{"description":"Prints out the last modified date of **folder** lua","code":"print( os.date( \"%d.%m.%Y\", file.Time( \"lua\", \"GAME\" ) ) )","output":"31.01.2016"}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Size","parent":"file","type":"libraryfunc","description":"Returns the file's size in bytes. If the file is not found, returns `-1`.","realm":"Shared and Menu","args":{"arg":[{"text":"The file's name.","name":"fileName","type":"string"},{"text":"The path to look for the files and directories in. See  for a list of valid paths.","name":"gamePath","type":"string","page":",this listFile_Search_Paths"}]}},"example":{"description":"Prints the size of `helloworld.txt`.","code":"print( file.Size(\"helloworld.txt\", \"DATA\") )","output":"8"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Write","parent":"file","type":"libraryfunc","description":"Writes the given string to a file. Erases all previous data in the file. To add data without deleting previous data, use file.Append.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/file.lua","line":"21-L29"},"args":{"arg":[{"text":"The name of the file being written into. The path is relative to the **data/** folder.\n\nThis argument will be forced lowercase.\n\nThe filename **must** end with one of the following:\n* .txt\n* .dat\n* .json\n* .xml\n* .csv\n* .jpg\n* .jpeg\n* .png\n* .vtf\n* .vmt\n* .mp3\n* .wav\n* .ogg\n\nRestricted symbols are: `\" :`","name":"fileName","type":"string"},{"text":"The content that will be written into the file.","name":"content","type":"string"}]}},"example":{"description":"Writes to **data/helloworld.txt**.","code":"file.Write( \"helloworld.txt\", \"This is the content!\" )"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"AddFrame","parent":"frame_blend","type":"libraryfunc","description":{"text":"Adds a frame to the blend. Calls frame_blend.CompleteFrame once enough frames have passed since last frame_blend.CompleteFrame call.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"CompleteFrame","parent":"frame_blend","type":"libraryfunc","description":{"text":"Renders the frame onto internal render target.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"BlendFrame","parent":"frame_blend","type":"libraryfunc","description":{"text":"Blends the frame(s).","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsActive","parent":"frame_blend","type":"libraryfunc","description":"Returns whether frame blend post processing effect is enabled or not.","realm":"Client","rets":{"ret":{"text":"Is frame blend enabled or not","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"DrawPreview","parent":"frame_blend","type":"libraryfunc","description":{"text":"Actually draws the frame blend effect.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsLastFrame","parent":"frame_blend","type":"libraryfunc","description":{"text":"Returns whether the current frame is the last frame?","internal":""},"realm":"Client","rets":{"ret":{"text":"Whether the current frame is the last frame?","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"RenderableFrames","parent":"frame_blend","type":"libraryfunc","description":{"text":"Returns amount of frames needed to render?","internal":""},"realm":"Client","rets":{"ret":{"text":"Amount of frames needed to render?","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ShouldSkipFrame","parent":"frame_blend","type":"libraryfunc","description":"Returns whether we should skip frame or not","realm":"Client","rets":{"ret":{"text":"Should the frame be skipped or not","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddAmmoType","parent":"game","type":"libraryfunc","description":{"text":"Adds a new ammo type to the game.\n\nYou can find a list of default ammo types [here](https://wiki.facepunch.com/gmod/Default_Ammo_Types).","warning":"This function **must** be called on both the client and server in GM:Initialize or you will have unexpected problems.","note":"There is a limit of 256 ammo types, including the default ones."},"realm":"Shared","file":{"text":"lua/includes/extensions/game.lua","line":"2-L40"},"args":{"arg":{"text":"The attributes of the ammo. See the Structures/AmmoData.","name":"ammoData","type":"table"}}},"example":{"description":"Add an ammo type.","code":"game.AddAmmoType( {\n\tname = \"ammo_9mm_max\",\n\tdmgtype = DMG_BULLET,\n\ttracer = TRACER_LINE,\n\tplydmg = 0,\n\tnpcdmg = 0,\n\tforce = 2000,\n\tminsplash = 10,\n\tmaxsplash = 5\n} )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"AddDecal","parent":"game","type":"libraryfunc","description":{"text":"Registers a new decal.","warning":"There's a rather low limit of around 256 for decal materials that may be registered and they are not cleared on map load."},"realm":"Shared","args":{"arg":[{"text":"The name of the decal.","name":"decalName","type":"string"},{"text":"The material to be used for the decal. May also be a list of material names, in which case a random material from that list will be chosen every time the decal is placed.","name":"materialName","type":"string"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"AddParticles","parent":"game","type":"libraryfunc","description":{"text":"Loads a particle file.","note":"You will still need to call this function clientside regardless if you create the particle effects serverside."},"realm":"Shared","args":{"arg":{"text":"The path of the file to add. Must be (file).pcf.","name":"particleFileName","type":"string"}}},"example":{"description":"Example usage of the function. Precaches \"ExplosionCore_wall\" particle from \"particles/explosion.pcf\", a Team Fortress 2 particle file.\n\nYou can find a list of particles inside a .pcf file using the [Particle Editor Tool](https://developer.valvesoftware.com/wiki/Particle_Editor)","code":"game.AddParticles( \"particles/explosion.pcf\" )\nPrecacheParticleSystem( \"ExplosionCore_wall\" )\n\nif ( SERVER ) then\n\t-- A test console command to see if the particle works, spawns the particle where the player is looking at. \n\tconcommand.Add( \"particleitup\", function( ply, cmd, args )\n\t\tParticleEffect( \"ExplosionCore_wall\", ply:GetEyeTrace().HitPos, Angle( 0, 0, 0 ) )\n\tend )\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"BuildAmmoTypes","parent":"game","type":"libraryfunc","description":{"text":"Called by the engine to retrieve the ammo types.","internal":"Consider using game.GetAmmoTypes and game.GetAmmoData instead."},"realm":"Shared","file":{"text":"lua/includes/extensions/game.lua","line":"43-53"},"rets":{"ret":{"text":"All ammo types registered via game.AddAmmoType, sorted by its name value.","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"CleanUpMap","parent":"game","type":"libraryfunc","description":{"text":"If called serverside it will remove **ALL** entities which were not created by the map (not players or weapons held by players).\n\nOn the client it will remove decals, sounds, gibs, dead NPCs, and entities created via ents.CreateClientProp.\n\nThis function calls GM:PreCleanupMap before cleaning up the map and GM:PostCleanupMap after cleaning up the map.","bug":[{"text":"Calling this in a ENTITY:StartTouch or ENTITY:Touch hook will crash the game.","issue":"1142"},{"text":"Calling this destroys all BASS streams.","issue":"2874"},{"text":"This can crash when removing _firesmoke entities. **You can use the example below to workaround this issue.**","issue":"3637"}]},"realm":"Shared","args":{"arg":[{"text":"If set to `true`, don't run this functions on all clients.","name":"dontSendToClients","type":"boolean","default":"false"},{"text":"Entity classes not to reset during cleanup.","name":"extraFilters","type":"table","default":"{}"}]}},"example":{"description":"Quick fix for issue [#3637](https://github.com/Facepunch/garrysmod-issues/issues/3637) (from [Garry's Mod Github](https://github.com/Facepunch/garrysmod-issues/issues/3637#issuecomment-702478260)).","code":"game.CleanUpMap( false, { \"env_fire\", \"entityflame\", \"_firesmoke\" } )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ConsoleCommand","parent":"game","type":"libraryfunc","description":{"text":"Runs a console command.\nMake sure to add a newline (\"\\n\") at the end of the command.","warning":"If you use data that were received from a client, you should avoid using this function because newline and semicolon (at least) allow the client to run arbitrary commands!\n\nFor safety, you are urged to prefer using Global.RunConsoleCommand in this case."},"realm":"Server","args":{"arg":{"text":"String containing the command and arguments to be ran.","name":"stringCommand","type":"string"}}},"example":{"description":"Changes the gravity to 400 (default 600).","code":"game.ConsoleCommand(\"sv_gravity 400\\n\")"},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetAmmoDamageType","parent":"game","type":"libraryfunc","description":"Returns the damage type of given ammo type.","realm":"Shared","args":{"arg":{"text":"Ammo ID to retrieve the damage type of. Starts from 1.","name":"id","type":"number"}},"rets":{"ret":{"text":"See Enums/DMG","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetAmmoForce","parent":"game","type":"libraryfunc","description":"Returns the ammo bullet force that is applied when an entity is hit by a bullet of given ammo type.","realm":"Shared","args":{"arg":{"text":"Ammo ID to retrieve the force of. Starts from 1.","name":"id","type":"number"}},"rets":{"ret":{"name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetAmmoID","parent":"game","type":"libraryfunc","description":"Returns the ammo type ID for given ammo type name.\n\nSee game.GetAmmoName for reverse.","realm":"Shared","args":{"arg":{"text":"Name of the ammo type to look up ID of","name":"name","type":"string"}},"rets":{"ret":{"text":"The ammo type ID of given ammo type name, or -1 if not found","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetAmmoData","parent":"game","type":"libraryfunc","description":"Returns the Structures/AmmoData for given ID.","realm":"Shared","args":{"arg":{"text":"ID of the ammo type to look up the data for","name":"id","type":"number"}},"rets":{"ret":{"text":"The Structures/AmmoData containing all ammo data","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetAmmoName","parent":"game","type":"libraryfunc","description":"Returns the ammo name for given ammo type ID.\n\nSee game.GetAmmoID for reverse.","realm":"Shared","args":{"arg":{"text":"Ammo ID to retrieve the name of. Starts from 1.","name":"id","type":"number"}},"rets":{"ret":{"text":"The name of given ammo type ID or nil if ammo type ID is invalid.","name":"","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetAmmoMax","parent":"game","type":"libraryfunc","description":"Returns the real maximum amount of ammo of given ammo ID, regardless of the setting of `gmod_maxammo` convar.","realm":"Shared","args":{"arg":{"text":"Ammo type ID","name":"id","type":"number"}},"rets":{"ret":{"text":"The maximum amount of reserve ammo a player can hold of this ammo type.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetAmmoNPCDamage","parent":"game","type":"libraryfunc","description":"Returns the damage given ammo type should do to NPCs.","realm":"Shared","args":{"arg":{"text":"Ammo ID to retrieve the damage info of. Starts from 1.","name":"id","type":"number"}},"rets":{"ret":{"name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetAmmoPlayerDamage","parent":"game","type":"libraryfunc","description":"Returns the damage given ammo type should do to players.","realm":"Shared","args":{"arg":{"text":"Ammo ID to retrieve the damage info of. Starts from 1.","name":"id","type":"number"}},"rets":{"ret":{"name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetAmmoTypes","parent":"game","type":"libraryfunc","description":"Returns a list of all ammo types currently registered.","realm":"Shared","rets":{"ret":{"text":"A table containing all ammo types. The keys are ammo IDs, the values are the names associated with those IDs.","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetGlobalCounter","parent":"game","type":"libraryfunc","description":"Returns the counter of a Global State.\n\nSee Global States for more information.","realm":"Server","args":{"arg":{"text":"The name of the Global State to set. \n\nIf the Global State by that name does not exist, it will be created.\n\nSee Global States for a list of default global states.","name":"name","type":"string"}},"rets":{"ret":{"text":"The value of the given Global State, 0 if the global state doesn't exist.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetIPAddress","parent":"game","type":"libraryfunc","description":{"text":"Returns the public IP address and port of the current server. This will return the IP/port that you are connecting through when ran clientside.","note":"Returns \"loopback\" in singleplayer.","bug":{"text":"Returns \"0.0.0.0:`port`\" on the server when called too early, including in GM:Initialize and GM:InitPostEntity. This bug seems to only happen the first time a server is launched, and will return the correct value after switching maps.","issue":"3001"}},"realm":"Shared","rets":{"ret":{"text":"The IP address and port in the format \"x.x.x.x:x\"","name":"","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetGlobalState","parent":"game","type":"libraryfunc","description":"Returns whether a Global State is off, active or dead ( inactive )\n\nSee Global States for more information.","realm":"Server","args":{"arg":{"text":"The name of the Global State to retrieve the state of. \n\nIf the Global State by that name does not exist, **GLOBAL_DEAD** will be returned.\n\nSee Global States for a list of default global states.","name":"name","type":"string"}},"rets":{"ret":{"text":"The state of the Global State. See Enums/GLOBAL","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetMap","parent":"game","type":"libraryfunc","description":{"text":"Returns the name of the current map, without a file extension.\nOn the menu state, returns \"menu\".","warning":"In Multiplayer this does not return the current map in the CLIENT realm before GM:Initialize."},"realm":"Shared and Menu","rets":{"ret":{"text":"The name of the current map, without a file extension.","name":"","type":"string"}}},"example":{"code":"print(game.GetMap())","output":"gm_flatgrass"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"GetSkillLevel","parent":"game","type":"libraryfunc","description":{"text":"Returns the difficulty level of the game.\n\n**TIP:** You can use this function in your scripted NPCs or Nextbots to make them harder, however, it is a good idea to lock powerful attacks behind the highest difficulty instead of just increasing the health.","note":"Internally this is tied to the gamerules entity, so you'll have to wait to wait until GM:InitPostEntity is called to return the skill level"},"realm":"Shared","rets":{"ret":{"text":"The difficulty level, Easy( 1 ), Normal( 2 ), Hard( 3 ).","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetMapVersion","parent":"game","type":"libraryfunc","description":"Returns the VBSP version of the current map.","realm":"Server","rets":{"ret":{"text":"VBSP version of the currently loaded map, will be either 19, 20 or 21 for L4D1+ maps","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetTimeScale","parent":"game","type":"libraryfunc","description":"Returns the time scale of the game","realm":"Shared","rets":{"ret":{"text":"The time scale","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetWorld","parent":"game","type":"libraryfunc","description":"Returns the worldspawn entity.","realm":"Shared","rets":{"ret":{"text":"The world","name":"","type":"Entity"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetMapNext","parent":"game","type":"libraryfunc","description":"Returns the next map that would be loaded according to the file that is set by the mapcyclefile convar.","realm":"Server","rets":{"ret":{"text":"nextMap","name":"","type":"string"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"KickID","parent":"game","type":"libraryfunc","description":"Kicks a player from the server. This can be ran before the player has spawned.","realm":"Server","args":{"arg":[{"text":"UserID or SteamID of the player to kick.","name":"id","type":"string"},{"text":"Reason to display to the player. This can span across multiple lines.","name":"reason","type":"string","default":"No reason given","warning":"This will be shortened to ~512 chars, though this includes the command itself and the player index so will realistically be more around ~498. It is recommended to avoid going near the limit to avoid truncation."}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"MapLoadType","parent":"game","type":"libraryfunc","description":"Returns the map load type of the current map.\n\nAfter changing the map with the console command `changelevel`, \"newgame\" is returned. With `changelevel2` (single player only), \"transition\" is returned.","realm":"Server","rets":{"ret":{"text":"The load type. Possible values are: \"newgame\", \"loadgame\", \"transition\", \"background\".","name":"","type":"string"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsDedicated","parent":"game","type":"libraryfunc","description":{"text":"Returns true if the server is a dedicated server, false if it is a listen server or a singleplayer game.","bug":{"text":"This always returns false on the client.","issue":"1495"}},"realm":"Shared","rets":{"ret":{"text":"Is the server dedicated or not.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"MaxPlayers","parent":"game","type":"libraryfunc","description":"Returns the maximum amount of players (including bots) that the server can have.","realm":"Shared","rets":{"ret":{"text":"The maximum amount of players","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"MountGMA","parent":"game","type":"libraryfunc","description":{"text":"Mounts a GMA addon from the disk.\nCan be used with steamworks.DownloadUGC","note":"Any error models currently loaded that the mounted addon provides will be reloaded.\n\n\nAny error materials currently loaded that the mounted addon provides will NOT be reloaded. That means that this cannot be used to fix missing map materials, as the map materials are loaded before you are able to call this."},"realm":"Shared","args":{"arg":{"text":"Location of the GMA file to mount, retrieved from steamworks.DownloadUGC. This file does not have to end with the .gma extension, but will be interpreted as a GMA.","name":"path","type":"string"}},"rets":{"ret":[{"text":"success","name":"","type":"boolean"},{"text":"If successful, a table of files that have been mounted","name":"","type":"table"}]}},"example":{"description":"Downloads the Playable Piano addon and mounts the content.","code":"steamworks.DownloadUGC( 104548572, function( path )\n\tgame.MountGMA( path )\nend)"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"RemoveRagdolls","parent":"game","type":"libraryfunc","description":"Removes all the clientside ragdolls.","realm":"Shared"},"example":{"description":"This will remove all the client ragdolls every 3 secconds.","code":"timer.Create( \"removeRagdolls\", 3, 0, function() game.RemoveRagdolls() end )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"LoadNextMap","parent":"game","type":"libraryfunc","description":"Loads the next map according to the nextlevel convar, or from the current mapcycle file set by the respective convar.","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetGlobalCounter","parent":"game","type":"libraryfunc","description":"Sets the counter of a Global State.\n\nSee Global States for more information.","realm":"Server","args":{"arg":[{"text":"The name of the Global State to set. \n\nIf the Global State by that name does not exist, it will be created.\n\nSee Global States for a list of default global states.","name":"name","type":"string"},{"text":"The value to set for that Global State.","name":"count","type":"number"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetGlobalState","parent":"game","type":"libraryfunc","description":"Sets whether a Global State is off, active or dead ( inactive )\n\nSee Global States for more information.","realm":"Server","args":{"arg":[{"text":"The name of the Global State to set. \n\nIf the Global State by that name does not exist, it will be created.\n\nSee Global States for a list of default global states.","name":"name","type":"string"},{"text":"The state of the Global State. See Enums/GLOBAL","name":"state","type":"number"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetTimeScale","parent":"game","type":"libraryfunc","description":{"text":"Sets the time scale of the game.\n\nThis function is supposed to remove the need of using the host_timescale convar, which is cheat protected.\n\nTo slow down or speed up the movement of a specific player, use Player:SetLaggedMovementValue instead.","note":"Like host_timescale, this method does not affect sounds, if you wish to change that, look into GM:EntityEmitSound."},"realm":"Server","args":{"arg":{"text":"The new timescale, minimum value is 0.001 and maximum is 5.","name":"timeScale","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetSkillLevel","parent":"game","type":"libraryfunc","description":{"text":"Sets the difficulty level of the game, can be retrieved with game.GetSkillLevel.\n\nThis will automatically change whenever the \"skill\" convar is modified serverside.","bug":{"text":"This function will not work if the skill convar doesn't match the targeted value. To work around this, you must use RunConsoleCommand(\"skill\", num) alongside this function.","issue":"3491"}},"realm":"Server","args":{"arg":{"text":"The difficulty level, Easy( 1 ), Normal( 2 ), Hard( 3 ).","name":"level","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"StartSpot","parent":"game","type":"libraryfunc","description":"Returns position the player should start from, this is not the same thing as spawn points, it is used to properly transit the player between maps.","realm":"Shared","rets":{"ret":{"text":"startSpot","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Listen","parent":"gameevent","type":"libraryfunc","description":"Add a game event listener.","realm":"Shared","args":{"arg":{"text":"The event to listen to, travels through hooks with eventName as event.\n\nList of valid events can be found .","name":"eventName","type":"string","br":"","page":",hereGame_Events"}}},"example":[{"description":"Announce to everyone that a player has connected.","code":"gameevent.Listen( \"player_connect\" )\nhook.Add(\"player_connect\", \"AnnounceConnection\", function( data )\n\tfor i, ply in ipairs( player.GetAll() ) do\n\t\tply:ChatPrint( data.name .. \" has connected to the server.\" )\n\tend\nend)","output":"\"Shinycow has connected to the server.\""},{"description":"This is a basic template for creating game_event listeners/hooks with the purpose of including all arguments / table variables for each game-event to make it easily known which values can be accessed and when: player_connect. player_connect is triggered at the exact moment they join the server.","code":"gameevent.Listen( \"player_connect\" )\nhook.Add( \"player_connect\", \"player_connect_example\", function( data )\n\tlocal name = data.name\t\t\t// Same as Player:Nick()\n\tlocal steamid = data.networkid\t// Same as Player:SteamID()\n\tlocal ip = data.address\t\t\t// Same as Player:IPAddress()\n\tlocal id = data.userid\t\t\t// Same as Player:UserID()\n\tlocal bot = data.bot\t\t\t// Same as Player:IsBot()\n\tlocal index = data.index\t\t// Same as Player:EntIndex()\n\n\t// Player has connected; this happens instantly after they join -- do something..\n\nend )"},{"description":"This is a basic template for creating game_event listeners/hooks with the purpose of including all arguments / table variables for each game-event to make it easily known which values can be accessed and when: player_disconnect. player_disconnect is triggered at the exact moment they disconnect from the server and will ALWAYS trigger regardless of whether they time-out, are kick/banned, client crashes, they click the X, they type quit in console, etc...","code":"gameevent.Listen( \"player_disconnect\" )\nhook.Add( \"player_disconnect\", \"player_disconnect_example\", function( data )\n\tlocal name = data.name\t\t\t// Same as Player:Nick()\n\tlocal steamid = data.networkid\t\t// Same as Player:SteamID()\n\tlocal id = data.userid\t\t\t// Same as Player:UserID()\n\tlocal bot = data.bot\t\t\t// Same as Player:IsBot()\n\tlocal reason = data.reason\t\t// Text reason for disconnected such as \"Kicked by console!\", \"Timed out!\", etc...\n\n\t// Player has disconnected - this is more reliable than PlayerDisconnect\n\t\nend )"},{"description":"This is a basic template for creating game_event listeners/hooks with the purpose of including all arguments / table variables for each game-event to make it easily known which values can be accessed and when: player_spawn. player_spawn is triggered when the player initially spawns, or respawns.","code":"gameevent.Listen( \"player_spawn\" )\nhook.Add( \"player_spawn\", \"player_spawn_example\", function( data ) \n\tlocal id = data.userid\t// Same as Player:UserID()\n\n\t// Called when the player spawns initially or respawns.\n\nend )"},{"description":"This is a basic template for creating game_event listeners/hooks with the purpose of including all arguments / table variables for each game-event to make it easily known which values can be accessed and when: player_hurt. player_hurt is triggered when the player is injured or dies.\n\nThe SERVER receives 1 extra value - Priority.","code":"gameevent.Listen( \"player_hurt\" )\nhook.Add( \"player_hurt\", \"player_hurt_example\", function( data ) \n\tlocal health = data.health\t\t\t\t// Remaining health after injury\n\tlocal priority = SERVER and data.Priority or 5 \t\t// Priority ??\n\tlocal id = data.userid\t\t\t\t\t// Same as Player:UserID()\n\tlocal attackerid = data.attacker\t\t\t// Same as Player:UserID() but it's the attacker id.\n\n\t// Called when the player is injured or dies.\n\nend )"},{"description":"This is a basic template for creating game_event listeners/hooks with the purpose of including all arguments / table variables for each game-event to make it easily known which values can be accessed and when: player_hurt. player_hurt is triggered when the player is injured or dies.\n\nThe SERVER receives 1 extra value - Priority.","code":"gameevent.Listen( \"player_say\" )\nhook.Add( \"player_say\", \"player_say_example\", function( data ) \n\tlocal priority = SERVER and data.Priority or 1 \t// Priority ??\n\tlocal id = data.userid\t\t\t\t// Same as Player:UserID() for the speaker\n\tlocal text = data.text\t\t\t\t// The written text.\n\n\t// Called when a player writes text ( Called by the SERVER on the client AFTER the PlayerSay hook )\n\nend )"},{"description":"This is a basic template for creating game_event listeners/hooks with the purpose of including all arguments / table variables for each game-event to make it easily known which values can be accessed and when: entity_killed. entity_killed is triggered when the player or entity dies.","code":"gameevent.Listen( \"entity_killed\" )\nhook.Add( \"entity_killed\", \"entity_killed_example\", function( data ) \n\tlocal inflictor_index = data.entindex_inflictor\t\t// Same as Weapon:EntIndex() / weapon used to kill victim\n\tlocal attacker_index = data.entindex_attacker\t\t// Same as Player/Entity:EntIndex() / person or entity who did the damage\n\tlocal damagebits = data.damagebits\t\t\t// DAMAGE_TYPE - use BIT operations to decipher damage types...\n\tlocal victim_index = data.entindex_killed\t\t// Same as Victim:EntIndex() / the entity / player victim\n\n\t// Called when a Player or Entity is killed\n\nend )"}],"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Call","parent":"gamemode","type":"libraryfunc","description":"Called by the engine to call a hook within the loaded gamemode.\n\nThe supplied event 'name' must be defined in the active gamemode. Otherwise, nothing will happen - not even hooks added with hook.Add will be called.\n\nThis is similar to hook.Run and hook.Call, except the hook library will call hooks created with hook.Add even if there is no corresponding gamemode function.","realm":"Shared","file":{"text":"lua/includes/modules/gamemode.lua","line":"75-L88"},"args":{"arg":[{"text":"The name of the hook to call.","name":"name","type":"string"},{"text":"The arguments","name":"args","type":"vararg"}]},"rets":{"ret":{"text":"The result of the hook function - can be up to 6 values. Returns false if the gamemode function doesn't exist (i.e. nothing happened), but remember - a hook can also return false.","name":"","type":"any"}}},"example":{"description":"Shows a suicide death notice in Sandbox.","code":"local ply = Entity(1)\ngamemode.Call( \"AddDeathNotice\", ply:GetName(), ply:Team(), nil, ply:GetName(), ply:Team() )","output":{"image":{"src":"suidcide_death_notice.jpg"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SinglePlayer","parent":"game","type":"libraryfunc","description":"Returns whether the current session is a single player game.","realm":"Shared","rets":{"ret":{"text":"isSinglePlayer","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Get","parent":"gamemode","type":"libraryfunc","description":{"text":"This returns the internally stored gamemode table.","internal":""},"realm":"Shared","args":{"arg":{"text":"The name of the gamemode you want to get","name":"name","type":"string"}},"rets":{"ret":{"text":"The gamemode's table","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Register","parent":"gamemode","type":"libraryfunc","description":{"text":"Called by the engine when a gamemode is being loaded.","internal":""},"realm":"Shared","args":{"arg":[{"text":"Your GM table","name":"gm","type":"table"},{"text":"Name of your gamemode, lowercase, no spaces.","name":"name","type":"string"},{"text":"The gamemode name that your gamemode is derived from","name":"derived","type":"string"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetGamemode","parent":"gmod","type":"libraryfunc","description":"Returns GAMEMODE.","realm":"Shared","rets":{"ret":{"text":"GAMEMODE","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"LoadMap","parent":"gmsave","type":"libraryfunc","description":"Loads a saved map.","realm":"Server","args":{"arg":[{"text":"The JSON encoded string containing all the map data.","name":"mapData","type":"string"},{"text":"The player to load positions for.","name":"ply","type":"Player","default":"NULL"},{"text":"A function to be called after all the entities have been placed.","name":"callback","type":"function","default":"nil"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"PlayerLoad","parent":"gmsave","type":"libraryfunc","description":"Sets player position and angles from supplied table","realm":"Server","args":{"arg":[{"text":"The player to \"load\" values for","name":"ply","type":"Player"},{"text":"A table containing Origin and Angle keys for position and angles to set.","name":"data","type":"table"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"PlayerSave","parent":"gmsave","type":"libraryfunc","description":"Returns a table containing player position and angles. Used by gmsave.SaveMap.","realm":"Server","args":{"arg":{"text":"The player to \"save\"","name":"ply","type":"Player"}},"rets":{"ret":{"text":"A table containing player position ( Origin ) and angles ( Angle )","name":"","type":"table"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"ShouldSaveEntity","parent":"gmsave","type":"libraryfunc","description":"Returns if we should save this entity in a duplication or a map save or not.","realm":"Server","args":{"arg":[{"text":"The entity","name":"ent","type":"Entity"},{"text":"A table containing classname key with entities classname.","name":"t","type":"table"}]},"rets":{"ret":{"text":"Should save entity or not","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SaveMap","parent":"gmsave","type":"libraryfunc","description":"Saves the map","realm":"Server","args":{"arg":{"text":"The player, whose position should be saved for loading the save","name":"ply","type":"Player"}},"rets":{"ret":{"text":"The encoded to JSON string containing save data","name":"","type":"string"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"InternalCursorMoved","parent":"gui","type":"libraryfunc","description":"Simulates a mouse move with the given deltas.","realm":"Client and Menu","args":{"arg":[{"text":"The movement delta on the x axis.","name":"deltaX","type":"number"},{"text":"The movement delta on the y axis.","name":"deltaY","type":"number"}]}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"ActivateGameUI","parent":"gui","type":"libraryfunc","description":"Opens the game menu overlay.","realm":"Client and Menu"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"HideGameUI","parent":"gui","type":"libraryfunc","description":"Hides the game menu overlay.","realm":"Client and Menu"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"EnableScreenClicker","parent":"gui","type":"libraryfunc","description":{"text":"Enables the mouse cursor without restricting player movement, like using Sandbox's context menu.","bug":{"text":"Some CUserCmd functions will return incorrect values when this function is active.","issue":"982"}},"realm":"Client","args":{"arg":{"text":"Whether the cursor should be enabled or not. (true = enable, false = disable)","name":"enabled","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"InternalKeyCodeReleased","parent":"gui","type":"libraryfunc","description":"Simulates a key release for the given key.","realm":"Client and Menu","args":{"arg":{"text":"The key, see Enums/KEY.","name":"key","type":"number"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"InternalKeyCodePressed","parent":"gui","type":"libraryfunc","description":"Simulates a key press for the given key.","realm":"Client and Menu","args":{"arg":{"text":"The key, see Enums/KEY.","name":"key","type":"number"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"InternalKeyCodeTyped","parent":"gui","type":"libraryfunc","description":"Simulates a key type typing to the specified key.","realm":"Client and Menu","args":{"arg":{"text":"The key, see Enums/KEY.","name":"key","type":"number"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"InternalKeyTyped","parent":"gui","type":"libraryfunc","description":"Simulates an ASCII symbol writing.\nUse to write text in the chat or in VGUI.\nDoesn't work while the main menu is open!","realm":"Client and Menu","args":{"arg":{"text":"ASCII code of symbol, see http://www.mikroe.com/img/publication/spa/pic-books/programming-in-basic/chapter/04/fig4-24.gif","name":"code","type":"number"}}},"example":{"description":"Writes \"Hello\" every think.","code":"hook.Add(\"Think\",\"Example\",function()\n\tgui.InternalKeyTyped(72)\n\tgui.InternalKeyTyped(101)\n\tgui.InternalKeyTyped(108)\n\tgui.InternalKeyTyped(108)\n\tgui.InternalKeyTyped(111)\nend)"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"InternalMouseReleased","parent":"gui","type":"libraryfunc","description":"Simulates a mouse key release for the given mouse key.","realm":"Client and Menu","args":{"arg":{"text":"The key, see Enums/MOUSE.","name":"key","type":"number"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"InternalMouseDoublePressed","parent":"gui","type":"libraryfunc","description":"Simulates a double mouse key press for the given mouse key.","realm":"Client and Menu","args":{"arg":{"text":"The key, see Enums/MOUSE.","name":"key","type":"number"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"InternalMousePressed","parent":"gui","type":"libraryfunc","description":"Simulates a mouse key press for the given mouse key.","realm":"Client and Menu","args":{"arg":{"text":"The key, see Enums/MOUSE.","name":"key","type":"number"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"InternalMouseWheeled","parent":"gui","type":"libraryfunc","description":"Simulates a mouse wheel scroll with the given delta.","realm":"Client and Menu","args":{"arg":{"text":"The amount of scrolling to simulate.","name":"delta","type":"number"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"IsGameUIVisible","parent":"gui","type":"libraryfunc","description":"Returns whenever the game menu overlay ( main menu ) is open or not.","realm":"Client and Menu","rets":{"ret":{"text":"Whenever the game menu overlay ( main menu ) is open or not","name":"","type":"boolean"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"MousePos","parent":"gui","type":"libraryfunc","description":{"text":"Returns the cursor's position on the screen, or 0, 0 if cursor is not visible.","deprecated":"Use input.GetCursorPos instead."},"realm":"Client and Menu","rets":{"ret":[{"text":"mouseX","name":"","type":"number"},{"text":"mouseY","name":"","type":"number"}]}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"IsConsoleVisible","parent":"gui","type":"libraryfunc","description":"Returns whether the console is visible or not.","realm":"Client and Menu","rets":{"ret":{"text":"Whether the console is visible or not.","name":"","type":"boolean"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"MouseX","parent":"gui","type":"libraryfunc","description":"Returns x component of the mouse position.","realm":"Client and Menu","rets":{"ret":{"text":"mouseX","name":"","type":"number"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"MouseY","parent":"gui","type":"libraryfunc","description":"Returns y component of the mouse position.","realm":"Client and Menu","rets":{"ret":{"text":"mouseY","name":"","type":"number"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"SetMousePos","parent":"gui","type":"libraryfunc","description":{"text":"Sets the cursor's position on the screen, relative to the topleft corner of the window","deprecated":"Use input.SetCursorPos instead."},"realm":"Client and Menu","args":{"arg":[{"text":"The X coordinate to move the cursor to.","name":"mouseX","type":"number"},{"text":"The Y coordinate to move the cursor to.","name":"mouseY","type":"number"}]}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"ScreenToVector","parent":"gui","type":"libraryfunc","description":"Converts the specified screen position to a **direction** vector local to the player's view. A related function is Vector:ToScreen, which translates a 3D position to a screen coordinate.\n\nutil.AimVector is a more generic version of this, using a custom view instead of the player's current view.","realm":"Client","args":{"arg":[{"text":"X coordinate on the screen.","name":"x","type":"number"},{"text":"Y coordinate on the screen.","name":"y","type":"number"}]},"rets":{"ret":{"text":"Direction","name":"","type":"Vector"}}},"example":[{"description":"This will do a trace from the mouse position to the world","code":"local tr = util.QuickTrace(LocalPlayer():GetShootPos(), gui.ScreenToVector(gui.MousePos()),LocalPlayer())\nprint(tr.HitPos)","output":"The worldpos the cursor is pointing at will be printed"},{"description":"Replacement for Player:GetAimVector","code":"print(gui.ScreenToVector(ScrW()/2, ScrH()/2))","output":"The player's current aimvector will be printed"}],"realms":["Client"],"type":"Function"},
{"function":{"name":"OpenURL","parent":"gui","type":"libraryfunc","description":{"text":"Opens specified URL in the steam overlay browser.","note":"When called clientside, user will be asked for confirmation before the website will open.","bug":{"text":"Will silently fail if the URL is more than 512 characters long.","issue":"4663"}},"realm":"Client and Menu","args":{"arg":{"text":"URL to open, it has to start with either `http://` or `https://`.","name":"url","type":"string"}}},"example":{"description":"Opens a page when a button is clicked.","code":"local button = vgui.Create( \"DButton\" )\nbutton:SetSize( 125, 90 )\nbutton:Center() \nbutton:SetText( \"Join our Discord!\" )\nbutton.DoClick = function()\n    gui.OpenURL( \"https://discord.gg/gmod\" )\nend"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"ShowConsole","parent":"gui","type":"libraryfunc","description":"Shows console in the game UI.","realm":"Menu"},"example":{"description":"Example from `garrysmod\\lua\\menu\\mainmenu.lua` that initializes the game UI and shows console if activated.","code":"function PANEL:Init()\n\n\tself:Dock( FILL )\n\tself:SetKeyboardInputEnabled( true )\n\tself:SetMouseInputEnabled( true )\n\n\tself.HTML = vgui.Create( \"DHTML\", self )\n\n\tJS_Language( self.HTML )\n\tJS_Utility( self.HTML )\n\tJS_Workshop( self.HTML )\n\n\tself.HTML:Dock( FILL )\n\tself.HTML:OpenURL( \"asset://garrysmod/html/menu.html\" )\n\tself.HTML:SetKeyboardInputEnabled( true )\n\tself.HTML:SetMouseInputEnabled( true )\n\tself.HTML:SetAllowLua( true )\n\tself.HTML:RequestFocus()\n\n\tws_save.HTML = self.HTML\n\taddon.HTML = self.HTML\n\tdemo.HTML = self.HTML\n\n\tself:MakePopup()\n\tself:SetPopupStayAtBack( true )\n\t\n\t-- If the console is already open, we've got in its way.\n\tif ( gui.IsConsoleVisible() ) then\n\t\tgui.ShowConsole()\n\tend\n\nend"},"realms":["Menu"],"type":"Function"},
{"function":{"name":"CreateTextureNormal","parent":"GWEN","type":"libraryfunc","description":"Used in derma skins to create a rectangle drawing function from an image. The texture of the rectangle will be scaled. The texture is taken from SKIN.GwenTexture","realm":"Client and Menu","args":{"arg":[{"text":"The X coordinate on the texture","name":"x","type":"number"},{"text":"The Y coordinate on the texture","name":"y","type":"number"},{"text":"Width of the area on texture","name":"w","type":"number"},{"text":"Height of the area on texture","name":"h","type":"number"}]},"rets":{"ret":{"text":"The drawing function. Arguments are:\n* number x - X coordinate for the box\n* number y - Y coordinate for the box\n* number w - Width of the box\n* number h - Height of the box\n* table clr - Optional color, default is white. Uses the Color","name":"","type":"function"}}},"example":{"description":"Draws a huge checked checkbox in the top left corner of the screen using current skins texture.","code":"local paintBox = GWEN.CreateTextureNormal( 448, 32, 15, 15 )\nhook.Add( \"HUDPaint\", \"PaintStuff\", function()\n    paintBox( 0, 0, 100, 100 )\nend )","output":"If using default skin, it will be a 100x100px checked checkbox in top left corner of the screen."},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"CreateTextureBorder","parent":"GWEN","type":"libraryfunc","description":"Used in derma skins to create a bordered rectangle drawing function from an image. The texture is taken either from last argument or from SKIN.GwenTexture","realm":"Client and Menu","args":{"arg":[{"text":"The X coordinate on the texture","name":"x","type":"number"},{"text":"The Y coordinate on the texture","name":"y","type":"number"},{"text":"Width of the area on texture","name":"w","type":"number"},{"text":"Height of the area on texture","name":"h","type":"number"},{"text":"Left width of border","name":"left","type":"number"},{"text":"Top width of border","name":"top","type":"number"},{"text":"Right width of border","name":"right","type":"number"},{"text":"Bottom width of border","name":"bottom","type":"number"},{"text":"Texture of source image to create a bordered rectangle from. Uses SKIN.GwenTexture if not set.","name":"source","type":"IMaterial","default":"nil"}]},"rets":{"ret":{"text":"The drawing function. Arguments are:\n* number x - X coordinate for the box\n* number y - Y coordinate for the box\n* number w - Width of the box\n* number h - Height of the box\n* table clr - Optional color, default is white. Uses the Color","name":"","type":"function"}}},"example":{"description":"Draws a bordered box in the top left corner of the screen using current skins texture.","code":"local paintBox = GWEN.CreateTextureBorder( 384, 32, 31, 31, 4, 4, 4, 4 )\nhook.Add( \"HUDPaint\", \"PaintStuff\", function()\n    paintBox( 0, 0, 100, 100 )\nend )","output":"If using default skin, it will be a 100x100px transparent blue box in top left corner with solid blue borders."},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"CreateTextureCentered","parent":"GWEN","type":"libraryfunc","description":"Used in derma skins to create a rectangle drawing function from an image. The rectangle will not be scaled, but instead it will be drawn in the center of the box. The texture is taken from SKIN.GwenTexture","realm":"Client and Menu","args":{"arg":[{"text":"The X coordinate on the texture","name":"x","type":"number"},{"text":"The Y coordinate on the texture","name":"y","type":"number"},{"text":"Width of the area on texture","name":"w","type":"number"},{"text":"Height of the area on texture","name":"h","type":"number"}]},"rets":{"ret":{"text":"The drawing function. Arguments are:\nnumber x - X coordinate for the box\n\n\nnumber y - Y coordinate for the box\n\n\nnumber w - Width of the box\n\n\nnumber h - Height of the box\n\n\ntable clr - Optional color, default is white. Uses the Color","name":"","type":"function"}}},"example":{"description":"Draws a box in the top left corner of the screen using current skins texture.","code":"local paintBox = GWEN.CreateTextureCentered( 384, 32, 32, 32 )\nhook.Add( \"HUDPaint\", \"PaintStuff\", function()\n    paintBox( 0, 0, 100, 100 )\nend )","output":"If using default skin, it will be 32x32 transparent blue box centered inside the 100x100 box."},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"TextureColor","parent":"GWEN","type":"libraryfunc","description":"When used in a material skin, it returns a color value from a point in the skin image.","realm":"Client and Menu","args":{"arg":[{"text":"X position of the pixel to get the color from.","name":"x","type":"number"},{"text":"Y position of the pixel to get the color from.","name":"y","type":"number"}]},"rets":{"ret":{"text":"The color of the point on the skin as a Color.","name":"","type":"table"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"Add","parent":"halo","type":"libraryfunc","description":{"text":"Applies a halo glow effect to one or multiple entities.","warning":"Using this function outside of the GM:PreDrawHalos hook can cause instability or crashes.","note":"The ignoreZ parameter will cause the halos to draw over the player's viewmodel. You can work around this using render.DepthRange in the GM:PreDrawViewModel, GM:PostDrawViewModel, GM:PreDrawPlayerHands and GM:PostDrawPlayerHands hooks."},"realm":"Client","file":{"text":"lua/includes/modules/halo.lua","line":"13-L33"},"args":{"arg":[{"text":"A table of entities to add the halo effect to.","name":"entities","type":"table"},{"text":"The desired color of the halo. See Color.","name":"color","type":"table"},{"text":"The strength of the halo's blur on the x axis.","name":"blurX","type":"number","default":"2"},{"text":"The strength of the halo's blur on the y axis.","name":"blurY","type":"number","default":"2"},{"text":"The number of times the halo should be drawn per frame. **Increasing this may hinder player FPS**.","name":"passes","type":"number","default":"1"},{"text":"Sets the render mode of the halo to additive.","name":"additive","type":"boolean","default":"true"},{"text":"Renders the halo through anything when set to `true`.","name":"ignoreZ","type":"boolean","default":"false"}]}},"example":[{"description":"Adds a halo around all props in the map using an O(n) operation and iterating through unseen objects which can be extremely expensive to process.","code":"local color_red = Color( 255, 0, 0 )\n\nhook.Add( \"PreDrawHalos\", \"AddPropHalos\", function()\n\thalo.Add( ents.FindByClass( \"prop_physics*\" ), color_red, 5, 5, 2 )\nend )","output":{"text":"All the props on the map will be rendered with a red halo, a blur amount of 5, and two passes.","image":{"src":"halo_example.png","alt":"_halo_example.png"}}},{"description":"Adds a green halo around all admins.","code":"local color_green = Color( 0, 255, 0 )\n\nhook.Add( \"PreDrawHalos\", \"AddStaffHalos\", function()\n\tlocal staff = {}\n\tlocal count = 0\n\n\tfor _, ply in ipairs( player.GetAll() ) do\n\t\tif ( ply:IsAdmin() ) then\n\t\t\tcount = count + 1\n\t\t\tstaff[ count ] = ply\n\t\tend\n\tend\n\n\thalo.Add( staff, color_green, 0, 0, 2, true, true )\nend )"}],"realms":["Client"],"type":"Function"},
{"function":{"name":"SendCommand","parent":"hammer","type":"libraryfunc","description":"Sends command to Hammer, if Hammer is running with the current map loaded.","realm":"Server","args":{"arg":{"text":"Command to send including arguments\n\nAll commands are in the format \"command var1 var2 etc\"\n\nAll commands that pick an entity with x y z , must use the exact position including decimals. i.e. -354.4523 123.4 \n\n# List of commands\n| Command       | Description   |\n| ------------- | ------------- |\n| \"session_begin mapName mapVersion\" | Starts a hammer edit, locking the editor. mapName is the current map without path or suffix, mapVersion is the current version in the .vmf file |\n| \"session_end\" | Ends a hammer edit, unlocking the editor. |\n| \"map_check_version mapName mapVersion\" | This only works after session_begin, so you'd know the right version already and this only returns ok, this function is apparently useless. |\n| \"entity_create entityClass x y z\" | Creates an entity of entityClass at position x y z |\n| \"entity_delete entityClass x y z\" | Deletes an entity of entityClass at position x y z |\n| \"entity_set_keyvalue entityClass x y z \"key\" \"value\"\" | Set's the KeyValue pair of an entity of entityClass at x y z. The Key name and Value String must be in quotes. |\n| \"entity_rotate_incremental entityClass x y z incX incY incZ\" | Rotates an entity of entityClass at x y z by incX incY incZ |\n| \"node_create nodeClass nodeID x y z\" | Creates an AI node of nodeClass with nodeID at x y z you should keep nodeID unique or you will have issues |\n| \"node_delete nodeID\" | Deletes node(s) with nodeID, this will delete multiple nodes if they have the same nodeID |\n| \"nodelink_create startNodeID endNodeID\" | Creates a link between AI nodes startNodeID and endNodeID |\n| \"nodelink_delete startNodeID endNodeID\" | Removes a link between AI nodes startNodeID and endNodeID |","name":"cmd","type":"string"}},"rets":{"ret":{"text":"Returns \"ok\" if command succeeded otherwise returns \"badcommand\"\n\n**All changes only happen in hammer, there is *NO* in game representation/feedback**","name":"","type":"string"}}},"example":{"description":"A hammer function library I wrote while testing all these functions.\n\nPlease feel free to use this library as-is or with modification.","code":"if ( !SERVER) then return end\n-- Hammer Editor Lua Library\n-- By Malcolm Greene Jr (Fantym420)\n \n-- Allows easy access to the hammer editor commands from lua code\n-- All commands return ok if they worked and badcommand if they don't\n-- All changes only show up in hammer, so if you want to see stuff in game you must\n-- write your own ghost entites and such.\n\nhammerLib = {}\nhammerLib.mapName = game.GetMap() -- Get the map name\nhammerLib.vBSPMapVer = game.GetMapVersion() -- This is the vbsp map version, we need the vmf map version\nhammerLib.mapVer = hammerLib.vBSPMapVer -- place holder value findGoodVer will find the current vmf version via trial and error\n\n-- returns a vector string with spaces the way hammer likes it\nfunction hammerLib.vectorToString(vec)\n\n\treturn tostring(vec.x) .. \" \" .. tostring(vec.y) .. \" \" .. tostring(vec.z)\n\nend\n\n-- tries to start a session using the current version, if it fails it tries the next\n-- if it can't find it in 20 tries you should probably compile your map before edititng more\nfunction hammerLib.findGoodVer()\n\t\n\tlocal verInc = 0\n\tlocal result = \"\"\n\t\n\tfor verInc = 0, 20 do \n\t\n\t\thammerLib.mapVer = hammerLib.vBSPMapVer + verInc\n\t\t\n\t\tresult = hammerLib.startSession()\n\t\t\n\t\tif result == \"ok\" then\n\t\t\tbreak\n\t\tend\n\t\t\n\t\tif verInc == 20 then\n\t\t\tprint(\"Good Version Not Found, Please Re-Compile your map!!!\")\n\t\tend\n\tend\n\t\n\thammerLib.endSession()\n\t\nend\n\n-- simple wrapper for hammer.SendCommand so that I could print the debug info\n-- un-comment the prints to see the command strings and results in console\nfunction hammerLib.runCommand(cmd)\n\t\n\tlocal result = \"\"\n\t--print(\"running \" .. cmd)\n\tresult = hammer.SendCommand(cmd)\n\t--print(cmd .. \" result: \" .. result)\n\treturn result\n\t\n\nend\n\n-- Always ran when starting an edit\n-- This locks hammer until you issue the session_end command\nfunction hammerLib.startSession()\n\t\n\tlocal cmd = \"session_begin \" .. hammerLib.mapName .. \" \" .. hammerLib.mapVer\n\t\n\treturn hammerLib.runCommand(cmd)\n\t\nend\n\n-- Ends the session unlocking hammer\nfunction hammerLib.endSession()\n\t\n\tlocal cmd = \"session_end\"\n\n\treturn hammer.SendCommand(cmd)\n\t\nend\n\n-- useless function, it will return ok if you give it a good name and version\n-- however to run it you must already have a good version because you ran session_start\n-- implemented here for thoroughness, if you give it no variables it will just use the stored info.\nfunction hammerLib.mapCheckVersion(mcName, mcVer)\n\t\n\tmcName = mcName or hammerLib.mapName\n\tmcVer = mcVer or hammerLib.mapVer\n\tlocal cmd = \"map_check_version \" .. mcName .. \" \" .. mcVer\n\tlocal result = \"\"\n\thammerLib.startSession()\n\tresult = hammerLib.runCommand(cmd)\n\thammerLib.endSession()\n\t\n\treturn result\n\t\nend\n\n-- this creates an entity of type entityClass at the given position\n--  I believe this only works with point entites seeing as there is no tie to brush command\nfunction hammerLib.entityCreate(entityClass, entityPos)\n\t\n\tif (entityClass == nil) or (entityPos == nil) then return end\n\tlocal cmd = \"entity_create \" .. entityClass .. \" \" .. hammerLib.vectorToString(entityPos)\n\tlocal result = \"\"\n\thammerLib.startSession()\n\tresult = hammerLib.runCommand(cmd)\n\thammerLib.endSession()\n\t\n\treturn result\n\t\nend\n\n-- this deletes an entity of type entityClass at entityPos\n-- NOTE: must be entities **EXACT** position, decimals and all or it fails\nfunction hammerLib.entityDelete(entityClass, entityPos)\n\t\n\tif (entityClass == nil) or (entityPos == nil) then return end\n\tlocal cmd = \"entity_delete \" .. entityClass .. \" \" .. hammerLib.vectorToString(entityPos)\n\tlocal result = \"\"\n\thammerLib.startSession()\n\tresult = hammerLib.runCommand(cmd)\n\thammerLib.endSession()\n\t\n\treturn result\n\t\nend\n\n-- Set's a Key/Value pair on entity of type entityClass at entityPos\n-- NOTE: must be entities **EXACT** position, decimals and all or it fails\nfunction hammerLib.entitySetKeyValue(entityClass, entityPos, key, value)\n\t\n\t\n\tif (entityClass == nil) or \n\t   (entityPos == nil) or\n\t   (key == nil) or\n\t   (value == nil) then return end\n\t   \n\tlocal cmd = \"entity_set_keyvalue \" .. entityClass .. \" \" .. hammerLib.vectorToString(entityPos) .. \" \\\"\" .. key .. \"\\\" \\\"\" .. value .. \"\\\"\"\n\tlocal result = \"\"\n\thammerLib.startSession()\n\tresult = hammerLib.runCommand(cmd)\n\thammerLib.endSession()\n\t\n\treturn result\n\t\nend\n-- this will rotate an entity of type entityClass(string) at entityPos(vector) by rotationInc(vector)\n-- NOTE: must be entities **EXACT** position, decimals and all or it fails\nfunction hammerLib.entityRotateIncremental(entityClass, entityPos, rotationInc)\n\t\n\tif (entityClass == nil) or (entityPos == nil) then return end\n\tlocal cmd = \"entity_rotate_incremental \" .. entityClass .. \" \" .. hammerLib.vectorToString(entityPos) .. \" \" .. hammerLib.vectorToString(rotationInc)\n\tlocal result = \"\"\n\thammerLib.startSession()\n\tresult = hammerLib.runCommand(cmd)\n\thammerLib.endSession()\n\t\n\treturn result\n\t\nend\n\n-- This creates a node of type nodeClass with an ID of nodeID at nodePos\n-- keep nodeID unique, if you don't and you use node_delete, it deletes all nodes with the given id\nfunction hammerLib.nodeCreate(nodeClass, nodeID, nodePos)\n\t\n\tif (nodeClass == nil) or (nodeID == nil) or (nodePos == nil) then return end\n\tlocal cmd = \"node_create \" .. nodeClass .. \" \" .. nodeID .. \" \" .. hammerLib.vectorToString(nodePos)\n\tlocal result = \"\"\n\thammerLib.startSession()\n\tresult = hammerLib.runCommand(cmd)\n\thammerLib.endSession()\n\t\n\treturn result\n\t\nend\n-- deletes node(s) with the given nodeID, however if there are more than one node with the nodeID all \n-- are deleted\nfunction hammerLib.nodeDelete(nodeID)\n\t\n\tif (nodeID == nil) then return end\n\tlocal cmd = \"node_delete \" .. nodeID\n\tlocal result = \"\"\n\thammerLib.startSession()\n\tresult = hammerLib.runCommand(cmd)\n\thammerLib.endSession()\n\t\n\treturn result\nend\n\n-- This creates a link between two nodes, not sure if there's a limit no number of links\n-- so far it does at least 2 per node\nfunction hammerLib.nodeLinkCreate(node1ID, node2ID)\n\t\n\tif (node1ID == nil) or (node2ID == nil) then return end\n\tlocal cmd = \"nodelink_create \" .. node1ID .. \" \" .. node2ID\n\tlocal result = \"\"\n\thammerLib.startSession()\n\tresult = hammerLib.runCommand(cmd)\n\thammerLib.endSession()\n\t\n\treturn result\n\t\nend\n\n-- This deletes a connection between two nodes\nfunction hammerLib.nodeLinkDelete(node1ID, node2ID)\n\t\n\tif (node1ID == nil) or (node2ID == nil) then return end\n\tlocal cmd = \"nodelink_delete \" .. node1ID .. \" \" .. node2ID\n\tlocal result = \"\"\n\thammerLib.startSession()\n\tresult = hammerLib.runCommand(cmd)\n\thammerLib.endSession()\n\t\n\treturn result\n\t\nend\n\n-- All loaded, run findGoodVer to store the current vmf version\nhammerLib.findGoodVer()"},"realms":["Server"],"type":"Function"},
{"function":{"name":"RenderedEntity","parent":"halo","type":"libraryfunc","description":"Returns the entity the halo library is currently rendering the halo for.\n\nThe main purpose of this function is to be used in ENTITY:Draw in order not to draw certain parts of the entity when the halo is being rendered, so there's no halo around unwanted entity parts, such as lasers, 3D2D displays, etc.","realm":"Client","file":{"text":"lua/includes/modules/halo.lua","line":"35-L37"},"rets":{"ret":{"text":"If set, the currently rendered entity by the halo library.","name":"","type":"Entity"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Render","parent":"halo","type":"libraryfunc","description":{"text":"Renders a halo according to the specified table, only used internally, called from a GM:PostDrawEffects hook added by the halo library.","internal":""},"realm":"Client","file":{"text":"lua/includes/modules/halo.lua","line":"39-L145"},"args":{"arg":{"text":"Table with info about the halo to draw.","name":"entry","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Add","parent":"hook","type":"libraryfunc","description":"Add a hook to be called upon the given event occurring.","realm":"Shared and Menu","file":{"text":"lua/includes/modules/hook.lua","line":"23"},"args":{"arg":[{"text":"The event to hook on to. This can be any  hook, gameevent after using gameevent.Listen, or custom hook run with hook.Call or hook.Run.","name":"eventName","type":"string","page":",GMGM_Hooks"},{"text":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier **should** be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a string, or a table/object with an IsValid function defined such as an Entity or Panel. numbers and booleans, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","name":"identifier","type":"any"},{"text":"The function to be called, arguments given to it depend on the .","name":"func","type":"function","warning":"Returning any value besides nil from the hook's function will stop other hooks of the same event down the loop from being executed. Only return a value when absolutely necessary and when you know what you are doing.\n\nIt WILL break other addons."}]}},"example":[{"description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs.","code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","output":"\"onThink has been called\" repeating continuously."},{"description":"This works the same as above, but defines the function inside hook.Add rather than above it.","code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","output":"\"Think has been called\" repeating continuously."},{"description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function","code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","output":"\"CustomHook table: 0x00000000  Player [1][PotatoMan]\""}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"GetTable","parent":"hook","type":"libraryfunc","description":"Returns a list of all the hooks registered with hook.Add.","realm":"Shared and Menu","file":{"text":"lua/includes/modules/hook.lua","line":"15"},"rets":{"ret":{"text":"A table of tables. See below for output example.","name":"","type":"table"}}},"example":{"description":"Example of output table structure.","code":"PrintTable( hook.GetTable() )","output":"```\nEntityNetworkedVarChanged:\n\tNetworkedVars\t=\tfunction: 0x1098ef38\nEntityRemoved:\n\tDoDieFunction\t=\tfunction: 0x253b2650\n\tnocollide_fix\t=\tfunction: 0x3f934a90\nInitPostEntity:\n\tPersistenceInit\t=\tfunction: 0x02b6e2c0\nLoadGModSave:\n\tLoadGModSave\t=\tfunction: 0x1098a680\nOnEntityCreated:\n\tmap_sethelinpcnode\t=\tfunction: 0x3ffe3568\nOnViewModelChanged:\n\tEntity [40][gmod_hands]\t=\tfunction: 0x403478a0\nPersistenceLoad:\n\tPersistenceLoad\t=\tfunction: 0x10961cd0\nPersistenceSave:\n\tPersistenceSave\t=\tfunction: 0x253d8f08\nPlayerInitialSpawn:\n\tPlayerAuthSpawn\t=\tfunction: 0x02b63398\nPlayerTick:\n\tTickWidgets\t=\tfunction: 0x10986c40\nPostDrawEffects:\n\tRenderWidgets\t=\tfunction: 0x10979af8\nShutDown:\n\tSavePersistenceOnShutdown\t=\tfunction: 0x10950c18\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Run","parent":"hook","type":"libraryfunc","description":"Calls hooks associated with the given event.\n\nCalls all hooks until one returns something other than nil and then returns that data.\n\n\nIf no hook returns any data, it will try to call the GAMEMODE:<eventName> alternative, if one exists.\n\nThis function internally calls hook.Call.\n\nSee also: gamemode.Call - same as this, but does not call hooks if the gamemode hasn't defined the function.","realm":"Shared and Menu","file":{"text":"lua/includes/modules/hook.lua","line":"52-L59"},"args":{"arg":[{"text":"The event to call hooks for","name":"eventName","type":"string"},{"text":"The arguments to be passed to the hooks","name":"args","type":"vararg"}]},"rets":{"ret":{"text":"Returned data from called hooks","name":"","type":"any"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Call","parent":"hook","type":"libraryfunc","description":"Calls all hooks associated with the given event until one returns something other than nil, and then returns that data.\n\nIn almost all cases, you should use hook.Run instead - it calls hook.Call internally but supplies the gamemode table by itself, making your code neater.","realm":"Shared and Menu","file":{"text":"lua/includes/modules/hook.lua","line":"62-L125"},"args":{"arg":[{"text":"The event to call hooks for","name":"eventName","type":"string"},{"text":"If the gamemode is specified, the gamemode hook within will be called, otherwise not","name":"gamemodeTable","type":"table"},{"text":"The arguments to be passed to the hooks","name":"args","type":"vararg"}]},"rets":{"ret":{"text":"Return data from called hooks. Limited to 6 return values","name":"","type":"vararg"}}},"example":[{"description":"Runs function DoSomething, which eventually calls the event \"DoneDoingSomething\", triggering the hooked function DoSomethingElse.","code":"function DoSomething()\n    --Does something\n    hook.Call(\"DoneDoingSomething\")\nend\n\nfunction DoSomethingElse()\n    --Does something else, once the hook DoneDoingSomething is called.\n    print(\"Done!\")\nend\nhook.Add( \"DoneDoingSomething\", \"Does something else\", DoSomethingElse )\n\nDoSomething()","output":"Done!"},{"description":"You can also make custom functions controllable via hooks.","code":"function MakeCheese()\n    local shouldMakeCheese = hook.Call(\"MakeCheezPleez\")\n\n    if shouldMakeCheese then\n        print(\"yay\")\n    else\n        print(\"nay\")\n    end\nend\n\nfunction MakeCheeseOrNot()\n    if #player.GetAll() >= 1 then\n        return true\n    else\n        return false\n    end\nend\nhook.Add( \"MakeCheezPleez\", \"Does something else\", MakeCheeseOrNot )\n\nMakeCheese()","output":"If there is players in the server, we print \"yay\". If there isn't, we print \"nay\""},{"description":"Calls the event \"DoneDoingSomething\" with args","code":"hook.Add(\"DoneDoingSomething\", \"Does something else\", function(a, b)\n\tprint(a)\n\tprint(b)\nend)\n\n\nhook.Call(\"DoneDoingSomething\", nil, \"Hello\", \"Hey\")","output":"Hello\nHey"}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Remove","parent":"hook","type":"libraryfunc","description":"Removes the hook with the supplied identifier from the given event.","realm":"Shared and Menu","file":{"text":"lua/includes/modules/hook.lua","line":"42"},"args":{"arg":[{"text":"The event name.","name":"eventName","type":"string"},{"text":"The unique identifier of the hook to remove, usually a string.","name":"identifier","type":"any"}]}},"example":{"description":"Darkens the player's screen for 15 seconds.","code":"hook.Add( \"HUDPaint\", \"my_hook_identifier\", function()\n\t\n\tsurface.SetDrawColor( 0, 0, 0, 150 )\n\tsurface.DrawRect( 0, 0, ScrW(), ScrH() )\n\t\nend )\n\ntimer.Simple( 15, function()\n\n\thook.Remove( \"HUDPaint\", \"my_hook_identifier\" )\n\nend )","output":"After the hook gets removed, the dark overlay doesn't appear anymore."},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Post","parent":"http","type":"libraryfunc","description":{"text":"Sends an asynchronous **POST** request to a HTTP server.\n\nHTTP requests returning a status code >= `400` are still considered a success and will call the  callback.\n\nThe  callback is usually only called on DNS or TCP errors (e.g. the website is unavailable or the domain does not exist).","page":[",onSuccessStructures/HTTPRequest",",onFailureStructures/HTTPRequest"],"note":{"text":"HTTP-requests to destinations on private networks (such as `192.168.0.1`) won't work. To enable HTTP-requests to destinations on private networks use Command Line Parameters `-allowlocalhttp` (serverside only).","br":""}},"realm":"Shared and Menu","file":{"text":"lua/includes/modules/http.lua","line":"46-L73"},"args":{"arg":[{"text":"The url to of the website to post.","name":"url","type":"string"},{"text":"The post parameters (x-www-form-urlencoded) to be send to the server. **Keys and values must be strings**.","name":"parameters","type":"table"},{"text":"Function to be called on success. Arguments are\n* string body\n* string size - equal to string.len(body).\n* table headers\n* number code - The HTTP success code.","name":"onSuccess","type":"function","default":"nil"},{"text":"Function to be called on failure. Arguments are\n* string error - The error message.","name":"onFailure","type":"function","default":"nil"},{"text":"KeyValue table for headers.","name":"headers","type":"table","default":"{}"}]}},"example":{"description":"Write a file in PHP, and invoke it from Lua. The output below is written in the file, not in the console.\n\n```\n\n```","code":"http.Post( \"http://localhost/post.php\", { p = \"Gmod\", a = \"Test\" },\n\n\t-- onSuccess function\n\tfunction( body, length, headers, code )\n\t\tprint( \"Done!\" )\n\tend,\n\n\t-- onFailure function\n\tfunction( message )\n\t\tprint( message )\n\tend\n\n)","output":"This is a test. Gmod Test"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"CheckKeyTrapping","parent":"input","type":"libraryfunc","description":"Returns the last key captured by key trapping.","realm":"Client and Menu","rets":{"ret":{"text":"The key, see Enums/KEY","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"CheckKeyTrapping","parent":"input","type":"libraryfunc","description":"Returns the last key captured by key trapping.","realm":"Client and Menu","rets":{"ret":{"text":"The key, see Enums/KEY","name":"","type":"number"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"GetAnalogValue","parent":"input","type":"libraryfunc","description":"Returns the digital value of an analog stick on the current (set up via convars) controller.","realm":"Client and Menu","added":"2021.01.27","args":{"arg":{"text":"The analog axis to poll. See Enums/ANALOG.","name":"axis","type":"number"}},"rets":{"ret":{"text":"The digital value, in range of 0-65535. (verify)","name":"","type":"number"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"GetCursorPos","parent":"input","type":"libraryfunc","description":"Returns the cursor's position on the screen","realm":"Client and Menu","rets":{"ret":[{"text":"The cursors position on the X axis","name":"","type":"number"},{"text":"The cursors position on the Y axis","name":"","type":"number"}]}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"IsButtonDown","parent":"input","type":"libraryfunc","description":"Gets whether the specified button code is down.\n\nUnlike input.IsKeyDown this can also detect joystick presses from Enums/JOYSTICK","realm":"Client and Menu","args":{"arg":{"text":"The button, valid values are in the range of Enums/BUTTON_CODE.","name":"button","type":"number"}},"rets":{"ret":{"text":"Is the button down","name":"","type":"boolean"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"GetKeyName","parent":"input","type":"libraryfunc","description":{"text":"Gets the button name from a numeric button code. The name needs to be translated with language.GetPhrase before being displayed.","note":"Despite the name of the function, this also works for the full range of keys in Enums/BUTTON_CODE."},"realm":"Client and Menu","args":{"arg":{"text":"The button, see Enums/BUTTON_CODE.","name":"button","type":"number"}},"rets":{"ret":{"text":"Button name.","name":"","type":"string"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"GetKeyName","parent":"input","type":"libraryfunc","description":{"text":"Gets the button name from a numeric button code. The name needs to be translated with language.GetPhrase before being displayed.","note":"Despite the name of the function, this also works for the full range of keys in Enums/BUTTON_CODE."},"realm":"Client and Menu","args":{"arg":{"text":"The button, see Enums/BUTTON_CODE.","name":"button","type":"number"}},"rets":{"ret":{"text":"Button name.","name":"","type":"string"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"GetKeyCode","parent":"input","type":"libraryfunc","description":"Gets the button code from a button name. This is opposite of input.GetKeyName.","realm":"Client and Menu","args":{"arg":{"text":"The internal button name, such as  or .","name":"button","type":"string","key":["E","SHIFT"]}},"rets":{"ret":{"text":"The button code, see Enums/BUTTON_CODE.","name":"","type":"number"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"IsKeyTrapping","parent":"input","type":"libraryfunc","description":"Returns whether key trapping is activate and the next key press will be captured.","realm":"Client and Menu","rets":{"ret":{"text":"Whether key trapping active or not","name":"","type":"boolean"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"IsMouseDown","parent":"input","type":"libraryfunc","description":"Gets whether a mouse button is down","realm":"Client and Menu","args":{"arg":{"text":"The key, see Enums/MOUSE","name":"mouseKey","type":"number"}},"rets":{"ret":{"text":"Is the key down","name":"","type":"boolean"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"IsKeyDown","parent":"input","type":"libraryfunc","description":"Gets whether a key is down.","realm":"Client and Menu","args":{"arg":{"text":"The key, see Enums/KEY.","name":"key","type":"number"}},"rets":{"ret":{"text":"Is the key down","name":"","type":"boolean"}}},"example":{"description":{"text":"Show cursor if you press .","key":"ALT"},"code":"-- Note this may prevent the cursor from naturally appearing without alt\nhook.Add( \"Think\", \"BM_Clients_Key\", function()\n\tgui.EnableScreenClicker( input.IsKeyDown( KEY_LALT ) )\nend )"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"IsShiftDown","parent":"input","type":"libraryfunc","description":"Gets whether a shift key is being pressed","realm":"Client and Menu","rets":{"ret":{"text":"isDown","name":"","type":"boolean"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"LookupBinding","parent":"input","type":"libraryfunc","description":"Returns the client's bound key for the specified console command. If the player has multiple keys bound to a single command, there is no defined behavior of which key will be returned.","realm":"Client and Menu","args":{"arg":[{"text":"The binding name","name":"binding","type":"string"},{"text":"True if the binding should match exactly","name":"exact","type":"boolean","default":"false"}]},"rets":{"ret":{"text":"The first key found with that binding or no value if no key with given binding was found.\n\nSee also input.GetKeyCode.","name":"","type":"string"}}},"example":{"description":"Demonstrates usage of this function and its arguments.","code":"print( input.LookupBinding( \"+use\" ) )\nprint( input.LookupBinding( \"use\" ) )\nprint( input.LookupBinding( \"+use\", true ) )\nprint( input.LookupBinding( \"use\", true ) )","output":"```\ne\ne\ne\nno value\n```"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"SelectWeapon","parent":"input","type":"libraryfunc","description":"Switches to the provided weapon on the next CUserCmd generation/CreateMove call. Direct binding to [CInput::MakeWeaponSelection](https://github.com/LestaD/SourceEngine2007/blob/43a5c90a5ada1e69ca044595383be67f40b33c61/se2007/game/client/in_main.cpp#L929-L932).","realm":"Client","args":{"arg":{"text":"The weapon entity to switch to.","name":"weapon","type":"Weapon"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetCursorPos","parent":"input","type":"libraryfunc","description":"Sets the cursor's position on the screen, relative to the topleft corner of the window","realm":"Client and Menu","args":{"arg":[{"text":"X coordinate for mouse position","name":"mouseX","type":"number"},{"text":"Y coordinate for mouse position","name":"mouseY","type":"number"}]}},"example":{"description":"Makes the user's cursor circle their screen","code":"hook.Add( 'HUDPaint', 'CircleScreen', function()\n\tinput.SetCursorPos( ScrW() / 2 + math.sin(CurTime()) * ScrW() / 2, ScrH() / 2 + math.cos(CurTime()) * ScrH() / 2 )\nend)"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"LookupKeyBinding","parent":"input","type":"libraryfunc","description":"Returns the bind string that the given key is bound to.","realm":"Client and Menu","args":{"arg":{"text":"Key from Enums/BUTTON_CODE","name":"key","type":"number"}},"rets":{"ret":{"text":"The bind string of the given key.","name":"","type":"string"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"TranslateAlias","parent":"input","type":"libraryfunc","description":"Translates a console command alias, basically reverse of the `alias` console command.","realm":"Client and Menu","added":"2020.04.29","args":{"arg":{"text":"The alias to lookup.","name":"command","type":"string"}},"rets":{"ret":{"text":"The command(s) this alias will execute if ran, or nil if the alias doesn't exist.","name":"","type":"string"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"StartKeyTrapping","parent":"input","type":"libraryfunc","description":"Begins waiting for a key to be pressed so we can save it for input.CheckKeyTrapping. Used by the DBinder.","realm":"Client and Menu"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"WasKeyReleased","parent":"input","type":"libraryfunc","description":"Returns whether a key was released in the same frame this function was called.\n\nThis function only works in Move hooks, and will detect key releases even in main menu or when a typing in a text field.","realm":"Client and Menu","args":{"arg":{"text":"The key, see Enums/KEY.","name":"key","type":"number"}},"rets":{"ret":{"text":"True if the key was released the same frame that this function was called, false otherwise.","name":"","type":"boolean"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"WasKeyPressed","parent":"input","type":"libraryfunc","description":"Returns whether a key was initially pressed in the same frame this function was called.\n\nThis function only works in Move hooks, and will detect key presses even in main menu or when a typing in a text field.","realm":"Client and Menu","args":{"arg":{"text":"The key, see Enums/KEY.","name":"key","type":"number"}},"rets":{"ret":{"text":"True if the key was initially pressed the same frame that this function was called, false otherwise.","name":"","type":"boolean"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"WasMouseDoublePressed","parent":"input","type":"libraryfunc","description":"Returns whether a mouse key was double pressed in the same frame this function was called.\n\n\nIf this function returns true, input.WasMousePressed will return false.\n\nThis function only works in Move hooks, and will detect mouse events even in main menu or when a typing in a text field.","realm":"Client and Menu","args":{"arg":{"text":"The mouse button to test, see Enums/MOUSE","name":"button","type":"number"}},"rets":{"ret":{"text":"Whether the mouse key was double pressed or not.","name":"","type":"boolean"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"WasKeyTyped","parent":"input","type":"libraryfunc","description":"Returns whether the key is being held down or not.\n\nThis function only works in Move hooks, and will detect key events even in main menu or when a typing in a text field.","realm":"Client and Menu","args":{"arg":{"text":"The key to test, see Enums/KEY","name":"key","type":"number"}},"rets":{"ret":{"text":"Whether the key is being held down or not.","name":"","type":"boolean"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"WasMousePressed","parent":"input","type":"libraryfunc","description":"Returns whether a mouse key was initially pressed in the same frame this function was called.\n\n\nIf input.WasMouseDoublePressed returns true, this function will return false.\n\nThis function only works in Move hooks, and will detect mouse events even in main menu or when a typing in a text field.","realm":"Client and Menu","args":{"arg":{"text":"The key, see Enums/MOUSE","name":"key","type":"number"}},"rets":{"ret":{"text":"True if the mouse key was initially pressed the same frame that this function was called, false otherwise.","name":"","type":"boolean"}}},"example":{"description":"Example usage","code":"hook.Add( \"CreateMove\", \"fafawefafwf\", function()\n\tif ( input.WasMousePressed( MOUSE_LEFT ) ) then print( \"Left mouse button was pressed\" ) end\nend )"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"WasMousePressed","parent":"input","type":"libraryfunc","description":"Returns whether a mouse key was initially pressed in the same frame this function was called.\n\n\nIf input.WasMouseDoublePressed returns true, this function will return false.\n\nThis function only works in Move hooks, and will detect mouse events even in main menu or when a typing in a text field.","realm":"Client and Menu","args":{"arg":{"text":"The key, see Enums/MOUSE","name":"key","type":"number"}},"rets":{"ret":{"text":"True if the mouse key was initially pressed the same frame that this function was called, false otherwise.","name":"","type":"boolean"}}},"example":{"description":"Example usage","code":"hook.Add( \"CreateMove\", \"fafawefafwf\", function()\n\tif ( input.WasMousePressed( MOUSE_LEFT ) ) then print( \"Left mouse button was pressed\" ) end\nend )"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"flush","parent":"jit","type":"libraryfunc","description":"Flushes the whole cache of compiled code.","realm":"Shared and Menu"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"attach","parent":"jit","type":"libraryfunc","description":{"text":"You can attach callbacks to a number of compiler events with jit.attach. The callback can be called:\n\n* when a function has been compiled to bytecode (\"bc\");\n* when trace recording starts or stops (\"trace\");\n* as a trace is being recorded (\"record\");\n* or when a trace exits through a side exit (\"texit\").\n\nSet a callback with jit.attach(callback, \"event\") and clear the same callback with jit.attach(callback)","warning":"This function isn't officially documented on LuJIT wiki, use it at your own risk."},"realm":"Shared and Menu","args":{"arg":[{"text":"The callback function.\n\nThe arguments passed to the callback depend on the event being reported:\n\n* \"bc\":\nfunction func - The function that's just been recorded\n\n\n\n* \"trace\":\nstring what - description of the trace event: \"flush\", \"start\", \"stop\", \"abort\". Available for all events.\n\n\nnumber tr - The trace number. Not available for flush.\n\n\nfunction func - The function being traced. Available for start and abort.\n\n\nnumber pc - The program counter - the bytecode number of the function being recorded (if this a Lua function). Available for start and abort.\n\n\nnumber otr - start: the parent trace number if this is a side trace, abort: abort code\n\n\nstring oex - start: the exit number for the parent trace, abort: abort reason (string)\n\n\n\n* \"record\":\nnumber tr - The trace number. Not available for flush.\n\n\nfunction func - The function being traced. Available for start and abort.\n\n\nnumber pc - The program counter - the bytecode number of the function being recorded (if this a Lua function). Available for start and abort.\n\n\nnumber depth  - The depth of the inlining of the current bytecode.\n\n\n\n* \"texit\":\nnumber tr - The trace number. Not available for flush.\n\n\nnumber ex - The exit number\n\n\nnumber ngpr - The number of general-purpose and floating point registers that are active at the exit.\n\n\nnumber nfpr - The number of general-purpose and floating point registers that are active at the exit.","name":"callback","type":"function"},{"text":"The event to hook into.","name":"event","type":"string"}]}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"status","parent":"jit","type":"libraryfunc","description":"Returns the status of the JIT compiler and the current optimizations enabled.","realm":"Shared and Menu","rets":{"ret":[{"text":"Is JIT enabled","name":"","type":"boolean"},{"text":"Strings for CPU-specific features and enabled optimizations","name":"","type":"any"}]}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Add","parent":"killicon","type":"libraryfunc","description":"Creates new kill icon using a texture.","realm":"Client","args":{"arg":[{"text":"Weapon or entity class","name":"class","type":"string"},{"text":"Path to the texture","name":"texture","type":"string"},{"text":"Color of the kill icon","name":"color","type":"table"}]}},"example":{"description":"Creates default killicon.","code":"killicon.Add( \"default\", \"HUD/killicons/default\", Color( 255, 80, 0, 255 ) )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"on","parent":"jit","type":"libraryfunc","description":"Enables LuaJIT Lua compilation.","realm":"Shared and Menu"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"on","parent":"jit","type":"libraryfunc","description":"Enables LuaJIT Lua compilation.","realm":"Shared and Menu"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"AddAlias","parent":"killicon","type":"libraryfunc","description":"Creates kill icon from existing one.","realm":"Client","args":{"arg":[{"text":"New class of the kill icon","name":"new_class","type":"string"},{"text":"Already existing kill icon class","name":"existing_class","type":"string"}]}},"example":{"description":"Copies prop_physics kill icon to prop_ragdoll.","code":"killicon.AddAlias( \"prop_ragdoll\", \"prop_physics\" )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddFont","parent":"killicon","type":"libraryfunc","description":"Adds kill icon for given weapon/entity class using special font.","realm":"Client","args":{"arg":[{"text":"Weapon or entity class","name":"class","type":"string"},{"text":"Font to be used","name":"font","type":"string"},{"text":"The symbol to be used","name":"symbol","type":"string"},{"text":"Color of the killicon","name":"color","type":"table"}]}},"example":{"description":"Example of using the function. Adds pistol kill icon.","code":"killicon.AddFont( \"weapon_pistol\", \"HL2MPTypeDeath\", \"-\", Color( 255, 80, 0, 255 ) )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"Draw","parent":"killicon","type":"libraryfunc","description":"Draws a kill icon.","realm":"Client","args":{"arg":[{"text":"X coordinate of the icon","name":"x","type":"number"},{"text":"Y coordinate of the icon","name":"y","type":"number"},{"text":"Classname of the kill icon","name":"name","type":"string"},{"text":"Alpha/transparency value ( 0 - 255 ) of the icon","name":"alpha","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Exists","parent":"killicon","type":"libraryfunc","description":"Checks if kill icon exists for given class.","realm":"Client","args":{"arg":{"text":"The class to test","name":"class","type":"string"}},"rets":{"ret":{"text":"Returns true if kill icon exists","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetSize","parent":"killicon","type":"libraryfunc","description":"Returns the size of a kill icon.","realm":"Client","args":{"arg":{"text":"Classname of the kill icon","name":"name","type":"string"}},"rets":{"ret":[{"text":"Width of the kill icon","name":"","type":"number"},{"text":"Height of the kill icon","name":"","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Add","parent":"language","type":"libraryfunc","description":"Adds a language item. Language placeholders preceded with \"#\" are replaced with full text in Garry's Mod once registered with this function.","realm":"Client and Menu","args":{"arg":[{"text":"The key for this phrase, without the preceding \"#\".","name":"placeholder","type":"string"},{"text":"The phrase that should be displayed whenever this key is used.","name":"fulltext","type":"string"}]}},"example":{"description":"Small excerpt from a STOOL named cooltool. It has been registered as cooltool.","code":"language.Add(\"Tool_cooltool_name\", \"The really cool tool\")\nlanguage.Add(\"Tool_cooltool_desc\", \"Do some random cool stuff.\")\nlanguage.Add(\"Tool_cooltool_0\", \"Left-click: Cool Stuff. Right-click: Nothing.\")\nlanguage.Add(\"Undone_cooltool\", \"Cool stuff has been undone.\")","output":"When the player presses undo, \"Cool stuff has been undone\" will be shown. The cooltool's name will be \"The really cool tool\". Below that, where the description is shown, \"Do some random cool stuff.\" will be shown. Below that, where the instructions or additional notes for the tool are shown, it will display \"Left-click: Cool Stuff. Right-click: Nothing.\"."},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"GetPhrase","parent":"language","type":"libraryfunc","description":"Retrieves the translated version of inputted string. Useful for concentrating multiple translated strings.","realm":"Client and Menu","args":{"arg":{"text":"The phrase to translate","name":"phrase","type":"string"}},"rets":{"ret":{"text":"The translated phrase, or the input string if no translation was found","name":"","type":"string"}}},"example":{"description":"An example on usage of this function.","code":"print( \"Our phrase is: \" .. language.GetPhrase( \"limit_physgun\" ) )","output":"Our phrase is: Limited Physgun"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"Contains","parent":"list","type":"libraryfunc","description":"Returns true if the list contains the value. (as a value - not a key)\n\nFor a function that looks for a key and not a value see list.HasEntry.","realm":"Shared and Menu","file":{"text":"lua/includes/modules/list.lua","line":"67-L80"},"args":{"arg":[{"text":"List to search through","name":"list","type":"string"},{"text":"The value to test","name":"value","type":"any"}]},"rets":{"ret":{"text":"Returns true if the list contains the value, false otherwise","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Add","parent":"list","type":"libraryfunc","description":"Adds an item to a named list","realm":"Shared and Menu","file":{"text":"lua/includes/modules/list.lua","line":"57-L62"},"args":{"arg":[{"text":"The list identifier","name":"identifier","type":"string"},{"text":"The item to add to the list","name":"item","type":"any"}]},"rets":{"ret":{"text":"The index at which the item was added.","type":"number"}}},"example":{"description":"From weapons/gmod_tool/stools/paint.lua","code":"list.Add( \"PaintMaterials\", \"Eye\" )\nlist.Add( \"PaintMaterials\", \"Smile\" )\nlist.Add( \"PaintMaterials\", \"Light\" )"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Get","parent":"list","type":"libraryfunc","description":"Returns a copy of the list stored at identifier","realm":"Shared and Menu","file":{"text":"lua/includes/modules/list.lua","line":"18-L23"},"args":{"arg":{"text":"The list identifier","name":"identifier","type":"string"}},"rets":{"ret":{"text":"The copy of the list","name":"","type":"table"}}},"example":{"description":"Get every available NPC from the client:","code":"PrintTable( list.Get( \"NPC\" ) )"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"GetForEdit","parent":"list","type":"libraryfunc","description":"Returns the actual table of the list stored at identifier. Modifying this will affect the stored list","realm":"Shared and Menu","file":{"text":"lua/includes/modules/list.lua","line":"28-L33"},"args":{"arg":{"text":"The list identifier","name":"identifier","type":"string"}},"rets":{"ret":{"text":"The actual list","name":"","type":"table"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"HasEntry","parent":"list","type":"libraryfunc","description":"Returns true if the list contains the given key.\n\nFor a function that looks for values and not keys see list.Contains.","realm":"Shared and Menu","file":{"text":"lua/includes/modules/list.lua","line":"85-L90"},"args":{"arg":[{"text":"List to search through","name":"list","type":"string"},{"text":"The key to test","name":"key","type":"any"}]},"rets":{"ret":{"text":"Returns true if the list contains the key, false otherwise","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"GetTable","parent":"list","type":"libraryfunc","description":"Returns a a list of all lists currently in use.","realm":"Shared and Menu","file":{"text":"lua/includes/modules/list.lua","line":"38-L42"},"added":"2020.10.14","rets":{"ret":{"text":"The list of all lists, i.e. a table containing names of all lists.","name":"","type":"table"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Set","parent":"list","type":"libraryfunc","description":"Sets a specific position in the named list to a value.","realm":"Shared and Menu","file":{"text":"lua/includes/modules/list.lua","line":"47-L52"},"args":{"arg":[{"text":"The list identifier","name":"identifier","type":"string"},{"text":"The key in the list to set","name":"key","type":"any"},{"text":"The item to set to the list as key","name":"item","type":"any"}]}},"example":[{"description":"Adds an NPC to the spawnmenu NPC list with the name \"Fisherman\", classname of \"npc_fisherman\" and the default weapon of \"weapon_oldmanharpoon\"","code":"-- Lost Coast\nlist.Set(\"NPC\", \"npc_fisherman\", {\n\tName = \"Fisherman\",\n\tClass = \"npc_fisherman\",\n\tWeapons = { \"weapon_oldmanharpoon\" },\n\tCategory = Category\n})"},{"description":"Adds a new \"Desktop Widget\" to the Context Menu (C Menu). (This is how Player Model selection is added)","code":"list.Set( \"DesktopWindows\", \"My Custom Context Menu Icon\", {\n\ttitle = \"Context Menu Icon\",\n\ticon = \"icon64/icon.png\",\n\tinit = function( icon, window )\n\t\t--Your code here\n\tend\n} )"}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Parse","parent":"markup","type":"libraryfunc","description":"Parses markup into a MarkupObject. Currently, this only supports fonts and colors as demonstrated in the example.","realm":"Client","file":{"text":"lua/includes/modules/markup.lua/file>","line":"233-455","args":{"arg":[{"text":"The markup to be parsed.","name":"markup","type":"string"},{"text":"The max width of the output","name":"maxWidth","type":"number","default":"nil"}]},"rets":{"ret":{"text":"The parsed markup object ready to be drawn.","name":"","type":"MarkupObject"}}}},"example":{"description":{"text":"Renders a markup string on the HUD.","note":{"text":"The the","colour":{"text":"tag can also be written as","color":{"text":", and the","font":{"text":"tag can also be written as","face":""}}}}},"code":{"text":"local parsed = markup.Parse(\"\\n\")\n\nhook.Add(\"HUDPaint\", \"MarkupTest\", function()\n\tparsed:Draw(100, 100, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)\nend)","font":{"text":"changed font","default":"Default"},"colour":"changed colour"},"output":{"image":{"src":"Screenshot-2012-08-30_13.13.59.png"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"acos","parent":"math","type":"libraryfunc","description":"Returns the [arccosine](https://en.wikipedia.org/wiki/Arccosine) of the given number.","realm":"Shared and Menu","args":{"arg":{"text":"Cosine value in range of -1 to 1.","name":"cos","type":"number"}},"rets":{"ret":{"text":"An angle in radians, between 0 and pi, which has the given cos value.\n\nnan if the argument is out of range.","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Approach","parent":"math","type":"libraryfunc","description":"Gradually approaches the target value by the specified amount.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/math.lua","line":"168-184"},"args":{"arg":[{"text":"The value we're currently at.","name":"current","type":"number"},{"text":"The target value. This function will never overshoot this value.","name":"target","type":"number"},{"text":"The amount that the current value is allowed to change by to approach the target. (It makes no difference whether this is positive or negative.)","name":"change","type":"number"}]},"rets":{"ret":{"text":"New current value, closer to the target than it was previously.","name":"","type":"number"}}},"example":[{"description":"Demonstrates what this function does","code":"print( math.Approach( 0, 5, 1 ) ) -- attempts to increment 0 by 1, 0 + 1 is less than 5 so returns 1\nprint( math.Approach( 4, 5, 3 ) ) -- attempts to increment 4 by 3, 4 + 3 = 7 is greater than 5 so returns 5","output":"```\n1\n5\n```"},{"description":"Common usage example of this function with a control variable.","code":"local MyNumber = 0\nlocal Target = 0\nlocal LastThink = 0\nlocal ChangeRate = 1\n\nhook.Add( \"Think\", \"math.Approach Example\", function()\n\tlocal now = CurTime()\n\tlocal timepassed = now - LastThink\n\tLastThink = now\n\n\tMyNumber = math.Approach( MyNumber, Target, ChangeRate * timepassed )\n\n\t-- Normally, you would use MyNumber in code that appears here.\nend )\n\n-- The following functions are for example only:\nfunction GetMyNumber()\n\treturn MyNumber\nend\n\nfunction SetMyNumberTarget( newtarget )\n\tTarget = newtarget\nend\n\nfunction SetMyNumberChangeRate( newrate )\n\tChangeRate = newrate\nend"}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"AngleDifference","parent":"math","type":"libraryfunc","description":"Calculates the difference between two angles.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/math.lua","line":"197-L207"},"args":{"arg":[{"text":"The first angle.","name":"a","type":"number"},{"text":"The second angle.","name":"b","type":"number"}]},"rets":{"ret":{"text":"The difference between the angles between -180 and 180","name":"","type":"number"}}},"example":{"description":"Find the angle difference between various angles","code":"print(\"Angle difference between 159 and 240 is \" .. math.AngleDifference(159, 240))\nprint(\"Angle difference between 240 and 159 is \" .. math.AngleDifference(240, 159))\nprint(\"Angle difference between 58 and 145 is \" .. math.AngleDifference(58, 145))","output":{"text":"Angle difference between 159 and 240 is -81\nAngle difference between 240 and 159 is 81\nAngle difference between 58 and 145 is -87","br":["",""]}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"abs","parent":"math","type":"libraryfunc","description":"Calculates the absolute value of a number (effectively removes any negative sign).","realm":"Shared and Menu","args":{"arg":{"text":"The number to get the absolute value of.","name":"x","type":"number"}},"rets":{"ret":{"text":"The absolute value.","name":"","type":"number"}}},"example":{"description":"Demonstrates what this function does.","code":"print( math.abs( 15 ) )\nprint( math.abs( -15 ) )","output":"```\n15\n15\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"ApproachAngle","parent":"math","type":"libraryfunc","description":{"text":"Increments an angle towards another by specified rate.","note":"This function is for numbers representing angles (0-360), NOT Angle objects!"},"realm":"Shared and Menu","file":{"text":"lua/includes/extensions/math.lua","line":"203-L209"},"args":{"arg":[{"text":"The current angle to increase","name":"currentAngle","type":"number"},{"text":"The angle to increase towards","name":"targetAngle","type":"number"},{"text":"The amount to approach the target angle by","name":"rate","type":"number"}]},"rets":{"ret":{"text":"Modified angle","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"atan","parent":"math","type":"libraryfunc","description":"Returns the [arctangent](https://en.wikipedia.org/wiki/Inverse_trigonometric_functions) of the given number.","realm":"Shared and Menu","args":{"arg":{"text":"Tangent value.","name":"normal","type":"number"}},"rets":{"ret":{"text":"An angle in radians, in the range -pi/2 to pi/2, which has the given tangent.","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"asin","parent":"math","type":"libraryfunc","description":"Returns the [arcsine](https://en.wikipedia.org/wiki/Inverse_trigonometric_functions) of the given number.","realm":"Shared and Menu","args":{"arg":{"text":"Sine value in the range of -1 to 1.","name":"normal","type":"number"}},"rets":{"ret":{"text":"An angle in radians, in the range -pi/2 to pi/2, which has the given sine value.\n\nnan if the argument is out of range.","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"BinToInt","parent":"math","type":"libraryfunc","description":"Converts a binary string into a number.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/math.lua","line":"13-L19"},"args":{"arg":{"text":"Binary string to convert","name":"string","type":"string"}},"rets":{"ret":{"text":"Base 10 number.","name":"","type":"number"}}},"example":{"description":"Will print the string \"101010101\" as a number in console.","code":"print( math.BinToInt( \"101010101\" ) )","output":"341"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"atan2","parent":"math","type":"libraryfunc","description":{"text":"functions like math.atan(y / x), except it also takes into account the quadrant of the angle and so doesn't have a limited range of output.","note":"The Y argument comes first!"},"realm":"Shared and Menu","args":{"arg":[{"text":"Y coordinate.","name":"y","type":"number"},{"text":"X coordinate.","name":"x","type":"number"}]},"rets":{"ret":{"text":"The angle of the line from (0, 0) to (x, y) in radians, in the range -pi to pi.","name":"","type":"number"}}},"example":{"description":"atan( 1 ) and atan2( 1, 1 ) are both math.pi / 4\n\natan2( -1, -1 ) equals to ( (-3) * math.pi ) / 4","code":"print( atan( 1 ) )\nprint( atan2( 1, 1 ) )\nprint( atan2( -1, -1 ) )","output":"0.7853981633974483\n\n0.7853981633974483\n\n-2.356194490192345"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"BSplinePoint","parent":"math","type":"libraryfunc","description":"Basic code for  algorithm.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/math.lua","line":"132-L148"},"args":{"arg":[{"text":"From 0 to 1, where alongside the spline the point will be.","name":"tDiff","type":"number"},{"text":"A table of Vectors. The amount cannot be less than 4.","name":"tPoints","type":"table"},{"text":"Just leave this at 1.","name":"tMax","type":"number"}]},"rets":{"ret":{"text":"Point on Bezier curve, related to tDiff.","name":"","type":"Vector"}}},"example":{"description":"Example usage of the function, makes a black box moving along the beizer curve made out of 4 points.","code":"local points = { Vector( 100, 100, 0 ), Vector( 200, 200, 0 ), Vector( 300, 100, 0 ), Vector( 400, 200, 0 ) }\n\nhook.Add( \"HUDPaint\", \"BSplinePointExample\", function()\n\t-- Draw the points\n\tfor _, p in ipairs( points ) do\n\t\tdraw.RoundedBox( 0, p.x - 2, p.y - 2, 4, 4, color_white )\n\tend\n\n\t-- Draw the spline\n\tlocal pos = math.BSplinePoint( ( math.cos( CurTime() ) + 1 ) / 2, points, 1 )\n\tdraw.RoundedBox( 0, pos.x - 2, pos.y - 2, 4, 4, Color( 0, 0, 0 ) )\nend )"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"BSplinePoint","parent":"math","type":"libraryfunc","description":"Basic code for  algorithm.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/math.lua","line":"132-L148"},"args":{"arg":[{"text":"From 0 to 1, where alongside the spline the point will be.","name":"tDiff","type":"number"},{"text":"A table of Vectors. The amount cannot be less than 4.","name":"tPoints","type":"table"},{"text":"Just leave this at 1.","name":"tMax","type":"number"}]},"rets":{"ret":{"text":"Point on Bezier curve, related to tDiff.","name":"","type":"Vector"}}},"example":{"description":"Example usage of the function, makes a black box moving along the beizer curve made out of 4 points.","code":"local points = { Vector( 100, 100, 0 ), Vector( 200, 200, 0 ), Vector( 300, 100, 0 ), Vector( 400, 200, 0 ) }\n\nhook.Add( \"HUDPaint\", \"BSplinePointExample\", function()\n\t-- Draw the points\n\tfor _, p in ipairs( points ) do\n\t\tdraw.RoundedBox( 0, p.x - 2, p.y - 2, 4, 4, color_white )\n\tend\n\n\t-- Draw the spline\n\tlocal pos = math.BSplinePoint( ( math.cos( CurTime() ) + 1 ) / 2, points, 1 )\n\tdraw.RoundedBox( 0, pos.x - 2, pos.y - 2, 4, 4, Color( 0, 0, 0 ) )\nend )"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Clamp","parent":"math","type":"libraryfunc","description":"Clamps a number between a minimum and maximum value.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/math.lua","line":"35-L41"},"args":{"arg":[{"text":"The number to clamp.","name":"input","type":"number"},{"text":"The minimum value, this function will **never** return a number less than this.","name":"min","type":"number"},{"text":"The maximum value, this function will **never** return a number greater than this.","name":"max","type":"number"}]},"rets":{"ret":{"text":"The clamped value.","name":"","type":"number"}}},"example":[{"description":"Demonstrates what this function does.","code":"print( math.Clamp( 10, 0, 5 ) ) -- 10 is greater than 5 so returns 5\nprint( math.Clamp( 3, 0, 5 ) ) -- 3 is greater than 0 and less than 5, so returns 3\nprint( math.Clamp( -1, 0, 5 ) ) -- -1 is less than 0, so returns 0","output":"```\n5\n3\n0\n```"},{"description":"Heals player by 10%, but won't let their health go above 100.","code":"ply:SetHealth( math.Clamp( ply:Health() + 10, 0, 100 ) )"}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"ceil","parent":"math","type":"libraryfunc","description":"Ceils or rounds a number up.","realm":"Shared and Menu","args":{"arg":{"text":"The number to be rounded up.","name":"number","type":"number"}},"rets":{"ret":{"text":"ceiled numbers","name":"","type":"number"}}},"example":{"description":"Round pi.","code":"print(math.ceil(math.pi))","output":"4"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"cosh","parent":"math","type":"libraryfunc","description":"Returns the [hyperbolic cosine](https://en.wikipedia.org/wiki/Cosh_(mathematical_function)) of the given angle.","realm":"Shared and Menu","args":{"arg":{"text":"Angle in radians.","name":"number","type":"number"}},"rets":{"ret":{"text":"The hyperbolic cosine of the given angle.","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"deg","parent":"math","type":"libraryfunc","description":"Converts radians to degrees.","realm":"Shared and Menu","args":{"arg":{"text":"Value to be converted to degrees.","name":"radians","type":"number"}},"rets":{"ret":{"text":"degrees","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Dist","parent":"math","type":"libraryfunc","description":{"text":"Returns the difference between two points in 2D space. Alias of math.Distance.","deprecated":"You should use math.Distance instead"},"realm":"Shared and Menu","file":{"text":"lua/includes/extensions/math.lua","line":"11"},"args":{"arg":[{"text":"X position of first point","name":"x1","type":"number"},{"text":"Y position of first point","name":"y1","type":"number"},{"text":"X position of second point","name":"x2","type":"number"},{"text":"Y position of second point","name":"y2","type":"number"}]},"rets":{"ret":{"text":"Distance between the two points.","name":"","type":"number"}}},"example":{"description":"Demonstrates the use of this function.","code":"print( math.Distance( 1, 2, 5, 6 ) ) -- distance bet","output":"5.6568542494924"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Distance","parent":"math","type":"libraryfunc","description":"Returns the difference between two points in 2D space.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/math.lua","line":"2-L10"},"args":{"arg":[{"text":"X position of first point","name":"x1","type":"number"},{"text":"Y position of first point","name":"y1","type":"number"},{"text":"X position of second point","name":"x2","type":"number"},{"text":"Y position of second point","name":"y2","type":"number"}]},"rets":{"ret":{"text":"Distance between the two points","name":"","type":"number"}}},"example":{"description":"Demonstrates the use of this function.","code":"print( math.Distance( 1, 2, 5, 6 ) ) -- distance bet","output":"5.6568542494924"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"EaseInOut","parent":"math","type":"libraryfunc","description":"Calculates the progress of a value fraction, taking in to account given easing fractions","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/math.lua","line":"54-L85"},"args":{"arg":[{"text":"Fraction of the progress to ease, from 0 to 1","name":"progress","type":"number"},{"text":"Fraction of how much easing to begin with","name":"easeIn","type":"number"},{"text":"Fraction of how much easing to end with","name":"easeOut","type":"number"}]},"rets":{"ret":{"text":"\"Eased\" Value, from 0 to 1","name":"","type":"number"}}},"example":{"description":"Calculates the easing of three situations","code":"print(math.EaseInOut(0.1, 0.1, 0.1))\nprint(math.EaseInOut(0.2, 0.1, 0.1))\nprint(math.EaseInOut(0.3, 0.1, 0.1))","output":"0.055555...\n0.166666...\n0.277777..."},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"exp","parent":"math","type":"libraryfunc","description":"Returns the x power of the Euler constant.","realm":"Shared and Menu","args":{"arg":{"text":"The exponent for the function.","name":"exponent","type":"number"}},"rets":{"ret":{"text":"e to the specified power","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"cos","parent":"math","type":"libraryfunc","description":"Returns the [cosine](https://en.wikipedia.org/wiki/Trigonometric_functions#cos) of given angle.","realm":"Shared and Menu","args":{"arg":{"text":"Angle in radians","name":"number","type":"number"}},"rets":{"ret":{"text":"Cosine of given angle","name":"","type":"number"}}},"example":{"description":"Prints the cosine of 3.14159265 (Pi)","code":"print( math.cos( 3.14159265 ) )","output":"-1"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"floor","parent":"math","type":"libraryfunc","description":"Floors or rounds a number down.","realm":"Shared and Menu","args":{"arg":{"text":"The number to be rounded down.","name":"number","type":"number"}},"rets":{"ret":{"text":"floored numbers","name":"","type":"number"}}},"example":[{"description":"Round pi.","code":"print(math.floor(math.pi))","output":"3"},{"description":"Demonstrates the difference between math.Round and math.floor.","code":"local value = 3.6\n\nprint( math.Round( value ), math.floor( value ) )","output":"4 3"}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"fmod","parent":"math","type":"libraryfunc","description":"Returns the modulus of the specified values.\n\nWhile this is similar to the % operator, **it will return a negative value if the first argument is negative**, whereas the % operator will return a `positive` value **even if the first operand is negative**.","realm":"Shared and Menu","args":{"arg":[{"text":"The base value.","name":"base","type":"number"},{"text":"The modulator.","name":"modulator","type":"number"}]},"rets":{"ret":{"text":"The calculated modulus.","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"frexp","parent":"math","type":"libraryfunc","description":"**Lua reference description**: Returns `m` and `e` such that `x = m2e`, `e` is an integer and the absolute value of `m` is in the range ((0.5, 1) (or zero when x is zero).\n\nUsed to split the number value into a normalized fraction and an exponent. Two values are returned: the first is a multiplier in the range `1/2` (**inclusive**) to `1` (**exclusive**) and the second is an integer exponent.\n\nThe result is such that `x = m*2^e`.","realm":"Shared and Menu","args":{"arg":{"text":"The value to get the normalized fraction and the exponent from.","name":"x","type":"number"}},"rets":{"ret":[{"text":"m, multiplier - between `0.5` and `1`.","name":"","type":"number"},{"text":"e, exponent - **always** an integer.","name":"","type":"number"}]}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"ldexp","parent":"math","type":"libraryfunc","description":"Takes a normalised number and returns the floating point representation.","realm":"Shared and Menu","args":{"arg":[{"text":"The value to get the normalized fraction and the exponent from.","name":"normalizedFraction","type":"number"},{"text":"The value to get the normalized fraction and the exponent from.","name":"exponent","type":"number"}]},"rets":{"ret":{"text":"result","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"IntToBin","parent":"math","type":"libraryfunc","description":"Converts an integer to a binary (base-2) string.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/math.lua","line":"21-L33"},"args":{"arg":{"text":"Number to be converted.","name":"int","type":"number"}},"rets":{"ret":{"text":"Binary number string. The length of this will always be a multiple of 3.","name":"","type":"string"}}},"example":{"description":"Prints the binary representation of 4","code":"print(math.IntToBin(4))","output":"100"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"log","parent":"math","type":"libraryfunc","description":"With one argument, return the natural logarithm of x (to base e).\n\nWith two arguments, return the logarithm of x to the given base, calculated as log(x)/log(base).","realm":"Shared and Menu","args":{"arg":[{"text":"The value to get the base from exponent from.","name":"x","type":"number"},{"text":"The logarithmic base.","name":"base","type":"number","default":"e"}]},"rets":{"ret":{"text":"Logarithm of x to the given base","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"log10","parent":"math","type":"libraryfunc","description":"Returns the base-10 logarithm of x. This is usually more accurate than math.log(x, 10).","realm":"Shared and Menu","args":{"arg":{"text":"The value to get the base from exponent from.","name":"x","type":"number"}},"rets":{"ret":{"text":"The result.","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"max","parent":"math","type":"libraryfunc","description":"Returns the largest value of all arguments.","realm":"Shared and Menu","args":{"arg":{"text":"Numbers to get the largest from","name":"numbers","type":"vararg"}},"rets":{"ret":{"text":"The largest number","name":"","type":"number"}}},"example":[{"description":"Get the largest number of a group.","code":"print( math.max( 464, 654698468, 1, 3, 2 ) )","output":"```\n654698468\n```"},{"description":"Prevent a value from falling under a certain minimum. A one-sided version of math.Clamp.","code":"local minimumValue = 5\n\nfunction lowClamp(num)\n\n     return math.max( minimumValue, num )\n\nend\n\nprint( lowClamp( 0.1 ) )\nprint( lowClamp( -6 ) )\nprint( lowClamp( 5 ) )\nprint( lowClamp( 8 ) )\nprint( lowClamp( 24 ) )","output":"```\n5\n5\n5\n8\n24\n```"}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"min","parent":"math","type":"libraryfunc","description":"Returns the smallest value of all arguments.","realm":"Shared and Menu","args":{"arg":{"text":"Numbers to get the smallest from.","name":"numbers","type":"vararg"}},"rets":{"ret":{"text":"The smallest number","name":"","type":"number"}}},"example":{"description":"Get the smallest number of a group.","code":"print( math.min( 1, 2, -3, 464, 654698468 ) )","output":"-3"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"modf","parent":"math","type":"libraryfunc","description":"Returns the integral and fractional component of the modulo operation.","realm":"Shared and Menu","args":{"arg":{"text":"The base value.","name":"base","type":"number"}},"rets":{"ret":[{"text":"The integral component.","name":"","type":"number"},{"text":"The fractional component.","name":"","type":"number"}]}},"example":{"description":"Finds the integral and fractional components of 5.6.","code":"print( math.modf( 5.6 ) )","output":"```\n5\t0.6\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"mod","parent":"math","type":"libraryfunc","description":{"text":"Returns the modulus of the specified values. Same as math.fmod.","deprecated":"This is removed in Lua versions later than what GMod is currently using. You should use the % operator or math.fmod instead."},"realm":"Shared and Menu","args":{"arg":[{"text":"The base value","name":"base","type":"number"},{"text":"Modulator","name":"modulator","type":"number"}]},"rets":{"ret":{"text":"The calculated modulus","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"pow","parent":"math","type":"libraryfunc","description":"Returns x raised to the power y.\nIn particular, math.pow(1.0, x) and math.pow(x, 0.0) always return 1.0, even when x is a zero or a nan. If both x and y are finite, x is negative, and y is not an integer then math.pow(x, y) is undefined.","realm":"Shared and Menu","args":{"arg":[{"text":"Base.","name":"x","type":"number"},{"text":"Exponent.","name":"y","type":"number"}]},"rets":{"ret":{"text":"y power of x","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"rad","parent":"math","type":"libraryfunc","description":"Converts an angle in degrees to it's equivalent in radians.","realm":"Shared and Menu","args":{"arg":{"text":"The angle measured in degrees.","name":"degrees","type":"number"}},"rets":{"ret":{"text":"radians","name":"","type":"number"}}},"example":{"description":"Convert various angles in degrees to their equivalent in radians.","code":"print( \"Degrees: 360, Radians: \" .. math.rad( 360 ) ) -- 2*pi\nprint( \"Degrees: 180, Radians: \" .. math.rad( 180 ) ) -- pi\nprint( \"Degrees: 90, Radians: \" .. math.rad( 90 ) ) -- pi/2\nprint( \"Degrees: 1, Radians: \" .. math.rad( 1 ) ) -- pi/180","output":"Degrees: 360, Radians: 6.2831853071796\n\n\nDegrees: 180, Radians: 3.1415926535898\n\n\nDegrees: 90, Radians: 1.5707963267949\n\n\nDegrees: 1, Radians: 0.017453292519943"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"NormalizeAngle","parent":"math","type":"libraryfunc","description":"Normalizes angle, so it returns value between -180 and 180.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/math.lua","line":"192-L194"},"args":{"arg":{"text":"The angle to normalize, in degrees.","name":"angle","type":"number"}},"rets":{"ret":{"text":"The normalized angle, in the range of -180 to 180 degrees.","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"randomseed","parent":"math","type":"libraryfunc","description":{"text":"Seeds the random number generator. The same seed will guarantee the same sequence of numbers each time with math.random.\n\nFor shared random values across predicted realms, use util.SharedRandom.","warning":"Incorrect usage of this function will affect `all` random numbers in the game."},"realm":"Shared and Menu","args":{"arg":{"text":"The new seed","name":"seed","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Rand","parent":"math","type":"libraryfunc","description":"Returns a random float between min and max.\n\nSee also math.random","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/math.lua","line":"47-L49"},"args":{"arg":[{"text":"The minimum value.","name":"min","type":"number"},{"text":"The maximum value.","name":"max","type":"number"}]},"rets":{"ret":{"text":"Random float between min and max.","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Remap","parent":"math","type":"libraryfunc","description":"Remaps the value from one range to another","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/math.lua","line":"215-L217"},"args":{"arg":[{"text":"The value","name":"value","type":"number"},{"text":"The minimum of the initial range","name":"inMin","type":"number"},{"text":"The maximum of the initial range","name":"inMax","type":"number"},{"text":"The minimum of new range","name":"outMin","type":"number"},{"text":"The maximum of new range","name":"outMax","type":"number"}]},"rets":{"ret":{"text":"The number in the new range","name":"","type":"number"}}},"example":{"description":"Example usage, converts a value from range 0-1, to range 0-255.","code":"print( math.Remap( 0.5, 0, 1, 0, 255 ) )","output":"127.5"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"random","parent":"math","type":"libraryfunc","description":"When called without arguments, returns a uniform pseudo-random real number in the range 0 to 1 which includes 0 but excludes 1.\n\nWhen called with an integer number m, returns a uniform pseudo-random integer in the range 1 to m inclusive.\n\nWhen called with two integer numbers m and n, returns a uniform pseudo-random integer in the range m to n inclusive.\n\nSee also math.Rand","realm":"Shared and Menu","args":{"arg":[{"text":"If m is the only parameter: upper limit.\n\nIf n is also provided: lower limit.\n\nIf provided, this must be an integer.","name":"m","type":"number","default":"nil"},{"text":"Upper limit.\n\nIf provided, this must be an integer.","name":"n","type":"number","default":"nil"}]},"rets":{"ret":{"text":"Random value","name":"","type":"number"}}},"example":[{"description":"Generate a random number between 1 and 400 with both math.random and math.Rand.","code":"print( math.random( 1, 400 ) )\nprint( math.Rand( 1, 400 ) )","output":"```\n317\n1.0162317198768\n```"},{"description":"Select a random key from a table, where the keys have a different probability of being selected.","code":"function GetWeightedRandomKey( tab )\n\tlocal sum = 0\n\n\tfor _, chance in pairs( tab ) do\n\t\tsum = sum + chance\n\tend\n\n\tlocal select = math.random() * sum\n\n\tfor key, chance in pairs( tab ) do\n\t\tselect = select - chance\n\t\tif select < 0 then return key end\n\tend\nend\n\n-- Example usage:\nlocal fruit = {\n\tGrape = 4.5,\n\tOrange = 20,\n\tBanana = 3.14\n}\n\nfor i = 1, 5 do\n\tprint( GetWeightedRandomKey( fruit ) )\nend","output":"```\nBanana\nGrape\nBanana\nOrange\nOrange\n```"}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Round","parent":"math","type":"libraryfunc","description":"Rounds the given value to the nearest whole number or to the given decimal places.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/math.lua","line":"151-L156"},"args":{"arg":[{"text":"The value to round.","name":"value","type":"number"},{"text":"The decimal places to round to.","name":"decimals","type":"number","default":"0"}]},"rets":{"ret":{"text":"The rounded value.","name":"","type":"number"}}},"example":[{"description":"Rounds a number to the nearest whole number.","code":"print(math.Round(104.6256712))","output":"105"},{"description":"Rounds the number to two decimal places.","code":"print(math.Round(104.6256712, 2))","output":"104.63"}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"sin","parent":"math","type":"libraryfunc","description":"Returns the [sine](https://en.wikipedia.org/wiki/Trigonometric_functions) of given angle.","realm":"Shared and Menu","args":{"arg":{"text":"Angle in radians","name":"number","type":"number"}},"rets":{"ret":{"text":"Sine for given angle","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"sqrt","parent":"math","type":"libraryfunc","description":"Returns the square root of the number.","realm":"Shared and Menu","args":{"arg":{"text":"Value to get the square root of.","name":"value","type":"number"}},"rets":{"ret":{"text":"squareRoot","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"sinh","parent":"math","type":"libraryfunc","description":"Returns the [hyperbolic sine](https://en.wikipedia.org/wiki/Hyperbolic_functions) of the given angle.","realm":"Shared and Menu","args":{"arg":{"text":"Angle in radians.","name":"number","type":"number"}},"rets":{"ret":{"text":"The hyperbolic sine of the given angle.","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"tan","parent":"math","type":"libraryfunc","description":"Returns the tangent of the given angle.","realm":"Shared and Menu","args":{"arg":{"text":"Angle in radians","name":"value","type":"number"}},"rets":{"ret":{"text":"The tangent of the given angle.","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"TimeFraction","parent":"math","type":"libraryfunc","description":"Returns the fraction of where the current time is relative to the start and end times","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/math.lua","line":"211-L213"},"args":{"arg":[{"text":"Start time in seconds","name":"start","type":"number"},{"text":"End time in seconds","name":"end","type":"number"},{"text":"Current time in seconds","name":"current","type":"number"}]},"rets":{"ret":{"text":"Fraction","name":"","type":"number"}}},"example":{"description":"Prints the time fraction of 5 between 0 and 10","code":"print(math.TimeFraction(0, 10, 5))","output":"0.5"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Add","parent":"matproxy","type":"libraryfunc","description":"Adds a material proxy.","realm":"Client","args":{"arg":{"text":"The information about the proxy. See Structures/MatProxyData","name":"MatProxyData","type":"table"}}},"example":[{"description":"Adds PlayerColor proxy. Example taken from lua/matproxy/player_color.lua.","code":"matproxy.Add({\n    name = \"PlayerColor\", \n    init = function( self, mat, values )\n        -- Store the name of the variable we want to set\n        self.ResultTo = values.resultvar\n    end,\n    bind = function( self, mat, ent )\n        -- If the target ent has a function called GetPlayerColor then use that\n        -- The function SHOULD return a Vector with the chosen player's colour.\n\n        -- In sandbox this function is created as a network function, \n        -- in player_sandbox.lua in SetupDataTables\n       if ( ent.GetPlayerColor ) then\n           mat:SetVector( self.ResultTo, ent:GetPlayerColor() )\n       end\n   end \n})","output":"Adds PlayerColor proxy."},{"description":"Material proxy values are stored like this:\n\n* In the .vmt:\n\n```\nProxies {\n    PlayerColor {\n       resultVar $color2\n       myVariable $color\n    }\n}\n```\n\n\n* In Lua ( The **Init** function of Structures/MatProxyData )","code":"values = {\n    resultvar = \"$color2\"\n    myvariable = \"$color\"\n}"}],"realms":["Client"],"type":"Function"},
{"function":{"name":"tanh","parent":"math","type":"libraryfunc","description":"Returns the [hyperbolic tangent](https://en.wikipedia.org/wiki/Hyperbolic_functions) of the given number.","realm":"Shared and Menu","args":{"arg":{"text":"Angle in radians.","name":"number","type":"number"}},"rets":{"ret":{"text":"The hyperbolic tangent of the given angle.","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Truncate","parent":"math","type":"libraryfunc","description":"Rounds towards zero.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/math.lua","line":"161-L168"},"args":{"arg":[{"text":"The number to truncate","name":"num","type":"number"},{"text":"The amount of digits to keep after the point.","name":"digits","type":"number","default":"0"}]},"rets":{"ret":{"text":"The result.","name":"","type":"number"}}},"example":{"description":"Demonstrates the use of this function.","code":"local num = 54.59874\n\nprint( math.Truncate( num, 2 ) ) -- 54.59\nprint( math.Round( num, 2 ) ) -- 54.6","output":"```\n54.59\n54.6\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Call","parent":"matproxy","type":"libraryfunc","description":"Called by the engine from OnBind","realm":"Client","args":{"arg":[{"name":"uname","type":"string"},{"name":"mat","type":"IMaterial"},{"name":"ent","type":"Entity"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Init","parent":"matproxy","type":"libraryfunc","description":"Called by the engine from OnBind","realm":"Client","args":{"arg":[{"name":"name","type":"string"},{"name":"uname","type":"string"},{"name":"mat","type":"IMaterial"},{"name":"values","type":"table"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ShouldOverrideProxy","parent":"matproxy","type":"libraryfunc","description":"Called by engine, returns true if we're overriding a proxy","realm":"Client","args":{"arg":{"text":"The name of proxy in question","name":"name","type":"string"}},"rets":{"ret":{"text":"Are we overriding it?","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"RecordFrame","parent":"menu","type":"libraryfunc","description":"Used by \"Demo to Video\" to record the frame.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"Init","parent":"menubar","type":"libraryfunc","description":"Creates the menu bar ( The bar at the top of the screen when holding C or Q in sandbox ) and docks it to the top of the screen. It will not appear.\n\n\nCalling this multiple times will **NOT** remove previous panel.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"ParentTo","parent":"menubar","type":"libraryfunc","description":"Parents the menubar to the panel and displays the menubar.","realm":"Client","args":{"arg":{"text":"The panel to parent to","name":"pnl","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsParent","parent":"menubar","type":"libraryfunc","description":"Checks if the supplied panel is parent to the menubar","realm":"Client","args":{"arg":{"text":"The panel to check","name":"pnl","type":"Panel"}},"rets":{"ret":{"text":"Is parent or not","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AdvanceVertex","parent":"mesh","type":"libraryfunc","description":"Pushes the new vertex data onto the render stack.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"Begin","parent":"mesh","type":"libraryfunc","description":"Starts a new dynamic mesh. If an IMesh is passed, it will use that mesh instead.","realm":"Client","args":{"arg":[{"text":"Mesh to build. This argument can be removed if you wish to build a \"dynamic\" mesh. See examples below.","name":"mesh","type":"IMesh","default":"nil"},{"text":"Primitive type, see Enums/MATERIAL.","name":"primitiveType","type":"number"},{"text":"The amount of primitives.","name":"primiteCount","type":"number"}]}},"example":[{"description":"Draws a triangle near Vector( 0, 0, 0 ) in the map using a dynamic mesh.","code":"local mat = Material( \"editor/wireframe\" ) -- The material (a wireframe)\n\nlocal verts = { -- A table of 3 vertices that form a triangle\n\t{ pos = Vector( 0,  0,  0 ), u = 0, v = 0 }, -- Vertex 1\n\t{ pos = Vector( 10, 0,  0 ), u = 1, v = 0 }, -- Vertex 2\n\t{ pos = Vector( 10, 10, 0 ), u = 1, v = 1 }, -- Vertex 3\n}\n\nhook.Add( \"PostDrawOpaqueRenderables\", \"MeshLibTest\", function()\n\n\trender.SetMaterial( mat ) -- Apply the material\n\tmesh.Begin( MATERIAL_TRIANGLES, 1 ) -- Begin writing to the dynamic mesh\n\tfor i = 1, #verts do\n\t\tmesh.Position( verts[i].pos ) -- Set the position\n\t\tmesh.TexCoord( 0, verts[i].u, verts[i].v ) -- Set the texture UV coordinates\n\t\tmesh.AdvanceVertex() -- Write the vertex\n\tend\n\tmesh.End() -- Finish writing the mesh and draw it\nend )"},{"description":"Draws a triangle near Vector( 0, 0, 0 ) in the map using a static mesh.","code":"local mat = Material( \"editor/wireframe\" ) -- The material (a wireframe)\nlocal obj = Mesh() -- Create the IMesh object\n\nlocal verts = { -- A table of 3 vertices that form a triangle\n\t{ pos = Vector( 0,  0,  0 ), u = 0, v = 0 }, -- Vertex 1\n\t{ pos = Vector( 10, 0,  0 ), u = 1, v = 0 }, -- Vertex 2\n\t{ pos = Vector( 10, 10, 0 ), u = 1, v = 1 }, -- Vertex 3\n}\n\nmesh.Begin( obj, MATERIAL_TRIANGLES, 1 ) -- Begin writing to the static mesh\nfor i = 1, #verts do\n\tmesh.Position( verts[i].pos ) -- Set the position\n\tmesh.TexCoord( 0, verts[i].u, verts[i].v ) -- Set the texture UV coordinates\n\tmesh.AdvanceVertex() -- Write the vertex\nend\nmesh.End() -- Finish writing to the IMesh\n\nhook.Add( \"PostDrawOpaqueRenderables\", \"MeshLibTest\", function()\n\n\trender.SetMaterial( mat ) -- Apply the material\n\tobj:Draw() -- Draw the mesh\nend )"}],"realms":["Client"],"type":"Function"},
{"function":{"name":"Color","parent":"mesh","type":"libraryfunc","description":"Sets the color to be used for the next vertex.","realm":"Client","args":{"arg":[{"text":"Red component.","name":"r","type":"number"},{"text":"Green component.","name":"g","type":"number"},{"text":"Blue component.","name":"b","type":"number"},{"text":"Alpha component.","name":"a","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Normal","parent":"mesh","type":"libraryfunc","description":"Sets the normal to be used for the next vertex.","realm":"Client","args":{"arg":{"text":"The normal of the vertex.","name":"normal","type":"Vector"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Position","parent":"mesh","type":"libraryfunc","description":"Sets the position to be used for the next vertex.","realm":"Client","args":{"arg":{"text":"The position of the vertex.","name":"position","type":"Vector"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"End","parent":"mesh","type":"libraryfunc","description":"Ends the mesh and renders it.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"Quad","parent":"mesh","type":"libraryfunc","description":"Draws a quad using 4 vertices.","realm":"Client","args":{"arg":[{"text":"The first vertex.","name":"vertex1","type":"Vector"},{"text":"The second vertex.","name":"vertex2","type":"Vector"},{"text":"The third vertex.","name":"vertex3","type":"Vector"},{"text":"The fourth vertex.","name":"vertex4","type":"Vector"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"QuadEasy","parent":"mesh","type":"libraryfunc","description":"Draws a quad using a position, a normal and the size.","realm":"Client","args":{"arg":[{"text":"The center of the quad.","name":"position","type":"Vector"},{"text":"The normal of the quad.","name":"normal","type":"Vector"},{"text":"X size in pixels.","name":"sizeX","type":"number"},{"text":"Y size in pixels.","name":"sizeY","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Specular","parent":"mesh","type":"libraryfunc","description":"Sets the specular map values.\n\nThis function actually does nothing.","realm":"Client","args":{"arg":[{"text":"The red channel multiplier of the specular map.","name":"r","type":"number"},{"text":"The green channel multiplier of the specular map.","name":"g","type":"number"},{"text":"The blue channel multiplier of the specular map.","name":"b","type":"number"},{"text":"The alpha channel multiplier of the specular map.","name":"a","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"TangentS","parent":"mesh","type":"libraryfunc","description":"Sets the s tangent to be used.\n\nThis function actually does nothing.","realm":"Client","args":{"arg":{"text":"The s tangent.","name":"sTanger","type":"Vector"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"VertexCount","parent":"mesh","type":"libraryfunc","description":"Returns the amount of vertex that have yet been pushed.","realm":"Client","rets":{"ret":{"text":"vertexCount","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"TangentT","parent":"mesh","type":"libraryfunc","description":"Sets the T tangent to be used.\n\nThis function actually does nothing.","realm":"Client","args":{"arg":{"text":"The t tangent.","name":"tTanger","type":"Vector"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"UserData","parent":"mesh","type":"libraryfunc","description":{"text":"A table of four numbers. This is used by most shaders in Source to hold tangent information of the vertex ( tangentX, tangentY, tangentZ, tangentHandedness ).","note":"It is recommended to use IMesh:BuildFromTriangles instead of the mesh library."},"realm":"Client","args":{"arg":[{"name":"tangentX","type":"number"},{"name":"tangentY","type":"number"},{"name":"tangentZ","type":"number"},{"name":"tangentHandedness","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"TexCoord","parent":"mesh","type":"libraryfunc","description":"Sets the texture coordinates for the next vertex.\n\nNon-zero values of stage require the currently bound material to support it. For example, any LightmappedGeneric material supports stages 1 and 2 (lightmap texture coordinates).","realm":"Client","args":{"arg":[{"text":"The stage of the texture coordinate.","name":"stage","type":"number"},{"text":"U coordinate.","name":"u","type":"number"},{"text":"V coordinate.","name":"v","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"BuildSkeleton","parent":"motionsensor","type":"libraryfunc","description":"","realm":"Shared","file":{"text":"lua/includes/extensions/motionsensor.lua","line":"221"},"args":{"arg":[{"name":"translator","type":"table"},{"name":"player","type":"Player"},{"name":"rotation","type":"Angle"}]},"rets":{"ret":[{"text":"Pos","name":"","type":"Vector"},{"text":"ang","name":"","type":"Angle"},{"text":"sensor","name":"","type":"sensor"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ChooseBuilderFromEntity","parent":"motionsensor","type":"libraryfunc","description":"","realm":"Shared","file":{"text":"lua/includes/extensions/motionsensor.lua","line":"46"},"args":{"arg":{"text":"Entity to choose builder for","name":"ent","type":"Entity"}},"rets":{"ret":{"text":"Chosen builder","name":"","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetSkeleton","parent":"motionsensor","type":"libraryfunc","description":"","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetColourMaterial","parent":"motionsensor","type":"libraryfunc","description":"Returns the depth map material.","realm":"Client and Menu","rets":{"ret":{"text":"The material","name":"","type":"IMaterial"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"IsActive","parent":"motionsensor","type":"libraryfunc","description":"Return whether a kinect is connected - and active (ie - Start has been called).","realm":"Client","rets":{"ret":{"text":"Connected and active or not","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ProcessAngle","parent":"motionsensor","type":"libraryfunc","description":"","realm":"Shared","file":{"text":"lua/includes/extensions/motionsensor.lua","line":"60"},"args":{"arg":[{"name":"translator","type":"table"},{"name":"sensor","type":"table"},{"name":"pos","type":"Vector"},{"name":"ang","type":"Angle"},{"name":"special_vectors","type":"table"},{"name":"boneid","type":"number"},{"name":"v","type":"table"}]},"rets":{"ret":{"text":"Return nil on failure","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsAvailable","parent":"motionsensor","type":"libraryfunc","description":"Returns true if we have detected that there's a kinect connected to the PC","realm":"Client and Menu","rets":{"ret":{"text":"Connected or not","name":"","type":"boolean"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"ProcessAnglesTable","parent":"motionsensor","type":"libraryfunc","description":"","realm":"Shared","file":{"text":"lua/includes/extensions/motionsensor.lua","line":"126"},"args":{"arg":[{"name":"translator","type":"table"},{"name":"sensor","type":"table"},{"name":"pos","type":"Vector"},{"name":"rotation","type":"Angle"}]},"rets":{"ret":{"text":"Ang. If !translator.AnglesTable then return - {}","name":"","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Start","parent":"motionsensor","type":"libraryfunc","description":"This starts access to the kinect sensor. Note that this usually freezes the game for a couple of seconds.","realm":"Client and Menu"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"ProcessPositionTable","parent":"motionsensor","type":"libraryfunc","description":"","realm":"Shared","file":{"text":"lua/includes/extensions/motionsensor.lua","line":"195"},"args":{"arg":[{"name":"translator","type":"table"},{"name":"sensor","type":"table"}]},"rets":{"ret":{"text":"Pos. if !translator.PositionTable then return - {}","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Stop","parent":"motionsensor","type":"libraryfunc","description":"Stops the motion capture.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"BeginGeneration","parent":"navmesh","type":"libraryfunc","description":{"text":"Starts the generation of a new navmesh.","note":"This process is highly resource intensive and it's not wise to use during normal gameplay"},"realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"AddWalkableSeed","parent":"navmesh","type":"libraryfunc","description":"Add this position and normal to the list of walkable positions, used before map generation with navmesh.BeginGeneration","realm":"Server","args":{"arg":[{"text":"The terrain position.","name":"pos","type":"Vector"},{"text":"The normal of this terrain position.","name":"dir","type":"Vector"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"ClearWalkableSeeds","parent":"navmesh","type":"libraryfunc","description":"Clears all the walkable positions, used before calling navmesh.BeginGeneration.","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"CreateNavArea","parent":"navmesh","type":"libraryfunc","description":"Creates a new CNavArea.","realm":"Server","args":{"arg":[{"text":"The first corner of the new CNavArea","name":"corner","type":"Vector"},{"text":"The opposite (diagonally) corner of the new CNavArea","name":"opposite_corner","type":"Vector"}]},"rets":{"ret":{"text":"The new CNavArea or nil if we failed for some reason.","name":"","type":"CNavArea"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Find","parent":"navmesh","type":"libraryfunc","description":"Returns a bunch of areas within distance, used to find hiding spots by NextBots for example.","realm":"Server","args":{"arg":[{"text":"The position to search around","name":"pos","type":"Vector"},{"text":"Radius to search within","name":"radius","type":"number"},{"text":"Maximum stepdown( fall distance ) allowed","name":"stepdown","type":"number"},{"text":"Maximum stepup( jump height ) allowed","name":"stepup","type":"number"}]},"rets":{"ret":{"text":"A table of CNavAreas","name":"","type":"table"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetAllNavAreas","parent":"navmesh","type":"libraryfunc","description":"Returns an integer indexed table of all CNavAreas on the current map. If the map doesn't have a navmesh generated then this will return an empty table.","realm":"Server","rets":{"ret":{"text":"A table of all the CNavAreas on the current map.","name":"","type":"table"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetEditCursorPosition","parent":"navmesh","type":"libraryfunc","description":"Returns the position of the edit cursor when nav_edit is set to 1.","realm":"Server","rets":{"ret":{"text":"The position of the edit cursor.","name":"","type":"Vector"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetGroundHeight","parent":"navmesh","type":"libraryfunc","description":{"text":"Finds the closest standable ground at, above, or below the provided position.","note":"The ground must have at least 32 units of empty space above it to be considered by this function, unless 16 layers are tested without finding valid ground."},"realm":"Server","args":{"arg":{"text":"Position to find the closest ground for.","name":"pos","type":"Vector"}},"rets":{"ret":[{"text":"The height of the ground layer.","name":"","type":"number"},{"text":"The normal of the ground layer.","name":"","type":"Vector"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetMarkedLadder","parent":"navmesh","type":"libraryfunc","description":"Returns the currently marked CNavLadder, for use with editing console commands.","realm":"Server","rets":{"ret":{"text":"The currently marked CNavLadder.","name":"","type":"CNavLadder"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetNavArea","parent":"navmesh","type":"libraryfunc","description":"Returns the Nav Area contained in this position that also satisfies the elevation limit.\n\nThis function will properly see blocked CNavAreas. See navmesh.GetNearestNavArea.","realm":"Server","args":{"arg":[{"text":"The position to search for.","name":"pos","type":"Vector"},{"text":"The elevation limit at which the Nav Area will be searched.","name":"beneathLimit","type":"number"}]},"rets":{"ret":{"text":"The nav area.","name":"","type":"CNavArea"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetMarkedArea","parent":"navmesh","type":"libraryfunc","description":"Returns the currently marked CNavArea, for use with editing console commands.","realm":"Server","rets":{"ret":{"text":"The currently marked CNavArea.","name":"","type":"CNavArea"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetNavAreaCount","parent":"navmesh","type":"libraryfunc","description":"Returns the highest ID of all nav areas on the map. While this can be used to get all nav areas, this number may not actually be the actual number of nav areas on the map.","realm":"Server","rets":{"ret":{"text":"The highest ID of all nav areas on the map.","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetNavLadderByID","parent":"navmesh","type":"libraryfunc","description":"Returns a CNavLadder by the given ID.","realm":"Server","args":{"arg":{"text":"ID of the CNavLadder to get. Starts with 1.","name":"id","type":"number"}},"rets":{"ret":{"text":"The CNavLadder with given ID.","name":"","type":"CNavLadder"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetNavAreaByID","parent":"navmesh","type":"libraryfunc","description":{"text":"Returns a CNavArea by the given ID.","note":"Avoid calling this function every frame, as internally it does a lookup trough all the CNavAreas, call this once and store the result"},"realm":"Server","args":{"arg":{"text":"ID of the CNavArea to get. Starts with 1.","name":"id","type":"number"}},"rets":{"ret":{"text":"The CNavArea with given ID.","name":"","type":"CNavArea"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetPlayerSpawnName","parent":"navmesh","type":"libraryfunc","description":"Returns the classname of the player spawn entity.","realm":"Server","rets":{"ret":{"text":"The classname of the spawn point entity. By default returns \"info_player_start\"","name":"","type":"string"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"GetNearestNavArea","parent":"navmesh","type":"libraryfunc","description":"Returns the closest CNavArea to given position at the same height, or beneath it.\n\nThis function will ignore blocked CNavAreas. See navmesh.GetNavArea for a function that does see blocked areas.","realm":"Server","args":{"arg":[{"text":"The position to look from","name":"pos","type":"Vector"},{"text":"This argument is ignored and has no effect","name":"anyZ","type":"boolean","default":"false"},{"text":"This is the maximum distance from the given position that the function will look for a CNavArea","name":"maxDist","type":"number","default":"10000"},{"text":"If this is set to true then the function will internally do a util.TraceLine from the starting position to each potential CNavArea with a [MASK_NPCSOLID_BRUSHONLY](https://wiki.facepunch.com/gmod/Enums/MASK). If the trace fails then the CNavArea is ignored.\n\nIf this is set to false then the function will find the closest CNavArea through anything, including the world.","name":"checkLOS","type":"boolean","default":"false"},{"text":"If checkGround is true then this function will internally call navmesh.GetNavArea to check if there is a CNavArea directly below the position, and return it if so, before checking anywhere else.","name":"checkGround","type":"boolean","default":"true"},{"text":"This will internally call CNavArea:IsBlocked to check if the target CNavArea is not to be navigated by the given team. Currently this appears to do nothing.","name":"team","type":"number","default":"TEAM_ANY=-2"}]},"rets":{"ret":{"text":"The closest CNavArea found with the given parameters, or a NULL CNavArea if one was not found.","name":"","type":"CNavArea"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsLoaded","parent":"navmesh","type":"libraryfunc","description":"Returns true if a navmesh has been loaded when loading the map.","realm":"Server","rets":{"ret":{"text":"Whether a navmesh has been loaded when loading the map.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Load","parent":"navmesh","type":"libraryfunc","description":"Loads a new navmesh from the .nav file for current map discarding any changes made to the navmesh previously.","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"Reset","parent":"navmesh","type":"libraryfunc","description":"Deletes every CNavArea and CNavLadder on the map **without saving the changes**.","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"Save","parent":"navmesh","type":"libraryfunc","description":"Saves any changes made to navmesh to the .nav file.","realm":"Server"},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetMarkedLadder","parent":"navmesh","type":"libraryfunc","description":"Sets the CNavLadder as marked, so it can be used with editing console commands.","realm":"Server","args":{"arg":{"text":"The CNavLadder to set as the marked ladder.","name":"area","type":"CNavLadder"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsGenerating","parent":"navmesh","type":"libraryfunc","description":"Whether we're currently generating a new navmesh with navmesh.BeginGeneration.","realm":"Server","rets":{"ret":{"text":"Whether we're generating a nav mesh or not.","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetMarkedArea","parent":"navmesh","type":"libraryfunc","description":"Sets the CNavArea as marked, so it can be used with editing console commands.","realm":"Server","args":{"arg":{"text":"The CNavArea to set as the marked area.","name":"area","type":"CNavArea"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetPlayerSpawnName","parent":"navmesh","type":"libraryfunc","description":"Sets the classname of the default spawn point entity, used before generating a new navmesh with navmesh.BeginGeneration.","realm":"Server","args":{"arg":{"text":"The classname of what the player uses to spawn, automatically adds it to the walkable positions during map generation.","name":"spawnPointClass","type":"string"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Broadcast","parent":"net","type":"libraryfunc","description":"Sends the currently built net message to all connected players.\nMore information can be found in Net Library Usage.","realm":"Server"},"example":{"description":"Sends a packet to all players.","code":"net.Start(\"NETHOOK\")\n    net.WriteString(\"some text\")\nnet.Broadcast()"},"realms":["Server"],"type":"Function"},
{"function":{"name":"BytesLeft","parent":"net","type":"libraryfunc","description":"Returns the amount of data left to read in the current message in bytes. Does nothing when sending data.","realm":"Shared","rets":{"ret":[{"text":"The amount of data left to read in the current net message in bytes.\nReturns nil if no net message has been started.","name":"","type":"number"},{"text":"The amount of data left to read in the current net message in bits.\nReturns nil if no net message has been started.","name":"","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"BytesWritten","parent":"net","type":"libraryfunc","description":{"text":"Returns the size of the current message in bytes.","note":"This will include 3 extra bytes used by the engine internally to send the data over the network."},"realm":"Shared","rets":{"ret":[{"text":"The amount of bytes written to the current net message.\nReturns nil if no net message has been started.","name":"","type":"number"},{"text":"The amount of bits written to the current net message.\nReturns nil if no net message has been started.","name":"","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ReadAngle","parent":"net","type":"libraryfunc","description":{"text":"Reads an angle from the received net message.","warning":"You **must** read information in same order as you write it."},"realm":"Shared","rets":{"ret":{"text":"The read angle, or Angle(0,0,0) if no angle could be read","name":"","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Incoming","parent":"net","type":"libraryfunc","description":{"text":"Function called by the engine to tell the lua state a message arrived.","internal":"You may be looking for net.Receive."},"realm":"Shared","file":{"text":"lua/includes/extensions/net.lua","line":"17"},"args":{"arg":[{"text":"The message length, in bits.","name":"length","type":"number"},{"text":"The player that sent the message. This will be nil in the client state.","name":"client","type":"Player"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ReadBool","parent":"net","type":"libraryfunc","description":{"text":"Reads a boolean from the received net message.","warning":"You **must** read information in same order as you write it."},"realm":"Shared","file":{"text":"lua/includes/extensions/net.lua","line":"41"},"rets":{"ret":{"text":"true or false, or false if the bool could not be read.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ReadBit","parent":"net","type":"libraryfunc","description":{"text":"Reads a bit from the received net message.","warning":"You **must** read information in same order as you write it."},"realm":"Shared","rets":{"ret":{"text":"0 or 1, or 0 if the bit could not be read.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ReadColor","parent":"net","type":"libraryfunc","description":{"text":"Reads a Color from the current net message.","warning":"You **must** read information in same order as you write it."},"realm":"Shared","file":{"text":"lua/includes/extensions/net.lua","line":"83"},"rets":{"ret":{"text":"The Color read from the current net message, or Color(0,0,0,0) if the color could not be read.","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ReadData","parent":"net","type":"libraryfunc","description":{"text":"Reads pure binary data from the message.","warning":"You **must** read information in same order as you write it."},"realm":"Shared","args":{"arg":{"text":"The length of the data to be read, in bytes.","name":"length","type":"number"}},"rets":{"ret":{"text":"The binary data read, or a string containing one character with a byte of 0 if no data could be read.","name":"","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ReadEntity","parent":"net","type":"libraryfunc","description":{"text":"Reads an entity from the received net message. You should always check if the specified entity exists as it may have been removed and therefor NULL if it is outside of the players PVS or was already removed.","warning":"You **must** read information in same order as you write it."},"realm":"Shared","file":{"text":"lua/includes/extensions/net.lua","line":"60-L67"},"rets":{"ret":{"text":"The entity, or Entity(0) if no entity could be read.","name":"","type":"Entity"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ReadDouble","parent":"net","type":"libraryfunc","description":{"text":"Reads a double-precision number from the received net message.","warning":"You **must** read information in same order as you write it."},"realm":"Shared","rets":{"ret":{"text":"The double-precision number, or 0 if no number could be read.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ReadFloat","parent":"net","type":"libraryfunc","description":{"text":"Reads a floating point number from the received net message.","warning":"You **must** read information in same order as you write it."},"realm":"Shared","rets":{"ret":{"text":"The floating point number, or 0 if no number could be read.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ReadHeader","parent":"net","type":"libraryfunc","description":{"text":"Reads a word, basically unsigned short. This is used internally to read the \"header\" of the message which is an unsigned short which can be converted to the corresponding message name via util.NetworkIDToString.","internal":""},"realm":"Shared","rets":{"ret":{"text":"The header number","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ReadInt","parent":"net","type":"libraryfunc","description":{"text":"Reads an integer from the received net message.","warning":"You **must** read information in same order as you write it."},"realm":"Shared","args":{"arg":{"text":"The amount of bits to be read.\n\nThis must be set to what you set to net.WriteInt. Read more information at net.WriteInt.","name":"bitCount","type":"number"}},"rets":{"ret":{"text":"The read integer number, or 0 if no integer could be read.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ReadNormal","parent":"net","type":"libraryfunc","description":{"text":"Reads a normal vector from the net message.","warning":"You **must** read information in same order as you write it."},"realm":"Shared","rets":{"ret":{"text":"The normalized vector ( length = 1 ), or Vector(0,0,1) if no normal could be read.","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ReadString","parent":"net","type":"libraryfunc","description":{"text":"Reads a null terminated string from the net stream. The size of the string is 8 bits plus 8 bits for every ASCII character in the string.","warning":"You **must** read information in same order as you write it."},"realm":"Shared","rets":{"ret":{"text":"The read string, or a string with 0 length if no string could be read.","name":"","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ReadMatrix","parent":"net","type":"libraryfunc","description":{"text":"Reads a VMatrix from the received net message.","warning":"You **must** read information in same order as you write it."},"realm":"Shared","rets":{"ret":{"text":"The matrix, or an empty matrix if no matrix could be read.","name":"","type":"VMatrix"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ReadVector","parent":"net","type":"libraryfunc","description":{"text":"Reads a vector from the received net message.  Vectors sent by this function are compressed, which may result in precision loss. See net.WriteVector for more information.","warning":"You **must** read information in same order as you write it."},"realm":"Shared","rets":{"ret":{"text":"The read vector, or Vector(0,0,0) if no vector could be read.","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ReadTable","parent":"net","type":"libraryfunc","description":{"text":"Reads a table from the received net message.\n\n\n\n\nSee net.WriteTable for extra info.\nYou may get `net.ReadType: Couldn't read type X` during the execution of the function, the problem is that you are sending objects that cannot be serialized/sent over the network.","note":"Sometimes when sending a table through the net library, the order of the keys may be switched. So be cautious when comparing (See Example 1).","warning":"You **must** read information in same order as you write it."},"realm":"Shared","file":{"text":"lua/includes/extensions/net.lua","line":"115"},"rets":{"ret":{"text":"Table recieved via the net message, or a blank table if no table could be read.","name":"","type":"table"}}},"example":{"description":"This is an example of how the keys order may be switched:","code":"--Client:\nfunction SendTable()\n     local Table = {}\n     Table.Type = \"Dining\"\n     Table.Legs = 4\n     Table.Material = \"Wood\"\n     net.Start(\"TableSend\")\n      net.WriteTable(Table)\n     net.SendToServer()\n     PrintTable(Table) -- Prints the order client side\nend\n\n--Server:\nfunction GotTable(len, Player)\n     PrintTable(net.ReadTable()) -- Prints the order server side\nend\nnet.Receive(\"TableSend\", GotTable)","output":"Client:\n\n```\nType     = \"Dining\"\nLegs     = 4\nMaterial = \"Wood\"\n```\n\n\nServer:\n\n```\nLegs     = 4\nMaterial = \"Wood\"\nType     = \"Dining\"\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ReadUInt","parent":"net","type":"libraryfunc","description":{"text":"Reads an unsigned integer with the specified number of bits from the received net message.","warning":"You **must** read information in same order as you write it."},"realm":"Shared","args":{"arg":{"text":"The size of the integer to be read, in bits.","name":"numberOfBits","type":"number"}},"rets":{"ret":{"text":"The unsigned integer read, or 0 if the integer could not be read.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ReadType","parent":"net","type":"libraryfunc","description":{"text":"Reads a value from the net message with the specified type, written by net.WriteType.","internal":"Used internally by net.ReadTable.","warning":"You **must** read information in same order as you write it."},"realm":"Shared","file":{"text":"lua/includes/extensions/net.lua","line":"175"},"args":{"arg":{"text":"The type of value to be read, using Enums/TYPE.","name":"typeID","type":"number","default":"net.ReadUInt(8)"}},"rets":{"ret":{"text":"The value, or the respective blank value based on the type you're reading if the value could not be read.","name":"","type":"any"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SendPAS","parent":"net","type":"libraryfunc","description":"Sends the message to all players that are in the same potentially audible set(PAS) as the position, or simply said, it adds all players that can potentially hear sounds from this position.","realm":"Server","args":{"arg":{"text":"PAS position.","name":"position","type":"Vector"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Send","parent":"net","type":"libraryfunc","description":"Sends the current message to the specified player, or to all players listed in the table.","realm":"Server","args":{"arg":{"text":"The player(s) to send the message to. Can be a table of players or a CRecipientFilter.","name":"ply","type":"Player"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SendOmit","parent":"net","type":"libraryfunc","description":"Sends the current message to all except the specified, or to all except all players in the table.","realm":"Server","args":{"arg":{"text":"The player(s) to NOT send the message to. Can be a table of players","name":"ply","type":"Player"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Receive","parent":"net","type":"libraryfunc","description":{"text":"Adds a net message handler. Only one receiver can be used to receive the net message.","note":"The message-name is converted to lower-case so the message-names \"`BigBlue`\" and \"`bigblue`\" would be equal.","warning":["You **must** put this function **outside** of any other function or hook for it to work properly unless you know what you are doing!","You **must** read information in the same order as you write it.","Each net message has a length limit of 64KB!"]},"realm":"Shared","file":{"text":"lua/includes/extensions/net.lua","line":"8"},"args":{"arg":[{"text":"The message name to hook to.","name":"messageName","type":"string"},{"text":"The function to be called if the specified message was received. Arguments are:\n\nnumber len - Length of the message, in bits\nPlayer ply - The player that sent the message, works only serverside","name":"callback","type":"function","br":""}]}},"example":{"description":"A simple callback","code":"net.Receive( \"my_message\", function( len, pl )\n\tif ( IsValid( pl ) and pl:IsPlayer() ) then\n\t\tprint( \"Message from \" .. pl:Nick() .. \" received. Its length is \" .. len .. \".\" )\n\telse\n\t\tprint( \"Message from server received. Its length is \" .. len .. \".\" )\n\tend\nend )","output":"When run server-side:\n\n\n```\nMessage from John received. Its length is 4.\n```\n\n\nAnd client-side:\n\n\n```\nMessage from server received. Its length is 4.\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SendPVS","parent":"net","type":"libraryfunc","description":"Sends the message to all players the position is in the PVS of or, more simply said, sends the message to players that can potentially see this position.","realm":"Server","args":{"arg":{"text":"Position that must be in players' visibility set.","name":"position","type":"Vector"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SendToServer","parent":"net","type":"libraryfunc","description":"Sends the current message to the server.","realm":"Client"},"example":{"description":"Sends a simple \"hello_world\" message with the string \"Hi\" to the server","code":"net.Start( \"hello_world\" )\n\tnet.WriteString( \"Hi\" )\nnet.SendToServer()","output":"The netmessage \"hello_world\" is sent to the server. The server can handle this with net.Receive.\n\nRemember that any client has the potential to send any net message at any time. On your server-side net.Receive, make sure to verify the message sender's permissions whenever you can and prevent expensive functions from being run too often."},"realms":["Client"],"type":"Function"},
{"function":{"name":"Start","parent":"net","type":"libraryfunc","description":{"text":"Begins a new net message. If another net message is already started and hasn't been sent yet, it will be discarded.","warning":["Each net message has a length limit of 64KB!","The message name must be pooled with util.AddNetworkString beforehand!","Net messages will not reliably reach the client until the client's GM:InitPostEntity hook is called."]},"realm":"Shared","args":{"arg":[{"text":"The name of the message to send","name":"messageName","type":"string"},{"text":"If set to true, the message is not guaranteed to reach its destination","name":"unreliable","type":"boolean","default":"false"}]},"rets":{"ret":{"text":"True if the message has been started.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"WriteAngle","parent":"net","type":"libraryfunc","description":"Writes an angle to the current net message.","realm":"Shared","args":{"arg":{"text":"The angle to be sent.","name":"angle","type":"Angle"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"WriteBit","parent":"net","type":"libraryfunc","description":"Appends a boolean (as 1 or 0) to the current net message.\n\nPlease note that the bit is written here from a boolean (true/false) but net.ReadBit returns a number.","realm":"Shared","args":{"arg":{"text":"Bit status (false = 0, true = 1)","name":"boolean","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"WriteColor","parent":"net","type":"libraryfunc","description":"Appends a Color to the current net message.","realm":"Shared","file":{"text":"lua/includes/extensions/net.lua","line":"72"},"args":{"arg":{"text":"The Color you want to append to the net message.","name":"Color","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"WriteBool","parent":"net","type":"libraryfunc","description":"Appends a boolean to the current net message. Alias of net.WriteBit","realm":"Shared","file":{"text":"lua/includes/extensions/net.lua","line":"39"},"args":{"arg":{"text":"Boolean value to write","name":"boolean","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"WriteData","parent":"net","type":"libraryfunc","description":"Writes a chunk of binary data to the message.","realm":"Shared","args":{"arg":[{"text":"The binary data to be sent.","name":"binaryData","type":"string"},{"text":"The length of the binary data to be sent, in bytes.","name":"length","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"WriteInt","parent":"net","type":"libraryfunc","description":"Appends an integer - a whole number - to the current net message. Can be read back with net.ReadInt on the receiving end.\n\nUse net.WriteUInt to send an unsigned number (that you know will never be negative). Use net.WriteFloat for a non-whole number (e.g. 2.25).","realm":"Shared","args":{"arg":[{"text":"The integer to be sent.","name":"integer","type":"number"},{"text":"The amount of bits the number consists of. This must be 32 or less.\n\nIf you are unsure what to set, just set it to 32.\n\n\n\nConsult the table below to determine the bit count you need:\n\n| Bit Count |  Minimum value |  Maximum value |\n|-----------|:--------------:|:--------------:|\n| 3 | -4 | 3 |\n| 4 | -8 | 7 |\n| 5 | -16 | 15 |\n| 6 | -32 | 31 |\n| 7 | -64 | 63 |\n| 8 | -128 | 127 |\n| 9 | -256 | 255 |\n| 10 | -512 | 511 |\n| 11 | -1024 | 1023 |\n| 12 | -2048 | 2047 |\n| 13 | -4096 | 4095 |\n| 14 | -8192 | 8191 |\n| 15 | -16384 | 16383 |\n| 16 | -32768 | 32767 |\n| 17 | -65536 | 65535 |\n| 18 | -131072 | 131071 |\n| 19 | -262144 | 262143 |\n| 20 | -524288 | 524287 |\n| 21 | -1048576 | 1048575 |\n| 22 | -2097152 | 2097151 |\n| 23 | -4194304 | 4194303 |\n| 24 | -8388608 | 8388607 |\n| 25 | -16777216 | 16777215 |\n| 26 | -33554432 | 33554431 |\n| 27 | -67108864 | 67108863 |\n| 28 | -134217728 | 134217727 |\n| 29 | -268435456 | 268435455 |\n| 30 | -536870912 | 536870911 |\n| 31 | -1073741824 | 1073741823 |\n| 32 | -2147483648 | 2147483647 |","name":"bitCount","type":"number"}]}},"example":{"description":"Sends the server the client's age.","code":"--Client\nfunction SendAge()\n     net.Start(\"SendAge\")\n     net.WriteInt(3, 3)  -- Only 2 bits are needed to store the number '3', but we add one because of the rule.\n     net.SendToServer()\nend\n\n--Server\nutil.AddNetworkString(\"SendAge\")\n\nlocal function GetAge(len, ply)\n     local age = net.ReadInt(3) -- use the same number of bits that were written\n     print(\"Player \" .. ply:Nick() .. \" is \" .. age .. \" years old.\")\nend\nnet.Receive(\"SendAge\", GetAge)","output":"Player <name> is 3 years old."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"WriteEntity","parent":"net","type":"libraryfunc","description":"Appends an entity to the current net message.","realm":"Shared","file":{"text":"lua/includes/extensions/net.lua","line":"47-L58"},"args":{"arg":{"text":"The entity to be sent.","name":"entity","type":"Entity"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"WriteDouble","parent":"net","type":"libraryfunc","description":"Appends a double-precision number to the current net message.","realm":"Shared","args":{"arg":{"text":"The double to be sent","name":"double","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"WriteFloat","parent":"net","type":"libraryfunc","description":"Appends a float (number with decimals) to the current net message.","realm":"Shared","args":{"arg":{"text":"The float to be sent.","name":"float","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"WriteMatrix","parent":"net","type":"libraryfunc","description":"Writes a VMatrix to the current net message.","realm":"Shared","args":{"arg":{"text":"The matrix to be sent.","name":"matrix","type":"VMatrix"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"WriteNormal","parent":"net","type":"libraryfunc","description":"Writes a normalized/direction vector ( Vector with length of 1 ) to the net message.\n\nThis function uses less bandwidth compared to net.WriteVector and will not send vectors with length of > 1 properly.","realm":"Shared","args":{"arg":{"text":"The normalized/direction vector to be send.","name":"normal","type":"Vector"}}},"example":{"description":"Showcases the difference between this function and net.WriteVector.","code":"if ( SERVER ) then\n\tutil.AddNetworkString( \"test1\" )\n\tutil.AddNetworkString( \"test2\" )\n\t\n\ttimer.Simple( 1, function()\n\t\tnet.Start( \"test1\" )\n\t\t\tnet.WriteVector( Vector( 1.23456789, 2.3456789, 3.456789 ) )\n\t\tnet.Broadcast()\n\t\n\t\tnet.Start( \"test2\" )\n\t\t\tnet.WriteNormal( Vector( 1.23456789, 2.3456789, 3.456789 ) )\n\t\tnet.Broadcast()\n\n\t\tnet.Start( \"test2\" )\n\t\t\tnet.WriteNormal( Vector( 1.23456789, 2.3456789, 3.456789 ):GetNormalized() )\n\t\tnet.Broadcast()\n\t\n\t\tnet.Start( \"test2\" )\n\t\t\tnet.WriteNormal( Vector( 0.5, -0.5, 0.23 ) )\n\t\tnet.Broadcast()\n\tend )\nelse\n\tnet.Receive( \"test1\", function( ... )\n\t\tprint( ... ) \n\t\tprint( net.ReadVector() ) \n\tend )\n\t\n\tnet.Receive( \"test2\", function( ... )\n\t\tprint( ... ) \n\t\tprint( net.ReadNormal() ) \n\tend )\nend","output":"```\n69\tnil\n1.218750 2.343750 3.437500\n27\tnil\n1.000000 1.000000 0.000000\n27\tnil\n0.283341 0.538349 0.793661\n27\tnil\n0.499756 -0.499756 0.707452\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"WriteTable","parent":"net","type":"libraryfunc","description":{"text":"Appends a table to the current net message. Adds 16 extra bits per key/value pair so you're better off writing each individual key/value as the exact type if possible.","warning":"All net messages have a 64kb buffer. This function will not check or error when that buffer is overflown. You might want to consider using util.TableToJSON and util.Compress and send the resulting string in 60kb chunks, doing the opposite on the receiving end."},"realm":"Shared","file":{"text":"lua/includes/extensions/net.lua","line":"101"},"args":{"arg":{"text":"The table to be sent.","name":"table","type":"table","warning":"If the table contains a nil key the table may not be read correctly.\n\nNot all objects can be sent over the network. Things like functions, IMaterials, etc will cause errors when reading the table from a net message."}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"WriteString","parent":"net","type":"libraryfunc","description":"Appends a string to the current net message. The size of the string is 8 bits plus 8 bits for every ASCII character in the string. The maximum allowed length of a single written string is 65533 characters.","realm":"Shared","args":{"arg":{"text":"The string to be sent.","name":"string","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"WriteType","parent":"net","type":"libraryfunc","description":{"text":"Appends any type of value to the current net message.","internal":"Used internally by net.WriteTable.","note":"An additional 8-bit unsigned integer indicating the type will automatically be written to the packet before the value, in order to facilitate reading with net.ReadType. If you know the data type you are writing, use a function meant for that specific data type to reduce amount of data sent."},"realm":"Shared","file":{"text":"lua/includes/extensions/net.lua","line":"144"},"args":{"arg":{"text":"The data to be sent","name":"Data","type":"any"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"WriteUInt","parent":"net","type":"libraryfunc","description":{"text":"Appends an unsigned integer with the specified number of bits to the current net message.\nUse net.WriteInt if you want to send negative and positive numbers. Use net.WriteFloat for a non-whole number (e.g. 2.25).","note":"Unsigned numbers do not support negative numbers."},"realm":"Shared","args":{"arg":[{"text":"The unsigned integer to be sent.","name":"unsignedInteger","type":"number"},{"text":"The size of the integer to be sent, in bits. Acceptable values range from any number 1 to 32 inclusive. For reference, 1 = bit, 4 = nibble, 8 = byte, 16 = short, 32 = long.\n\nConsult the table below to determine the bit count you need. The minimum value for all bit counts is 0.\n\n| Bit Count |  Maximum value |\n|-----------|:--------------:|\n| 1 | 1  |\n| 2 | 3  |\n| 3 | 7  |\n| 4 | 15 |\n| 5 | 31 |\n| 6 | 63 |\n| 7 | 127 |\n| 8 | 255 |\n| 9 | 511 |\n| 10 | 1023 |\n| 11 | 2047 |\n| 12 | 4095 |\n| 13 | 8191 |\n| 14 | 16383 |\n| 15 | 32767 |\n| 16 | 65535 |\n| 17 | 131071 |\n| 18 | 262143 |\n| 19 | 524287  |\n| 20 | 1048575  |\n| 21 | 2097151  |\n| 22 | 4194303  |\n| 23 | 8388607  |\n| 24 | 16777215  |\n| 25 | 33554431  |\n| 26 | 67108863  |\n| 27 | 134217727  |\n| 28 | 268435455  |\n| 29 | 536870911  |\n| 30 | 1073741823 |\n| 31 | 2147483647 |\n| 32 | 4294967295 |","name":"numberOfBits","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"WriteVector","parent":"net","type":"libraryfunc","description":"Appends a vector to the current net message.\nVectors sent by this function are compressed, which may result in precision loss.  XYZ components greater than 16384 or less than -16384 are irrecoverably altered (most significant bits are trimmed) and precision after the decimal point is low.","realm":"Shared","args":{"arg":{"text":"The vector to be sent.","name":"vector","type":"Vector"}}},"example":{"description":"Create a serverside command to send a vector to all clients, and a function to receive the vector on the clientside.  This example displays the vector compression discussed above.","code":"if SERVER then\n\n    util.AddNetworkString(\"testingvecs\")\n    function testvecs_sv()\n        net.Start(\"testingvecs\")\n        net.WriteVector(Vector(10000, 20000, -20000.123456789))\n        net.Broadcast()\n    end\n    concommand.Add(\"dovectest\", testvecs_sv)\n\nelseif CLIENT then\n\n    function testvecs_cl(len)\n        print(\"RECV: vec = \" .. tostring(net.ReadVector()) .. \"\\n\")\n    end\n    net.Receive(\"testingvecs\", testvecs_cl)\n\nend","output":"RECV: vec = 10000.000000 3616.000000 -3616.093750"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Activate","parent":"numpad","type":"libraryfunc","description":"Activates numpad key owned by the player","realm":"Server","args":{"arg":[{"text":"The player whose numpad should be simulated","name":"ply","type":"Player"},{"text":"The key to press, see Enums/KEY","name":"key","type":"number"},{"text":"Should this keypress pretend to be a from a gmod_button? (causes numpad.FromButton to return true)","name":"isButton","type":"boolean"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"AddLegacy","parent":"notification","type":"libraryfunc","description":"Adds a standard notification to your screen.","realm":"Client and Menu","args":{"arg":[{"text":"The text to display.","name":"text","type":"string"},{"text":"Determines the notification method (e.g. icon) for displaying the notification. See the Enums/NOTIFY.","name":"type","type":"number"},{"text":"The number of seconds to display the notification for.","name":"length","type":"number"}]}},"example":{"description":"Adds a prop undo notification to the screen, like in Sandbox.","code":"notification.AddLegacy( \"Undone Prop\", NOTIFY_UNDO, 2 )\nsurface.PlaySound( \"buttons/button15.wav\" )\nMsg( \"Prop undone\\n\" )","output":"Adds a notice that says \"Undone Prop\", plays the undo sound, and adds a message to the console."},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"Kill","parent":"notification","type":"libraryfunc","description":"Removes the notification after 0.8 seconds.","realm":"Client and Menu","args":{"arg":{"text":"The unique ID of the notification","name":"uid","type":"any"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"AddProgress","parent":"notification","type":"libraryfunc","description":"Adds a notification with an animated progress bar.","realm":"Client and Menu","args":{"arg":[{"text":"Can be any type. It's used as an index.","name":"id","type":"any"},{"text":"The text to show","name":"strText","type":"string"},{"text":"If set, overrides the progress bar animation with given percentage. Range is 0 to 1.","name":"frac","type":"number","default":"nil"}]}},"example":{"description":"Add a notification that says \"Downloading file...\", and remove after three seconds.","code":"notification.AddProgress(\"FileDownload\", \"Downloading file...\")\ntimer.Simple(3, function()\n\tnotification.Kill(\"FileDownload\")\nend)"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"Deactivate","parent":"numpad","type":"libraryfunc","description":"Deactivates numpad key owned by the player","realm":"Server","args":{"arg":[{"text":"The player whose numpad should be simulated","name":"ply","type":"Player"},{"text":"The key to press, corresponding to Enums/KEY","name":"key","type":"number"},{"text":"Should this keypress pretend to be a from a gmod_button? (causes numpad.FromButton to return true)","name":"isButton","type":"boolean"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"OnUp","parent":"numpad","type":"libraryfunc","description":"Calls a function registered with numpad.Register when a player releases specified key.\n\nSee for key pressed action: numpad.OnDown","realm":"Server","args":{"arg":[{"text":"The player whose numpad should be watched","name":"ply","type":"Player"},{"text":"The key, corresponding to Enums/KEY","name":"key","type":"number"},{"text":"The name of the function to run, corresponding with the one used in numpad.Register","name":"name","type":"string"},{"text":"Arguments to pass to the function passed to numpad.Register.","name":"...","type":"vararg"}]},"rets":{"ret":{"text":"The impulse ID","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"FromButton","parent":"numpad","type":"libraryfunc","description":"Returns true during a function added with numpad.Register when the third argument to numpad.Activate is true.\n\nThis is caused when a numpad function is triggered by a button SENT being used.","realm":"Server","rets":{"ret":{"text":"wasButton","name":"","type":"boolean"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"OnDown","parent":"numpad","type":"libraryfunc","description":"Calls a function registered with numpad.Register when a player presses specified key.\n\nSee for key released action: numpad.OnUp","realm":"Server","args":{"arg":[{"text":"The player whose numpad should be watched","name":"ply","type":"Player"},{"text":"The key, corresponding to Enums/KEY","name":"key","type":"number"},{"text":"The name of the function to run, corresponding with the one used in numpad.Register","name":"name","type":"string"},{"text":"Arguments to pass to the function passed to numpad.Register.","name":"...","type":"vararg"}]},"rets":{"ret":{"text":"The impulse ID","name":"","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Register","parent":"numpad","type":"libraryfunc","description":"Registers a numpad library action for use with numpad.OnDown and numpad.OnUp","realm":"Server","args":{"arg":[{"text":"The unique id of your action.","name":"id","type":"string"},{"text":"The function to be executed.\n\nArguments are:\n\nPlayer ply - The player who pressed the button\n\nvararg ... - The 4th and all subsequent arguments passed from numpad.OnDown and/or numpad.OnUp\n\nReturning **false** in this function will remove the listener which triggered this function (example: return false if one of your varargs is an entity which is no longer valid)","name":"func","type":"function"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Toggle","parent":"numpad","type":"libraryfunc","description":"Either runs numpad.Activate or numpad.Deactivate depending on the key's current state","realm":"Server","args":{"arg":[{"text":"The player whose numpad should be simulated","name":"ply","type":"Player"},{"text":"The key to press, corresponding to Enums/KEY","name":"key","type":"number"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"clock","parent":"os","type":"libraryfunc","description":{"text":"Returns the approximate cpu time the application ran.\nSee also Global.SysTime","note":"This function has different precision on Linux (1/100)."},"realm":"Shared and Menu","rets":{"ret":{"text":"runtime","name":"","type":"number"}}},"example":{"description":"Prints the amount of time since Garry's Mod has been open to the console.","code":"print(os.clock())"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"date","parent":"os","type":"libraryfunc","description":"Returns the date/time as a formatted string or in a table.","realm":"Shared and Menu","args":{"arg":[{"text":"The format string.\n\nIf this is equal to `*t` or `!*t` then this function will return a Structures/DateData, otherwise it will return a string.\n\nIf this starts with an `!`, the returned data will use the UTC timezone rather than the local timezone.\n\nSee http://www.mkssoftware.com/docs/man3/strftime.3.asp for available format flags.\n\n\n\nKnown formats that work on all platforms:\n\n| Format | Description | Example of the output |\n|:------:|:-----------:|:---------------------:|\n| `%a` | Abbreviated weekday name | `Wed` |\n| `%A` | Full weekday name | `Wednesday` |\n| `%b` | Abbreviated month name | `Sep` |\n| `%B` | Full month name | `September` |\n| `%c` | Locale-appropriate date and time | Varies by platform and language settings |\n| `%d` | Day of the month [01-31] | `16` |\n| `%H` | Hour, using a 24-hour clock [00-23] | `23` |\n| `%I` | Hour, using a 12-hour clock [01-12] | `11` |\n| `%j` | Day of the year [001-365] | `259` |\n| `%m` | Month [01-12] | `09` |\n| `%M` | Minute [00-59] | `48` |\n| `%p` | Either `am` or `pm` | `pm` |\n| `%S` | Second [00-60] | `10` |\n| `%w` | Weekday [0-6 = Sunday-Saturday] | `3` |\n| `%W` | Week of the year [00-53] | `37` |\n| `%x` | Date (Same as `%m/%d/%y`) | `09/16/98` |\n| `%X` | Time (Same as `%H:%M:%S`) | `24:48:10` |\n| `%y` | Two-digit year [00-99] | `98` |\n| `%Y` | Full year | `1998` |\n| `%z` | Timezone | `-0300` |\n| `%%` | A percent sign | `%` |","name":"format","type":"string","bug":{"text":"**Not all flags are available on all operating systems** and the result of using an invalid flag is undefined. This currently crashes the game on Windows. Most or all flags are available on OS X and Linux but considerably fewer are available on Windows. See http://msdn.microsoft.com/en-us/library/fe06s4ak.aspx for a list of available flags on Windows. Note that the **#** flags also crashes the game on Windows.","issue":"329"}},{"text":"Time to use for the format.","name":"time","type":"number","default":"os.time()"}]},"rets":{"ret":{"text":"Formatted date","name":"","type":"string","note":"This will be a Structures/DateData if the first argument equals to `*t` or `!*t`"}}},"example":{"description":"This will use the os.time() function, and return it in a friendly way.\nos.time() is useful for storing as a date stamp but needs this to make it readable.","code":"local Timestamp = os.time()\nlocal TimeString = os.date( \"%H:%M:%S - %d/%m/%Y\" , Timestamp )\nprint( \"Timestamp:\", Timestamp )\nprint( \"TimeString:\", TimeString )","output":"````\nTimestamp:\t1584402168\nTimeString:\t23:42:48 - 16/03/2020\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Remove","parent":"numpad","type":"libraryfunc","description":"Removes a function added by either numpad.OnUp or numpad.OnDown","realm":"Server","args":{"arg":{"text":"The impulse ID returned by numpad.OnUp or numpad.OnDown","name":"ID","type":"number"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"difftime","parent":"os","type":"libraryfunc","description":"Subtracts the second from the first value and rounds the result.","realm":"Shared and Menu","args":{"arg":[{"text":"The first value.","name":"timeA","type":"number"},{"text":"The value to subtract.","name":"timeB","type":"number"}]},"rets":{"ret":{"text":"diffTime","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"AddSurfaceData","parent":"physenv","type":"libraryfunc","description":{"text":"Adds surface properties to the game's physics environment.","bug":{"text":"The game has a limit of 128 surface properties - this includes properties loaded automatically from [surfaceproperties.txt](https://github.com/Facepunch/garrysmod/blob/master/garrysmod/scripts/surfaceproperties.txt). Due to this, there's only a small amount of open slots that can be registered with GMod's provided surfaceproperties.txt.","issue":"2604"}},"realm":"Shared","args":{"arg":{"text":"The properties to add. Each one should include \"base\" or the game will crash due to some values being missing.","name":"properties","type":"string"}}},"example":{"description":"Adds the \"scout_baseball\" surface property from TF2.","code":"physenv.AddSurfaceData([[\"scout_baseball\"\n{\n\t\"base\"\t\t\"rubber\"\n\n\t\"bulletimpact\"\t\"Weapon_Baseball.HitWorld\"\n\t\"scraperough\"\t\"Grenade.ScrapeRough\"\n\t\"scrapesmooth\"\t\"Grenade.ScrapeSmooth\"\n\t\"impacthard\"\t\"Weapon_Baseball.HitWorld\"\n\t\"impactsoft\"\t\"Weapon_Baseball.HitWorld\"\n\t\"rolling\"\t\"Grenade.Roll\"\n}]])"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"time","parent":"os","type":"libraryfunc","description":"Returns the system time in seconds past the unix epoch. If a table is supplied, the function attempts to build a system time with the specified table members.","realm":"Shared and Menu","args":{"arg":{"text":"Table to generate the time from. This table's data is interpreted as being in the local timezone. See Structures/DateData","name":"dateData","type":"table","default":"nil"}},"rets":{"ret":{"text":"Seconds passed since Unix epoch","name":"","type":"number"}}},"example":{"description":"Prints out the current time, in seconds past the unix epoch.","code":"print( os.time() )","output":"1581691801"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"seeall","parent":"package","type":"libraryfunc","description":"Sets a metatable for module with its __index field referring to the global environment, so that this module inherits values from the global environment. To be used as an option to Global.module.","realm":"Shared and Menu","args":{"arg":{"text":"The module table to be given a metatable","name":"module","type":"table"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"GetGravity","parent":"physenv","type":"libraryfunc","description":"Gets the global gravity.","realm":"Shared","rets":{"ret":{"text":"gravity","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetAirDensity","parent":"physenv","type":"libraryfunc","description":"Returns the air density.","realm":"Shared","rets":{"ret":{"text":"airDensity","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetPerformanceSettings","parent":"physenv","type":"libraryfunc","description":"Gets the current performance settings in table form.","realm":"Shared","rets":{"ret":{"text":"Performance settings. See Structures/PhysEnvPerformanceSettings","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetAirDensity","parent":"physenv","type":"libraryfunc","description":"Sets the air density.","realm":"Shared","args":{"arg":{"text":"The new air density.","name":"airDensity","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"CreateNextBot","parent":"player","type":"libraryfunc","description":{"text":"Similar to the serverside command \"bot\", this function creates a new Player bot with the given name. This bot will not obey to the usual \"bot_*\" commands, and it's the same bot base used in TF2 and CS:S.\n\nThe best way to control the behaviour of a Player bot right now is to use the GM:StartCommand hook and modify its input serverside.","note":["Despite this Player being fake, it has to be removed from the server by using Player:Kick and **NOT** Entity:Remove.\nAlso keep in mind that these bots still use player slots, so you won't be able to spawn them in singleplayer!","Any Bot created using this method will be considered UnAuthed by Garry's Mod"]},"realm":"Server","args":{"arg":{"text":"The name of the bot, using an already existing name will append brackets at the end of it with a number pertaining it.\n\nExample: \"Bot name test\", \"Bot name test(1)\".","name":"botName","type":"string"}},"rets":{"ret":{"text":"The newly created Player bot. Returns NULL if there's no Player slots available to host it.","name":"","type":"Player"}}},"example":{"description":"Create a bot if that is possible.","code":{"text":"local listBots = {}\n\nfunction CreateBot()\n\n    if ( !game.SinglePlayer() && player.GetCount()","game.maxplayers":{"then":"","local":"","num":["#listBots",""],"listbots":"","player.createnextbotbot_":"","return":"","else":"","print":"","cant":"","create":"","bot":"","end":"","ode":"ode"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetGravity","parent":"physenv","type":"libraryfunc","description":"Sets the directional gravity, does not work on players.","realm":"Shared","args":{"arg":{"text":"The new gravity.","name":"gravity","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetAll","parent":"player","type":"libraryfunc","description":{"text":"Gets all the current players in the server (not including connecting clients).","note":["This function returns bots as well as human players. See player.GetBots and  player.GetHumans.","This function returns a sequential table, meaning it should be looped with Global.ipairs instead of Global.pairs for efficiency reasons."]},"realm":"Shared","rets":{"ret":{"text":"All Players currently in the server.","name":"","type":"table"}}},"example":[{"description":"Prints all the players currently in the server.","code":"PrintTable( player.GetAll() )","output":"```\n1 = [Player][1][Player1]\n2 = [Player][2][Bot01]\n3 = [Player][3][Bot02]\n```"},{"description":"Prints the number of players in the server. The same output can be achieved more efficiently with player.GetCount.","code":"print(#player.GetAll())","output":"```\n3\n```"},{"description":"The output of the players name in the console.","code":"for i, v in ipairs( player.GetAll() ) do\n    print( v:Nick() )\nend","output":"```\nPlayer1\nPlayer2\nPlayer3\n```"}],"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetPerformanceSettings","parent":"physenv","type":"libraryfunc","description":"Sets the performance settings.","realm":"Shared","args":{"arg":{"text":"The new performance settings. See Structures/PhysEnvPerformanceSettings","name":"performanceSettings","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetByID","parent":"player","type":"libraryfunc","description":"Gets the player with the specified connection ID.\n\nConnection ID can be retrieved via gameevent.Listen events.\n\nFor a function that returns a player based on their Entity:EntIndex, see Global.Entity.\n\n\nFor a function that returns a player based on their Player:UserID, see Global.Player.","realm":"Shared","args":{"arg":{"text":"The connection ID to find the player by.","name":"connectionID","type":"number"}},"rets":{"ret":{"text":"Player if one is found, nil otherwise","name":"","type":"Player"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetBots","parent":"player","type":"libraryfunc","description":"Returns a table of all bots on the server.","realm":"Shared","rets":{"ret":{"text":"A table only containing bots ( AI / non human players )","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetByAccountID","parent":"player","type":"libraryfunc","description":{"text":"Gets the player with the specified AccountID.","warning":"Internally this function iterates over all players in the server, meaning it can be quite expensive in a performance-critical context."},"realm":"Shared","file":{"text":"lua/includes/extensions/player.lua","line":"45-L57"},"args":{"arg":{"text":"The Player:AccountID to find the player by.","name":"accountID","type":"number"}},"rets":{"ret":{"text":"Player if one is found, false otherwise.","name":"","type":"Player"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetBySteamID","parent":"player","type":"libraryfunc","description":{"text":"Gets the player with the specified SteamID.","warning":"Internally this function iterates over all players in the server, meaning it can be quite expensive in a performance-critical context."},"realm":"Shared","file":{"text":"lua/includes/extensions/player.lua","line":"67-L77"},"args":{"arg":{"text":"The Player:SteamID to find the player by.","name":"steamID","type":"string"}},"rets":{"ret":{"text":"Player if one is found, false otherwise.","name":"","type":"Player"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetCount","parent":"player","type":"libraryfunc","description":{"text":"Gives you the player count.","note":"Similar to **#**player.GetAll() but with better performance since the player table doesn't have to be generated. If player.GetAll is already being called for iteration, then using the **#** operator on the table will be faster than calling this function since it is JITted."},"realm":"Shared","rets":{"ret":{"text":"Number of players","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetHumans","parent":"player","type":"libraryfunc","description":"Returns a table of all human ( non bot/AI ) players.\n\nUnlike player.GetAll, this does not include bots.","realm":"Shared","rets":{"ret":{"text":"A table of all human ( non bot/AI ) players.","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetBySteamID64","parent":"player","type":"libraryfunc","description":{"text":"Gets the player with the specified SteamID64.","warning":"Internally this function iterates over all players in the server, meaning it can be quite expensive in a performance-critical context."},"realm":"Shared","file":{"text":"lua/includes/extensions/player.lua","line":"79-L89"},"args":{"arg":{"text":"The Player:SteamID64 to find the player by.","name":"steamID64","type":"string"}},"rets":{"ret":{"text":"Player if one is found, false otherwise.","name":"","type":"Player"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetByUniqueID","parent":"player","type":"libraryfunc","description":{"text":"Gets the player with the specified uniqueID (not recommended way to identify players).","deprecated":"Use player.GetBySteamID64, player.GetBySteamID or player.GetByAccountID to get a player by a unique identifier instead.","warning":["It is highly recommended to use player.GetByAccountID, player.GetBySteamID or player.GetBySteamID64 instead as this function can have collisions ( be same for different people ) while SteamID is guaranteed to unique to each player.","Internally this function iterates over all players in the server, meaning it can be quite expensive in a performance-critical context."]},"realm":"Shared","file":{"text":"lua/includes/extensions/player.lua","line":"56-L65"},"args":{"arg":{"text":"The Player:UniqueID to find the player by.","name":"uniqueID","type":"string"}},"rets":{"ret":{"text":"Player if one is found, false otherwise.","name":"","type":"Player"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"AddValidHands","parent":"player_manager","type":"libraryfunc","description":"Assigns view model hands to player model.","realm":"Shared","args":{"arg":[{"text":"Player model name","name":"name","type":"string"},{"text":"Hands model","name":"model","type":"string"},{"text":"Skin to apply to the hands","name":"skin","type":"number"},{"text":"Bodygroups to apply to the hands","name":"bodygroups","type":"string"}]}},"example":{"description":"Adds CS:S hands for hostage playermodels","code":"player_manager.AddValidHands( \"hostage01\", \"models/weapons/c_arms_cstrike.mdl\", 0, \"10000000\" )\nplayer_manager.AddValidHands( \"hostage02\", \"models/weapons/c_arms_cstrike.mdl\", 0, \"10000000\" )\nplayer_manager.AddValidHands( \"hostage03\", \"models/weapons/c_arms_cstrike.mdl\", 0, \"10000000\" )\nplayer_manager.AddValidHands( \"hostage04\", \"models/weapons/c_arms_cstrike.mdl\", 0, \"10000000\" )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"AllValidModels","parent":"player_manager","type":"libraryfunc","description":"Returns the entire list of valid player models.","realm":"Shared"},"example":{"description":"Store the list of valid player models in a local variable, and print the valid model path for \"Alyx\"","code":"local models = player_manager.AllValidModels()\nprint(models[\"alyx\"])","output":"Console outputs: \"models/player/alyx.mdl\""},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"AddValidModel","parent":"player_manager","type":"libraryfunc","description":"Associates a simplified name with a path to a valid player model.\n\n\nOnly used internally.","realm":"Shared","args":{"arg":[{"text":"Simplified name","name":"name","type":"string"},{"text":"Valid PlayerModel path","name":"model","type":"string"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ClearPlayerClass","parent":"player_manager","type":"libraryfunc","description":"Clears a player's class association by setting their ClassID to 0","realm":"Shared","args":{"arg":{"text":"Player to clear class from","name":"ply","type":"Player"}}},"example":{"description":"Source for player_manager.ClearPlayerClass (from lua/includes/modules/player_manager.lua)","code":"function ClearPlayerClass( ply )\n\n\tply:SetClassID( 0 )\n\nend","output":""},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetPlayerClasses","parent":"player_manager","type":"libraryfunc","description":"Retrieves a copy of all registered player classes.","realm":"Shared","added":"2020.10.14","rets":{"ret":{"text":"A copy of all registered player classes.","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"OnPlayerSpawn","parent":"player_manager","type":"libraryfunc","description":"Applies basic class variables when the player spawns.\n\nCalled from GM:PlayerSpawn in the base gamemode.","realm":"Shared","file":{"text":"lua/includes/modules/player_manager.lua","line":"411-L430"},"args":{"arg":{"text":"Player to setup","name":"ply","type":"Player"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetPlayerClass","parent":"player_manager","type":"libraryfunc","description":"Gets a players class","realm":"Shared","args":{"arg":{"text":"Player to get class","name":"ply","type":"Player"}},"rets":{"ret":{"text":"The players class","name":"","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"TranslatePlayerHands","parent":"player_manager","type":"libraryfunc","description":"Retrieves correct hands for given player model. By default returns citizen hands.","realm":"Shared","args":{"arg":{"text":"Player model name","name":"name","type":"string"}},"rets":{"ret":{"text":"A table with following contents:\n* string model - Model of hands\n* number skin - Skin of hands\n* string body - Bodygroups of hands","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"RegisterClass","parent":"player_manager","type":"libraryfunc","description":"Register a class metatable to be assigned to players later","realm":"Shared","args":{"arg":[{"text":"Class name","name":"name","type":"string"},{"text":"Class metatable","name":"table","type":"table"},{"text":"Base class name","name":"base","type":"string"}]}},"example":[{"description":"A quick look at registering a class table","code":"local PLAYER = {}\n\nPLAYER.DisplayName = \"Default Class\"\n\n-- ...\n\nplayer_manager.RegisterClass( \"player_default\", PLAYER, nil )"},{"description":"You can retrieve the data you've set when registering the table using baseclass.Get( \"<classname>\" )","code":"PrintTable( baseclass.Get( \"player_default\" ) )","output":"```\nWalkspeed = 300\nRunSpeed = 500\nCalcView = function: 0x00665988\nUseVMHands = true\n--- etc...\n```"}],"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetPlayerClass","parent":"player_manager","type":"libraryfunc","description":"Sets a player's class","realm":"Shared","args":{"arg":[{"text":"Player to set class","name":"ply","type":"Player"},{"text":"Name of class to set","name":"classname","type":"string"}]}},"example":{"description":"Sets the player's class to 'player_default' every time they spawn","code":"function GM:PlayerSpawn( ply )\n\tplayer_manager.SetPlayerClass(ply, \"player_default\")\nend","output":""},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"TranslatePlayerModel","parent":"player_manager","type":"libraryfunc","description":"Returns the valid model path for a simplified name.","realm":"Shared","args":{"arg":{"text":"The short name of the model.","name":"shortName","type":"string"}},"rets":{"ret":{"text":"The valid model path for the short name.","name":"","type":"string"}}},"example":{"description":"Print the valid model path for \"Alyx\".","code":"print(player_manager.TranslatePlayerModel(\"alyx\"))","output":"Console outputs: \"models/player/alyx.mdl\""},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Add","parent":"presets","type":"libraryfunc","description":"Adds preset to a preset group.","realm":"Client","args":{"arg":[{"text":"The preset group name, usually it's tool class name.","name":"groupname","type":"string"},{"text":"Preset name, must be unique.","name":"name","type":"string"},{"text":"A table of preset console commands.","name":"values","type":"table"}]}},"example":{"description":"A simple faceposer preset.","code":"presets.Add( \"face\", \"Open Eyes\", {\n\tfaceposer_flex0\t= \"1\",\n\tfaceposer_flex1\t= \"1\",\n\tfaceposer_flex2\t= \"0\",\n\tfaceposer_flex3\t= \"0\",\n\tfaceposer_flex4\t= \"0\",\n\tfaceposer_flex5\t= \"0\",\n\tfaceposer_flex6\t= \"0\",\n\tfaceposer_flex7\t= \"0\",\n\tfaceposer_flex8\t= \"0\",\n\tfaceposer_flex9\t= \"0\"\n} )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"TranslateToPlayerModelName","parent":"player_manager","type":"libraryfunc","description":"Returns the simplified name for a valid model path of a player model.\n\nOpposite of player_manager.TranslatePlayerModel.","realm":"Shared","args":{"arg":{"text":"The model path to a player model","name":"model","type":"string"}},"rets":{"ret":{"text":"The simplified name for that model","name":"","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"RunClass","parent":"player_manager","type":"libraryfunc","description":"Execute a named function within the player's set class","realm":"Shared","file":{"text":"lua/includes/modules/player_manager.lua","line":"405-L415"},"args":{"arg":[{"text":"Player to execute function on.","name":"ply","type":"Player"},{"text":"Name of function.","name":"funcName","type":"string"},{"text":"Optional arguments. Can be of any type.","name":"arguments","type":"vararg"}]},"rets":{"ret":{"text":"The values returned by the called function.","name":"","type":"vararg"}}},"example":[{"description":"Run the player's class 'Loadout' function when PlayerLoadout is called","code":"function GM:PlayerLoadout( ply )\n\n\tplayer_manager.RunClass( ply, \"Loadout\" )\n \nend","output":"The player's class 'Loadout' function is executed"},{"description":"Call a greeting function within the playerclass system.","code":"local PLAYER = {}\nPLAYER.DisplayName = \"Hooman\"\nPLAYER.WalkSpeed = 200\nPLAYER.greet = function( tbl ) // create a function named 'greet'\n// the first argument passed is the source table\n// which includes the classID, the player entity, and the function itself\n\tlocal ply = tbl.Player // here we extract the player entity from the table\n    ply:ChatPrint(\"Hello \"..ply:Nick()..\" !\") // tell the player\nend\n\n// link it to the spawn hook, so each time a player (re-)spawns, he will be greeted with a hello\nhook.Add(\"PlayerSpawn\",\"greet\",function(ply)\n\tplayer_manager.RunClass( ply, \"greet\" )\nend)","output":"Hello Flowx !"}],"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"BadNameAlert","parent":"presets","type":"libraryfunc","description":{"text":"Used internally to tell the player that the name they tried to use in their preset is not acceptable.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetTable","parent":"presets","type":"libraryfunc","description":"Returns a table with preset names and values from a single preset group.","realm":"Client","args":{"arg":{"text":"Preset group name.","name":"groupname","type":"string"}},"rets":{"ret":{"text":"All presets in specified group.","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Exists","parent":"presets","type":"libraryfunc","description":"Returns whether a preset with given name exists or not","realm":"Client","args":{"arg":[{"text":"The preset group name, usually it's tool class name.","name":"type","type":"string"},{"text":"Name of the preset to test","name":"name","type":"string"}]},"rets":{"ret":{"text":"true if the preset does exist","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OverwritePresetPrompt","parent":"presets","type":"libraryfunc","description":{"text":"Used internally to ask the player if they want to override an already existing preset.","internal":""},"realm":"Client","args":{"arg":{"name":"callback","type":"function"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Add","parent":"properties","type":"libraryfunc","description":"Add properties to the properties module","realm":"Shared","file":{"text":"lua/includes/modules/properties.lua","line":"28-L36"},"args":{"arg":[{"text":"A unique name used to identify the property","name":"name","type":"string"},{"text":"A table that defines the property. Uses the Structures/PropertyAdd.","name":"propertyData","type":"table"}]}},"example":{"description":"Defines a property that can be used to ignite entities (from Sandbox)","code":"properties.Add( \"ignite\", {\n\tMenuLabel = \"#ignite\", -- Name to display on the context menu\n\tOrder = 999, -- The order to display this property relative to other properties\n\tMenuIcon = \"icon16/fire.png\", -- The icon to display next to the property\n\n\tFilter = function( self, ent, ply ) -- A function that determines whether an entity is valid for this property\n\t\tif ( !IsValid( ent ) ) then return false end\n\t\tif ( ent:IsPlayer() ) then return false end\n\t\tif ( !CanEntityBeSetOnFire( ent ) ) then return false end\n\t\tif ( !gamemode.Call( \"CanProperty\", ply, \"ignite\", ent ) ) then return false end\n\n\t\treturn !ent:IsOnFire() \n\tend,\n\tAction = function( self, ent ) -- The action to perform upon using the property ( Clientside )\n\n\t\tself:MsgStart()\n\t\t\tnet.WriteEntity( ent )\n\t\tself:MsgEnd()\n\n\tend,\n\tReceive = function( self, length, ply ) -- The action to perform upon using the property ( Serverside )\n\t\tlocal ent = net.ReadEntity()\n\n\t\tif ( !properties.CanBeTargeted( ent, ply ) ) then return end\n\t\tif ( !self:Filter( ent, ply ) ) then return end\n\n\t\tent:Ignite( 360 )\n\tend \n} )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Rename","parent":"presets","type":"libraryfunc","description":"Renames preset.","realm":"Client","args":{"arg":[{"text":"Preset group name","name":"groupname","type":"string"},{"text":"Old preset name","name":"oldname","type":"string"},{"text":"New preset name","name":"newname","type":"string"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"CanBeTargeted","parent":"properties","type":"libraryfunc","description":"Returns true if given entity can be targeted by the player via the properties system.\n\nThis should be used serverside in your properties to prevent abuse by clientside scripting.","realm":"Shared","file":{"text":"lua/includes/modules/properties.lua","line":"104-L118"},"args":{"arg":[{"text":"The entity to test","name":"ent","type":"Entity"},{"text":"If given, will also perform a distance check based on the entity's Orientated Bounding Box.","name":"ply","type":"Player"}]},"rets":{"ret":{"text":"True if entity can be targeted, false otherwise","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetHovered","parent":"properties","type":"libraryfunc","description":"Returns an entity player is hovering over with his cursor.","realm":"Client","file":{"text":"lua/includes/modules/properties.lua","line":"120-L154"},"args":{"arg":[{"text":"Eye position of local player, Entity:EyePos","name":"pos","type":"Vector"},{"text":"Aim vector of local player, Player:GetAimVector","name":"aimVec","type":"Vector"}]},"rets":{"ret":{"text":"The hovered entity","name":"","type":"Entity"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Remove","parent":"presets","type":"libraryfunc","description":"Removes a preset entry from a preset group.","realm":"Client","args":{"arg":[{"text":"Preset group to remove from","name":"groupname","type":"string"},{"text":"Name of preset to remove","name":"name","type":"string"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnScreenClick","parent":"properties","type":"libraryfunc","description":"Checks if player hovers over any entities and open a properties menu for it.","realm":"Shared","file":{"text":"lua/includes/modules/properties.lua","line":"93-L100"},"args":{"arg":[{"text":"The eye pos of a player","name":"eyepos","type":"Vector"},{"text":"The aim vector of a player","name":"eyevec","type":"Vector"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"AddBeam","parent":"render","type":"libraryfunc","description":"Adds a beam segment to the beam started by render.StartBeam.","realm":"Client","args":{"arg":[{"text":"Beam start position.","name":"startPos","type":"Vector"},{"text":"The width of the beam.","name":"width","type":"number"},{"text":"The end coordinate of the texture used.","name":"textureEnd","type":"number"},{"text":"The color to be used. Uses the Color.","name":"color","type":"table"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"BlurRenderTarget","parent":"render","type":"libraryfunc","description":"Blurs the render target ( or a given texture )","realm":"Client","file":{"text":"lua/includes/extensions/client/render.lua","line":"L86-L105"},"args":{"arg":[{"text":"The texture to blur","name":"rendertarget","type":"ITexture"},{"text":"Horizontal amount of blur","name":"blurx","type":"number"},{"text":"Vertical amount of blur","name":"blury","type":"number"},{"text":"Amount of passes to go through","name":"passes","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"BrushMaterialOverride","parent":"render","type":"libraryfunc","description":"This function overrides the brush material for next render operations. It can be used with Entity:DrawModel.","realm":"Client","args":{"arg":{"name":"mat","type":"IMaterial","default":"nil"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OpenEntityMenu","parent":"properties","type":"libraryfunc","description":"Opens properties menu for given entity.","realm":"Shared","file":{"text":"lua/includes/modules/properties.lua","line":"74-L91"},"args":{"arg":[{"text":"The entity to open menu for","name":"ent","type":"Entity"},{"text":"The trace that is passed as second argument to Action callback of a property","name":"tr","type":"table"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"CapturePixels","parent":"render","type":"libraryfunc","description":"Dumps the current render target and allows the pixels to be accessed by render.ReadPixel.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"Clear","parent":"render","type":"libraryfunc","description":{"text":"Clears the current render target and the specified buffers.","bug":{"text":"This sets the alpha incorrectly for surface draw calls for render targets.","issue":"2085"}},"realm":"Client","args":{"arg":[{"text":"Red component to clear to.","name":"r","type":"number"},{"text":"Green component to clear to.","name":"g","type":"number"},{"text":"Blue component to clear to.","name":"b","type":"number"},{"text":"Alpha component to clear to.","name":"a","type":"number"},{"text":"Clear the depth.","name":"clearDepth","type":"boolean","default":"false"},{"text":"Clear the stencil.","name":"clearStencil","type":"boolean","default":"false"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ClearDepth","parent":"render","type":"libraryfunc","description":{"text":"Resets the depth buffer.","bug":{"text":"This function also clears the stencil buffer. Use render.Clear in the meantime.","issue":"3317"}},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"ClearBuffersObeyStencil","parent":"render","type":"libraryfunc","description":"Clears the current rendertarget for obeying the current stencil buffer conditions.","realm":"Client","args":{"arg":[{"text":"Value of the **red** channel to clear the current rt with.","name":"r","type":"number"},{"text":"Value of the **green** channel to clear the current rt with.","name":"g","type":"number"},{"text":"Value of the **blue** channel to clear the current rt with.","name":"b","type":"number"},{"text":"Value of the **alpha** channel to clear the current rt with.","name":"a","type":"number"},{"text":"Clear the depth buffer.","name":"depth","type":"boolean"}]}},"example":{"description":"Clearing a section of the screen via the stencil buffer (from \n[Lex's Stencil Tutorial](https://github.com/Lexicality/stencil-tutorial)).","code":"hook.Add( \"PostDrawOpaqueRenderables\", \"Stencil Tutorial Example\", function()\n\t-- Reset everything to known good\n\trender.SetStencilWriteMask( 0xFF )\n\trender.SetStencilTestMask( 0xFF )\n\trender.SetStencilReferenceValue( 0 )\n\trender.SetStencilCompareFunction( STENCIL_ALWAYS )\n\trender.SetStencilPassOperation( STENCIL_KEEP )\n\trender.SetStencilFailOperation( STENCIL_KEEP )\n\trender.SetStencilZFailOperation( STENCIL_KEEP )\n\trender.ClearStencil()\n\n\t-- Enable stencils\n\trender.SetStencilEnable( true )\n\t-- Set the reference value to 1. This is what the compare function tests against\n\trender.SetStencilReferenceValue( 1 )\n\t-- Refuse to write things to the screen unless that pixel's value is 1\n\trender.SetStencilCompareFunction( STENCIL_EQUAL )\n\t-- Write a 1 to the centre third of the screen. Because we cleared it earlier, everything is currently 0\n\tlocal w, h = ScrW() / 3, ScrH() / 3\n\tlocal x_start, y_start = w, h\n\tlocal x_end, y_end = x_start + w, y_start + h\n\trender.ClearStencilBufferRectangle( x_start, y_start, x_end, y_end, 1 )\n\n\t-- Tell the render library to clear the screen, but obeying the stencil test function.\n\t-- This means it will only clear the centre third.\n\trender.ClearBuffersObeyStencil( 0, 148, 133, 255, false )\n\n\t-- Let everything render normally again\n\trender.SetStencilEnable( false )\nend )","output":{"image":{"src":"clearbuffersobeystencil.jpg","alt":"800px"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ClearRenderTarget","parent":"render","type":"libraryfunc","description":"Clears a render target\n\nIt uses render.Clear then render.SetRenderTarget on the modified render target.","realm":"Client","args":{"arg":[{"name":"texture","type":"ITexture"},{"text":"The color, see Color","name":"color","type":"table"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Capture","parent":"render","type":"libraryfunc","description":{"text":"Captures a part of the current render target and returns the data as a binary string in the given format.\n\nSince the pixel buffer clears itself every frame, this will return a black screen outside of. To capture the user's final view, use GM:PostRender. This will not capture the Steam overlay or third-party injections (such as the Discord overlay, Overwolf, and advanced cheats) on the user's screen.","bug":{"text":"In PNG mode, this function can produce unexpected result where foreground is rendered as transparent.\nThis is caused by render.SetWriteDepthToDestAlpha set to `true` when doing most of render operations, including rendering in `_rt_fullframefb`. If you want to capture render target's content as PNG image only for output quality, set Structures/RenderCaptureData's `alpha` to `false` when capturing render targets with render.SetWriteDepthToDestAlpha set to `true`.","issue":"2571"}},"realm":"Client","args":{"arg":{"text":"Parameters of the capture. See Structures/RenderCaptureData.","name":"captureData","type":"table"}},"rets":{"ret":{"text":"binaryData","name":"","type":"string"}}},"example":{"description":"How you could use this to save a picture of your screen.","code":"local ScreenshotRequested = false\nfunction RequestAScreenshot()\n\tScreenshotRequested = true\nend\n\n-- For the sake of this example, we use a console command to request a screenshot\nconcommand.Add( \"make_screenshot\", RequestAScreenshot )\n\nhook.Add( \"PostRender\", \"example_screenshot\", function()\n\tif ( !ScreenshotRequested ) then return end\n\tScreenshotRequested = false\n\n\tlocal data = render.Capture( {\n\t\tformat = \"png\",\n\t\tx = 0,\n\t\ty = 0,\n\t\tw = ScrW(),\n\t\th = ScrH()\n\t} )\n\n\tfile.Write( \"image.png\", data )\nend )","output":"You should now have `image.png` in your `garrysmod/data` folder, containing a screenshot."},"realms":["Client"],"type":"Function"},
{"function":{"name":"ClearStencilBufferRectangle","parent":"render","type":"libraryfunc","description":"Sets the stencil value in a specified rect.\n\nThis is **not** affected by render.SetStencilWriteMask","realm":"Client","args":{"arg":[{"text":"X origin of the rectangle.","name":"originX","type":"number"},{"text":"Y origin of the rectangle.","name":"originY","type":"number"},{"text":"The end X coordinate of the rectangle.","name":"endX","type":"number"},{"text":"The end Y coordinate of the rectangle.","name":"endY","type":"number"},{"text":"Value to set cleared stencil buffer to.","name":"stencilValue","type":"number"}]}},"example":{"description":"A basic stencil operation that limits rendering to the centre of the screen (from \n[Lex's Stencil Tutorial](https://github.com/Lexicality/stencil-tutorial)).","code":"hook.Add( \"PostDrawOpaqueRenderables\", \"Stencil Tutorial Example\", function()\n\t-- Reset everything to known good\n\trender.SetStencilWriteMask( 0xFF )\n\trender.SetStencilTestMask( 0xFF )\n\trender.SetStencilReferenceValue( 0 )\n\trender.SetStencilCompareFunction( STENCIL_ALWAYS )\n\trender.SetStencilPassOperation( STENCIL_KEEP )\n\trender.SetStencilFailOperation( STENCIL_KEEP )\n\trender.SetStencilZFailOperation( STENCIL_KEEP )\n\trender.ClearStencil()\n\n\t-- Enable stencils\n\trender.SetStencilEnable( true )\n\t-- Set the reference value to 1. This is what the compare function tests against\n\trender.SetStencilReferenceValue( 1 )\n\t-- Refuse to write things to the screen unless that pixel's value is 1\n\trender.SetStencilCompareFunction( STENCIL_EQUAL )\n\t-- Write a 1 to the centre third of the screen. Because we cleared it earlier, everything is currently 0\n\tlocal w, h = ScrW() / 3, ScrH() / 3\n\tlocal x_start, y_start = w, h\n\tlocal x_end, y_end = x_start + w, y_start + h\n\trender.ClearStencilBufferRectangle( x_start, y_start, x_end, y_end, 1 )\n\n\t-- Draw our entities. They will only draw in the area cleared above\n\tfor _, ent in ipairs( ents.FindByClass( \"sent_stencil_test\" ) ) do\n\t\tent:DrawModel()\n\tend\n\n\t-- Let everything render normally again\n\trender.SetStencilEnable( false )\nend )","output":{"image":{"src":"stencil_basic_clipping_result.jpg","alt":"left|400px"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ClearStencilBufferRectangle","parent":"render","type":"libraryfunc","description":"Sets the stencil value in a specified rect.\n\nThis is **not** affected by render.SetStencilWriteMask","realm":"Client","args":{"arg":[{"text":"X origin of the rectangle.","name":"originX","type":"number"},{"text":"Y origin of the rectangle.","name":"originY","type":"number"},{"text":"The end X coordinate of the rectangle.","name":"endX","type":"number"},{"text":"The end Y coordinate of the rectangle.","name":"endY","type":"number"},{"text":"Value to set cleared stencil buffer to.","name":"stencilValue","type":"number"}]}},"example":{"description":"A basic stencil operation that limits rendering to the centre of the screen (from \n[Lex's Stencil Tutorial](https://github.com/Lexicality/stencil-tutorial)).","code":"hook.Add( \"PostDrawOpaqueRenderables\", \"Stencil Tutorial Example\", function()\n\t-- Reset everything to known good\n\trender.SetStencilWriteMask( 0xFF )\n\trender.SetStencilTestMask( 0xFF )\n\trender.SetStencilReferenceValue( 0 )\n\trender.SetStencilCompareFunction( STENCIL_ALWAYS )\n\trender.SetStencilPassOperation( STENCIL_KEEP )\n\trender.SetStencilFailOperation( STENCIL_KEEP )\n\trender.SetStencilZFailOperation( STENCIL_KEEP )\n\trender.ClearStencil()\n\n\t-- Enable stencils\n\trender.SetStencilEnable( true )\n\t-- Set the reference value to 1. This is what the compare function tests against\n\trender.SetStencilReferenceValue( 1 )\n\t-- Refuse to write things to the screen unless that pixel's value is 1\n\trender.SetStencilCompareFunction( STENCIL_EQUAL )\n\t-- Write a 1 to the centre third of the screen. Because we cleared it earlier, everything is currently 0\n\tlocal w, h = ScrW() / 3, ScrH() / 3\n\tlocal x_start, y_start = w, h\n\tlocal x_end, y_end = x_start + w, y_start + h\n\trender.ClearStencilBufferRectangle( x_start, y_start, x_end, y_end, 1 )\n\n\t-- Draw our entities. They will only draw in the area cleared above\n\tfor _, ent in ipairs( ents.FindByClass( \"sent_stencil_test\" ) ) do\n\t\tent:DrawModel()\n\tend\n\n\t-- Let everything render normally again\n\trender.SetStencilEnable( false )\nend )","output":{"image":{"src":"stencil_basic_clipping_result.jpg","alt":"left|400px"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"CopyTexture","parent":"render","type":"libraryfunc","description":"Copies the contents of one texture to another. Only works with rendertargets.","realm":"Client","args":{"arg":[{"name":"texture_from","type":"ITexture"},{"name":"texture_to","type":"ITexture"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ComputeDynamicLighting","parent":"render","type":"libraryfunc","description":"Calculates the lighting caused by dynamic lights for the specified surface.","realm":"Client","args":{"arg":[{"text":"The position to sample from.","name":"position","type":"Vector"},{"text":"The normal of the surface.","name":"normal","type":"Vector"}]},"rets":{"ret":{"text":"A vector representing the light at that point.","name":"","type":"Vector"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"CopyRenderTargetToTexture","parent":"render","type":"libraryfunc","description":"Copies the currently active Render Target to the specified texture.","realm":"Client","args":{"arg":{"text":"The texture to copy to","name":"Target","type":"ITexture"}}},"example":{"description":"This is how it's used in render.CopyTexture","code":"function render.CopyTexture( from, to )\n\n\tlocal OldRT = render.GetRenderTarget()\n\n\t\trender.SetRenderTarget( from )\n\t\trender.CopyRenderTargetToTexture( to )\n\n\trender.SetRenderTarget( OldRT )\n\nend"},"realms":["Client"],"type":"Function"},
{"function":{"name":"ComputeLighting","parent":"render","type":"libraryfunc","description":"Calculates the light color of a certain surface.","realm":"Client","args":{"arg":[{"text":"The position of the surface to get the light from.","name":"position","type":"Vector"},{"text":"The normal of the surface to get the light from.","name":"normal","type":"Vector"}]},"rets":{"ret":{"text":"A vector representing the light at that point.","name":"","type":"Vector"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"DepthRange","parent":"render","type":"libraryfunc","description":"Set's the depth range of the upcoming render.","realm":"Client","args":{"arg":[{"text":"The minimum depth of the upcoming render. `0.0` = render normally; `1.0` = render nothing.","name":"depthmin","type":"number"},{"text":"The maximum depth of the upcoming render. `0.0` = render everything (through walls); `1.0` = render normally.","name":"depthmax","type":"number"}]}},"example":[{"description":"Perform a downward screen wipe effect on all opaque objects once the client connects.","code":"local depthmin = 1.0\n\nhook.Add( \"PreDrawOpaqueRenderables\", \"simple_effect\", function( bDrawingDepth, bDrawingSkybox )\n\trender.DepthRange( depthmin, 1.0 )\n\t\n\tif ( depthmin > 0.0 ) then\n\t\tdepthmin = depthmin - 0.001\n\tend\nend )"},{"description":"Same effect as above but with a dark shadow skin present where the model is being drawn.","code":"local depthmin = 1.0\nlocal spawn_copies = {}\t-- The shadow copies\nlocal custom_white_color = Color( 255, 255, 255, 92 )\n\nhook.Add( \"PreDrawOpaqueRenderables\", \"advanced_effect\", function( bDrawingDepth, bDrawingSkybox )\n\trender.DepthRange( depthmin, 1.0 )\n\t\n\tif ( !spawn_copies ) then return false end\n\t\n\tif ( depthmin > 0.0 ) then\n\t\tdepthmin = depthmin - 0.001\n\telse\n\t\tlocal alpha = 0\n\t\tlocal valid_copies = 0\n\t\t\n\t\t-- Fade out the shadow copies and remove them.\n\t\tfor _, spawncopy in ipairs(spawn_copies) do\n\t\t\tif ( IsValid( spawncopy ) ) then\n\t\t\t\talpha = spawncopy:GetColor().a\n\n\t\t\t\tif ( alpha > 0 ) then\n\t\t\t\t\tspawncopy:SetColor( Color( 255, 255, 255, alpha - 1 ) )\n\t\t\t\telse\n\t\t\t\t\tspawncopy:Remove()\n\t\t\t\tend\n\n\t\t\t\tvalid_copies = valid_copies + 1\n\t\t\tend\n\t\tend\n\t\t\n\t\t-- Nullify table since we aren't using it anymore.\n\t\tif ( valid_copies == 0 ) then\n\t\t\tspawn_copies = nil\n\t\tend\t\n\tend\nend )\n\nhook.Add( \"OnEntityCreated\", \"advanced_effect\", function( ent )\n\tif ( !spawn_copies ) then return end\n\t\n\t-- Prevents infinite loop and other errors.\n\tif ( ent:GetClass() ~= \"class C_BaseFlex\" and\n\t\tent:GetRenderGroup() == RENDERGROUP_OPAQUE and\n\t\tent:GetClass() ~= \"gmod_hands\" ) then\n\t\n\t\tlocal mdl = ent:GetModel()\n\t\t\n\t\t-- Check that the entity is a model and not a brush.\n\t\tif ( string.EndsWith( mdl, \".mdl\" ) ) then\n\t\t\tlocal spawncopy = ClientsideModel( mdl )\n\t\t\t\n\t\t\t-- A material with $ignorez set to 1 works best here.\n\t\t\tspawncopy:SetMaterial( \"models/overlay_rendertarget\" )\n\t\t\tspawncopy:AddEffects( EF_BONEMERGE )\n\t\t\tspawncopy:SetParent( ent )\n\t\t\tspawncopy:SetRenderMode( RENDERMODE_TRANSALPHA )\n\t\t\tspawncopy:SetColor( custom_white_color )\n\n\t\t\ttable.insert( spawn_copies, spawncopy )\n\t\tend\n\tend\nend )","output":{"upload":{"src":"DepthRange_example.webm","name":"DepthRange_example.webm"}}}],"realms":["Client"],"type":"Function"},
{"function":{"name":"CullMode","parent":"render","type":"libraryfunc","description":"Changes the cull mode.","realm":"Client","args":{"arg":{"text":"Cullmode, see Enums/MATERIAL_CULLMODE","name":"cullMode","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"DrawBeam","parent":"render","type":"libraryfunc","description":{"text":"Draws textured beam.","rendercontext":{"hook":"false","type":"3D"}},"realm":"Client","args":{"arg":[{"text":"Beam start position.","name":"startPos","type":"Vector"},{"text":"Beam end position.","name":"endPos","type":"Vector"},{"text":"The width of the beam.","name":"width","type":"number"},{"text":"The start coordinate of the texture used.","name":"textureStart","type":"number"},{"text":"The end coordinate of the texture used.","name":"textureEnd","type":"number"},{"text":"The color to be used. Uses the Color.","name":"color","type":"table","default":"Color( 255, 255, 255 )"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"DrawBox","parent":"render","type":"libraryfunc","description":{"text":"Draws a box in 3D space.","rendercontext":{"hook":"false","type":"3D"}},"realm":"Client","args":{"arg":[{"text":"Origin of the box.","name":"position","type":"Vector"},{"text":"Orientation of the box.","name":"angles","type":"Angle"},{"text":"Start position of the box, relative to origin.","name":"mins","type":"Vector"},{"text":"End position of the box, relative to origin.","name":"maxs","type":"Vector"},{"text":"The color of the box. Uses the Color.","name":"color","type":"table","default":"Color( 255, 255, 255 )"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"DrawLine","parent":"render","type":"libraryfunc","description":{"text":"Draws a line in 3D space.","rendercontext":{"hook":"false","type":"3D"}},"realm":"Client","args":{"arg":[{"text":"Line start position in world coordinates.","name":"startPos","type":"Vector"},{"text":"Line end position in world coordinates.","name":"endPos","type":"Vector"},{"text":"The color to be used. Uses the Color.","name":"color","type":"table","default":"Color( 255, 255, 255 )"},{"text":"Whether or not to consider the Z buffer. If false, the line will be drawn over everything currently drawn, if true, the line will be drawn with depth considered, as if it were a regular object in 3D space.","name":"writeZ","type":"boolean","default":"false","bug":{"text":"Enabling this option will cause the line to ignore the color's alpha.","issue":"1086"}}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"DrawQuadEasy","parent":"render","type":"libraryfunc","description":{"text":"Draws a quad.","rendercontext":{"hook":"false","type":"3D"}},"realm":"Client","args":{"arg":[{"text":"Origin of the sprite.","name":"position","type":"Vector"},{"text":"The face direction of the quad.","name":"normal","type":"Vector"},{"text":"The width of the quad.","name":"width","type":"number"},{"text":"The height of the quad.","name":"height","type":"number"},{"text":"The color of the quad. Uses the Color.","name":"color","type":"table"},{"text":"The rotation of the quad counter-clockwise in degrees around the normal axis. In other words, the quad will always face the same way but this will rotate its corners.","name":"rotation","type":"number","default":"0"}]}},"example":{"description":"Example usage of this function.","code":"local mat = Material( \"sprites/sent_ball\" )\nlocal mat2 = Material( \"models/wireframe\" )\nhook.Add(\"PostDrawTranslucentRenderables\", \"DrawQuadEasyExample\", function()\n\n\t-- Draw a rotating circle under local player\n\trender.SetMaterial( mat )\n\tlocal pos = LocalPlayer():GetPos()\n\trender.DrawQuadEasy( pos + Vector( 0, 0, 1 ), Vector( 0, 0, 1 ), 64, 64, Color( 255, 255, 255, 200 ), ( CurTime() * 50 ) % 360 )\n\n\t-- Draw 3 rotating wireframe quads where local player is looking at\n\trender.SetMaterial( mat2 )\n\tlocal tr = LocalPlayer():GetEyeTrace()\n\trender.DrawQuadEasy( tr.HitPos + tr.HitNormal, tr.HitNormal, 64, 64, Color( 255, 255, 255 ), ( CurTime() * 50 ) % 360 )\n\n\tlocal dir = tr.HitNormal:Angle()\n\tdir:RotateAroundAxis( tr.HitNormal, ( CurTime() * 50 ) % 360 )\n\tdir = dir:Up()\n\n\t-- We need to call this function twice, once for each side\n\trender.DrawQuadEasy( tr.HitPos + tr.HitNormal * 32, dir, 64, 64, Color( 255, 255, 255 ), 0 )\n\trender.DrawQuadEasy( tr.HitPos + tr.HitNormal * 32, -dir, 64, 64, Color( 255, 255, 255 ), 0 )\nend )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"DrawScreenQuad","parent":"render","type":"libraryfunc","description":{"text":"Draws the current material set by render.SetMaterial to the whole screen. The color cannot be customized.\n\nSee also render.DrawScreenQuadEx.","rendercontext":{"hook":"false","type":"2D"}},"realm":"Client","args":{"arg":{"text":"If set to true, when rendering a poster the quad will be properly drawn in parts in the poster. This is used internally by some Post Processing effects. Certain special textures (frame buffer like textures) do not need this adjustment.","name":"applyPoster","default":"false","type":"boolean","added":"2020.06.24"}}},"example":{"description":"Example usage, draws a wireframe texture onto the entire screen.","code":"local ourMat = Material( \"models/wireframe\" )\n\nhook.Add( \"HUDPaint\", \"example_hook\", function()\n\trender.SetMaterial( ourMat )\n\trender.DrawScreenQuad()\nend )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"DrawQuad","parent":"render","type":"libraryfunc","description":{"text":"Draws 2 connected triangles. Expects material to be set by render.SetMaterial.","rendercontext":{"hook":"false","type":"3D"}},"realm":"Client","args":{"arg":[{"text":"First vertex.","name":"vert1","type":"Vector"},{"text":"The second vertex.","name":"vert2","type":"Vector"},{"text":"The third vertex.","name":"vert3","type":"Vector"},{"text":"The fourth vertex.","name":"vert4","type":"Vector"},{"text":"The color of the quad. See Global.Color","name":"color","type":"table","default":"Color( 255, 255, 255 )"}]}},"example":{"description":"Draw a red half transparent quad facing upwards 150 units below the 0,0,0 of gm_construct.","code":"local ourMat = Material( \"vgui/white\" ) -- Calling Material() every frame is quite expensive\nhook.Add( \"PostDrawTranslucentRenderables\", \"DrawQuad_Example\", function()\n\n\trender.SetMaterial( ourMat ) -- If you use Material, cache it!\n\trender.DrawQuad( Vector( 0, 0, -150 ), Vector( 0, 100, -150 ),Vector( 100, 100, -150 ), Vector( 100, 0, -150 ), Color( 255, 0, 0, 128 ) )\n\nend)"},"realms":["Client"],"type":"Function"},
{"function":{"name":"DrawScreenQuadEx","parent":"render","type":"libraryfunc","description":{"text":"Draws the the current material set by render.SetMaterial to the area specified. Color cannot be customized.\n\nSee also render.DrawScreenQuad.","rendercontext":{"hook":"false","type":"2D"}},"realm":"Client","args":{"arg":[{"text":"X start position of the rect.","name":"startX","type":"number"},{"text":"Y start position of the rect.","name":"startY","type":"number"},{"text":"Width of the rect.","name":"width","type":"number"},{"text":"Height of the rect.","name":"height","type":"number"}]}},"example":{"description":"Example usage, draws a 256x256 rectangle with the wireframe material.","code":"local ourMat = Material( \"models/wireframe\" )\nhook.Add( \"HUDPaint\", \"example_hook\", function()\n\trender.SetMaterial( ourMat )\n\trender.DrawScreenQuadEx( 100, 100, 256, 256 )\nend )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"DrawTextureToScreen","parent":"render","type":"libraryfunc","description":{"text":"Draws a texture over the whole screen.","rendercontext":{"hook":"false","type":"2D"}},"realm":"Client","file":{"text":"lua/includes/extensions/client/render.lua","line":"165"},"args":{"arg":{"text":"The texture to draw","name":"tex","type":"ITexture"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"DrawSphere","parent":"render","type":"libraryfunc","description":{"text":"Draws a sphere in 3D space. The material previously set with render.SetMaterial will be applied the sphere's surface.\n\nSee also render.DrawWireframeSphere for a wireframe equivalent.","rendercontext":{"hook":"false","type":"3D"}},"realm":"Client","args":{"arg":[{"text":"Position of the sphere.","name":"position","type":"Vector"},{"text":"Radius of the sphere. Negative radius will make the sphere render inwards rather than outwards.","name":"radius","type":"number"},{"text":"The number of longitude steps. This controls the quality of the sphere. Higher quality will lower performance significantly. 50 is a good number to start with.","name":"longitudeSteps","type":"number"},{"text":"The number of latitude steps. This controls the quality of the sphere. Higher quality will lower performance significantly. 50 is a good number to start with.","name":"latitudeSteps","type":"number"},{"text":"The color of the sphere. Uses the Color.","name":"color","type":"table","default":"Color( 255, 255, 255 )"}]}},"example":{"description":"This will draw a blue, half-translucent sphere (force field) at the position local player is looking.","code":"hook.Add( \"PostDrawTranslucentRenderables\", \"test\", function()\n\n\t--[[\n\t\twhen you draw a sphere, you have to specify what material the sphere is\n\t\tgoing to have before rendering it, render.SetColorMaterial()\n\t\tjust sets it to a white material so we can recolor it easily.\n\t--]]\n\trender.SetColorMaterial()\n\n\t-- The position to render the sphere at, in this case, the looking position of the local player\n\tlocal pos = LocalPlayer():GetEyeTrace().HitPos\n\n\t-- Draw the sphere!\n\trender.DrawSphere( pos, 50, 30, 30, Color( 0, 175, 175, 100 ) )\n\nend )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"DrawTextureToScreenRect","parent":"render","type":"libraryfunc","description":{"text":"Draws a textured rectangle.","rendercontext":{"hook":"false","type":"2D"}},"realm":"Client","file":{"text":"lua/includes/extensions/client/render.lua","line":"175"},"args":{"arg":[{"text":"The texture to draw","name":"tex","type":"ITexture"},{"text":"The x coordinate of the rectangle to draw.","name":"x","type":"number"},{"text":"The y coordinate of the rectangle to draw.","name":"y","type":"number"},{"text":"The width of the rectangle to draw.","name":"width","type":"number"},{"text":"The height of the rectangle to draw.","name":"height","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"DrawSprite","parent":"render","type":"libraryfunc","description":{"text":"Draws a sprite in 3D space.","rendercontext":{"hook":"false","type":"3D"}},"realm":"Client","args":{"arg":[{"text":"Position of the sprite.","name":"position","type":"Vector"},{"text":"Width of the sprite.","name":"width","type":"number"},{"text":"Height of the sprite.","name":"height","type":"number"},{"text":"Color of the sprite. Uses the Color.","name":"color","type":"table","default":"Color( 255, 255, 255 )"}]}},"example":[{"description":"Draw a sprite at the center of the map","code":"local pos,material = Vector(0,0,0), Material( \"sprites/splodesprite\" ) --Define this sort of stuff outside of loops to make more efficient code.\nhook.Add( \"HUDPaint\", \"paintsprites\", function()\n\tcam.Start3D() -- Start the 3D function so we can draw onto the screen.\n\t\trender.SetMaterial( material ) -- Tell render what material we want, in this case the flash from the gravgun\n\t\trender.DrawSprite( pos, 16, 16, color_white) -- Draw the sprite in the middle of the map, at 16x16 in it's original colour with full alpha.\n\tcam.End3D()\nend )","output":"An orange star appears at 0,0,0 on the map."},{"description":"Function that displays a sprite at the given position, without the need of a specific rendering context\n\ndraw.VectorSprite(Vector position, number size, Color color, boolean constantSize)","code":"local toDraw3d = {}\nlocal sprites3d = 0\n\nlocal toDraw2d = {}\nlocal sprites2d = 0\n\nlocal material = Material(\"sprites/light_ignorez\")\n\nfunction draw.VectorSprite(position, size, color, constantSize)\n\tif (not isvector(position)) then\n\t\terror(\"bad argument #1 to draw.DrawVectorSprite (Vector expected, got \" .. type(position) .. \")\")\n\tend\n\n\tif (not isnumber(size)) then\n\t\terror(\"bad argument #2 to draw.DrawVectorSprite (number expected, got \" .. type(size) .. \")\")\n\tend\n\n\tif (not IsColor(color)) then\n\t\terror(\"bad argument #3 to draw.DrawVectorSprite (Color expected, got \" .. type(color) .. \")\")\n\tend\n\n\tlocal tbl = {position, size, color}\n\n\tif (constantSize) then\n\t\tsprites2d = sprites2d + 1\n\t\ttoDraw2d[sprites2d] = tbl\n\telse\n\t\tsprites3d = sprites3d + 1\n\t\ttoDraw3d[sprites3d] = tbl\n\tend\nend\n\nlocal render_SetMaterial = render.SetMaterial\nlocal render_DrawSprite = render.DrawSprite\nhook.Add(\"PreDrawEffects\", \"draw.VectorSprite\", function()\n\tif (sprites3d ~= 0) then\n\t\trender_SetMaterial(material)\n\n\t\tfor i = 1, sprites3d do\n\t\t\tlocal info = toDraw3d[i]\n\t\t\ttoDraw3d[i] = nil -- Clear the table every frame\n\n\t\t\trender_DrawSprite(info[1], info[2], info[2], info[3])\n\t\tend\n\n\t\tsprites3d = 0\n\tend\nend)\n\nlocal surface_SetMaterial = surface.SetMaterial\nlocal surface_SetDrawColor = surface.SetDrawColor\nlocal surface_DrawTexturedRect = surface.DrawTexturedRect\nhook.Add(\"DrawOverlay\", \"draw.VectorSprite\", function()\n\tif (sprites2d ~= 0) then\n\t\tsurface_SetMaterial(material)\n\n\t\tfor i = 1, sprites2d do\n\t\t\tlocal info = toDraw2d[i]\n\t\t\ttoDraw2d[i] = nil\n\n\t\t\tlocal pos2d = info[1]:ToScreen()\n\n\t\t\tif pos2d.visible then\n\t\t\t\tsurface_SetDrawColor(info[3])\n\t\t\t\tsurface_DrawTexturedRect(pos2d.x, pos2d.y, info[2], info[2])\n\t\t\tend\n\t\tend\n\n\t\tsprites2d = 0\n\tend\nend)"}],"realms":["Client"],"type":"Function"},
{"function":{"name":"DrawWireframeBox","parent":"render","type":"libraryfunc","description":{"text":"Draws a wireframe box in 3D space.","rendercontext":{"hook":"false","type":"3D"}},"realm":"Client","args":{"arg":[{"text":"Position of the box.","name":"position","type":"Vector"},{"text":"Angles of the box.","name":"angle","type":"Angle"},{"text":"The lowest corner of the box.","name":"mins","type":"Vector"},{"text":"The highest corner of the box.","name":"maxs","type":"Vector"},{"text":"The color of the box. Uses the Color.","name":"color","type":"table","default":"Color( 255, 255, 255 )"},{"text":"Sets whenever to write to the zBuffer.","name":"writeZ","type":"boolean","default":"false"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"EndBeam","parent":"render","type":"libraryfunc","description":"Ends the beam mesh of a beam started with render.StartBeam.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"DrawWireframeSphere","parent":"render","type":"libraryfunc","description":{"text":"Draws a wireframe sphere in 3d space.","rendercontext":{"hook":"false","type":"3D"}},"realm":"Client","args":{"arg":[{"text":"Position of the sphere.","name":"position","type":"Vector"},{"text":"The size of the sphere.","name":"radius","type":"number"},{"text":"The amount of longitude steps. \nThe larger this number is, the smoother the sphere is.","name":"longitudeSteps","type":"number"},{"text":"The amount of latitude steps. \nThe larger this number is, the smoother the sphere is.","name":"latitudeSteps","type":"number"},{"text":"The color of the wireframe. Uses the Color.","name":"color","type":"table","default":"Color( 255, 255, 255 )"},{"text":"Whether or not to consider the Z buffer. If false, the wireframe will be drawn over everything currently drawn. If true, it will be drawn with depth considered, as if it were a regular object in 3D space.","name":"writeZ","type":"boolean","default":"false"}]}},"example":{"description":"Draws a wireframe sphere over a normal sphere for an artistic effect.","code":"hook.Add( \"PostDrawTranslucentRenderables\", \"test\", function()\n\n\t-- Set the draw material to solid white\n\trender.SetColorMaterial()\n\n\t-- The position to render the sphere at, in this case, the looking position of the local player\n\tlocal pos = LocalPlayer():GetEyeTrace().HitPos\n\n\tlocal radius = 50\n\tlocal wideSteps = 10\n\tlocal tallSteps = 10\n\n\t-- Draw the sphere!\n\trender.DrawSphere( pos, radius, wideSteps, tallSteps, Color( 0, 175, 175, 100 ) )\n\n\t-- Draw the wireframe sphere!\n\trender.DrawWireframeSphere( pos, radius, wideSteps, tallSteps, Color( 255, 255, 255, 255 ) )\n\nend )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"EnableClipping","parent":"render","type":"libraryfunc","description":{"text":"Sets the status of the clip renderer, returning previous state.","warning":"To prevent unintended rendering behavior of other mods/the game, you must reset the clipping state to its previous value.","bug":{"text":"Reloading the map does not reset the previous value of this function.","issue":"3105"}},"realm":"Client","args":{"arg":{"text":"New clipping state.","name":"state","type":"boolean"}},"rets":{"ret":{"text":"Previous clipping state.","name":"","type":"boolean"}}},"example":[{"description":"Properly using the function.","code":"-- Inside some rendering hook\n\nlocal oldclip = render.EnableClipping( true )\n\n-- Your code here\n\nrender.EnableClipping( oldclip )"},{"description":"Clips the lower half of your custom entity","code":"function ENT:Draw()\n    local normal = self:GetUp() -- Everything \"behind\" this normal will be clipped\n    local position = normal:Dot( self:GetPos() ) -- self:GetPos() is the origin of the clipping plane\n\n    local oldEC = render.EnableClipping( true )\n    render.PushCustomClipPlane( normal, position )\n\n    self:DrawModel()\n\n    render.PopCustomClipPlane()\n    render.EnableClipping( oldEC )\nend"}],"realms":["Client"],"type":"Function"},
{"function":{"name":"FogColor","parent":"render","type":"libraryfunc","description":"Sets the color of the fog.","realm":"Client","args":{"arg":[{"text":"Red channel of the fog color, 0 - 255.","name":"red","type":"number"},{"text":"Green channel of the fog color, 0 - 255.","name":"green","type":"number"},{"text":"Blue channel of the fog color, 0 - 255.","name":"blue","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"FogEnd","parent":"render","type":"libraryfunc","description":"Sets the at which the fog reaches its max density.","realm":"Client","args":{"arg":{"text":"The distance at which the fog reaches its max density.","name":"distance","type":"number","note":"If used in GM:SetupSkyboxFog, this value **must** be scaled by the first argument of the hook"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"FogMaxDensity","parent":"render","type":"libraryfunc","description":"Sets the maximum density of the fog.","realm":"Client","args":{"arg":{"text":"The maximum density of the fog, 0-1.","name":"maxDensity","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"FogMode","parent":"render","type":"libraryfunc","description":"Sets the mode of fog.","realm":"Client","args":{"arg":{"text":"Fog mode, see Enums/MATERIAL_FOG.","name":"fogMode","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"FogStart","parent":"render","type":"libraryfunc","description":"Sets the distance at which the fog starts showing up.","realm":"Client","args":{"arg":{"text":"The distance at which the fog starts showing up.","name":"fogStart","type":"number","note":"If used in GM:SetupSkyboxFog, this value **must** be scaled by the first argument of the hook"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetAmbientLightColor","parent":"render","type":"libraryfunc","description":"Returns the ambient color of the map.","realm":"Client","rets":{"ret":{"text":"color","name":"","type":"Vector"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetBlend","parent":"render","type":"libraryfunc","description":"Returns the current alpha blending.","realm":"Client","rets":{"ret":{"text":"blend","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetBloomTex0","parent":"render","type":"libraryfunc","realm":"Client","rets":{"ret":{"text":"The bloom texture","name":"","type":"ITexture"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetBloomTex1","parent":"render","type":"libraryfunc","realm":"Client","rets":{"ret":{"name":"","type":"ITexture"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetDXLevel","parent":"render","type":"libraryfunc","description":"Returns the maximum available directX version.","realm":"Client","rets":{"ret":{"text":"dxLevel","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetColorModulation","parent":"render","type":"libraryfunc","description":"Returns the current color modulation values as normals.","realm":"Client","rets":{"ret":[{"text":"r","name":"","type":"number"},{"text":"g","name":"","type":"number"},{"text":"b","name":"","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetFogColor","parent":"render","type":"libraryfunc","description":"Returns the current fog color.","realm":"Client","rets":{"ret":[{"text":"Red part of the color.","name":"","type":"number"},{"text":"Green part of the color","name":"","type":"number"},{"text":"Blue part of the color","name":"","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetFogDistances","parent":"render","type":"libraryfunc","description":"Returns the fog start and end distance.","realm":"Client","rets":{"ret":[{"text":"Fog start distance set by render.FogStart","name":"","type":"number"},{"text":"For end distance set by render.FogEnd","name":"","type":"number"},{"text":"Fog Z distance set by render.SetFogZ","name":"","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetFogMode","parent":"render","type":"libraryfunc","description":"Returns the fog mode.","realm":"Client","rets":{"ret":{"text":"Fog mode, see Enums/MATERIAL_FOG","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetFullScreenDepthTexture","parent":"render","type":"libraryfunc","description":"Returns the _rt_FullFrameDepth texture. Alias of _rt_PowerOfTwoFB","realm":"Client","rets":{"ret":{"name":"","type":"ITexture"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetHDREnabled","parent":"render","type":"libraryfunc","description":"Returns whether HDR is currently enabled or not. This takes into account hardware support, current map and current client settings.","realm":"Client","added":"2020.10.14","rets":{"ret":{"text":"`true` if the player currently has HDR enabled.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetMoBlurTex0","parent":"render","type":"libraryfunc","realm":"Client","rets":{"ret":{"name":"","type":"ITexture"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetMoBlurTex1","parent":"render","type":"libraryfunc","realm":"Client","rets":{"ret":{"name":"","type":"ITexture"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetLightColor","parent":"render","type":"libraryfunc","description":"Gets the light exposure on the specified position.","realm":"Client","args":{"arg":{"text":"The position of the surface to get the light from.","name":"position","type":"Vector"}},"rets":{"ret":{"text":"lightColor","name":"","type":"Vector"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetMorphTex0","parent":"render","type":"libraryfunc","realm":"Client","rets":{"ret":{"name":"","type":"ITexture"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetMorphTex1","parent":"render","type":"libraryfunc","realm":"Client","rets":{"ret":{"name":"","type":"ITexture"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetRefractTexture","parent":"render","type":"libraryfunc","description":"Alias of render.GetPowerOfTwoTexture.","realm":"Client","rets":{"ret":{"name":"","type":"ITexture"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetPowerOfTwoTexture","parent":"render","type":"libraryfunc","description":"Returns the render target's power of two texture.","realm":"Client","rets":{"ret":{"text":"The power of two texture, which is **_rt_poweroftwofb** by default.","name":"","type":"ITexture"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetRenderTarget","parent":"render","type":"libraryfunc","description":"Returns the currently active render target.\n\nInstead of saving the current render target using this function and restoring to it later, it is generally better practice to use render.PushRenderTarget and render.PopRenderTarget.","realm":"Client","rets":{"ret":{"text":"The currently active Render Target","name":"","type":"ITexture"}}},"example":{"description":"Render something to a different render target, then restore the old render target","code":"local w, h = ScrW(), ScrH()\nlocal customRt = GetRenderTarget( \"some_unique_render_target_nameeeee\", w, h, true )\n\nrender.PushRenderTarget( customRt )\n    render.Clear( 0, 0, 255, 255, true ) -- fill the background with blue!\n\n    -- draw all props on the blue background!\n    for key, prop in ipairs( ents.FindByClass( \"prop_physics\" ) ) do\n        prop:DrawModel()\n    end\n\n    -- save the picture to the garrysmod/data folder.  ~format=\"jpg\" will not work.\n    local data = render.Capture({ format = \"jpeg\", quality = 70, x = 0, y = 0, h = h, w = w })\t\n    local pictureFile = file.Open( \"RenderTargetsAreAwesome.jpg\", \"wb\", \"DATA\" )\t\n    pictureFile:Write( data )\n    pictureFile:Close()\nrender.PopRenderTarget()"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetResolvedFullFrameDepth","parent":"render","type":"libraryfunc","description":"Returns the `_rt_ResolvedFullFrameDepth` texture for SSAO depth. It will only be updated if GM:NeedsDepthPass returns true.","realm":"Client","rets":{"ret":{"text":"The depth texture.","name":"","type":"ITexture"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetScreenEffectTexture","parent":"render","type":"libraryfunc","description":"Obtain an ITexture of the screen. You must call render.UpdateScreenEffectTexture in order to update this texture with the currently rendered scene.\n\nThis texture is mainly used within GM:RenderScreenspaceEffects","realm":"Client","args":{"arg":{"text":"Max index is 3, but engine only creates the first two for you.","name":"textureIndex","type":"number","default":"0"}},"rets":{"ret":{"name":"","type":"ITexture"}}},"example":{"description":"Print the texture name of the returned textures.","code":"print(render.GetScreenEffectTexture(0):GetName())\nprint(render.GetScreenEffectTexture(1):GetName())","output":"```\n_rt_fullframefb\n_rt_fullframefb1\n```"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetSmallTex0","parent":"render","type":"libraryfunc","realm":"Client","rets":{"ret":{"name":"","type":"ITexture"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetSuperFPTex","parent":"render","type":"libraryfunc","description":{"text":"Returns a floating point texture the same resolution as the screen.","note":"The gmodscreenspace doesn't behave as expected when drawing a floating-point texture to an integer texture (e.g. the default render target). Use an UnlitGeneric material instead"},"realm":"Client","rets":{"ret":{"text":"Render target named \"__rt_supertexture1\"","name":"","type":"ITexture"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetSmallTex1","parent":"render","type":"libraryfunc","realm":"Client","rets":{"ret":{"name":"","type":"ITexture"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetToneMappingScaleLinear","parent":"render","type":"libraryfunc","description":"Returns a vector representing linear tone mapping scale.","realm":"Client","rets":{"ret":{"text":"The vector representing linear tone mapping scale.","name":"","type":"Vector"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetSuperFPTex2","parent":"render","type":"libraryfunc","description":"See render.GetSuperFPTex","realm":"Client","rets":{"ret":{"text":"Render target named \"__rt_supertexture2\"","name":"","type":"ITexture"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetSurfaceColor","parent":"render","type":"libraryfunc","description":"Performs a render trace and returns the color of the surface hit, this uses a low res version of the texture.","realm":"Client","args":{"arg":[{"text":"The start position to trace from.","name":"startPos","type":"Vector"},{"text":"The end position of the trace.","name":"endPos","type":"Vector"}]},"rets":{"ret":{"text":"color","name":"","type":"Vector"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"MaterialOverrideByIndex","parent":"render","type":"libraryfunc","description":"Similar to render.MaterialOverride, but overrides the materials per index.\n\nrender.MaterialOverride overrides effects of this function.","realm":"Client","args":{"arg":[{"text":"Starts with 0, the index of the material to override","name":"index","type":"number"},{"text":"The material to override with","name":"material","type":"IMaterial"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"MaterialOverride","parent":"render","type":"libraryfunc","description":"Sets the render material override for all next calls of Entity:DrawModel. Also overrides render.MaterialOverrideByIndex.","realm":"Client","args":{"arg":{"text":"The material to use as override, use nil to disable.","name":"material","type":"IMaterial"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"MaxTextureWidth","parent":"render","type":"libraryfunc","description":"Returns the maximum texture width the renderer can handle.","realm":"Client","rets":{"ret":{"text":"maxTextureWidth","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"MaxTextureHeight","parent":"render","type":"libraryfunc","description":"Returns the maximum texture height the renderer can handle.","realm":"Client","rets":{"ret":{"text":"maxTextureHeight","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Model","parent":"render","type":"libraryfunc","description":{"text":"Creates a new Global.ClientsideModel, renders it at the specified pos/ang, and removes it. Can also be given an existing CSEnt to reuse instead.","note":"This function is only meant to be used in a single render pass kind of scenario, if you need to render a model continuously, use a cached Global.ClientsideModel and provide it as a second argument.","bug":{"text":"Using this with a map model (game.GetWorld():()) crashes the game.","issue":"3307","page":",GetModelEntity:GetModel"}},"realm":"Client","file":{"text":"lua/includes/extensions/client/render.lua","line":"192-L216"},"args":{"arg":[{"text":"Requires:\n* string model - The model to draw\n* Vector pos - The position to draw the model at\n* Angle angle - The angles to draw the model at","name":"settings","type":"table"},{"text":"If provided, this entity will be reused instead of creating a new one with Global.ClientsideModel. Note that the ent's model, position and angles will be changed, and Entity:SetNoDraw will be set to true.","name":"ent","type":"CSEnt","default":"nil"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OverrideAlphaWriteEnable","parent":"render","type":"libraryfunc","description":{"text":"Overrides the write behaviour of all next rendering operations towards the alpha channel of the current render target.\n\nSee also render.OverrideBlend.","note":"Doing surface draw calls with alpha set to 0 is a no-op and will never have any effect."},"realm":"Client","args":{"arg":[{"text":"Enable or disable the override.","name":"enable","type":"boolean"},{"text":"If the previous argument is true, sets whether the next rendering operations should write to the alpha channel or not. Has no effect if the previous argument is false.","name":"shouldWrite","type":"boolean"}]}},"example":{"description":"Shows how you can use alpha channel with render targets.","code":"render.PushRenderTarget( texture )\nrender.OverrideAlphaWriteEnable( true, true )\n\nrender.ClearDepth()\nrender.Clear( 0, 0, 0, 0 )\n\nrender.OverrideAlphaWriteEnable( false )\nrender.PopRenderTarget()"},"realms":["Client"],"type":"Function"},
{"function":{"name":"ModelMaterialOverride","parent":"render","type":"libraryfunc","description":"Sets a material to override a model's default material. Similar to Entity:SetMaterial except it uses an IMaterial argument and it can be used to change materials on models which are part of the world geometry.","realm":"Client","args":{"arg":{"text":"The material override.","name":"material","type":"IMaterial"}}},"example":{"description":"Sets the material of all opaque models to the red flashing \"ERROR\" texture.","code":"local error_mat = Material(\"models/error/new light1\")\n\nfunction GM:PreDrawOpaqueRenderables(bDrawingDepth, bDrawingSkybox)\n\n\trender.ModelMaterialOverride(error_mat)\n\t\nend"},"realms":["Client"],"type":"Function"},
{"function":{"name":"OverrideBlend","parent":"render","type":"libraryfunc","description":{"text":"Overrides the internal graphical functions used to determine the final color and alpha of a rendered texture.\n\nSee also render.OverrideAlphaWriteEnable.","note":"Doing surface draw calls with alpha set to 0 is a no-op and won't have an effect."},"realm":"Client","args":{"arg":[{"text":"true to enable, false to disable. No other arguments are required when disabling.","name":"enabled","type":"boolean"},{"text":"The source color blend function Enums/BLEND. Determines how a rendered texture's final color should be calculated.","name":"srcBlend","type":"number"},{"text":"The destination color blend function Enums/BLEND.","name":"destBlend","type":"number"},{"text":"The blend mode used for drawing the color layer Enums/BLENDFUNC.","name":"blendFunc","type":"number"},{"text":"The source alpha blend function Enums/BLEND. Determines how a rendered texture's final alpha should be calculated.","name":"srcBlendAlpha","type":"number","default":"none"},{"text":"The destination alpha blend function Enums/BLEND.","name":"destBlendAlpha","type":"number","default":"none"},{"text":"The blend mode used for drawing the alpha layer Enums/BLENDFUNC.","name":"blendFuncAlpha","type":"number","default":"none"}]}},"example":{"description":"In this example we draw a lightning bolt over our player's head.\n\nWe shouldn't really draw the lightning in the PreDrawTranslucentRenderables hook as this causes issues rendering transparent objects behind the lightning, but it's a quick example of how the function works. Normally it should be drawn in a custom lua effect's EFFECT:Render.","code":"-- Our sprite texture to render. Rendering this texture without\n-- render.OverrideBlendFunc will result in black borders around the lightning beam.\nlocal lightningMaterial = Material(\"sprites/lgtning\")\n\nhook.Add( \"PreDrawTranslucentRenderables\", \"LightningExample\", function(isDrawingDepth, isDrawingSkybox)\n\n\tif isDrawingDepth or isDrawSkybox then return end\n\n\tlocal ply = Entity(1)\n\n\tif !IsValid(ply) then return end\n\n\t-- Calculate a random UV to use for the lightning to give it some movement\n\tlocal uv = math.Rand(0, 1)\n\n\t-- Enable blend override to interpret the color and alpha from the texture.\n\trender.OverrideBlend( true, BLEND_SRC_COLOR, BLEND_SRC_ALPHA, BLENDFUNC_ADD, BLEND_ONE, BLEND_ZERO, BLENDFUNC_ADD )\n\n\trender.SetMaterial(lightningMaterial)\n\n\t-- Render a lightning beam along points randomly offset from a line above the player.\n\trender.StartBeam(5)\n\trender.AddBeam(ply:GetPos() + Vector(0,0,035), 20, uv, Color(255,255,255,255))\n\trender.AddBeam(ply:GetPos() + Vector(0,0,135) + Vector(math.Rand(-20,20),math.Rand(-20,20),0), 20, uv*2, Color(255,255,255,255))\n\trender.AddBeam(ply:GetPos() + Vector(0,0,235) + Vector(math.Rand(-20,20),math.Rand(-20,20),0), 20, uv*3, Color(255,255,255,255))\n\trender.AddBeam(ply:GetPos() + Vector(0,0,335) + Vector(math.Rand(-20,20),math.Rand(-20,20),0), 20, uv*4, Color(255,255,255,255))\n\trender.AddBeam(ply:GetPos() + Vector(0,0,435) + Vector(math.Rand(-20,20),math.Rand(-20,20),0), 20, uv*5, Color(255,255,255,255))\n\trender.EndBeam()\n\n\t -- Disable blend override\n\trender.OverrideBlend( false )\n\nend )","output":{"image":{"src":"overrideblendfunc_example.png","alt":"_overrideblendfunc_example.png"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OverrideColorWriteEnable","parent":"render","type":"libraryfunc","description":"Overrides the write behaviour of all next rendering operations towards the color channel of the current render target.","realm":"Client","args":{"arg":[{"text":"Enable or disable the override.","name":"enable","type":"boolean"},{"text":"If the previous argument is true, sets whether the next rendering operations should write to the color channel or not. Has no effect if the previous argument is false.","name":"shouldWrite","type":"boolean"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OverrideBlendFunc","parent":"render","type":"libraryfunc","description":{"text":"Overrides the internal graphical functions used to determine the final color and alpha of a rendered texture.\n\nSee also render.OverrideAlphaWriteEnable.","deprecated":"Use render.OverrideBlend instead.","note":"Doing surface draw calls with alpha set to 0 is a no-op and will never have any effect."},"realm":"Client","args":{"arg":[{"text":"true to enable, false to disable. No other arguments are required when disabling.","name":"enabled","type":"boolean"},{"text":"The source color blend function Enums/BLEND. Determines how a rendered texture's final color should be calculated.","name":"srcBlend","type":"number"},{"name":"destBlend","type":"number"},{"text":"The source alpha blend function Enums/BLEND. Determines how a rendered texture's final alpha should be calculated.","name":"srcBlendAlpha","type":"number","default":"nil"},{"name":"destBlendAlpha","type":"number","default":"nil"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"PerformFullScreenStencilOperation","parent":"render","type":"libraryfunc","description":"","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"PopCustomClipPlane","parent":"render","type":"libraryfunc","description":"Removes the current active clipping plane from the clip plane stack.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"OverrideDepthEnable","parent":"render","type":"libraryfunc","description":"Overrides the write behaviour of all next rendering operations towards the depth buffer.","realm":"Client","args":{"arg":[{"text":"Enable or disable the override.","name":"enable","type":"boolean"},{"text":"If the previous argument is true, sets whether the next rendering operations should write to the depth buffer or not. Has no effect if the previous argument is false.","name":"shouldWrite","type":"boolean"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"PopFilterMag","parent":"render","type":"libraryfunc","description":"Pops the current texture magnification filter from the filter stack.\n\nSee render.PushFilterMag","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"PopFilterMin","parent":"render","type":"libraryfunc","description":"Pops the current texture minification filter from the filter stack.\n\nSee render.PushFilterMin","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"PopRenderTarget","parent":"render","type":"libraryfunc","description":"Pops the last render target and viewport from the RT stack and sets them as the current render target and viewport.\n\nThis is should be called to restore the previous render target and viewport after a call to render.PushRenderTarget.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"PushCustomClipPlane","parent":"render","type":"libraryfunc","description":{"text":"Pushes a new clipping plane of the clip plane stack and sets it as active.","bug":{"text":"A max of 2 clip planes are supported on Linux/POSIX, and 6 on Windows.","issue":"2687"}},"realm":"Client","args":{"arg":[{"text":"The normal of the clipping plane.","name":"normal","type":"Vector"},{"text":"The distance of the plane from the world origin. You can use Vector:Dot between the normal and any point on the plane to find this.","name":"distance","type":"number"}]}},"example":{"description":"Clips the lower half of your custom entity","code":"function ENT:Draw()\n    local normal = self:GetUp() -- Everything \"behind\" this normal will be clipped\n    local position = normal:Dot( self:GetPos() ) -- self:GetPos() is the origin of the clipping plane\n\n    local oldEC = render.EnableClipping( true )\n    render.PushCustomClipPlane( normal, position )\n\n    self:DrawModel()\n\n    render.PopCustomClipPlane()\n    render.EnableClipping( oldEC )\nend"},"realms":["Client"],"type":"Function"},
{"function":{"name":"PopFlashlightMode","parent":"render","type":"libraryfunc","description":"Pops the current flashlight mode from the flashlight mode stack.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"PushFilterMag","parent":"render","type":"libraryfunc","description":"Pushes a texture filter onto the magnification texture filter stack.\n\nSee also render.PushFilterMin and render.PopFilterMag.","realm":"Client","args":{"arg":{"text":"The texture filter type, see Enums/TEXFILTER","name":"texFilterType","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"PushFilterMin","parent":"render","type":"libraryfunc","description":"Pushes a texture filter onto the minification texture filter stack.","realm":"Client","args":{"arg":{"text":"The texture filter type, see Enums/TEXFILTER","name":"texFilterType","type":"number"}}},"example":{"description":"Anisotropic Filtering (This is not antialiasing)","code":"render.PushFilterMag( TEXFILTER.ANISOTROPIC )\nrender.PushFilterMin( TEXFILTER.ANISOTROPIC )\n\n-- Render stuff here\n\nrender.PopFilterMag()\nrender.PopFilterMin()"},"realms":["Client"],"type":"Function"},
{"function":{"name":"PushFlashlightMode","parent":"render","type":"libraryfunc","description":{"text":"Enables the flashlight projection for the upcoming rendering.","bug":{"text":"This will leave models lit under specific conditions.","issue":"3029"}},"realm":"Client","args":{"arg":{"text":"Whether the flashlight mode should be enabled or disabled.","name":"enable","type":"boolean","default":"false"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ReadPixel","parent":"render","type":"libraryfunc","description":"Reads the color of the specified pixel from the RenderTarget sent by render.CapturePixels","realm":"Client","args":{"arg":[{"text":"The x coordinate.","name":"x","type":"number"},{"text":"The y coordinate.","name":"y","type":"number"}]},"rets":{"ret":[{"text":"r","name":"","type":"number"},{"text":"g","name":"","type":"number"},{"text":"b","name":"","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"PushRenderTarget","parent":"render","type":"libraryfunc","description":{"text":"Pushes the current render target and viewport to the RT stack then sets a new current render target and viewport. If the viewport is not specified, the dimensions of the render target are used instead.\n\nThis is similar to a call to render.SetRenderTarget and render.SetViewPort where the current render target and viewport have been saved beforehand, except the viewport isn't clipped to screen bounds.\n\nSee also render.PopRenderTarget.","note":["If you want to render to the render target in 2d mode and it is not the same size as the screen, use cam.Start2D and cam.End2D.","If the render target is bigger than the screen, rendering done with the surface library will be clipped to the screen bounds unless you call Global.DisableClipping"]},"realm":"Client","args":{"arg":[{"text":"The new render target to be used.","name":"texture","type":"ITexture"},{"text":"X origin of the viewport.","name":"x","type":"number","default":"0"},{"text":"Y origin of the viewport.","name":"y","type":"number","default":"0"},{"text":"Width of the viewport.","name":"w","type":"number","default":"texture:Width()"},{"text":"Height of the viewport","name":"h","type":"number","default":"texture:Height()"}]}},"example":[{"description":"Shows how to create a material which uses a custom created Render Target texture.","code":"-- Create render target\nlocal exampleRT = GetRenderTarget( \"example_rt\", 1024, 1024 )\n\n-- Draw to the render target\nrender.PushRenderTarget( exampleRT )\n\tcam.Start2D()\n\t\t-- Draw background\n\t\tsurface.SetDrawColor( 0, 0, 0, 255 )\n\t\tsurface.DrawRect( 0, 0, 1024, 1024 )\n\n\t\t-- Draw some foreground stuff\n\t\tsurface.SetDrawColor( 255, 0, 0, 255 )\n\t\tsurface.DrawRect( 0, 0, 256, 256 )\n\tcam.End2D()\nrender.PopRenderTarget()\n\nlocal customMaterial = CreateMaterial( \"example_rt_mat\", \"UnlitGeneric\", {\n\t[\"$basetexture\"] = exampleRT:GetName(), -- You can use \"example_rt\" as well\n\t[\"$translucent\"] = 1,\n\t[\"$vertexcolor\"] = 1\n} )\n\nhook.Add( \"HUDPaint\", \"ExampleDraw\", function()\n\tsurface.SetDrawColor( 255, 255, 255, 255 )\n\tsurface.SetMaterial( customMaterial )\n\tsurface.DrawTexturedRect( 0, 0, customMaterial:GetTexture( \"$basetexture\" ):Width(), customMaterial:GetTexture( \"$basetexture\" ):Height() )\nend )","output":"A black 1024x1024 render target with a 256x256 red square in top left corner drawn in your top left corner."},{"description":"Shows how you can use alpha channel with render targets.","code":"render.PushRenderTarget( texture )\nrender.OverrideAlphaWriteEnable( true, true )\n\nrender.ClearDepth()\nrender.Clear( 0, 0, 0, 0 )\n\n-- Draw stuff here\n\nrender.OverrideAlphaWriteEnable( false )\nrender.PopRenderTarget()"}],"realms":["Client"],"type":"Function"},
{"function":{"name":"RedownloadAllLightmaps","parent":"render","type":"libraryfunc","description":"This applies the changes made to map lighting using engine.LightStyle.","realm":"Client","args":{"arg":[{"text":"When true, this will also apply lighting changes to static props. This is really slow on large maps.","name":"DoStaticProps","type":"boolean","default":"false"},{"text":"Forces all props to update their static lighting. Can be slow.","name":"UpdateStaticLighting","type":"boolean","default":"false"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"RenderView","parent":"render","type":"libraryfunc","description":{"text":"Renders the scene with the specified viewData to the current active render target.","bug":{"text":"Static props and LODs are rendered improperly due to incorrectly perceived distance.","issue":"1330"}},"realm":"Client","args":{"arg":{"text":"The view data to be used in the rendering. See Structures/ViewData. Any missing value is assumed to be that of the current view. Similarly, you can make a normal render by simply not passing this table at all.","name":"view","type":"table","default":"nil"}}},"example":{"description":"How you could use this to draw the view on a derma panel.","code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetSize( ScrW() - 100, ScrH() - 100 )\nframe:Center()\nframe:MakePopup()\n\nfunction frame:Paint( w, h )\n\n\tlocal x, y = self:GetPos()\n\n\tlocal old = DisableClipping( true ) -- Avoid issues introduced by the natural clipping of Panel rendering\n\trender.RenderView( {\n\t\torigin = Vector( 0, 0, 0 ),\n\t\tangles = Angle( 0, 0, 0 ),\n\t\tx = x, y = y,\n\t\tw = w, h = h\n\t} )\n\tDisableClipping( old )\n\nend","output":{"image":{"src":"RenderViewResult.jpg","alt":"300px"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ResetModelLighting","parent":"render","type":"libraryfunc","description":"Resets the model lighting to the specified color.\n\nCalls render.SetModelLighting for every direction with given color.","realm":"Client","args":{"arg":[{"text":"The red part of the color, 0-1","name":"r","type":"number"},{"text":"The green part of the color, 0-1","name":"g","type":"number"},{"text":"The blue part of the color, 0-1","name":"b","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"RenderHUD","parent":"render","type":"libraryfunc","description":"Renders the HUD on the screen.","realm":"Client","args":{"arg":[{"text":"X position for the HUD draw origin.","name":"x","type":"number"},{"text":"Y position for the HUD draw origin.","name":"y","type":"number"},{"text":"Width of the HUD draw.","name":"w","type":"number"},{"text":"Height of the HUD draw.","name":"h","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ResetToneMappingScale","parent":"render","type":"libraryfunc","description":"Resets the HDR tone multiplier to the specified value.\n\nThis will only work on HDR maps, and the value will automatically fade to what it was ( or whatever render.SetGoalToneMappingScale is ) if called only once.","realm":"Client","args":{"arg":{"text":"The value which should be used as multiplier.","name":"scale","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetBlend","parent":"render","type":"libraryfunc","description":{"text":"Sets the alpha blending for every upcoming render operation.","bug":{"text":"This does not affect non-model render.Draw* functions.","issue":"3166"}},"realm":"Client","args":{"arg":{"text":"Blending value from 0-1.","name":"blending","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetColorMaterial","parent":"render","type":"libraryfunc","description":"Sets the current drawing material to \"color\".\n\nThe material is defined as:\n```\n\n \"UnlitGeneric\"\n {\n \t\"$basetexture\" \"color/white\"\n \t\"$model\" \t\t1\n \t\"$translucent\" \t1\n \t\"$vertexalpha\" \t1\n \t\"$vertexcolor\" \t1\n }\n```","realm":"Client","file":{"text":"lua/includes/extensions/client/render.lua","line":"89-93"}},"example":{"description":"Equivalent of this function. Internally, the material used is cached so it is not created every frame like the code below implies.","code":"render.SetMaterial( Material( \"color\" ) )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetAmbientLight","parent":"render","type":"libraryfunc","description":"Sets the ambient lighting for any upcoming render operation.","realm":"Client","args":{"arg":[{"text":"The red part of the color, 0-1.","name":"r","type":"number"},{"text":"The green part of the color, 0-1.","name":"g","type":"number"},{"text":"The blue part of the color, 0-1.","name":"b","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetColorMaterialIgnoreZ","parent":"render","type":"libraryfunc","description":"Sets the current drawing material to `color_ignorez`.\n\nThe material is defined as:\n```\n\n \"UnlitGeneric\"\n {\n \t\"$basetexture\" \"color/white\"\n  \t\"$model\" \t\t1\n \t\"$translucent\" \t1\n \t\"$vertexalpha\" \t1\n \t\"$vertexcolor\" \t1\n \t\"$ignorez\"\t\t1\n }\n```","realm":"Client","file":{"text":"lua/includes/extensions/client/render.lua","line":"79-81"}},"example":{"description":"Equivalent of this function. Internally, the material used is cached so it is not created every frame like the code below implies.","code":"render.SetMaterial( Material( \"color_ignorez\" ) )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetColorModulation","parent":"render","type":"libraryfunc","description":"Sets the color modulation.","realm":"Client","args":{"arg":[{"text":"The red channel multiplier normal ranging from 0-1.","name":"r","type":"number"},{"text":"The green channel multiplier normal ranging from 0-1.","name":"g","type":"number"},{"text":"The blue channel multiplier normal ranging from 0-1.","name":"b","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetFogZ","parent":"render","type":"libraryfunc","description":{"text":"If the fog mode is set to , the fog will only be rendered below the specified height.","page":",MATERIAL_FOG_LINEAR_BELOW_FOG_ZEnums/MATERIAL_FOG"},"realm":"Client","args":{"arg":{"text":"The fog Z.","name":"fogZ","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetGoalToneMappingScale","parent":"render","type":"libraryfunc","description":"Sets the goal HDR tone mapping scale.\n\nUse this in a rendering/think hook as it is reset every frame.","realm":"Client","args":{"arg":{"text":"The target scale.","name":"scale","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetLightingMode","parent":"render","type":"libraryfunc","description":{"text":"Sets lighting mode when rendering something.","note":"**Do not forget to restore the default value** to avoid unexpected behavior, like the world and the HUD/UI being affected"},"realm":"Client","args":{"arg":{"text":"Lighting render mode\n\nPossible values are:\n* 0 - Default\n* 1 - Total fullbright, similar to `mat_fullbright 1` but excluding some weapon view models\n* 2 - Increased brightness(?), models look fullbright","name":"Mode","type":"number"}}},"example":[{"description":"Draws a fullbright quad on 2D skybox","code":"local MATERIAL = Material(\"skybox/trainup\")\n\nhook.Add(\"PostDraw2DSkyBox\", \"Quaddrawer\", function()\n\trender.OverrideDepthEnable( true, false )\n\trender.SetLightingMode(2)\n\n\tcam.Start3D(Vector(0, 0, 0), EyeAngles())\n\t\trender.SetMaterial(MATERIAL)\n\t\trender.DrawQuadEasy(Vector(200,0,0), Vector(-1,0,0), 64, 64, Color(255,255,255), 180)\n\tcam.End3D()\n\n\trender.OverrideDepthEnable( false, false )\n\trender.SetLightingMode(0)\nend)"},{"description":"Display everything the same way as when you set `mat_fullbright` to 1.","code":"local LightingModeChanged = false\nhook.Add( \"PreRender\", \"fullbright\", function()\n\trender.SetLightingMode( 1 )\n\tLightingModeChanged = true\nend )\n\nlocal function EndOfLightingMod()\n\tif LightingModeChanged then\n\t\trender.SetLightingMode( 0 )\n\t\tLightingModeChanged = false\n\tend\nend\nhook.Add( \"PostRender\", \"fullbright\", EndOfLightingMod )\nhook.Add( \"PreDrawHUD\", \"fullbright\", EndOfLightingMod )"}],"realms":["Client"],"type":"Function"},
{"function":{"name":"SetLocalModelLights","parent":"render","type":"libraryfunc","description":"Sets up the local lighting for any upcoming render operation. Up to 4 local lights can be defined, with one of three different types (point, directional, spot).\n\nDisables all local lights if called with no arguments.","realm":"Client","args":{"arg":{"text":"A table containing up to 4 tables for each light source that should be set up. Each of these tables should contain the properties of its associated light source, see Structures/LocalLight.","name":"lights","type":"table","default":"{}"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetLightmapTexture","parent":"render","type":"libraryfunc","description":{"text":"Sets the texture to be used as the lightmap in upcoming rendering operations. This is required when rendering meshes using a material with a lightmapped shader such as LightmappedGeneric.","rendercontext":[{"hook":"false","type":"3D"},{"hook":"false","type":"2D"}]},"realm":"Client","args":{"arg":{"text":"The texture to be used as the lightmap.","name":"tex","type":"ITexture"}}},"example":{"description":"Creates a mesh with LightmappedGeneric material on it","code":"-- LightmappedGeneric material that we'll use for our mesh\nlocal meshMat = Material( \"concrete/concretefloor001a\" )\n\n-- Mesh vertices (notice that it's not MeshVertex structure format, just something similar)\n-- Notice that we have 2 UV coordinates channels, one for texture, one for lightmap\nlocal meshVertices = {\n\n\t{ pos = Vector( 0, 0, 0 ), u0 = 0, v0 = 0, u1 = 0, v1 = 0, n = Vector( 1, 0, 0 ) },\n\t{ pos = Vector( 0, 100, 0 ), u0 = 1, v0 = 0, u1 = 3, v1 = 0, n = Vector( 1, 0, 0 ) },\n\t{ pos = Vector( 0, 100, -100 ), u0 = 1, v0 = 1, u1 = 3, v1 = 3, n = Vector( 1, 0, 0 ) },\n\t{ pos = Vector( 0, 0, -100 ), u0 = 0, v0 = 1, u1 = 0, v1 = 3, n = Vector( 1, 0, 0 ) },\n}\n\n-- Run this command while ingame to create the mesh at map origin\nconcommand.Add( \"meshtest\", function()\n\n\t-- Creating a render target to be used as lightmap texture\n\tmeshLightmap = GetRenderTarget( \"test_mesh_lightmap\", 128, 128, false )\n\n\t-- Filling the lightmap texture with some stuff for visualization\n\trender.PushRenderTarget( meshLightmap )\n\n\t\tcam.Start2D()\n\n\t\t\t-- Resetting lightmap to be monotone gray\n\t\t\trender.Clear( 128, 128, 128, 255 )\n\n\t\t\t-- Drawing a dark rectangle\n\t\t\trender.SetColorMaterial()\n\t\t\tsurface.SetDrawColor( 80, 80, 80, 255 )\n\t\t\tsurface.DrawRect( 32, 32, 64, 64 )\n\n\t\t\t-- And some color text, why not! Lightmaps support RGB color\n\t\t\tdraw.SimpleText( \"This is lightmap\", \"DermaDefault\", 64, 64, Color( 255, 0, 0, 255 ), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )\n\n\t\tcam.End2D()\n\n\trender.PopRenderTarget()\n\n\t-- Creating the mesh. Don't forget to pass the material you're gonna use with it!\n\t-- Shader of the material defines some features of the mesh, vertex structure\n\t-- specifically (LightmappedGeneric requires each vertex to store 2 UV channels,\n\t-- for instance. This is important in this case)\n\tmyTestMesh = Mesh( meshMat )\n\n\t-- Creating the mesh\n\tmesh.Begin( myTestMesh, MATERIAL_QUADS, 1 )\n\n\t\tfor i, vertex in pairs( meshVertices ) do\n\n\t\t\tmesh.Position( vertex.pos )\n\n\t\t\t-- Texture coordinates go to channel 0\n\t\t\tmesh.TexCoord( 0, vertex.u0, vertex.v0 )\n\n\t\t\t-- Lightmap texture coordinates go to channel 1\n\t\t\tmesh.TexCoord( 1, vertex.u1, vertex.v1 )\n\n\t\t\tmesh.Normal( vertex.n )\n\t\t\tmesh.AdvanceVertex()\n\t\tend\n\n\tmesh.End()\nend )\n\nhook.Add( \"PostDrawOpaqueRenderables\", \"LightmappedMeshTest\", function()\n\n\tif myTestMesh and myTestMesh ~= NULL then\n\n\t\trender.SetMaterial( meshMat )\n\t\trender.SetLightmapTexture( meshLightmap )\n\n\t\tmyTestMesh:Draw()\n\tend\nend )","output":{"image":{"src":"LightmappedGenericMeshPreview.jpeg","alt":"512px|thumb"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetLightingOrigin","parent":"render","type":"libraryfunc","description":{"text":"Sets the lighting origin.","bug":{"text":"This does not work for prop_physics.","issue":"2804"}},"realm":"Client","args":{"arg":{"text":"The position from which the light should be \"emitted\".","name":"lightingOrigin","type":"Vector"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetMaterial","parent":"render","type":"libraryfunc","description":{"text":"Sets the material to be used in any upcoming render operation using the render.\n\nNot to be confused with surface.SetMaterial.","rendercontext":[{"hook":"false","type":"3D"},{"hook":"false","type":"2D"}]},"realm":"Client","args":{"arg":{"text":"The material to be used.","name":"mat","type":"IMaterial"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetRenderTarget","parent":"render","type":"libraryfunc","description":"Sets the render target to the specified rt.","realm":"Client","args":{"arg":{"text":"The new render target to be used.","name":"texture","type":"ITexture"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetModelLighting","parent":"render","type":"libraryfunc","description":"Sets up the ambient lighting for any upcoming render operation. Ambient lighting can be seen as a cube enclosing the object to be drawn, each of its faces representing a directional light source that shines towards the object. Thus, there is a total of six different light sources that can be configured separately.\n\nLight color components are not restricted to a specific range (i.e. 0-255), instead, higher values will result in a brighter light.","realm":"Client","args":{"arg":[{"text":"The light source to edit, see Enums/BOX.","name":"lightDirection","type":"number"},{"text":"The red component of the light color.","name":"red","type":"number"},{"text":"The green component of the light color.","name":"green","type":"number"},{"text":"The blue component of the light color.","name":"blue","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetRenderTargetEx","parent":"render","type":"libraryfunc","description":"Sets the render target with the specified index to the specified rt.","realm":"Client","args":{"arg":[{"text":"The index of the rt to set.","name":"rtIndex","type":"number"},{"text":"The new render target to be used.","name":"texture","type":"ITexture"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetShadowColor","parent":"render","type":"libraryfunc","description":"Sets the shadow color.","realm":"Client","args":{"arg":[{"text":"The red channel of the shadow color.","name":"red","type":"number"},{"text":"The green channel of the shadow color.","name":"green","type":"number"},{"text":"The blue channel of the shadow color.","name":"blue","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetScissorRect","parent":"render","type":"libraryfunc","description":"Sets a scissoring rect which limits the drawing area.","realm":"Client","args":{"arg":[{"text":"X start coordinate of the scissor rect.","name":"startX","type":"number"},{"text":"Y start coordinate of the scissor rect.","name":"startY","type":"number"},{"text":"X end coordinate of the scissor rect.","name":"endX","type":"number"},{"text":"Y end coordinate of the scissor rect.","name":"endY","type":"number"},{"text":"Enable or disable the scissor rect.","name":"enable","type":"boolean"}]}},"example":[{"description":"Shows how to use this function. This will cut the white rectangle from full screen to 512x512 box in top left corner","code":"render.SetScissorRect( 0, 0, 512, 512, true ) -- Enable the rect\n\tdraw.RoundedBox( 4, 0, 0, ScrW(), ScrH(), color_white ) -- Draw a white rectangle over the whole screen\nrender.SetScissorRect( 0, 0, 0, 0, false ) -- Disable after you are done"},{"description":"Draws a fake circle + cut it to look like a progress bar","code":"local function draw_circle( x, y, radius, color, percent )\n    percent = percent or 1\n\n    render.SetScissorRect( x - radius, y - radius + radius * 2 * ( 1 - percent ), x + radius, y + radius * 2, true )\n        draw.RoundedBox( radius, x - radius, y - radius, radius * 2, radius * 2, color or color_white )\n    render.SetScissorRect( 0, 0, 0, 0, false )\nend\n\nhook.Add( \"HUDPaint\", \"GMod:Wiki\", function()\n    local w, h = ScrW(), ScrH()\n\tlocal radius = h * 0.1\n\n\t-- Filled circle\n    draw_circle( w / 2, h * 0.25, radius, Color( 255, 0, 0 ), 1 )\n\n\t-- Filled circle + quarter circle\n\tdraw_circle( w / 2, h / 2, radius, Color( 255, 0, 0 ), 1 )\n\tdraw_circle( w / 2, h / 2, radius, Color( 0, 255, 0 ), 0.25 )\n\n\t-- Half circle\n\tdraw_circle( w / 2, h * 0.75, radius, Color( 0, 0, 255 ), 0.5 )\nend )"}],"realms":["Client"],"type":"Function"},
{"function":{"name":"SetShadowDirection","parent":"render","type":"libraryfunc","description":"Sets the shadow projection direction.","realm":"Client","args":{"arg":{"text":"The new shadow direction.","name":"shadowDirections","type":"Vector"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetShadowDistance","parent":"render","type":"libraryfunc","description":"Sets the maximum shadow projection range.","realm":"Client","args":{"arg":{"text":"The new maximum shadow distance.","name":"shadowDistance","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetStencilCompareFunction","parent":"render","type":"libraryfunc","description":"Sets the compare function of the stencil.\n\nPixels which fail the stencil comparison function are not written to the render target. The operation to be performed on the stencil buffer values for these pixels can be set using render.SetStencilFailOperation.\n\nPixels which pass the stencil comparison function are written to the render target unless they fail the depth buffer test (where applicable). The operation to perform on the stencil buffer values for these pixels can be set using render.SetStencilPassOperation and render.SetStencilZFailOperation.","realm":"Client","args":{"arg":{"text":"Compare function, see Enums/STENCILCOMPARISONFUNCTION, and Enums/STENCIL for short.","name":"compareFunction","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetShadowsDisabled","parent":"render","type":"libraryfunc","description":"Sets whether any future render operations will ignore shadow drawing.","realm":"Client","args":{"arg":{"name":"newState","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetStencilEnable","parent":"render","type":"libraryfunc","description":"Sets whether stencil tests are carried out for each rendered pixel.\n\nOnly pixels passing the stencil test are written to the render target.","realm":"Client","args":{"arg":{"text":"The new state.","name":"newState","type":"boolean"}}},"example":{"description":"A basic stencil operation that limits rendering to the centre of the screen.","code":"hook.Add( \"PostDrawOpaqueRenderables\", \"Stencil Tutorial Example\", function()\n\t-- Reset everything to known good\n\trender.SetStencilWriteMask( 0xFF )\n\trender.SetStencilTestMask( 0xFF )\n\trender.SetStencilReferenceValue( 0 )\n\trender.SetStencilCompareFunction( STENCIL_ALWAYS )\n\trender.SetStencilPassOperation( STENCIL_KEEP )\n\trender.SetStencilFailOperation( STENCIL_KEEP )\n\trender.SetStencilZFailOperation( STENCIL_KEEP )\n\trender.ClearStencil()\n\n\t-- Enable stencils\n\trender.SetStencilEnable( true )\n\t-- Set the reference value to 1. This is what the compare function tests against\n\trender.SetStencilReferenceValue( 1 )\n\t-- Refuse to write things to the screen unless that pixel's value is 1\n\trender.SetStencilCompareFunction( STENCIL_EQUAL )\n\t-- Write a 1 to the centre third of the screen. Because we cleared it earlier, everything is currently 0\n\tlocal w, h = ScrW() / 3, ScrH() / 3\n\tlocal x_start, y_start = w, h\n\tlocal x_end, y_end = x_start + w, y_start + h\n\trender.ClearStencilBufferRectangle( x_start, y_start, x_end, y_end, 1 )\n\n\t-- Draw our entities. They will only draw in the area cleared above\n\tfor _, ent in ipairs( ents.FindByClass( \"sent_stencil_test\" ) ) do\n\t\tent:DrawModel()\n\tend\n\n\t-- Let everything render normally again\n\trender.SetStencilEnable( false )\nend )","output":{"image":{"src":"stencil_basic_clipping_result.jpg","alt":"left|400px"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetStencilFailOperation","parent":"render","type":"libraryfunc","description":"Sets the operation to be performed on the stencil buffer values if the compare function was not successful.\nNote that this takes place **before** depth testing.","realm":"Client","args":{"arg":{"text":"Fail operation function, see Enums/STENCILOPERATION.","name":"failOperation","type":"number"}}},"example":{"description":"This is one of the most useful things stencils can do - not render something to the screen and then allow you to draw with the shape it would have been if it **had** rendered.\n\nYou can see in the output screenshot that a partially obscured entity will still write its entire shape to the stencil buffer.\n\nFrom [Lex's Stencil Tutorial](https://github.com/Lexicality/stencil-tutorial).","code":"hook.Add( \"PostDrawOpaqueRenderables\", \"Stencil Tutorial Example\", function()\n\t-- Reset everything to known good\n\trender.SetStencilWriteMask( 0xFF )\n\trender.SetStencilTestMask( 0xFF )\n\trender.SetStencilReferenceValue( 0 )\n\trender.SetStencilCompareFunction( STENCIL_ALWAYS )\n\trender.SetStencilPassOperation( STENCIL_KEEP )\n\trender.SetStencilFailOperation( STENCIL_KEEP )\n\trender.SetStencilZFailOperation( STENCIL_KEEP )\n\trender.ClearStencil()\n\n\t-- Enable stencils\n\trender.SetStencilEnable( true )\n\t-- Set the reference value to 1. This is what the compare function tests against\n\trender.SetStencilReferenceValue( 1 )\n\t-- Only draw things if their pixels are currently 1. Currently this is nothing.\n\trender.SetStencilCompareFunction( STENCIL_EQUAL )\n\t-- If something fails to draw to the screen, set the pixels it would have drawn to 1\n\t-- This includes if it's behind something.\n\trender.SetStencilFailOperation( STENCIL_REPLACE )\n\n\t-- Draw our entities. They will not draw, because everything is 0\n\tfor _, ent in ipairs( ents.FindByClass( \"prop_physics\" ) ) do\n\t\tent:DrawModel()\n\tend\n\n\t-- If we were to re-draw our entities, we'd see them, but otherwise they're invisible.\n\t-- If we flush the screen, we can show the \"holes\" they've left in the stencil buffer\n\trender.ClearBuffersObeyStencil( 0, 148, 133, 255, false )\n\n\t-- Let everything render normally again\n\trender.SetStencilEnable( false )\nend )","output":{"image":{"src":"basic_fail_operation.jpg","alt":"800px"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetStencilReferenceValue","parent":"render","type":"libraryfunc","description":"Sets the reference value which will be used for all stencil operations. This is an unsigned integer.","realm":"Client","args":{"arg":{"text":"Reference value.","name":"referenceValue","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetStencilTestMask","parent":"render","type":"libraryfunc","description":"Sets the unsigned 8-bit test bitflag mask to be used for any stencil testing.","realm":"Client","args":{"arg":{"text":"The mask bitflag.","name":"mask","type":"number"}}},"example":[{"description":"A brief demonstration of masks (from \n[Lex's Stencil Tutorial](https://github.com/Lexicality/stencil-tutorial)).","code":"hook.Add( \"PostDrawOpaqueRenderables\", \"Stencil Tutorial Example\", function()\n\t--[[\n        To understand this tutorial you need to already understand the basics\n         of binary and bitwise operations.\n\n        It would also help to understand hexadecimal notation, since Lua\n         doesn't have a bitmask input, but I will include binary notation in\n         comments to help.\n\t--]]\n\n\t-- Reset everything to known good\n\trender.SetStencilWriteMask( 0xFF )\n\trender.SetStencilTestMask( 0xFF )\n\trender.SetStencilReferenceValue( 0 )\n\trender.SetStencilCompareFunction( STENCIL_ALWAYS )\n\trender.SetStencilPassOperation( STENCIL_KEEP )\n\trender.SetStencilFailOperation( STENCIL_KEEP )\n\trender.SetStencilZFailOperation( STENCIL_KEEP )\n\trender.ClearStencil()\n\n\t-- Enable stencils\n\trender.SetStencilEnable( true )\n\t-- Force everything to fail\n\trender.SetStencilCompareFunction( STENCIL_NEVER )\n\t-- Save all the things we don't draw\n\trender.SetStencilFailOperation( STENCIL_REPLACE )\n\n\t-- Set the reference value to 00011100\n\trender.SetStencilReferenceValue( 0x1C )\n\t-- Set the write mask to 01010101\n\t-- Any writes to the stencil buffer will be bitwise ANDed with this mask.\n\t-- With our current reference value, the result will be 00010100.\n\trender.SetStencilWriteMask( 0x55 )\n\n\t-- Fail to draw our entities.\n\tfor _, ent in ipairs( ents.FindByClass( \"prop_physics\" ) ) do\n\t\tent:DrawModel()\n\tend\n\n\t-- Set the test mask to 11110011.\n\t-- Any time a pixel is read out of the stencil buffer it will be bitwise ANDed with this mask.\n\trender.SetStencilTestMask( 0xF3 )\n\t-- Set the reference value to 00011100 & 01010101 & 11110011\n\trender.SetStencilReferenceValue( 0x10 )\n\t-- Pass if the masked buffer value matches the unmasked reference value\n\trender.SetStencilCompareFunction( STENCIL_EQUAL )\n\n\t-- Draw our entities\n\trender.ClearBuffersObeyStencil( 0, 148, 133, 255, false )\n\n\t-- Let everything render normally again\n\trender.SetStencilEnable( false )\nend )"},{"description":"A somewhat more complicated mask example (from \n[Lex's Stencil Tutorial](https://github.com/Lexicality/stencil-tutorial)).","code":"hook.Add( \"PostDrawOpaqueRenderables\", \"Stencil Tutorial Example\", function()\n\t--[[\n        To understand this tutorial you need to already understand the basics\n         of binary and bitwise operations.\n\n        It would also help to understand hexadecimal notation, since Lua\n         doesn't have a bitmask input, but I will include binary notation in\n         comments to help.\n\t--]]\n\n\t-- Reset everything to known good\n\trender.SetStencilWriteMask( 0xFF )\n\trender.SetStencilTestMask( 0xFF )\n\trender.SetStencilReferenceValue( 0 )\n\trender.SetStencilCompareFunction( STENCIL_ALWAYS )\n\trender.SetStencilPassOperation( STENCIL_KEEP )\n\trender.SetStencilFailOperation( STENCIL_KEEP )\n\trender.SetStencilZFailOperation( STENCIL_KEEP )\n\trender.ClearStencil()\n\n\t-- Enable stencils\n\trender.SetStencilEnable( true )\n\n\t-- Only write to the upper 4 bits of the stencil buffer\n\trender.SetStencilWriteMask( 0xF0 )\n\t-- Wipe the stencil buffer to be 0001111. This is not affected by the write mask.\n\trender.ClearStencilBufferRectangle( 0, 0, ScrW(), ScrH(), 0x0F )\n\n\t-- Always fail\n\trender.SetStencilCompareFunction( STENCIL_NEVER )\n\t-- Don't read any bits from the stencil buffer\n\trender.SetStencilTestMask( 0x00 )\n\t-- When an operation fails, read the current value from the stencil buffer, add\n\t--  one to it and then write it back to the buffer\n\t-- This is not affected by the test mask, but it is affected by the write mask\n\t-- This means we will read 00001111, then write 00010000.\n\t-- However, due to the write mask, this won't affect the last four bits already\n\t--  in the buffer, resulting in 00011111.\n\trender.SetStencilFailOperation( STENCIL_INCR )\n\n\t-- Add something interesting to the stencil buffer\n\tfor _, ent in ipairs( ents.FindByClass( \"prop_physics\" ) ) do\n\t\tent:DrawModel()\n\tend\n\n\t-- Go back to reading the full value from the stencil buffer\n\trender.SetStencilTestMask( 0xFF )\n\t-- Set the reference value to 00011111\n\trender.SetStencilReferenceValue( 0x1F )\n\t-- Render the result\n\trender.SetStencilCompareFunction( STENCIL_EQUAL )\n\trender.ClearBuffersObeyStencil( 0, 148, 133, 255, false )\n\n\t-- Let everything render normally again\n\trender.SetStencilEnable( false )\nend )"}],"realms":["Client"],"type":"Function"},
{"function":{"name":"SetStencilPassOperation","parent":"render","type":"libraryfunc","description":"Sets the operation to be performed on the stencil buffer values if the compare function was successful.","realm":"Client","args":{"arg":{"text":"Pass operation function, see Enums/STENCILOPERATION.","name":"passOperation","type":"number"}}},"example":{"description":"This uses the pass operation to blank out everything but what we just drew (from \n[Lex's Stencil Tutorial](https://github.com/Lexicality/stencil-tutorial)).","code":"hook.Add( \"PostDrawOpaqueRenderables\", \"Stencil Tutorial Example\", function()\n\t-- Reset everything to known good\n\trender.SetStencilWriteMask( 0xFF )\n\trender.SetStencilTestMask( 0xFF )\n\trender.SetStencilReferenceValue( 0 )\n\trender.SetStencilCompareFunction( STENCIL_ALWAYS )\n\trender.SetStencilPassOperation( STENCIL_KEEP )\n\trender.SetStencilFailOperation( STENCIL_KEEP )\n\trender.SetStencilZFailOperation( STENCIL_KEEP )\n\trender.ClearStencil()\n\n\t-- Enable stencils\n\trender.SetStencilEnable( true )\n\t-- Set the reference value to 1. This is what the compare function tests against\n\trender.SetStencilReferenceValue( 1 )\n\t-- Only draw things if their pixels are NOT 1. Currently this is everything.\n\trender.SetStencilCompareFunction( STENCIL_NOTEQUAL )\n\t-- If something draws to the screen, set the pixels it draws to 1\n\trender.SetStencilPassOperation( STENCIL_REPLACE )\n\n\t-- Draw our entities. They will draw as normal\n\tfor _, ent in ipairs( ents.FindByClass( \"prop_physics\" ) ) do\n\t\tent:DrawModel()\n\tend\n\n\t-- At this point, we cannot draw on top of anything that we have already drawn.\n\t-- So, if we flush the screen, our entities will still be there.\n\trender.ClearBuffersObeyStencil( 0, 148, 133, 255, false )\n\n\t-- Let everything render normally again\n\trender.SetStencilEnable( false )\nend )","output":{"image":{"src":"basic_pass_operation.jpg","alt":"800px"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetStencilWriteMask","parent":"render","type":"libraryfunc","description":"Sets the unsigned 8-bit write bitflag mask to be used for any writes to the stencil buffer.","realm":"Client","args":{"arg":{"text":"The mask bitflag.","name":"mask","type":"number"}}},"example":[{"description":"A brief demonstration of masks (from \n[Lex's Stencil Tutorial](https://github.com/Lexicality/stencil-tutorial)).","code":"hook.Add( \"PostDrawOpaqueRenderables\", \"Stencil Tutorial Example\", function()\n\t--[[\n        To understand this tutorial you need to already understand the basics\n         of binary and bitwise operations.\n\n        It would also help to understand hexadecimal notation, since Lua\n         doesn't have a bitmask input, but I will include binary notation in\n         comments to help.\n\t--]]\n\n\t-- Reset everything to known good\n\trender.SetStencilWriteMask( 0xFF )\n\trender.SetStencilTestMask( 0xFF )\n\trender.SetStencilReferenceValue( 0 )\n\trender.SetStencilCompareFunction( STENCIL_ALWAYS )\n\trender.SetStencilPassOperation( STENCIL_KEEP )\n\trender.SetStencilFailOperation( STENCIL_KEEP )\n\trender.SetStencilZFailOperation( STENCIL_KEEP )\n\trender.ClearStencil()\n\n\t-- Enable stencils\n\trender.SetStencilEnable( true )\n\t-- Force everything to fail\n\trender.SetStencilCompareFunction( STENCIL_NEVER )\n\t-- Save all the things we don't draw\n\trender.SetStencilFailOperation( STENCIL_REPLACE )\n\n\t-- Set the reference value to 00011100\n\trender.SetStencilReferenceValue( 0x1C )\n\t-- Set the write mask to 01010101\n\t-- Any writes to the stencil buffer will be bitwise ANDed with this mask.\n\t-- With our current reference value, the result will be 00010100.\n\trender.SetStencilWriteMask( 0x55 )\n\n\t-- Fail to draw our entities.\n\tfor _, ent in ipairs( ents.FindByClass( \"prop_physics\" ) ) do\n\t\tent:DrawModel()\n\tend\n\n\t-- Set the test mask to 11110011.\n\t-- Any time a pixel is read out of the stencil buffer it will be bitwise ANDed with this mask.\n\trender.SetStencilTestMask( 0xF3 )\n\t-- Set the reference value to 00011100 & 01010101 & 11110011\n\trender.SetStencilReferenceValue( 0x10 )\n\t-- Pass if the masked buffer value matches the unmasked reference value\n\trender.SetStencilCompareFunction( STENCIL_EQUAL )\n\n\t-- Draw our entities\n\trender.ClearBuffersObeyStencil( 0, 148, 133, 255, false )\n\n\t-- Let everything render normally again\n\trender.SetStencilEnable( false )\nend )"},{"description":"A somewhat more complicated mask example (from \n[Lex's Stencil Tutorial](https://github.com/Lexicality/stencil-tutorial)).","code":"hook.Add( \"PostDrawOpaqueRenderables\", \"Stencil Tutorial Example\", function()\n\t--[[\n        To understand this tutorial you need to already understand the basics\n         of binary and bitwise operations.\n\n        It would also help to understand hexadecimal notation, since Lua\n         doesn't have a bitmask input, but I will include binary notation in\n         comments to help.\n\t--]]\n\n\t-- Reset everything to known good\n\trender.SetStencilWriteMask( 0xFF )\n\trender.SetStencilTestMask( 0xFF )\n\trender.SetStencilReferenceValue( 0 )\n\trender.SetStencilCompareFunction( STENCIL_ALWAYS )\n\trender.SetStencilPassOperation( STENCIL_KEEP )\n\trender.SetStencilFailOperation( STENCIL_KEEP )\n\trender.SetStencilZFailOperation( STENCIL_KEEP )\n\trender.ClearStencil()\n\n\t-- Enable stencils\n\trender.SetStencilEnable( true )\n\n\t-- Only write to the upper 4 bits of the stencil buffer\n\trender.SetStencilWriteMask( 0xF0 )\n\t-- Wipe the stencil buffer to be 0001111. This is not affected by the write mask.\n\trender.ClearStencilBufferRectangle( 0, 0, ScrW(), ScrH(), 0x0F )\n\n\t-- Always fail\n\trender.SetStencilCompareFunction( STENCIL_NEVER )\n\t-- Don't read any bits from the stencil buffer\n\trender.SetStencilTestMask( 0x00 )\n\t-- When an operation fails, read the current value from the stencil buffer, add\n\t--  one to it and then write it back to the buffer\n\t-- This is not affected by the test mask, but it is affected by the write mask\n\t-- This means we will read 00001111, then write 00010000.\n\t-- However, due to the write mask, this won't affect the last four bits already\n\t--  in the buffer, resulting in 00011111.\n\trender.SetStencilFailOperation( STENCIL_INCR )\n\n\t-- Add something interesting to the stencil buffer\n\tfor _, ent in ipairs( ents.FindByClass( \"prop_physics\" ) ) do\n\t\tent:DrawModel()\n\tend\n\n\t-- Go back to reading the full value from the stencil buffer\n\trender.SetStencilTestMask( 0xFF )\n\t-- Set the reference value to 00011111\n\trender.SetStencilReferenceValue( 0x1F )\n\t-- Render the result\n\trender.SetStencilCompareFunction( STENCIL_EQUAL )\n\trender.ClearBuffersObeyStencil( 0, 148, 133, 255, false )\n\n\t-- Let everything render normally again\n\trender.SetStencilEnable( false )\nend )"}],"realms":["Client"],"type":"Function"},
{"function":{"name":"SetStencilZFailOperation","parent":"render","type":"libraryfunc","description":"Sets the operation to be performed on the stencil buffer values if the stencil test is passed but the depth buffer test fails.","realm":"Client","args":{"arg":{"text":"Z fail operation function, see Enums/STENCILOPERATION","name":"zFailOperation","type":"number"}}},"example":{"description":"This shows how to reveal hidden sections of entities, wallhack style (from \n[Lex's Stencil Tutorial](https://github.com/Lexicality/stencil-tutorial)).","code":"hook.Add( \"PostDrawOpaqueRenderables\", \"Stencil Tutorial Example\", function()\n\t-- Reset everything to known good\n\trender.SetStencilWriteMask( 0xFF )\n\trender.SetStencilTestMask( 0xFF )\n\trender.SetStencilReferenceValue( 0 )\n\trender.SetStencilCompareFunction( STENCIL_ALWAYS )\n\trender.SetStencilPassOperation( STENCIL_KEEP )\n\trender.SetStencilFailOperation( STENCIL_KEEP )\n\trender.SetStencilZFailOperation( STENCIL_KEEP )\n\trender.ClearStencil()\n\n\t-- Enable stencils\n\trender.SetStencilEnable( true )\n\t-- Set the reference value to 1. This is what the compare function tests against\n\trender.SetStencilReferenceValue( 1 )\n\t-- Always draw everything\n\trender.SetStencilCompareFunction( STENCIL_ALWAYS )\n\t-- If something would draw to the screen but is behind something, set the pixels it draws to 1\n\trender.SetStencilZFailOperation( STENCIL_REPLACE )\n\n\t-- Draw our entities. They will draw as normal\n\tfor _, ent in ipairs( ents.FindByClass( \"prop_physics\" ) ) do\n\t\tent:DrawModel()\n\tend\n\n\t-- Now, only draw things that have their pixels set to 1. This is the hidden parts of the stencil tests.\n\trender.SetStencilCompareFunction( STENCIL_EQUAL )\n\t-- Flush the screen. This will draw teal over all hidden sections of the stencil tests\n\trender.ClearBuffersObeyStencil( 0, 148, 133, 255, false )\n\n\t-- Let everything render normally again\n\trender.SetStencilEnable( false )\nend )","output":{"image":{"src":"basic_zfail_operation.jpg","alt":"800px"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetToneMappingScaleLinear","parent":"render","type":"libraryfunc","realm":"Client","args":{"arg":{"name":"vec","type":"Vector"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetWriteDepthToDestAlpha","parent":"render","type":"libraryfunc","description":"Sets the internal parameter **INT_RENDERPARM_WRITE_DEPTH_TO_DESTALPHA**","realm":"Client","args":{"arg":{"name":"enable","type":"boolean"}}},"example":{"description":"Draws a \"masked\" texture.","code":"-- Give the RT a size\nlocal TEX_SIZE = 512\n\n-- Create the RT\nlocal tex = GetRenderTargetEx( \"ExampleMaskRT\", TEX_SIZE, TEX_SIZE, RT_SIZE_OFFSCREEN,\n\t\t MATERIAL_RT_DEPTH_SHARED --[[IMPORTANT]], 0, 0, IMAGE_FORMAT_RGBA8888 )\n\n-- Create a translucent render-able material for our render target\nlocal myMat = CreateMaterial( \"ExampleMaskRTMat\", \"UnlitGeneric\", {\n\t[\"$basetexture\"] = tex:GetName(), -- Make the material use our render target texture\n\t[\"$translucent\"] = \"1\" -- make the drawn material transparent\n} )\n\nlocal txBackground = Material( \"models/weapons/v_toolgun/screen_bg\" )\nlocal mask = Material( \"gui/gradient_down\" )\n\n--[[\nA few words on the mask image. When creating a custom mask image, it must have an alpha channel which dictates\nwhat pixels to draw and which not to. The visual color should be all white for this example to work.\nHaving lets say a red color mask would tint the final image red.\n]]\n\nfunction RenderMaskedRT()\n-- Draw the \"background\" image\n\tsurface.SetDrawColor( color_white )\n\tsurface.SetMaterial( txBackground )\n\tsurface.DrawTexturedRect( 0, 0, TEX_SIZE, TEX_SIZE )\n\t-- Animate the background for fun\n\tsurface.DrawTexturedRectRotated( TEX_SIZE / 2, TEX_SIZE / 2, TEX_SIZE, TEX_SIZE, CurTime() * 20 )\n\n-- Draw the actual mask\nrender.SetWriteDepthToDestAlpha( false )\n\trender.OverrideBlend( true, BLEND_SRC_COLOR, BLEND_SRC_ALPHA, BLENDFUNC_MIN )\n\t\tsurface.SetMaterial( mask )\n\t\tsurface.DrawTexturedRect( 0, 0, TEX_SIZE, TEX_SIZE )\n\trender.OverrideBlend( false )\nrender.SetWriteDepthToDestAlpha( true )\nend\n\n-- Draw it on screen\nhook.Add( \"HUDPaint\", \"DrawExampleMaskMat\", function()\n\t-- Render animated stuff to the render target\n\trender.PushRenderTarget( tex )\n\tcam.Start2D()\n\t\trender.Clear( 0, 0, 0, 0 )\n\t\tRenderMaskedRT()\n\tcam.End2D()\n\trender.PopRenderTarget()\n\n\t-- This is just for debugging, to see what it looks like without the mask\n\t-- RenderMaskedRT()\n\n\t-- Actually draw the Render Target to see the final result.\n\tsurface.SetDrawColor( color_white )\n\tsurface.SetMaterial( myMat )\n\tsurface.DrawTexturedRect( 520, 0, TEX_SIZE, TEX_SIZE )\nend )","output":{"upload":{"src":"70c/8d7ba1c1119faa7.png","size":"226575","name":"image.png"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Spin","parent":"render","type":"libraryfunc","description":"Swaps the frame buffers/cycles the frame. In other words, this updates the screen.\n\nIf you take a really long time during a single frame render, it is a good idea to use this and let the user know that the game isn't stuck.","realm":"Client"},"example":{"description":"Code from [Super DOF](https://github.com/garrynewman/garrysmod/blob/master/garrysmod/lua/postprocess/super_dof.lua#L219-L236); Push the current progress of rendering onto the screen and display a percentage of completion near the bottom right.","code":"-- Restore RT\nrender.SetRenderTarget( OldRT )\n\n-- Render our result buffer to the screen\nmatFSB:SetFloat( \"$alpha\", 1 )\nmatFSB:SetTexture( \"$basetexture\", texFSB )\n\nrender.SetMaterial( matFSB )\nrender.DrawScreenQuad()\n\ncam.Start2D()\n\tlocal add = ( i / ( math.pi*2 ) ) * ( 1 / passes )\n\tlocal percent = string.format( \"%.1f\", ( mul - ( 1 / passes ) + add ) * 100 )\n\tdraw.DrawText( percent .. \"%\", \"GModWorldtip\", view.w - 100, view.h - 100, Color( 0, 0, 0, 255 ), TEXT_ALIGN_CENTER )\n\tdraw.DrawText( percent .. \"%\", \"GModWorldtip\", view.w - 101, view.h - 101, Color( 255, 255, 255, 255 ), TEXT_ALIGN_CENTER )\ncam.End2D()\n\nrender.Spin()","output":{"image":{"src":"Super_DoF_Render_Spin.gif"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetViewPort","parent":"render","type":"libraryfunc","description":{"text":"Changes the view port position and size. The values will be clamped to the game's screen resolution.\n\nIf you are looking to render something to a texture (render target), you should use render.PushRenderTarget.","note":"This function will override values of Global.ScrW and Global.ScrH with the ones you set."},"realm":"Client","args":{"arg":[{"text":"X origin of the view port.","name":"x","type":"number"},{"text":"Y origin of the view port.","name":"y","type":"number"},{"text":"Width of the view port.","name":"w","type":"number"},{"text":"Height of the view port.","name":"h","type":"number"}]}},"example":{"description":"Renders a screen with a dimension of 32 X 32 and resets the render system to normal.","code":"local oldW, oldH = ScrW(), ScrH()\nlocal oldRT = render.GetRenderTarget()\n\nrender.SetRenderTarget(RTName)\nrender.Clear(0,0,0,255)\nrender.SetViewPort(0,0,32,32)\n\trender.RenderView(CamData)\nrender.SetRenderTarget(oldRT)\nrender.SetViewPort(0,0,oldW,oldH)"},"realms":["Client"],"type":"Function"},
{"function":{"name":"StartBeam","parent":"render","type":"libraryfunc","description":{"text":"Start a new beam draw operation.","rendercontext":{"hook":"false","type":"3D"}},"realm":"Client","args":{"arg":{"text":"Amount of beam segments that are about to be drawn.","name":"segmentCount","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SupportsPixelShaders_1_4","parent":"render","type":"libraryfunc","description":"Returns if the current settings and the system allow the usage of pixel shaders 1.4.","realm":"Client","rets":{"ret":{"text":"Whether Pixel Shaders 1.4 are supported or not.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SupportsPixelShaders_2_0","parent":"render","type":"libraryfunc","description":"Returns if the current settings and the system allow the usage of pixel shaders 2.0.","realm":"Client","rets":{"ret":{"text":"Whether Pixel Shaders 2.0 are supported or not.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SupportsHDR","parent":"render","type":"libraryfunc","description":"Returns whether the player's hardware supports HDR. (High Dynamic Range) HDR can still be disabled by the `mat_hdr_level` console variable or just not be supported by the map.","realm":"Client","rets":{"ret":{"text":"`true` if the player's hardware supports HDR.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SupportsVertexShaders_2_0","parent":"render","type":"libraryfunc","description":"Returns if the current settings and the system allow the usage of vertex shaders 2.0.","realm":"Client","rets":{"ret":{"text":"Whether Vertex Shaders 2.0 are supported or not.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"TurnOnToneMapping","parent":"render","type":"libraryfunc","description":"Enables HDR tone mapping which influences the brightness.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SuppressEngineLighting","parent":"render","type":"libraryfunc","description":{"text":"Suppresses or enables any engine lighting for any upcoming render operation.","bug":{"text":"This does not affect IMeshes.","issue":"4070"}},"realm":"Client","args":{"arg":{"text":"True to suppress false to enable.","name":"suppressLighting","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"UpdateFullScreenDepthTexture","parent":"render","type":"libraryfunc","description":"Updates the texture returned by render.GetFullScreenDepthTexture.\n\nSilently fails if render.SupportsPixelShaders_2_0 returns false.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"UpdatePowerOfTwoTexture","parent":"render","type":"libraryfunc","description":"Updates the power of two texture.","realm":"Client","rets":{"ret":{"text":"Returns render.GetPowerOfTwoTexture.","name":"","type":"ITexture"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"UpdateRefractTexture","parent":"render","type":"libraryfunc","description":"Pretty much alias of render.UpdatePowerOfTwoTexture but does not return the texture.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddFile","parent":"resource","type":"libraryfunc","description":{"text":"Adds the specified and all related files to the files the client should download.\n\nFor convenience, this function will automatically add any other files that are related to the selected one, and throw an error if it can't find them. For example, a `.vmt` file will automatically add the `.vtf` with the same name, and a `.mdl` file will automatically add all `.vvd`, `.ani`, `.dx80.vtx`, `.dx90.vtx`, `.sw.vtx`, `.phy` and `.jpg` files with the same name, with a separate error for each missing file.\n\nIf you do not want it to do this, use resource.AddSingleFile.","warning":"There's a 8192 downloadable file limit. If you need more, consider using Workshop addons - resource.AddWorkshop. You should also consider the fact that you have way too many downloads. This limit is shared among all resource.Add functions.","note":["Running this function using a path relative to the main `garrysmod/` folder will not work for files in addons and gamemodes. Instead, the files must be added relative to their respective content folders. For example, a sound file from an addon would use the path \"sound/[FILENAME_AND_EXTENSION],\" despite the file being located in \"addons/[ADDON_NAME]/sound/[FILENAME_AND_EXTENSION]\"","The file must exist on the server or players will not download it!"]},"realm":"Server","args":{"arg":{"text":"Virtual path of the file to be added, relative to `garrysmod/`. Do not add `.bz2` to the filepath. Do not put `gamemodes/*gamemodename*/content/` or `addons/*addonname*/` into the path.","name":"path","type":"string"}}},"example":{"description":"Example of usage.","code":"resource.AddFile( \"materials/my/material.vmt\" ) -- Automatically adds materials/my/material.vtf\nresource.AddFile( \"models/my/model.mdl\" ) -- Automatically adds models/my/model.vtx and the rest\nresource.AddFile( \"sound/my/sound.wav\" ) -- Be careful, there's no S in the sound."},"realms":["Server"],"type":"Function"},
{"function":{"name":"UpdateScreenEffectTexture","parent":"render","type":"libraryfunc","description":"Copies the entire screen to the screen effect texture, which can be acquired via render.GetScreenEffectTexture. This function is mainly intended to be used in GM:RenderScreenspaceEffects","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddWorkshop","parent":"resource","type":"libraryfunc","description":{"text":"Adds a workshop addon for the client to download before entering the server.\n\nHaving the raw files from a workshop item does not count as having already downloaded it.\nSo players who previously downloaded a map through Fast Download will have to re-download it if you use the workshop.\n\nYou should try to only add addons that have custom content ( models, sounds, etc ).\n\nGamemodes that are  are automatically added to this list - so there's no need to add them.\n\n\nThe server's current map is also automatically added, if it is loaded from a workshop addon.","br":"","page":",workshop enabledGamemode_Creation#Gamemode_Text_File","warning":"This will not \"install\" the addon on your server, see Workshop for Dedicated Servers for installing Steam Workshop addons onto your servers"},"realm":"Server","file_name":"src/garrysmod/Library/gl_resource.cpp","file_line":"107","args":{"arg":{"text":"The workshop id of the file. This cannot be a collection.","name":"workshopid","type":"string"}}},"example":{"description":"Adds the Achievement Viewer addon (workshop id 104606562).\n\n\nAny clients that join will download this addon if they haven't previously downloaded it from the workshop or from the server (via the workshop).\n\nYou get the ID from the URL of the workshop addon.\n\n\nFor example, here's the URL of the Achievement Viewer addon's page:\n\n\nhttp://steamcommunity.com/sharedfiles/filedetails/?id=104606562\n\n\nThe ID is 104606562.","code":"resource.AddWorkshop( \"104606562\" )","output":"Players joining the server will now be forced to download the Achievement Viewer addon."},"realms":["Server"],"type":"Function"},
{"function":{"name":"AddSingleFile","parent":"resource","type":"libraryfunc","description":{"text":"Adds the specified file to the files the client should download.\n\nIf you wish to add textures or models, consider using resource.AddFile to add all the files required for a texture/model.","warning":"There's a 8192 downloadable file limit.","note":["If you need more than 8192, consider using Workshop addons - resource.AddWorkshop. You should also consider the fact that you have way too many downloads. This limit is shared among all resource.Add functions.","The file must exist on the server or players will not download it!"]},"realm":"Server","args":{"arg":{"text":"Path of the file to be added, relative to garrysmod/","name":"path","type":"string"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"AddRestoreHook","parent":"saverestore","type":"libraryfunc","description":"Adds a restore/load hook for the Half-Life 2 save system.","realm":"Shared","args":{"arg":[{"text":"The unique identifier for this hook.","name":"identifier","type":"string"},{"text":"The function to be called when an engine save is being loaded. It has one argument:\n\n\nIRestore save - The restore object to be used to read data from save file that is being loaded\n\n\n\n\n\nYou can also use those functions to read data:\n\n\nsaverestore.ReadVar\n\n\nsaverestore.ReadTable\n\n\nsaverestore.LoadEntity","name":"callback","type":"function"}]}},"example":{"description":"Example usage.","code":"saverestore.AddRestoreHook( \"HookNameHere\", function( save )\n\tPrintTable( saverestore.ReadTable( save ) )\nend )","output":"If you used example from saverestore.AddSaveHook\n\n```\n1 = Test\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"AddSaveHook","parent":"saverestore","type":"libraryfunc","description":"Adds a save hook for the Half-Life 2 save system. You can this to carry data through level transitions in Half-Life 2.","realm":"Shared","args":{"arg":[{"text":"The unique identifier for this hook.","name":"identifier","type":"string"},{"text":"The function to be called when an engine save is being saved. It has one argument:\n\n\nISave save - The save object to be used to write data to the save file that is being saved\n\n\n\n\n\nYou can also use those functions to save data:\n\n\nsaverestore.WriteVar\n\n\nsaverestore.WriteTable\n\n\nsaverestore.SaveEntity","name":"callback","type":"function"}]}},"example":{"description":"Example usage.","code":"saverestore.AddSaveHook( \"HookNameHere\", function( save )\n\tsaverestore.WriteTable( { \"test\" }, save )\nend )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"PreRestore","parent":"saverestore","type":"libraryfunc","description":{"text":"Called by the engine just before saverestore.LoadGlobal is.","internal":""},"realm":"Shared"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"LoadEntity","parent":"saverestore","type":"libraryfunc","description":"Loads Entity:GetTable from the save game file that is being loaded and merges it with the given entitys Entity:GetTable.","realm":"Shared","args":{"arg":[{"text":"The entity which will receive the loaded values from the save.","name":"ent","type":"Entity"},{"text":"The restore object to read the Entity:GetTable from.","name":"save","type":"IRestore"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"LoadGlobal","parent":"saverestore","type":"libraryfunc","description":{"text":"Called by engine when a save is being loaded.\n\nThis handles loading gamemode and calls all of the hooks added with saverestore.AddRestoreHook.","internal":""},"realm":"Shared","args":{"arg":{"text":"The restore object to read data from the save file with.","name":"save","type":"IRestore"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ReadTable","parent":"saverestore","type":"libraryfunc","description":"Reads a table from the save game file that is being loaded.","realm":"Shared","args":{"arg":{"text":"The restore object to read the table from.","name":"save","type":"IRestore"}},"rets":{"ret":{"text":"The table that has been read, if any","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"PreSave","parent":"saverestore","type":"libraryfunc","description":{"text":"Called by the engine just before saverestore.SaveGlobal is.","internal":""},"realm":"Shared"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ReadVar","parent":"saverestore","type":"libraryfunc","description":"Loads a variable from the save game file that is being loaded.\n\nVariables will be read in the save order you have saved them.","realm":"Shared","args":{"arg":{"text":"The restore object to read variables from.","name":"save","type":"IRestore"}},"rets":{"ret":{"text":"The variable that was read, if any.","name":"","type":"any"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SaveEntity","parent":"saverestore","type":"libraryfunc","description":"Saves entitys Entity:GetTable to the save game file that is being saved.","realm":"Shared","args":{"arg":[{"text":"The entity to save Entity:GetTable of.","name":"ent","type":"Entity"},{"text":"The save object to save Entity:GetTable to.","name":"save","type":"ISave"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SaveGlobal","parent":"saverestore","type":"libraryfunc","description":{"text":"Called by engine when a save is being saved.\n\nThis handles saving gamemode and calls all of the hooks added with saverestore.AddSaveHook.","internal":""},"realm":"Shared","args":{"arg":{"text":"The save object to write data into the save file.","name":"save","type":"ISave"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"WritableKeysInTable","parent":"saverestore","type":"libraryfunc","description":"Returns how many writable keys are in the given table.","realm":"Shared","args":{"arg":{"text":"The table to test.","name":"table","type":"table"}},"rets":{"ret":{"text":"The number of keys that can be written with saverestore.WriteTable.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"WriteVar","parent":"saverestore","type":"libraryfunc","description":"Writes a variable to the save game file that is being saved.","realm":"Shared","args":{"arg":[{"text":"The value to save.\n\nIt can be one of the following types: number, boolean, string, Entity, Angle, Vector or table.","name":"value","type":"any"},{"text":"The save object to write the variable to.","name":"save","type":"ISave"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"WriteTable","parent":"saverestore","type":"libraryfunc","description":"Write a table to a save game file that is being saved.","realm":"Shared","args":{"arg":[{"text":"The table to write","name":"table","type":"table"},{"text":"The save object to write the table to.","name":"save","type":"ISave"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Alias","parent":"scripted_ents","type":"libraryfunc","file":{"text":"lua/includes/modules/scripted_ents.lua","line":"253-L257"},"description":"Defines an alias string that can be used to refer to another classname","realm":"Shared","args":{"arg":[{"text":"A new string which can be used to refer to another classname","name":"alias","type":"string"},{"text":"The classname the alias should refer to","name":"classname","type":"string"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetList","parent":"scripted_ents","type":"libraryfunc","file":{"text":"lua/includes/modules/scripted_ents.lua","line":"225-L233"},"description":"Returns a copy of the list of all ENT tables registered","realm":"Shared","rets":{"ret":{"text":"A table of all entities in the following format: (table keys are the classnames)\n* table t - The  table associated with the entity\n* boolean isBaseType - Always true\n* string Base - The entity base (note capital B in the key name)\n* string type - The entity type","name":"","type":"table","page":",ENTStructures/ENT"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetMember","parent":"scripted_ents","type":"libraryfunc","file":{"text":"lua/includes/modules/scripted_ents.lua","line":"259-L275"},"description":"Retrieves a member of entity's table.","realm":"Shared","args":{"arg":[{"text":"Entity's class name","name":"class","type":"string"},{"text":"Name of member to retrieve","name":"name","type":"string"}]},"rets":{"ret":{"text":"The member or nil if failed","name":"","type":"any"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Get","parent":"scripted_ents","type":"libraryfunc","file":{"text":"lua/includes/modules/scripted_ents.lua","line":"156-L190"},"description":"Returns a copy of the ENT table for a class, including functions defined by the base class","realm":"Shared","args":{"arg":{"text":"The classname of the ENT table to return, can be an alias","name":"classname","type":"string"}},"rets":{"ret":{"text":"entTable","name":"","type":"table"}}},"example":{"description":"Use of PrintTable function to print the contents of base_entity SENT table.","code":"PrintTable(scripted_ents.Get(\"base_entity\"))","output":"```\nAdminOnly\t=\tfalse\nBase\t=\tbase_entity\nClassName\t=\tbase_entity\nFolder\t=\tentities/base_entity\nInitialize\t=\tfunction: 0x2a205b50\nOnRestore\t=\tfunction: 0x2a6d4b90\nSpawnable\t=\tfalse\nThink\t=\tfunction: 0x2a153780\nType\t=\tanim\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetSpawnable","parent":"scripted_ents","type":"libraryfunc","file":{"text":"lua/includes/modules/scripted_ents.lua","line":"235-L251"},"description":"Returns a list of all ENT tables which contain ENT.Spawnable","realm":"Shared","rets":{"ret":{"text":"A table of Structures/ENTs","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetStored","parent":"scripted_ents","type":"libraryfunc","file":{"text":"lua/includes/modules/scripted_ents.lua","line":"217-L219"},"description":"Returns the actual ENT table for a class. Modifying functions/variables in this table will change newly spawned entities","realm":"Shared","args":{"arg":{"text":"The classname of the ENT table to return","name":"classname","type":"string"}},"rets":{"ret":{"text":"entTable","name":"","type":"table"}}},"example":{"description":"Modifies all newly spawned gmod_button's to print a message on use","code":"local ENT = scripted_ents.GetStored(\"gmod_button\").t\nlocal oldUse = ENT.Use\nfunction ENT:Use(activator, caller, type, value)\n print(tostring(self.Entity)..\" just got pressed!\")\n oldUse(self,activator, caller, type, value)\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetType","parent":"scripted_ents","type":"libraryfunc","file":{"text":"lua/includes/modules/scripted_ents.lua","line":"192-L211"},"description":"Returns the 'type' of a class, this will one of the following: 'anim', 'ai', 'brush', 'point'.","realm":"Shared","args":{"arg":{"text":"The classname to check","name":"classname","type":"string"}},"rets":{"ret":{"text":"type","name":"","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsBasedOn","parent":"scripted_ents","type":"libraryfunc","file":{"text":"lua/includes/modules/scripted_ents.lua","line":"44-L51"},"description":"Checks if name is based on base","realm":"Shared","args":{"arg":[{"text":"Entity's class name to be checked","name":"name","type":"string"},{"text":"Base class name to be checked","name":"base","type":"string"}]},"rets":{"ret":{"text":"Returns true if class name is based on base, else false.","name":"","type":"boolean"}}},"example":{"description":"See if gmod_hands is based on base_anim.","code":"print(scripted_ents.IsBasedOn(\"gmod_hands\", \"base_anim\"))","output":"true"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetResults","parent":"search","type":"libraryfunc","description":"Retrieves search results.","realm":"Client","args":{"arg":[{"text":"Search query","name":"query","type":"string"},{"text":"If set, only searches given provider type(s), instead of everything. For example `\"tool\"` will only search tools in Sandbox. Can be a table for multiple types.","name":"types","type":"string","default":"nil"},{"text":"How many results to stop at","name":"maxResults","type":"number","default":"1024"}]},"rets":{"ret":{"text":"A table of results","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddProvider","parent":"search","type":"libraryfunc","description":"Adds a search result provider. For examples, see gamemodes/sandbox/gamemode/cl_search_models.lua","realm":"Client","args":{"arg":[{"text":"Provider function. It has one argument: string searchQuery\nYou must return a list of tables structured like this:\n* string text - Text to \"Copy to clipboard\"\n* function func - Function to use/spawn the item\n* Panel icon - A panel to add to spawnmenu\n* table words - A table of words?","name":"provider","type":"function"},{"text":"If provided, ensures that only one provider exists with the given ID at a time.","name":"id","type":"string","default":"nil"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnLoaded","parent":"scripted_ents","type":"libraryfunc","file":{"text":"lua/includes/modules/scripted_ents.lua","line":"141-L154"},"description":{"text":"Called after all ENTS have been loaded and runs baseclass.Set on each one.\n\nYou can retrieve all the currently registered ENTS with scripted_ents.GetList.","internal":"","note":"This is not called after an ENT auto refresh, and thus the inherited baseclass functions retrieved with baseclass.Get will not be updated"},"realm":"Shared"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Register","parent":"scripted_ents","type":"libraryfunc","file":{"text":"lua/includes/modules/scripted_ents.lua","line":"53-L136"},"description":{"text":"Registers an ENT table with a classname. Reregistering an existing classname will automatically update the functions of all existing entities of that class.","bug":{"text":"Sub-tables provided in the first argument will not carry over their metatable, and will receive a BaseClass key if the table was merged with the base's. Userdata references, which includes Vectors, Angles, Entities, etc. will not be copied.","pull":"1300"}},"realm":"Shared","args":{"arg":[{"text":"The ENT table to register.","name":"ENT","type":"table"},{"text":"The classname to register.","name":"classname","type":"string"}]}},"example":{"code":"local ENT = scripted_ents.Get( \"gmod_button\" )\nlocal oldUse = ENT.Use\n\nfunction ENT:Use( activator, caller, type, value )\n\tprint( tostring( self.Entity ) .. \" just got pressed!\" )\n\toldUse( self, activator, caller, type, value )\nend\n\nscripted_ents.Register( ENT, \"gmod_button\" )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"PlayerList","parent":"serverlist","type":"libraryfunc","description":"Queries a server for its player list.","realm":"Menu","args":{"arg":[{"text":"The IP address of the server, including the port.","name":"ip","type":"string"},{"text":"The function to be called if and when the request finishes. Function has one argument, a table containing tables with player info. \n\nEach table with player info has next fields:\n\n\nnumber time - The amount of time the player is playing on the server, in seconds\n\n\nstring name - The player name\n\n\nnumber score - The players score","name":"callback","type":"function"}]}},"realms":["Menu"],"type":"Function"},
{"function":{"name":"AddCurrentServerToFavorites","parent":"serverlist","type":"libraryfunc","description":{"text":"Adds current server the player is on to their favorites.","internal":""},"realm":"Menu"},"realms":["Menu"],"type":"Function"},
{"function":{"name":"PingServer","parent":"serverlist","type":"libraryfunc","description":"Queries a server for its information/ping.","realm":"Menu","added":"2021.01.27","args":{"arg":[{"text":"The IP address of the server, including the port.","name":"ip","type":"string"},{"text":"The function to be called if and when the request finishes. Function has the same arguments as the callback of serverlist.Query.","name":"callback","type":"function"}]}},"realms":["Menu"],"type":"Function"},
{"function":{"name":"Add","parent":"sound","type":"libraryfunc","description":"Creates a sound script. It can also override sounds, which seems to only work when set on the server.","realm":"Shared","args":{"arg":{"text":"The sounds properties. See Structures/SoundData","name":"soundData","type":"table"}}},"example":{"description":"Creates a sound script. It will automatically vary in pitch and be played in a given audio channel to better control which sounds mix with which sounds and how.\n\nIn this example, the file location could be: (Choose one)\n* garrysmod/sound/`phx/explode03.wav`\n* garrysmod/gamemodes/MyCoolGameMode/content/sound/`phx/explode03.wav`\n* garrysmod/addons/myCoolAddon/sound/`phx/explode03.wav`\n* garrysmod/addons/myCoolAddon/gamemodes/MyCoolGameMode/content/sound/`phx/explode03.wav`","code":"sound.Add( {\n\tname = \"big_explosion\",\n\tchannel = CHAN_STATIC,\n\tvolume = 1.0,\n\tlevel = 80,\n\tpitch = {95, 110},\n\tsound = \"phx/explode03.wav\"\n} )","output":"You can now play your custom **sound script** with Entity:EmitSound like so:\n\n```\nEntity( 1 ):EmitSound( \"big_explosion\" )\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"AddSoundOverrides","parent":"sound","type":"libraryfunc","description":"Overrides sounds defined inside of a txt file; typically used for adding map-specific sounds.","realm":"Shared","args":{"arg":{"text":"Path to the script file to load.","name":"filepath","type":"string"}}},"example":{"description":"Adds and overrides all sounds defined in scripts/override_test.txt","code":"sound.AddSoundOverrides(\"scripts/override_test.txt\")","output":"```\nSoundEmitter:  adding map sound overrides from scripts/override_test.txt [1 total, 1 replacements, 0 duplicated replacements]\n```\n\n(Displayed in the console)"},"realms":["Menu"],"type":"Function"},
{"function":{"name":"AddSoundOverrides","parent":"sound","type":"libraryfunc","description":"Overrides sounds defined inside of a txt file; typically used for adding map-specific sounds.","realm":"Shared","args":{"arg":{"text":"Path to the script file to load.","name":"filepath","type":"string"}}},"example":{"description":"Adds and overrides all sounds defined in scripts/override_test.txt","code":"sound.AddSoundOverrides(\"scripts/override_test.txt\")","output":"```\nSoundEmitter:  adding map sound overrides from scripts/override_test.txt [1 total, 1 replacements, 0 duplicated replacements]\n```\n\n(Displayed in the console)"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"EmitHint","parent":"sound","type":"libraryfunc","description":"Emits a sound hint to the game elements to react to, for example to repel or attract antlions.","realm":"Server","added":"2020.10.14","args":{"arg":[{"text":"The hint to emit. See Enums/SOUND","name":"hint","type":"number"},{"text":"The position to emit the hint at","name":"pos","type":"Vector"},{"text":"The volume or radius of the hint","name":"volume","type":"number"},{"text":"The duration of the hint in seconds","name":"duration","type":"number"},{"name":"owner","type":"Entity","default":"NULL"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Generate","parent":"sound","type":"libraryfunc","description":{"text":"Creates a sound from a function.","bug":[{"text":"This function cannot generate sounds that have a duration of less than 1 second.","issue":"3360"},{"text":"Sounds persist between disconnects.","issue":"4082"}]},"realm":"Client","args":{"arg":[{"text":"An unique identified for the sound.","name":"indentifier","type":"string","warning":"You cannot override already existing ones."},{"text":"The sample rate of the sound. Must be `11025`, `22050` or `44100`.","name":"samplerate","type":"number"},{"text":"The length in seconds of the sound to generate.","name":"length","type":"number"},{"text":"A function which will be called to generate every sample on the sound. This function gets the current sample number passed as the first argument. The return value must be between `-1.0` and `1.0`. Other values will wrap back to the -1 to 1 range and basically clip. There are **65535** possible quantifiable values between -1 and 1.","name":"callback","type":"function"}]}},"example":{"description":"Plays a 2000 Hz sine wave at maximum volume.","code":"local frequency = 2000 -- Hz\nlocal samplerate = 44100\n\nlocal function data( t )\n    return math.sin( t * math.pi * 2 / samplerate * frequency )\nend\n\ntest_sound_id = test_sound_id and test_sound_id + 1 or 10\n\nsound.Generate( \"testgen\" .. test_sound_id, samplerate, 2, data )\nsurface.PlaySound( \"testgen\" .. test_sound_id )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetProperties","parent":"sound","type":"libraryfunc","description":"Returns properties of the soundscript.","realm":"Shared","args":{"arg":{"text":"The name of the sound script","name":"name","type":"string"}},"rets":{"ret":{"text":"The properties of the soundscript. See Structures/SoundData","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetTable","parent":"sound","type":"libraryfunc","description":"Returns a list of all registered sound scripts.","realm":"Shared","rets":{"ret":{"text":"The list/array of all registered sound scripts ( No other information is provided )","name":"","type":"table"}}},"example":{"description":"Writes all the sound scripts to a file in the data folder for easy searching.","code":"file.Write(\"soundscripts.txt\",table.concat(sound.GetTable(),\"\\n\"))","output":"data/soundscripts.txt:\n\n\n```\n...\nEvent.HostageKilled\nPhxMetal.ImpactHard\nPhxMetal.ImpactSoft\nEpicMetal.ImpactHard\nEpicMetal.ImpactSoft\nEpicMetal_Heavy.ImpactHard\nEpicMetal_Heavy.ImpactSoft\nEgg.Crack\nPhx.HoverLight\nPhx.HoverStandard\nPhx.HoverHeavy\nPhx.Afterburner1\nPhx.Afterburner2\nPhx.Afterburner3\nPhx.Afterburner4\nPhx.Afterburner5\nPhx.Turbine\nPhx.Alien1\nPhx.Alien2\nPhx.Jet1\nPhx.Jet2\nPhx.Jet3\nPhx.Jet4\nPhx_Rubber_Tire.Strain\nExplo.ww2bomb\nAI_BaseNPC.BodyDrop_Heavy\nAI_BaseNPC.BodyDrop_Light\nAI_BaseNPC.SwishSound\nAI_BaseNPC.SentenceStop\nBaseCombatCharacter.CorpseGib\nBaseCombatCharacter.StopWeaponSounds\nBaseCombatCharacter.AmmoPickup\n...\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Play","parent":"sound","type":"libraryfunc","description":"Plays a sound from the specified position in the world.\nIf you want to play a sound without a position, such as a UI sound, use surface.PlaySound instead.","realm":"Shared","args":{"arg":[{"text":"A string path to the sound.","name":"Name","type":"string"},{"text":"A vector describing where the sound should play.","name":"Pos","type":"Vector"},{"text":"Sound level in decibels. 75 is normal. Ranges from 20 to 180, where 180 is super loud. This affects how far away the sound will be heard.","name":"Level","type":"number"},{"text":"An integer describing the sound pitch. Range is from 0 to 255. 100 is normal pitch.","name":"Pitch","type":"number"},{"text":"A float ranging from 0-1 describing the output volume of the sound.","name":"Volume","type":"number"}]}},"example":{"description":"Plays an explosion sound at the (0, 0, 0) map coordinates.","code":"sound.Play( \"ambient/explosions/exp1.wav\", Vector(0, 0, 0) )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"PlayFile","parent":"sound","type":"libraryfunc","description":{"text":"Plays a file from GMod directory. You can find a list of all error codes [here](http://www.un4seen.com/doc/#bass/BASS_ErrorGetCode.html)\n\nFor external file/stream playback, see sound.PlayURL.","bug":[{"text":"This fails for looping .wav files in 3D mode.","issue":"1752"},{"text":"This fails with unicode file names.","issue":"2304"}]},"realm":"Client","args":{"arg":[{"text":"The path to the file to play.\n\nUnlike other sound functions and structures, the path is relative to `garrysmod/` instead of `garrysmod/sound/`","name":"path","type":"string"},{"text":"Flags for the sound. Can be one or more of following, separated by a space (\" \"):\n* 3d - Makes the sound 3D, so you can set its position\n* mono - Forces the sound to have only one channel\n* noplay - Forces the sound not to play as soon as this function is called\n* noblock - Disables streaming in blocks. It is more resource-intensive, but it is required for IGModAudioChannel:SetTime.\n\n\n\n\nIf you don't want to use any of the above, you can just leave it as \"\".","name":"flags","type":"string"},{"text":"Callback function that is called as soon as the the stream is loaded. It has next arguments:\n* IGModAudioChannel soundchannel - The sound channel. Will be nil if an error occured.\n* number errorID - ID of an error if an error has occured. Will be nil, otherwise.\n* string errorName - Name of an error if an error has occured. Will be nil, otherwise.","name":"callback","type":"function"}]}},"example":{"description":"Plays a piece of music from Half-Life 2.","code":"sound.PlayFile( \"sound/music/hl2_song12_long.mp3\", \"noplay\", function( station, errCode, errStr )\n\tif ( IsValid( station ) ) then\n\t\tstation:Play()\n\telse\n\t\tprint( \"Error playing sound!\", errCode, errStr )\n\tend\nend )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"ActivateTool","parent":"spawnmenu","type":"libraryfunc","description":"Activates a tool, opens context menu and brings up the tool gun.","realm":"Client","args":{"arg":[{"text":"Tool class/file name","name":"tool","type":"string"},{"text":"Should we activate this tool in the menu only or also the toolgun? `true` = menu only,`false` = toolgun aswell","name":"menu_only","type":"boolean"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ActivateTool","parent":"spawnmenu","type":"libraryfunc","description":"Activates a tool, opens context menu and brings up the tool gun.","realm":"Client","args":{"arg":[{"text":"Tool class/file name","name":"tool","type":"string"},{"text":"Should we activate this tool in the menu only or also the toolgun? `true` = menu only,`false` = toolgun aswell","name":"menu_only","type":"boolean"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ActivateToolPanel","parent":"spawnmenu","type":"libraryfunc","description":"Activates tools context menu in specified tool tab.","realm":"Client","args":{"arg":[{"text":"The tabID of the tab to open the context menu in","name":"tab","type":"number"},{"text":"The control panel to open","name":"cp","type":"Panel"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ActiveControlPanel","parent":"spawnmenu","type":"libraryfunc","description":"Returns currently opened control panel of a tool, post process effect or some other menu in spawnmenu.","realm":"Client","rets":{"ret":{"text":"The currently opened control panel, if any.","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddCreationTab","parent":"spawnmenu","type":"libraryfunc","description":"Inserts a new tab into the CreationMenus table, which will be used by the creation menu to generate its tabs (Spawnlists, Weapons, Entities, etc.)","realm":"Client","args":{"arg":[{"text":"What text will appear on the tab (I.E Spawnlists).","name":"name","type":"string"},{"text":"The function called to generate the content of the tab.","name":"function","type":"function"},{"text":"Path to the material that will be used as an icon on the tab.","name":"material","type":"string","default":"icon16/exclamation.png"},{"text":"The order in which this tab should be shown relative to the other tabs on the creation menu.","name":"order","type":"number","default":"1000"},{"text":"The tooltip to be shown for this tab.","name":"tooltip","type":"string","default":"nil"}]}},"example":{"description":"An excerpt from the Dupe creation menu tab.","code":"spawnmenu.AddCreationTab( \"#spawnmenu.category.dupes\", function()\n\n    HTML = vgui.Create( \"DHTML\" );\n        JS_Language( HTML )\n        HTML:SetAllowLua( true );\n        HTML:OpenURL( \"asset://garrysmod/html/dupes.html\" );\n        HTML:Call( \"SetDupeSaveState( \" .. tostring( DupeInClipboard ).. \" );\" );        \n\n    return HTML\n\nend, \"icon16/control_repeat_blue.png\", 200 )","output":"A new tab named \"Dupes\" will be placed in the creation menu."},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddContentType","parent":"spawnmenu","type":"libraryfunc","description":"Registers a new content type that is saveable into spawnlists.\nCreated/called by spawnmenu.CreateContentIcon.","realm":"Client","args":{"arg":[{"text":"An unique name of the content type.","name":"name","type":"string"},{"text":"A function that is called whenever we need create a new panel for this content type.\n\nIt has two arguments:\n\n\nPanel container - The container/parent of the new panel\n\n\ntable data - Data for the content type passed from spawnmenu.CreateContentIcon","name":"constructor","type":"function"}]}},"example":{"description":"A simple header content type.","code":"spawnmenu.AddContentType( \"header\", function( container, obj )\n\n\tif ( !obj.text or type(obj.text) != \"string\" ) then return end\n\n\tlocal label = vgui.Create( \"ContentHeader\", container )\n\tlabel:SetText( obj.text )\n\t\n\tcontainer:Add( label )\n\t\nend )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddPropCategory","parent":"spawnmenu","type":"libraryfunc","description":{"text":"Used to add addon spawnlists to the spawnmenu tree. This function should be called within SANDBOX:PopulatePropMenu.\n\nAddon spawnlists will not save to disk if edited.","warning":"You should never try to modify player customized spawnlists!"},"realm":"Client","args":{"arg":[{"text":"A unique classname of the list.","name":"classname","type":"string"},{"text":"The name of the category displayed to the player, e.g. `Comic Props`.","name":"name","type":"string"},{"text":"A table of entries for the spawn menu. It must be numerically indexed.\n\nEach member of the table is a sub-table containing a type member, and other members depending on the type.\n\nNew content types can be added via spawnmenu.AddContentType.\n\n| string type | Description | Other members |\n| ------------- | ---------- | ----------------- |\n| \"header\" | a simple header for organization | string text - The text that the header will display |\n| \"model\" | spawns a model where the player is looking | string model - The path to the model file \t number skin - The skin for the model to use (optional)  string body - The bodygroups for the model (optional)  number wide - The width of the spawnicon (optional)  number tall - The height of the spawnicon (optional) |\n| \"entity\" | spawns an entity where the player is looking(appears in the Entities tab by default) | string spawnname - The filename of the entity, for example \"sent_ball\"  string nicename - The name of the entity to display  string material - The icon to display, this should be set to \"entities/","name":"contents","type":"table","br":["","","","","","",""],"sent_name":{"text":".png\" \tboolean admin - Whether the entity is only spawnable by admins (optional) |\n| \"vehicle\" | spawns a vehicle where the player is looking  (appears in the Vehicles tab by default) | string spawnname - The filename of the vehicle  string nicename - The name of the vehicle to display  string material - The icon to display  boolean admin - Whether the vehicle is only spawnable by admins (optional) |\n| \"npc\" | spawns an NPC where the player is looking  (appears in the NPCs tab by default) | string spawnname - The spawn name of the NPC \tstring nicename - The name to display  string material - The icon to display  table weapon - A table of potential weapons (each a string) to give to the NPC. When spawned, one of these will be chosen randomly each time.  boolean admin - Whether the NPC is only spawnable by admins (optional) |\n| \"weapon\" | When clicked, gives the player a weapon;  When middle-clicked, spawns a weapon where the player is looking  (appears in the Weapons tab by default) |string spawnname - The spawn name of the weapon  string nicename - The name to display  string material - The icon to display  boolean admin - Whether the weapon is only spawnable by admins (optional) |","br":["","","","","","","","","","","","","","","",""]}},{"text":"The icon to use in the tree.","name":"icon","type":"string"},{"text":"The unique ID number for the spawnlist category. Used to make sub categories. See \"parentID\" parameter below. If not set, it will be automatically set to ever increasing number, starting with 1000.","name":"id","type":"number","default":"1000"},{"text":"The unique ID of the parent category. This will make the created category a subcategory of category with given unique ID. `0` makes this a base category (such as `Builder`).","name":"parentID","type":"number","default":"0"},{"text":"The needed game for this prop category, if one is needed. If the specified game is not mounted, the category isn't shown. This uses the shortcut name, e.g. `cstrike`, and not the Steam AppID.","name":"needsApp","type":"string","default":""}]}},"example":{"description":"Create a spawn menu with two icons for each type","code":"hook.Add(\"PopulatePropMenu\", \"Add Two Of Each\", function()\n\t\n\tlocal contents = {}\n\t\n\t-- Props\n\ttable.insert( contents, {\n\t\ttype = \"header\",\n\t\ttext = \"Props\"\n\t} )\n\ttable.insert( contents, {\n\t\ttype = \"model\",\n\t\tmodel = \"models/props_c17/oildrum001.mdl\"\n\t} )\n\ttable.insert( contents, {\n\t\ttype = \"model\",\n\t\tmodel = \"models/props_wasteland/cargo_container01.mdl\",\n\t\tskin = 1,\n\t\twide = 128,\n\t\ttall = 64\n\t} )\n\n\t-- Entities\n\ttable.insert( contents, {\n\t\ttype = \"header\",\n\t\ttext = \"Entities\"\n\t} )\n\ttable.insert( contents, {\n\t\ttype = \"entity\",\n\t\tspawnname = \"sent_ball\",\n\t\tnicename = \"Bouncy Ball\",\n\t\tmaterial = \"entities/sent_ball.png\"\n\t} )\n\ttable.insert( contents, {\n\t\ttype = \"entity\",\n\t\tspawnname = \"combine_mine\",\n\t\tnicename = \"Hopper Mine\",\n\t\tmaterial = \"entities/combine_mine.png\"\n\t} )\n\n\t-- Vehicles\n\ttable.insert( contents, {\n\t\ttype = \"header\",\n\t\ttext = \"Vehicles\"\n\t} )\n\ttable.insert( contents, {\n\t\ttype = \"vehicle\",\n\t\tspawnname = \"Airboat\",\n\t\tnicename = \"Half-Life 2 Airboat\",\n\t\tmaterial = \"entities/Airboat.png\"\n\t} )\n\ttable.insert( contents, {\n\t\ttype = \"vehicle\",\n\t\tspawnname = \"Chair_Office2\",\n\t\tnicename = \"Executive's Chair\",\n\t\tmaterial = \"entities/Chair_Office2.png\"\n\t} )\n\n\t-- NPCs\n\ttable.insert( contents, {\n\t\ttype = \"header\",\n\t\ttext = \"NPCs\"\n\t} )\n\ttable.insert( contents, {\n\t\ttype = \"npc\",\n\t\tspawnname = \"npc_citizen\",\n\t\tnicename = \"A random citizen\",\n\t\tmaterial = \"entities/npc_citizen.png\",\n\t\tweapon = { \"weapon_smg1\", \"weapon_crowbar\" }\n\t} )\n\ttable.insert( contents, {\n\t\ttype = \"npc\",\n\t\tspawnname = \"npc_headcrab\",\n\t\tnicename = \"Headhumper\",\n\t\tmaterial = \"entities/npc_headcrab.png\"\n\t} )\n\n\t-- Weapons\n\ttable.insert( contents, {\n\t\ttype = \"header\",\n\t\ttext = \"Weapons\"\n\t} )\n\ttable.insert( contents, {\n\t\ttype = \"weapon\",\n\t\tspawnname = \"weapon_crowbar\",\n\t\tnicename = \"Crowbar\",\n\t\tmaterial = \"entities/weapon_crowbar.png\",\n\t} )\n\ttable.insert( contents, {\n\t\ttype = \"weapon\",\n\t\tspawnname = \"weapon_smg1\",\n\t\tnicename = \"SMG\",\n\t\tmaterial = \"entities/weapon_smg1.png\",\n\t} )\n\n\tspawnmenu.AddPropCategory( \"TwoOfEach\", \"Two of each type\", contents, \"icon16/box.png\" )\nend )","output":{"image":{"src":"AddPropCategory_Two_of_each.jpeg"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ClearToolMenus","parent":"spawnmenu","type":"libraryfunc","description":"Clears all the tools from the different tool categories and the categories itself, if ran at the correct place.\n\nSeems to only work when ran at initialization.","realm":"Client"},"example":{"description":"Clear the tool menu completely, after populating it:","code":"hook.Run( \"PopulateToolMenu\" )\n\nspawnmenu.ClearToolMenus()"},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddToolMenuOption","parent":"spawnmenu","type":"libraryfunc","description":"Adds an option to the right side of the spawnmenu","realm":"Client","args":{"arg":[{"text":"The spawnmenu tab to add into (for example \"Utilities\")","name":"tab","type":"string"},{"text":"The category to add into (for example \"Admin\")","name":"category","type":"string"},{"text":"Unique identifier of option to add","name":"class","type":"string"},{"text":"The nice name of item","name":"name","type":"string"},{"text":"Command to execute when the item is selected","name":"cmd","type":"string"},{"text":"Config name, used in older versions to load tool settings UI from a file. No longer works.","name":"config","type":"string","deprecated":"Category=No"},{"text":"A function to build the context panel. The function has one argument:\n* Panel pnl - A DForm that will be shown in the context menu","name":"cpanel","type":"function"},{"text":"Allows to override the table that will be added to the tool list. Some of the fields will be overwritten by this function.","name":"table","type":"table","default":"{}"}]}},"example":{"description":"Adds a new option to the menu with a slider to change the gravity","code":"hook.Add( \"AddToolMenuCategories\", \"CustomCategory\", function()\n\tspawnmenu.AddToolCategory( \"Utilities\", \"Stuff\", \"#Stuff\" )\nend )\n\nhook.Add( \"PopulateToolMenu\", \"CustomMenuSettings\", function()\n\tspawnmenu.AddToolMenuOption( \"Utilities\", \"Stuff\", \"Custom_Menu\", \"#My Custom Menu\", \"\", \"\", function( panel )\n\t\tpanel:ClearControls()\n\t\tpanel:NumSlider( \"Gravity\", \"sv_gravity\", 0, 600 )\n\t\t-- Add stuff here\n\tend )\nend )","output":{"image":{"src":"addtoolmenuoption.png","alt":"400px"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddToolTab","parent":"spawnmenu","type":"libraryfunc","description":"Adds a new tool tab to the right side of the spawnmenu via the SANDBOX:AddToolMenuTabs hook.\n\nThis function is a inferior duplicate of spawnmenu.GetToolMenu, just without its return value.","realm":"Client","args":{"arg":[{"text":"The internal name of the tab. This is used for sorting.","name":"name","type":"string"},{"text":"The 'nice' name of the tab (Tip: language.Add)","name":"label","type":"string","default":"name"},{"text":"The filepath to the icon of the tab. Should be a .png","name":"icon","type":"string","default":"icon16/wrench.png"}]}},"example":{"description":"Creates a new tab named, \"Tab name!\" with a unique name and a wrench icon.","code":"hook.Add( \"AddToolMenuTabs\", \"myHookClass\", function()\n\tspawnmenu.AddToolTab( \"Tab name!\", \"#Unique_Name\", \"icon16/wrench.png\" )\nend )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddToolCategory","parent":"spawnmenu","type":"libraryfunc","description":"Used to create a new category in the list inside of a spawnmenu ToolTab.\n\nYou must call this function from SANDBOX:AddToolMenuCategories for it to work properly.","realm":"Client","args":{"arg":[{"text":"The ToolTab name, as created with spawnmenu.AddToolTab.\n\nYou can also use the default ToolTab names \"Main\" and \"Utilities\".","name":"tab","type":"string"},{"text":"The identifier name","name":"RealName","type":"string"},{"text":"The displayed name","name":"PrintName","type":"string"}]}},"example":[{"description":"Adds the Constraints category to the Main ToolTab. See `lua\\includes\\modules\\spawnmenu.lua`.","code":"spawnmenu.AddToolCategory( \"Main\", \"Constraints\", \"#spawnmenu.tools.constraints\" )"},{"description":"Adds the User category to the Utilities ToolTab. See `lua\\autorun\\utilities_menu.lua`.","code":"spawnmenu.AddToolCategory( \"Utilities\", \"User\", \"#spawnmenu.utilities.user\" )"}],"realms":["Client"],"type":"Function"},
{"function":{"name":"GetCreationTabs","parent":"spawnmenu","type":"libraryfunc","description":"Gets the CreationMenus table, which was filled with creation menu tabs from spawnmenu.AddCreationTab.","realm":"Client","rets":{"ret":{"text":"The CreationMenus table. See the Structures/CreationMenus.","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetContentType","parent":"spawnmenu","type":"libraryfunc","description":"Returns the function to create an vgui element for a specified content type","realm":"Client","args":{"arg":{"name":"contentType","type":"string"}},"rets":{"ret":{"text":"The panel creation function","name":"","type":"function"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"DoSaveToTextFiles","parent":"spawnmenu","type":"libraryfunc","description":{"text":"Calls spawnmenu.SaveToTextFiles.","internal":""},"realm":"Client","args":{"arg":{"text":"A table containing spawnlists.","name":"spawnlists","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"DoSaveToTextFiles","parent":"spawnmenu","type":"libraryfunc","description":{"text":"Calls spawnmenu.SaveToTextFiles.","internal":""},"realm":"Client","args":{"arg":{"text":"A table containing spawnlists.","name":"spawnlists","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetCustomPropTable","parent":"spawnmenu","type":"libraryfunc","description":"Similar to spawnmenu.GetPropTable, but only returns spawnlists created by addons via spawnmenu.AddPropCategory.\n\nThese spawnlists are shown in a separate menu in-game.","realm":"Client","rets":{"ret":{"text":"See spawnmenu.GetPropTable for table format.","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetPropTable","parent":"spawnmenu","type":"libraryfunc","description":"Returns a table of all prop categories and their props in the spawnmenu.\n\nNote that if the spawnmenu has not been populated, this will return an empty table.\n\nThis will not return spawnlists created by addons, see  spawnmenu.GetCustomPropTable for that.","realm":"Client","rets":{"ret":{"text":"Table of all the prop categories and props in the following format:\n\n```\n{\n\t[\"settings/spawnlist/001-construction props.txt\"] = {\n\t\tname = \"Construction Props\",\n\t\ticon = \"icon16/page.png\",\n\t\tid = 1,\n\t\tparentid = 0,\n\t\tneedsapp = \"\",\n\t\tcontents = {\n\t\t\t{\n\t\t\t\tmodel = \"models/Cranes/crane_frame.mdl\",\n\t\t\t\ttype = \"model\"\n\t\t\t}\n\t\t\t-- etc.\n\t\t},\n\t}\n\t-- etc.\n}\n```","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetTools","parent":"spawnmenu","type":"libraryfunc","description":"Gets a table of tools on the client.","realm":"Client","rets":{"ret":{"text":"A table with groups of tools, along with information on each tool.","name":"","type":"table"}}},"example":{"description":"Prints the output","code":"PrintTable( spawnmenu.GetTools() )","output":"```\n1:\n        Icon    =   icon16/wrench.png\n        Items:\n                1:\n                        1:\n                                CPanelFunction  =   function: 0x341391a8\n                                Command =   gmod_tool axis\n                                Controls    =   axis\n                                ItemName    =   axis\n                                Text    =   #tool.axis.name\n                        2:\n                                CPanelFunction  =   function: 0x341c7368\n                                Command =   gmod_tool ballsocket\n                                Controls    =   ballsocket\n                                ItemName    =   ballsocket\n                                Text    =   #tool.ballsocket.name\n                        3:\n                                CPanelFunction  =   function: 0x343826e8\n                                Command =   gmod_tool elastic\n                                Controls    =   elastic\n                                ItemName    =   elastic\n                                Text    =   #tool.elastic.name\n                        ...\n                        ItemName    =   Constraints\n                        Text    =   #spawnmenu.tools.constraints\n                2:\n                        1:\n                                CPanelFunction  =   function: 0x342138f0\n                                Command =   gmod_tool balloon\n                                Controls    =   balloon\n                                ItemName    =   balloon\n                                Text    =   #tool.balloon.name\n                        2:\n                                CPanelFunction  =   function: 0x340d7628\n                                Command =   gmod_tool button\n                                Controls    =   button\n                                ItemName    =   button\n                                Text    =   #tool.button.name\n                        3:\n                                CPanelFunction  =   function: 0x34302670\n                                Command =   gmod_tool duplicator\n                                Controls    =   duplicator\n                                ItemName    =   duplicator\n                                Text    =   #tool.duplicator.name\n                        ...\n                        ItemName    =   Construction\n                        Text    =   #spawnmenu.tools.construction\n               ...\n        Label   =   #spawnmenu.tools_tab\n        Name    =   AAAAAAA_Main\n2:\n        Icon    =   icon16/page_white_wrench.png\n        Items:\n                1:\n                        1:\n                                CPanelFunction  =   function: 0x34236090\n                                Command =   \n                                Controls    =   \n                                ItemName    =   User_Cleanup\n                                Text    =   #spawnmenu.utilities.cleanup\n                        2:\n                                CPanelFunction  =   function: 0x34236418\n                                Command =   \n                                Controls    =   \n                                ItemName    =   PhysgunSettings\n                                Text    =   #spawnmenu.utilities.physgunsettings\n                        3:\n                                CPanelFunction  =   function: 0x34232640\n                                Command =   \n                                Controls    =   \n                                ItemName    =   Undo\n                                Text    =   #spawnmenu.utilities.undo\n                        ItemName    =   User\n                        Text    =   #spawnmenu.utilities.user\n               ...\n        Label   =   #spawnmenu.utilities_tab\n        Name    =   Utilities\n```"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetToolMenu","parent":"spawnmenu","type":"libraryfunc","description":"Adds a new tool tab (or returns an existing one by name) to the right side of the spawnmenu via the SANDBOX:AddToolMenuTabs hook.","realm":"Client","args":{"arg":[{"text":"The internal name of the tab. This is used for sorting.","name":"name","type":"string"},{"text":"The 'nice' name of the tab","name":"label","type":"string","default":"name"},{"text":"The filepath to the icon of the tab. Should be a .png","name":"icon","type":"string","default":"icon16/wrench.png"}]},"rets":{"ret":{"text":"A table of tables representing categories and items in the left part of the tab. See example below to example structure.","name":"","type":"table"}}},"example":{"description":"Prints out the contents of the default Tool Tab.","code":"PrintTable( spawnmenu.GetToolMenu( \"Main\" ) )","output":"```\n1:\n\t\t1:\n\t\t\t\tCPanelFunction\t=\tfunction: 0x48a60408\n\t\t\t\tCommand\t=\tgmod_tool axis\n\t\t\t\tControls\t=\taxis\n\t\t\t\tItemName\t=\taxis\n\t\t\t\tText\t=\t#tool.axis.name\n\t\t2:\n\t\t\t\tCPanelFunction\t=\tfunction: 0x48a6b218\n\t\t\t\tCommand\t=\tgmod_tool ballsocket\n\t\t\t\tControls\t=\tballsocket\n\t\t\t\tItemName\t=\tballsocket\n\t\t\t\tText\t=\t#tool.ballsocket.name\n\t\t3:\n\t\t\t\tCPanelFunction\t=\tfunction: 0x48a8be48\n\t\t\t\tCommand\t=\tgmod_tool elastic\n\t\t\t\tControls\t=\telastic\n\t\t\t\tItemName\t=\telastic\n\t\t\t\tText\t=\t#tool.elastic.name\n\t\t4:\n\t\t\t\tCPanelFunction\t=\tfunction: 0x48ab5998\n\t\t\t\tCommand\t=\tgmod_tool hydraulic\n\t\t\t\tControls\t=\thydraulic\n\t\t\t\tItemName\t=\thydraulic\n\t\t\t\tText\t=\t#tool.hydraulic.name\n...\n\t\tItemName\t=\tConstraints\n\t\tText\t=\t#spawnmenu.tools.constraints\n2:\n\t\t1:\n\t\t\t\tCPanelFunction\t=\tfunction: 0x3a4235c8\n\t\t\t\tCommand\t=\tgmod_tool balloon\n\t\t\t\tControls\t=\tballoon\n\t\t\t\tItemName\t=\tballoon\n\t\t\t\tText\t=\t#tool.balloon.name\n...\n\t\tItemName\t=\tConstruction\n\t\tText\t=\t#spawnmenu.tools.construction\n...\n```"},"realms":["Client"],"type":"Function"},
{"function":{"name":"PopulateFromEngineTextFiles","parent":"spawnmenu","type":"libraryfunc","description":{"text":"Calls spawnmenu.PopulateFromTextFiles.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"PopulateFromTextFiles","parent":"spawnmenu","type":"libraryfunc","description":"Loads spawnlists from text files.","realm":"Client","args":{"arg":{"text":"The function to call. Arguments are ( strFilename, strName, tabContents, icon, id, parentid, needsapp )","name":"callback","type":"function"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SaveToTextFiles","parent":"spawnmenu","type":"libraryfunc","description":{"text":"Saves a table of spawnlists to files.","internal":""},"realm":"Client","args":{"arg":{"text":"A table containing spawnlists.","name":"spawnlists","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetActiveControlPanel","parent":"spawnmenu","type":"libraryfunc","description":"Sets currently active control panel to be returned by spawnmenu.ActiveControlPanel.","realm":"Client","args":{"arg":{"text":"The panel to set.","name":"pnl","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SwitchToolTab","parent":"spawnmenu","type":"libraryfunc","description":{"text":"Supposed to open specified tool tab in spawnmenu, in reality does nothing.","deprecated":""},"realm":"Client","args":{"arg":{"text":"The tab ID to open","name":"id","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Begin","parent":"sql","type":"libraryfunc","description":{"text":"Tells the engine a set of queries is coming. Will wait until sql.Commit is called to run them.\nThis is most useful when you run more than 100+ queries.\nThis is equivalent to :\n```\nsql.Query( \"BEGIN;\" )\n```","br":["",""]},"realm":"Shared and Menu","file":{"text":"lua/includes/util/sql.lua","line":"87-L93"}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"IndexExists","parent":"sql","type":"libraryfunc","description":"Returns true if the index with the specified name exists.","realm":"Shared and Menu","file":{"text":"lua/includes/util/sql.lua","line":"41-L50"},"args":{"arg":{"text":"The name of the index to check.","name":"indexName","type":"string"}},"rets":{"ret":{"text":"exists","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Commit","parent":"sql","type":"libraryfunc","description":"Tells the engine to execute a series of queries queued for execution, must be preceded by sql.Begin.\n\nThis is equivalent to `sql.Query( \"COMMIT;\" )`.","realm":"Shared and Menu","file":{"text":"lua/includes/util/sql.lua","line":"96-L101"}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"LastError","parent":"sql","type":"libraryfunc","description":"Returns the last error from a SQLite query.","realm":"Shared and Menu","file":{"text":"lua/includes/util/sql.lua","line":"104-L109"},"rets":{"ret":{"text":"Last error from SQLite database.","name":"","type":"string"}}},"example":{"description":"Reports all SQL errors into console automatically. Can help on debugging or testing.","code":"sql.m_strError = nil -- This is required to invoke __newindex\n\nsetmetatable(sql, { __newindex = function( table, k, v )\n\tif k == \"m_strError\" and v then\n\t\tprint(\"[SQL Error] \" .. v )\n\tend\nend } )","output":"After running `sql.Query(\"SELECT\")` will print `[SQL Error] incomplete input` in the console."},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"QueryValue","parent":"sql","type":"libraryfunc","description":"Performs the query like sql.QueryRow, but returns the first value found.","realm":"Shared and Menu","file":{"text":"lua/includes/util/sql.lua","line":"68-L85"},"args":{"arg":{"text":"The input query.","name":"query","type":"string"}},"rets":{"ret":{"text":"The returned value.","name":"","type":"string"}}},"example":{"description":"Functions that are examples of saving and creating information into the database.","code":"function CreateTable()\n\tsql.Query( \"CREATE TABLE IF NOT EXISTS player_data ( SteamID TEXT, Money INTEGER )\" )\nend\n\nfunction SavePlayerToDataBase( ply, Money )\n\tlocal data = sql.Query( \"SELECT * FROM player_data WHERE SteamID = \" .. sql.SQLStr( ply:SteamID() ) .. \";\")\n\tif ( data ) then\n\t\tsql.Query( \"UPDATE player_data SET Money = \" .. Money .. \" WHERE SteamID = \" .. sql.SQLStr( ply:SteamID() ) .. \";\" )\n\telse\n\t\tsql.Query( \"INSERT INTO player_data ( SteamID, Money ) VALUES( \" .. sql.SQLStr( ply:SteamID() ) .. \", \" .. Money .. \" )\" )\n\tend\nend\n\nfunction LoadPlayerToDataBase( ply )\n\tlocal val = sql.QueryValue( \"SELECT Money FROM player_data WHERE SteamID = \" .. sql.SQLStr( ply:SteamID() ) .. \";\" )\n\treturn val\nend"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"QueryRow","parent":"sql","type":"libraryfunc","description":"Performs the query like sql.Query, but returns the first row found.\n\nBasically equivalent to :\n```\nsql.Query( \"*query* LIMIT 1;\" )\n```","realm":"Shared and Menu","file":{"text":"lua/includes/util/sql.lua","line":"52-L66"},"args":{"arg":[{"text":"The input query.","name":"query","type":"string"},{"text":"The row number. Say we receive back 5 rows, putting 3 as this argument will give us row #3.","name":"row","type":"number","default":"1"}]},"rets":{"ret":{"text":"The returned row.","name":"","type":"table"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Query","parent":"sql","type":"libraryfunc","description":"Performs a query on the local SQLite database, returns a table as result set, nil if result is empty and false on error.","realm":"Shared and Menu","args":{"arg":{"text":"The query to execute.","name":"query","type":"string"}},"rets":{"ret":{"text":"false is returned if there is an error, nil if the query returned no data.","name":"","type":"table"}}},"example":{"description":"Functions that are examples of saving and creating information into the database.","code":"function CreateTable()\n\tsql.Query( \"CREATE TABLE IF NOT EXISTS player_data ( SteamID TEXT, Money INTEGER )\" )\nend\n\nfunction SavePlayerToDataBase( ply, Money )\n\tlocal data = sql.Query( \"SELECT * FROM player_data WHERE SteamID = \" .. sql.SQLStr( ply:SteamID() ) .. \";\")\n\tif ( data ) then\n\t\tsql.Query( \"UPDATE player_data SET Money = \" .. Money .. \" WHERE SteamID = \" .. sql.SQLStr( ply:SteamID() ) .. \";\" )\n\telse\n\t\tsql.Query( \"INSERT INTO player_data ( SteamID, Money ) VALUES( \" .. sql.SQLStr( ply:SteamID() ) .. \", \" .. Money .. \" )\" )\n\tend\nend\n\nfunction LoadPlayerToDataBase( ply )\n\tlocal val = sql.QueryValue( \"SELECT Money FROM player_data WHERE SteamID = \" .. sql.SQLStr( ply:SteamID() ) .. \";\" )\n\treturn val\nend"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"SQLStr","parent":"sql","type":"libraryfunc","description":{"text":"Escapes dangerous characters and symbols from user input used in an SQLite SQL Query.","note":"this function is not meant to be used with external database engines such as `MySQL`. Escaping strings with inadequate functions is dangerous!"},"realm":"Shared and Menu","file":{"text":"lua/includes/util/sql.lua","line":"6-L27"},"args":{"arg":[{"text":"The string to be escaped.","name":"string","type":"string"},{"text":"Set this as `true`, and the function will not wrap the input string in apostrophes.","name":"bNoQuotes","type":"boolean","default":"false"}]},"rets":{"ret":{"text":"The escaped input.","name":"","type":"string"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"TableExists","parent":"sql","type":"libraryfunc","description":"Returns true if the table with the specified name exists.","realm":"Shared and Menu","file":{"text":"lua/includes/util/sql.lua","line":"30-L39"},"args":{"arg":{"text":"The name of the table to check.","name":"tableName","type":"string"}},"rets":{"ret":{"text":"exists","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Download","parent":"steamworks","type":"libraryfunc","description":"Downloads a file from the supplied addon and saves it as a .cache file in garrysmod/cache folder.\n\nThis is mostly used to download the preview image of the addon, but the game seems to also use it to download replays and saves.\n\nIn case the retrieved file is an image and you need the IMaterial, use Global.AddonMaterial with the path supplied from the callback.","realm":"Client and Menu","args":{"arg":[{"text":"The Preview ID of workshop item.","name":"workshopPreviewID","type":"string"},{"text":"Whether to uncompress the file or not, assuming it was compressed with LZMA.\nYou will usually want to set this to true.","name":"uncompress","type":"boolean","br":""},{"text":"The function to process retrieved data. The first and only argument is a string, containing path to the saved file.","name":"resultCallback","type":"function"}]}},"example":{"description":"Downloads and saves icon of Gm_construct_Beta Steam Workshop addon.","code":"steamworks.FileInfo( 21197, function( result )\n\tsteamworks.Download( result.previewid, true, function( name )\n\t\tprint( name )\n\tend) \nend)","output":"Something like this will be printed into console: cache/559813303754221947.cache"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"DownloadUGC","parent":"steamworks","type":"libraryfunc","description":"Downloads a Steam Workshop file by its ID and returns a path to it.","realm":"Client and Menu","args":{"arg":[{"text":"The ID of workshop item to download. **NOT** a file ID.","name":"workshopID","type":"string"},{"text":"The function to process retrieved data. The first argument is a string, containing path to the saved file, or nil if the download failed to any reason. The second argument is a File object pointing to the downloaded .gma file. The file handle will be closed after the function exits.","name":"resultCallback","type":"function"}]}},"example":{"description":"Downloads the Fire Extinguisher addon from Steam Workshop prints path to its .gma file to be used with game.MountGMA.","code":"steamworks.DownloadUGC( \"104607228\", function( path, file )\n\tprint( path, file )\nend)"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"ApplyAddons","parent":"steamworks","type":"libraryfunc","description":"Refreshes clients addons.","realm":"Menu"},"example":{"description":"Subscribes to gm_construct_beta and reloads addons.","code":"steamworks.Subscribe( 21197 )\nsteamworks.ApplyAddons()"},"realms":["Menu"],"type":"Function"},
{"function":{"name":"GetList","parent":"steamworks","type":"libraryfunc","description":"Retrieves a customized list of Steam Workshop addons.","realm":"Client and Menu","args":{"arg":[{"text":"The type of items to retrieve. Possible values include:\n* popular (All invalid options will equal to this)\n* trending\n* latest\n* friends\n* followed - Items of people the player is following on Steam\n* friend_favs - Favorites of player's friends\n* favorite - Player's favorites","name":"type","type":"string"},{"text":"A table of tags to match.","name":"tags","type":"table"},{"text":"How much of results to skip from first one. Mainly used for pages.","name":"offset","type":"number"},{"text":"How much items to retrieve, up to 50 at a time.","name":"numRetrieve","type":"number"},{"text":"When getting Most Popular content from Steam, this determines a time period. ( 7 = most popular addons in last 7 days, 1 = most popular addons today, etc )","name":"days","type":"number"},{"text":"\"0\" to retrieve all addons, \"1\" to retrieve addons only published by you, or a valid SteamID64 of a user to get workshop items of.","name":"userID","type":"string"},{"text":"The function to process retrieved data. The first and only argument is a table, containing all the info, or nil in case of error","name":"resultCallback","type":"function"}]}},"example":{"description":"Retrieves top 10 of Steam Workshop addons.","code":"steamworks.GetList( \"popular\", nil, 0, 10, 7, 0, function( data ) PrintTable( data ) end )","output":"```\ntotalresults = 1748\nnumresults = 10\nresults:\n1 = 21197\n2 = 72122655\n3 = 68207248\n4 = 71921341\n5 = 79927494\n6 = 12692\n7 = 21174\n8 = 72145362\n9 = 16221\n10 = 22104\n```"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"GetPlayerName","parent":"steamworks","type":"libraryfunc","description":{"text":"Retrieves players name by his 64bit SteamID.\n\nYou must call steamworks.RequestPlayerInfo a decent amount of time before calling this function.","deprecated":"You should use the callback of steamworks.RequestPlayerInfo instead."},"realm":"Client and Menu","args":{"arg":{"text":"The 64bit Steam ID ( aka Community ID ) of the player","name":"steamID64","type":"string"}},"rets":{"ret":{"text":"The name of that player","name":"","type":"string"}}},"example":{"description":"Retrieves name of local player.","code":"steamworks.RequestPlayerInfo( LocalPlayer():SteamID64() )\ntimer.Simple( 1, function() -- this is not instant!\n\tprint( steamworks.GetPlayerName( LocalPlayer():SteamID64() ) )\nend )","output":"A name of local player is printed into console."},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"FileInfo","parent":"steamworks","type":"libraryfunc","description":"Retrieves info about supplied Steam Workshop addon.","realm":"Client and Menu","args":{"arg":[{"text":"The ID of Steam Workshop item.","name":"workshopItemID","type":"string"},{"text":"The function to process retrieved data, with the following arguments:\n* table data - The data about the item, if the request succeeded, nil otherwise. See Structures/UGCFileInfo.","name":"resultCallback","type":"function"}]}},"example":{"description":"Retrieves all info of the [Wiremod](https://steamcommunity.com/sharedfiles/filedetails/?id=160250458) Steam Workshop addon.","code":"steamworks.FileInfo( 160250458, function( result ) PrintTable( result ) end)","output":"```\nbanned\t=\tfalse\nchildren = {}\ncreated\t=\t1373845248\ndescription\t=\t\"A collection of entities connectable by data wires...\"\ndisabled\t=\tfalse\nfileid\t=\t763849701485673437\nid\t=\t160250458\ninstalled\t=\tfalse\nowner\t=\t76561198096613988\nownername\t=\tWireTeam\npreviewid\t=\t597008945885476119\npreviewsize\t=\t36221\nsize\t=\t7375691\ntags\t=\tAddon,tool,Build,Fun\ntitle\t=\tWiremod\nupdated\t=\t1571560576\n\nscore\t=\t0.92941749095917\ntotal\t=\t49119\nup\t=\t45695\ndown\t=\t3424\n```"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"IsSubscribed","parent":"steamworks","type":"libraryfunc","description":"Returns whenever the client is subscribed to the specified Steam Workshop item.","realm":"Client and Menu","args":{"arg":{"text":"The ID of the Steam Workshop item.","name":"workshopItemID","type":"string"}},"rets":{"ret":{"text":"Is the client subscribed to the addon or not.","name":"","type":"boolean"}}},"example":{"description":"Checks if client is subscribed to Gm_construct_Beta Steam Workshop addon.","code":"print( steamworks.IsSubscribed( 21197 ) )","output":"If client is subscribed true is printed into console, false otherwise."},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"OpenWorkshop","parent":"steamworks","type":"libraryfunc","description":"Opens the workshop website in the steam overlay browser.","realm":"Client and Menu"},"example":{"description":"An alternative to this function.","code":"gui.OpenURL( \"http://steamcommunity.com/app/4000/workshop/\" )"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"Publish","parent":"steamworks","type":"libraryfunc","description":{"text":"Publishes dupes, saves or demos to workshop.","internal":""},"realm":"Menu","args":{"arg":[{"text":"The workshop tags to apply","name":"tags","type":"table"},{"text":"Path to the file to upload","name":"filename","type":"string"},{"text":"Path to the image to use as icon","name":"image","type":"string"},{"text":"Name of the Workshop submission","name":"name","type":"string"},{"text":"Description of the Workshop submission","name":"desc","type":"string"}]}},"realms":["Menu"],"type":"Function"},
{"function":{"name":"RequestPlayerInfo","parent":"steamworks","type":"libraryfunc","description":"Requests information of the player with SteamID64 for later use with steamworks.GetPlayerName.","realm":"Client and Menu","args":{"arg":[{"text":"The 64bit Steam ID of player.","name":"steamID64","type":"string"},{"text":"A callback function with only 1 argument - string name.","name":"callback","type":"function"}]}},"example":{"description":"Gets and prints the steam name of the local player.","code":"steamworks.RequestPlayerInfo( LocalPlayer():SteamID64(), function( steamName )\n\tprint( steamName )\nend )","output":"The local player's name."},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"SetFileCompleted","parent":"steamworks","type":"libraryfunc","description":"","realm":"Menu","args":{"arg":{"text":"The Steam Workshop item id","name":"workshopid","type":"string"}},"rets":{"ret":{"text":"Whatever you have put in as first argument","name":"","type":"string"}}},"realms":["Menu"],"type":"Function"},
{"function":{"name":"SetFilePlayed","parent":"steamworks","type":"libraryfunc","description":{"text":"Sets whether you have played this addon or not. This will be shown to the user in the Steam Workshop itself:","image":{"src":"steamworksSetFilePlayedExample.png"}},"realm":"Menu","args":{"arg":{"text":"The Steam Workshop item ID","name":"workshopid","type":"string"}},"rets":{"ret":{"text":"Whatever you have put in as first argument","name":"","type":"string"}}},"realms":["Menu"],"type":"Function"},
{"function":{"name":"ShouldMountAddon","parent":"steamworks","type":"libraryfunc","description":"Returns whenever the specified Steam Workshop addon will be mounted or not.","realm":"Client and Menu","args":{"arg":{"text":"The ID of the Steam Workshop","name":"workshopItemID","type":"string"}},"rets":{"ret":{"text":"Will the workshop item be mounted or not","name":"","type":"boolean"}}},"example":{"description":"Checks if the client has enabled Gm_construct_Beta Steam Workshop addon.","code":"print( steamworks.ShouldMountAddon( 21197 ) )","output":"If client has enabled the addon true is printed into console, false otherwise."},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"SetShouldMountAddon","parent":"steamworks","type":"libraryfunc","description":"Sets if an addon should be enabled or disabled. Call steamworks.ApplyAddons afterwards to update.","realm":"Menu","args":{"arg":[{"text":"The ID of the Steam Workshop item we should enable/disable","name":"workshopItemID","type":"string"},{"text":"true to enable the item, false to disable.","name":"shouldMount","type":"boolean"}]}},"example":{"description":"Enables the Gm_construct_Beta Steam Workshop addon and reloads addons afterwards","code":"steamworks.SetShouldMountAddon( 21197, true )\nsteamworks.ApplyAddons()","output":"Enabled the gm_construct_beta addon, if installed."},"realms":["Menu"],"type":"Function"},
{"function":{"name":"Unsubscribe","parent":"steamworks","type":"libraryfunc","description":{"text":"Unsubscribes to the specified workshop addon. Call steamworks.ApplyAddons afterwards to update.\n\nThis function should `never` be called without a user's consent and should not be called if the addon is currently in use (aka: the user is not in the main menu) as it may result in unexpected behaviour.","internal":""},"realm":"Menu","args":{"arg":{"text":"The ID of the Steam Workshop item we should unsubscribe from.","name":"workshopItemID","type":"string"}}},"example":{"description":"Unsubscribes from the Gm_construct_Beta Steam Workshop addon, if subscribed, and reloads addons afterwards","code":"steamworks.Unsubscribe( 21197 )\nsteamworks.ApplyAddons()","output":"Unsubscribes from the gm_construct_beta addon, if subscribed."},"realms":["Menu"],"type":"Function"},
{"function":{"name":"Subscribe","parent":"steamworks","type":"libraryfunc","description":{"text":"Subscribes to the specified workshop addon. Call steamworks.ApplyAddons afterwards to update.","internal":""},"realm":"Menu","args":{"arg":{"text":"The ID of the Steam Workshop item we should subscribe to","name":"workshopItemID","type":"string"}}},"example":{"description":"Subscribes to the Gm_construct_Beta Steam Workshop addon and reloads addons afterwards","code":"steamworks.Subscribe( \"21197\" )\nsteamworks.ApplyAddons()","output":"Subscribes to gm_construct_beta addon, if not already."},"realms":["Menu"],"type":"Function"},
{"function":{"name":"Vote","parent":"steamworks","type":"libraryfunc","description":{"text":"Makes the user vote for the specified addon","internal":""},"realm":"Menu","args":{"arg":[{"text":"The ID of workshop item.","name":"workshopItemID","type":"string"},{"text":"Sets if the user should vote up/down. True makes them upvote, false down","name":"upOrDown","type":"boolean"}]}},"example":{"description":"Give the Gm_construct_Beta Steam Workshop item a thumbs up.","code":"steamworks.Vote( 21197, true )"},"realms":["Menu"],"type":"Function"},
{"function":{"name":"ViewFile","parent":"steamworks","type":"libraryfunc","description":"Opens the workshop website for specified Steam Workshop item in the Steam overlay browser.","realm":"Client and Menu","args":{"arg":{"text":"The ID of workshop item.","name":"workshopItemID","type":"string"}}},"example":{"description":"Opens web page of Gm_construct_Beta Steam Workshop addon in Steam overlay browser.","code":"steamworks.ViewFile( 21197 )"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"VoteInfo","parent":"steamworks","type":"libraryfunc","description":{"text":"Retrieves vote info of supplied addon.","deprecated":"Use data steamworks.FileInfo instead."},"realm":"Client and Menu","args":{"arg":[{"text":"The ID of workshop item.","name":"workshopItemID","type":"string"},{"text":"The function to process retrieved data. The first and only argument is a table, containing all the info.","name":"resultCallback","type":"function"}]}},"example":{"description":"Retrieves vote info of Gm_construct_Beta Steam Workshop addon.","code":"steamworks.VoteInfo( 21197, function( result ) PrintTable( result ) end)","output":"```\nscore = 0.97182178497314\ntotal = 2952\ndown = 36\nup = 2916\n```"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"byte","parent":"string","type":"libraryfunc","description":"Returns the given string's characters in their numeric ASCII representation.","realm":"Shared and Menu","args":{"arg":[{"text":"The string to get the chars from.","name":"string","type":"string"},{"text":"The first character of the string to get the byte of.","name":"startPos","type":"number","default":"1"},{"text":"The last character of the string to get the byte of.","name":"endPos","type":"number","default":"startPos"}]},"rets":{"ret":{"text":"Numerical bytes","name":"","type":"vararg"}}},"example":{"description":"Prints the first 4 numerical bytes from the string \"Hello, World!\"","code":"print(string.byte(\"Hello, World!\", 1, 4))","output":"72\n101\n108\n108"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"char","parent":"string","type":"libraryfunc","description":"Takes the given numerical bytes and converts them to a string.","realm":"Shared and Menu","args":{"arg":{"text":"The bytes to create the string from.","name":"bytes","type":"vararg"}},"rets":{"ret":{"text":"String built from given bytes","name":"","type":"string"}}},"example":[{"description":"Prints a string consisting of the bytes 72, 101, 108, 108, 111","code":"print( string.char( 72, 101, 108, 108, 111 ) )","output":"```\nHello\n```"},{"description":"Helper function to create a random string.","code":"function string.Random( length )\n\n\tlocal length = tonumber( length )\n\n    if length < 1 then return end\n\n    local result = {} -- The empty table we start with\n\n    for i = 1, length do\n\n        result[i] = string.char( math.random(32, 126) )\n\n    end\n\n    return table.concat(result)\n\nend\n\nprint( string.Random( 10 ) )","output":"```\noEjkv2?h:T\n```"}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"EndsWith","parent":"string","type":"libraryfunc","description":"Returns whether or not the second passed string matches the end of the first.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/string.lua","line":"320"},"args":{"arg":[{"text":"The string whose end is to be checked.","name":"str","type":"string"},{"text":"The string to be matched with the end of the first.","name":"end","type":"string"}]},"rets":{"ret":{"text":"`true` if the first string ends with the second, or the second is empty, otherwise `false`.","name":"","type":"boolean"}}},"example":{"description":"Looks for arguments at the end of a string.","code":"local endswith = string.EndsWith(\"Supercalifragilisticexpialidocious\", \"docious\")\nif endswith then\n\tprint(\"Marry Poppins\")\nend","output":"```\nMarry Poppins\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Comma","parent":"string","type":"libraryfunc","description":"Inserts commas for every third digit.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/string.lua","line":"347"},"args":{"arg":{"text":"The input number to commafy","name":"InputNumber","type":"number"}},"rets":{"ret":{"text":"Prettystring","name":"","type":"string"}}},"example":{"description":"Demonstrates the use of string.Comma","output":"123,456,789","code":"MsgN(string.Comma(123456789))"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Explode","parent":"string","type":"libraryfunc","description":"Splits a string up wherever it finds the given separator.\n\nThis is the reverse of string.Implode.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/string.lua","line":"81"},"args":{"arg":[{"text":"The string will be separated wherever this sequence is found.","name":"separator","type":"string"},{"text":"The string to split up.","name":"str","type":"string"},{"text":"Set this to true if your separator is a .","name":"use_patterns","type":"boolean","page":",patternPatterns"}]},"rets":{"ret":{"text":"Exploded string as a numerical sequential table.","name":"","type":"table"}}},"example":[{"description":"Splits a sentence into a table of the words in it.","code":"local sentence = \"hello there my name is Player1\"\nlocal words = string.Explode( \" \", sentence )\nPrintTable( words )","output":"```\n1 = hello\n2 = there\n3 = my\n4 = name\n5 = is\n6 = Player1\n```"},{"description":"Uses Explode to sort through words that a player says.","code":"hook.Add( \"PlayerSay\", \"GiveHealth\", function( ply, text )\n\tlocal playerInput = string.Explode( \" \", text )\n\n\tif ( playerInput[1] == \"!givehealth\" ) then \n\n\t\tif ( tonumber( playerInput[2] ) ) then\n\n\t\t\tply:SetHealth( tonumber( playerInput[2] ) )\n\n\t\t\tprint( ply:Nick() .. \" set their health to \" .. playerInput[2] )\n\n\t\tend\n\n\tend\n\nend)","output":"```\nPlayer1 set their health to 100.\n```"}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"dump","parent":"string","type":"libraryfunc","description":{"text":"Returns the binary bytecode of the given function.","note":"This does not work with functions created in C/C++. An error will be thrown if it is"},"realm":"Shared and Menu","args":{"arg":[{"text":"The function to get the bytecode of","name":"func","type":"function"},{"text":"True to strip the debug data, false to keep it","name":"stripDebugInfo","type":"boolean","default":"false"}]},"rets":{"ret":{"text":"Bytecode","name":"","type":"string"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"find","parent":"string","type":"libraryfunc","description":{"text":"Attempts to find the specified substring in a string.","warning":{"text":"This function uses  by default.","page":",Lua PatternsPatterns"}},"realm":"Shared and Menu","args":{"arg":[{"text":"The string to search in.","name":"haystack","type":"string"},{"text":"The string to find, can contain patterns if enabled.","name":"needle","type":"string"},{"text":"The position to start the search from, can be negative start position will be relative to the end position.","name":"startPos","type":"number","default":"1"},{"text":"Disable patterns.","name":"noPatterns","type":"boolean","default":"false"}]},"rets":{"ret":[{"text":"Starting position of the found text, or nil if the text wasn't found","name":"","type":"number"},{"text":"Ending position of found text, or nil if the text wasn't found","name":"","type":"number"},{"text":"Matched text for each group if patterns are enabled and used, or nil if the text wasn't found","name":"","type":"string"}]}},"example":{"description":"Change the word \"heck\" to \"****\" in chat messages","code":"hook.Add( \"PlayerSay\", \"NoHeckHere\", function( ply, text )\n\tlocal heckStart, heckEnd = string.find( text:lower(), \"heck\" )\n\tif heckStart then\n\t\tlocal civilText = string.sub( text, 1, heckStart - 1 ) .. \"****\" .. string.sub( text, heckEnd + 1 )\n\t\treturn civilText\n\tend\nend )"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"format","parent":"string","type":"libraryfunc","description":"Formats the specified values into the string given.","realm":"Shared and Menu","args":{"arg":[{"text":"The string to be formatted.\nFollows this format: http://www.cplusplus.com/reference/cstdio/printf/\n\nLuaJIT supports all specifiers and doesn't support `*` width and `.*` presision.\n\nLuaJIT exclusives:\n\n| Format | Description | Example of the output |\n|:------:|:-----------:|:---------------------:|\n| %p | Returns pointer to supplied structure (table/function) | `0xf20a8968` |\n| %q | Formats a string between double quotes, using escape sequences when necessary to ensure that it can safely be read back by the Lua interpreter | `\"test\\1\\2test\"` |","name":"format","type":"string","br":""},{"text":"Values to be formatted into the string.","name":"formatParameters","type":"vararg"}]},"rets":{"ret":{"text":"The formatted string","name":"","type":"string"}}},"example":{"description":"Example showing the different types of format codes.","code":"local s = \"Hello, world!\"\n \n// string\nprint(string.format(\"here's a string: %s\", s))\n \n// string with quotes\nprint(string.format(\"here's a quoted string: %q\", s))\n \n// characters from numeric values\nprint(string.format(\"%c%c%c\", 65, 66, 67))\n \n// number with an exponent\nprint(string.format(\"%e, %E\", math.pi, math.pi))\n \n// float and compact float\nprint(string.format(\"%f, %G\", math.pi, math.pi))\n \n// signed, signed, and unsigned int\nprint(string.format(\"%d, %i, %u\", -100, -100, -100))\n \n// octal, hex, and uppercase hex\nprint(string.format(\"%o, %x, %X\", -100, -100, -100))","output":"```\nhere's a string: Hello, world!\n\nhere's a quoted string: \"Hello, world!\"\n\nABC\n\n3.141593e+000, 3.141593E+000\n\n3.141593, 3.14159\n\n-100, -100, 4294967196\n\n37777777634, ffffff9c, FFFFFF9C\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"FromColor","parent":"string","type":"libraryfunc","description":"Creates a string from a Color variable.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/string.lua","line":"326"},"args":{"arg":{"text":"The color to put in the string.","name":"color","type":"table"}},"rets":{"ret":{"text":"Output","name":"","type":"string"}}},"example":{"description":"Demonstrates the use of string.FromColor","code":"MsgN(string.FromColor(Color(255, 0, 255, 125)))","output":"\"255 0 255 125\""},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"FormattedTime","parent":"string","type":"libraryfunc","description":"Returns the time as a formatted string or as a table if no format is given.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/string.lua","line":"166"},"args":{"arg":[{"text":"The time in seconds to format.","name":"float","type":"number"},{"text":"An optional formatting to use. If no format it specified, a table will be returned instead.","name":"format","type":"string","default":"nil"}]},"rets":{"ret":{"text":"Returns the time as a formatted string only if a format was specified.\n\nReturns a table only if no format was specified. The table will contain these fields:\n* number ms - milliseconds\n* number s - seconds\n* number m - minutes\n* number h - hours","name":"","type":"string"}}},"example":[{"description":"Formats the time in seconds","code":"local time = string.FormattedTime( 90, \"%02i:%02i:%02i\" )\nprint( time )","output":"01:30:00"},{"description":"Returns a table with the time separated by units.","code":"local time = string.FormattedTime( 90 )\nPrintTable( time )","output":"```\nms = 0\nm = 1\ns = 30\nh = 0\n```"}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"GetChar","parent":"string","type":"libraryfunc","description":{"text":"Returns char value from the specified index in the supplied string.","deprecated":"Use either string.sub(str, index, index) or str[index]."},"realm":"Shared and Menu","file":{"text":"lua/includes/extensions/string.lua","line":"295"},"args":{"arg":[{"text":"The string that you will be searching with the supplied index.","name":"str","type":"string"},{"text":"The index's value of the string to be returned.","name":"index","type":"number"}]},"rets":{"ret":{"text":"str","name":"","type":"string"}}},"example":{"description":"Looks index in the supplied string and returns value of that index.","code":"local char = \"ABC\"\nprint(string.GetChar(char, 2))","output":"B"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"GetExtensionFromFilename","parent":"string","type":"libraryfunc","description":"Returns extension of the file.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/string.lua","line":"122"},"args":{"arg":{"text":"String eg. file-path to get the file extensions from.","name":"file","type":"string"}},"rets":{"ret":{"text":"fileExtension","name":"","type":"string"}}},"example":{"description":"Prints the extension of the file.","code":"print(string.GetExtensionFromFilename(\"garrysmod/lua/modules/string.lua\"))","output":"lua"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"GetPathFromFilename","parent":"string","type":"libraryfunc","description":"Returns the path only from a file's path.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/string.lua","line":"142"},"args":{"arg":{"text":"String to get path from.","name":"Inputstring","type":"string"}},"rets":{"ret":{"text":"Path","name":"","type":"string"}}},"example":{"description":"Demonstrates the use of string.GetPathFromFilename","code":"MsgN(string.GetPathFromFilename(\"garrysmod/lua/modules/string.lua\"))","output":"\"garrysmod/lua/modules/\""},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"gfind","parent":"string","type":"libraryfunc","description":{"text":"Returns an iterator function that is called for every complete match of the pattern, all sub matches will be passed as to the loop.","deprecated":"This function is removed in Lua versions later than what GMod is currently using. Use string.gmatch instead."},"realm":"Shared and Menu","args":{"arg":[{"text":"The string to search in","name":"data","type":"string"},{"text":"The pattern to search for","name":"pattern","type":"string"}]},"rets":{"ret":{"text":"The iterator function that can be used in a for-in loop","name":"","type":"function"}}},"example":{"description":"Example usage of the function","code":"local s = \"my awesome stuff 12\"\nfor w in string.gfind(s, \"(%a)\") do\n    Msg(w)\nend","output":"In your console:\nmyawesomestuff"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"GetFileFromFilename","parent":"string","type":"libraryfunc","description":"Returns file name and extension.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/string.lua","line":"L144-L147"},"args":{"arg":{"text":"The string eg. file-path to get the file-name from.","name":"pathString","type":"string"}},"rets":{"ret":{"text":"The file name","name":"","type":"string"}}},"example":{"description":"Returns the file name.","code":"print( string.GetFileFromFilename( \"garrysmod/lua/modules/string.lua\" ) )","output":"string.lua"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"gmatch","parent":"string","type":"libraryfunc","description":"Using Patterns, returns an iterator which will return either one value if no capture groups are defined, or any capture group matches.","realm":"Shared and Menu","args":{"arg":[{"text":"The string to search in","name":"data","type":"string"},{"text":"The pattern to search for","name":"pattern","type":"string"}]},"rets":{"ret":{"text":"The iterator function that can be used in a for-in loop","name":"","type":"function"}}},"example":{"description":"Explodes the string for each space and comma in the string","code":"str = \"qwe,a cde\"\nfor s in string.gmatch(str, \"[^%s,]+\") do\n    print(s)\nend","output":"```\nqwe\na\ncde\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Implode","parent":"string","type":"libraryfunc","description":{"text":"Joins the values of a table together to form a string.\n\nThis is the reverse of string.Explode and is functionally identical to table.concat, but with less features.","deprecated":"You really should just use table.concat."},"realm":"Shared and Menu","file":{"text":"lua/includes/extensions/string.lua","line":"113"},"args":{"arg":[{"text":"The separator to insert between each piece.","name":"separator","type":"string","default":""},{"text":"The table of pieces to concatenate. The keys for these must be numeric and sequential.","name":"pieces","type":"table"}]},"rets":{"ret":{"text":"Imploded pieces","name":"","type":"string"}}},"example":{"description":"Joins all values of a table with a space","code":"local tab = { \"one\", \"two\", \"three\" }\n\nprint( string.Implode( \" \", tab ) )","output":"```\none two three\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"JavascriptSafe","parent":"string","type":"libraryfunc","description":"Escapes special characters for JavaScript in a string, making the string safe for inclusion in to JavaScript strings.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/string.lua","line":"34"},"args":{"arg":{"text":"The string that should be escaped.","name":"str","type":"string"}},"rets":{"ret":{"text":"The escaped string.","name":"","type":"string"}}},"example":{"description":"Executes JavaScript on a panel using user input safely.","code":"local user_input = \"The user's input lives in this variable\"\n\nlocal Panel = vgui.Create( \"DHTML\" )\nPanel:SetURL( \"example.com/something.html\" )\nPanel:Center()\nPanel:SetSize( 100, 100 )\nPanel:RunJavascript( \"MyJavaScriptFunction('\" .. string.JavascriptSafe( user_input ) .. \"')\" )"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"gsub","parent":"string","type":"libraryfunc","description":"This functions main purpose is to replace certain character sequences in a string using Patterns.","realm":"Shared and Menu","args":{"arg":[{"text":"String which should be modified.","name":"string","type":"string"},{"text":"The pattern that defines what should be matched and eventually be replaced.","name":"pattern","type":"string"},{"text":"In case of a string the matched sequence will be replaced with it.\n\nIn case of a table, the matched sequence will be used as key and the table will tested for the key, if a value exists it will be used as replacement.\n\nIn case of a function all matches will be passed as parameters to the function, the return value(s) of the function will then be used as replacement.","name":"replacement","type":"string"},{"text":"Maximum number of replacements to be made.","name":"maxReplaces","type":"number","default":"nil"}]},"rets":{"ret":[{"text":"replaceResult","name":"","type":"string"},{"text":"replaceCount","name":"","type":"number"}]}},"example":{"description":"Replaces \"hello\" with \"hi\" in the string \"hello there!\"","code":"string.gsub(\"hello there!\", \"hello\", \"hi\")","output":"hi there!"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Left","parent":"string","type":"libraryfunc","description":"Returns everything left of supplied place of that string.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/string.lua","line":"218"},"args":{"arg":[{"text":"The string to extract from.","name":"str","type":"string"},{"text":"Amount of chars relative to the beginning (starting from 1).","name":"num","type":"number"}]},"rets":{"ret":{"text":"Returns a string containing a specified number of characters from the left side of a string.","name":"","type":"string"}}},"example":{"description":"Extracts \"garry\" from \"garrys mod\" string.","code":"local text = \"garrys mod\"\nprint(string.Left(text, 5))","output":"garry"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"match","parent":"string","type":"libraryfunc","description":{"text":"Finds a  in a string.","page":",PatternPatterns"},"realm":"Shared and Menu","args":{"arg":[{"text":"String which should be searched in for matches.","name":"string","type":"string"},{"text":"The pattern that defines what should be matched.","name":"pattern","type":"string"},{"text":"The start index to start the matching from, can be negative to start the match from a position relative to the end.","name":"startPosition","type":"number","default":"1"}]},"rets":{"ret":{"text":"Matched text(s)","name":"","type":"vararg"}}},"example":{"code":"local toMatch = \"this is a sample text\"\nprint( string.match( toMatch, \"sample\" ) )\n-- patterns work\nprint( string.match( toMatch, \"^[a-z]\" ) )\nprint( string.match( toMatch, \"^this\" ) )\nprint( string.match( toMatch, \"^..is\" ) )\nprint( string.match( toMatch, \"text$\" ) )\n-- entire string\nprint( string.match( toMatch, \"^.*$\" ) )\n-- multiple return values\nprint( string.match( toMatch, \"(this) is a (%w+)\" ) )\n-- nil\nprint( string.match( toMatch, \"this$\" ) )\nprint( string.match( toMatch, \"nil\" ) )","output":"```\nsample  \nt  \nthis  \nthis  \ntext  \nthis is a sample text  \nthis\tsample  \nnil  \nnil\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"len","parent":"string","type":"libraryfunc","description":"Counts the number of characters in the string (length). This is equivalent to using the length operator (#).","realm":"Shared and Menu","args":{"arg":{"text":"The string to find the length of.","name":"str","type":"string"}},"rets":{"ret":{"text":"Length of the string","name":"","type":"number"}}},"example":{"description":"Demonstrates the use of this function.","code":"print( string.len( \"hi\" ) )\nprint( string.len( \"drakehawke\" ) )\nprint( string.len( \"\" ) )\nprint( string.len( \"test\" ) == #\"test\" )","output":{"text":"2\n\n10\n\n0\n\ntrue","br":""}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"lower","parent":"string","type":"libraryfunc","description":{"text":"Changes any upper-case letters in a string to lower-case letters.","note":"This function doesn't work on special non-English UTF-8 characters."},"realm":"Shared and Menu","args":{"arg":{"text":"The string to convert.","name":"str","type":"string"}},"rets":{"ret":{"text":"A string representing the value of a string converted to lower-case.","name":"","type":"string"}}},"example":[{"description":"Demonstrates the use of this function.","code":"print( string.lower( \"ABCDEFG\" ) )\nprint( string.lower( \"AbCdefG\" ) )\nprint( string.lower( \"abcdefg\" ) )\nprint( string.lower( \"1234567890\" ) )","output":"```\nabcdefg\nabcdefg\nabcdefg\n1234567890\n```"},{"description":"Demonstrates a common use for string.lower - case-insensitive user input.","code":"-- All keys in this table must be lowercase:\nlocal products = {}\nproducts.apple = \"Buy an apple!\"\nproducts.banana = \"Buy a bunch of bananas!\"\nproducts.tomato = \"There's also tomatoes.\"\n\n-- This function is case-insensitive, meaning \"APPLE\", \"apple\", and \"APPle\" are all the same.\nfunction GetProduct( userinput )\n\n\treturn userinput, products[ string.lower( userinput ) ]\n\nend\n\n-- Demonstration:\nprint( GetProduct( \"apple\" ) )\nprint( GetProduct( \"Apple\" ) )\nprint( GetProduct( \"APPLE\" ) )\nprint()\nprint( GetProduct( \"banana\" ) )\nprint( GetProduct( \"BaNaNa\" ) )","output":"```\napple\tBuy an apple!\nApple\tBuy an apple!\nAPPLE\tBuy an apple!\n\nbanana\tBuy a bunch of bananas!\nBaNaNa\tBuy a bunch of bananas!\n```"}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"NiceTime","parent":"string","type":"libraryfunc","description":"Formats the supplied number (in seconds) to the highest possible time unit.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/string.lua","line":"191"},"args":{"arg":{"text":"The number to format, in seconds.","name":"num","type":"number"}},"rets":{"ret":{"text":"A nicely formatted time string.","name":"","type":"string"}}},"example":{"code":"print(string.NiceTime(600))\nprint(string.NiceTime(630))\nprint(string.NiceTime(660))\nprint(string.NiceTime(4356))\nprint(string.NiceTime(43545456))","output":"```\n10 minutes\n10 minutes\n11 minutes\n1 hour\n1 year\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"NiceSize","parent":"string","type":"libraryfunc","description":"Converts a digital filesize to human-readable text.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/string.lua","line":"270"},"args":{"arg":{"text":"The filesize in bytes.","name":"bytes","type":"number"}},"rets":{"ret":{"text":"The human-readable filesize, in Bytes/KB/MB/GB (whichever is appropriate).","name":"","type":"string"}}},"example":{"description":"Example output of this function.","code":"print(string.NiceSize(64512))","output":"63 KB"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"PatternSafe","parent":"string","type":"libraryfunc","description":"Escapes all special characters within a string, making the string safe for inclusion in a Lua pattern.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/string.lua","line":"66"},"args":{"arg":{"text":"The string to be sanitized","name":"str","type":"string"}},"rets":{"ret":{"text":"The string that has been sanitized for inclusion in Lua patterns","name":"","type":"string"}}},"example":{"description":"Replaces all occurrences of \"100%\" in a string with \"0%\" and prints it.\n\nWe call string.PatternSafe here as '%' is a special character when used in Lua patterns.","code":"local result = string.gsub( \"You scored 100%!\", \n\t\t\t\t\t\t\tstring.PatternSafe( \"100%\" ), \n\t\t\t\t\t\t\tstring.PatternSafe( \"0%\" ) )\n\nprint( result )","output":"You scored 0%!"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"rep","parent":"string","type":"libraryfunc","description":"Repeats a string by the provided number, with an optional separator.","realm":"Shared and Menu","args":{"arg":[{"text":"The string to convert.","name":"str","type":"string"},{"text":"Timer to repeat, this values gets rounded internally.","name":"repetitions","type":"number"},{"text":"String that will separate the repeated piece. Notice that it doesn't add this string to the start or the end of the result, only between the repeated parts.","name":"separator","type":"string","default":""}]},"rets":{"ret":{"text":"Repeated string.","name":"","type":"string"}}},"example":[{"description":"Repeating \"abc\" 5 times.","code":"print(string.rep(\"abc\", 5))","output":"abcabcabcabcabc"},{"description":"Repeating \"hello world\" 3 times, with the separator \" \" (space).","code":"print(string.rep(\"hello world\", 3, \" \"))","output":"hello world hello world hello world"}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Replace","parent":"string","type":"libraryfunc","description":"Replaces all occurrences of the supplied second string.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/string.lua","line":"221"},"args":{"arg":[{"text":"The string we are seeking to replace an occurrence(s).","name":"str","type":"string"},{"text":"What we are seeking to replace.","name":"find","type":"string"},{"text":"What to replace find with.","name":"replace","type":"string"}]},"rets":{"ret":{"text":"string","name":"","type":"string"}}},"example":{"description":"Replaces the word \"Garrys\" by \"Hers\".","code":"local text = \"Garrys Mod\"\nprint(string.Replace(text, \"Garrys\", \"Hers\"))","output":"Hers Mod"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Right","parent":"string","type":"libraryfunc","description":"Returns the last n-th characters of the string.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/string.lua","line":"219"},"args":{"arg":[{"text":"The string to extract from.","name":"str","type":"string"},{"text":"Amount of chars relative to the end (starting from 1).","name":"num","type":"number"}]},"rets":{"ret":{"text":"Returns a string containing a specified number of characters from the right side of a string.","name":"","type":"string"}}},"example":{"description":"Extracts \"mod\" from \"garrys mod\" string.","code":"local text = \"garrys mod\"\nprint( string.Right( text, 3 ) )","output":"mod"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"reverse","parent":"string","type":"libraryfunc","description":"Reverses a string.","realm":"Shared and Menu","args":{"arg":{"text":"The string to be reversed.","name":"str","type":"string"}},"rets":{"ret":{"text":"reversed string","name":"","type":"string"}}},"example":{"description":"Reverse \"abcdef\".","code":"print( string.reverse( \"abcdef\" ) )","output":"fedcba"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"SetChar","parent":"string","type":"libraryfunc","description":"Sets the character at the specific index of the string.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/string.lua","line":"286"},"args":{"arg":[{"text":"The input string","name":"InputString","type":"string"},{"text":"The character index, 1 is the first from left.","name":"Index","type":"number"},{"text":"String to replace with.","name":"ReplacementChar","type":"string"}]},"rets":{"ret":{"text":"ModifiedString","name":"","type":"string"}}},"example":{"description":"Demonstrates the use of SetChar","output":"\"Apgles\"","code":"local str = \"Apples\"\nMsgN(string.SetChar(str, 3, \"g\"))"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Split","parent":"string","type":"libraryfunc","description":"Splits the string into a table of strings, separated by the second argument.\n\nThis is an alias of string.Explode.","realm":"Shared and Menu","args":{"arg":[{"text":"String to split","name":"Inputstring","type":"string"},{"text":"Character(s) to split with.","name":"Separator","type":"string"}]},"rets":{"ret":{"text":"Split table","name":"","type":"table"}}},"example":{"description":"Demonstrates the use of this function.","code":"local mystring = \"This is some text\"\nPrintTable( string.Split( mystring, \" \" ) )","output":"```\n1 = This\n2 = is\n3 = some\n4 = text\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"StripExtension","parent":"string","type":"libraryfunc","description":"Removes the extension of a path.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/string.lua","line":"129"},"args":{"arg":{"text":"The path to change.","name":"Inputstring","type":"string"}},"rets":{"ret":{"text":"Modifiedstring","name":"","type":"string"}}},"example":{"description":"Demonstrates the use of string.StripExtension","code":"MsgN(string.StripExtension(\"garrysmod/lua/modules/string.lua\"))","output":"\"garrysmod/lua/modules/string\""},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"StartWith","parent":"string","type":"libraryfunc","description":"Returns whether or not the first string starts with the second.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/string.lua","line":"301"},"args":{"arg":[{"text":"String to check.","name":"inputStr","type":"string"},{"text":"String to check with.","name":"start","type":"string"}]},"rets":{"ret":{"text":"Whether the first string starts with the second.","name":"","type":"boolean"}}},"example":{"description":"Demonstrates the use of string.StartWith","output":"true","code":"print(string.StartWith(\"hello there\", \"hell\"))"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"sub","parent":"string","type":"libraryfunc","description":"Returns a sub-string, starting from the character at position `StartPos` of the string (inclusive), and optionally ending at the character at position `EndPos` of the string (also inclusive). If EndPos is not given, the rest of the string is returned.","realm":"Shared and Menu","args":{"arg":[{"text":"The string you'll take a sub-string out of.","name":"string","type":"string"},{"text":"The position of the first character that will be included in the sub-string.","name":"StartPos","type":"number"},{"text":"The position of the last character to be included in the sub-string. It can be negative to count from the end.","name":"EndPos","type":"number","default":"nil"}]},"rets":{"ret":{"text":"The substring.","name":"","type":"string"}}},"example":{"description":"Demonstrates the use of this function.","code":"local mystring = \"Some random text\"\nprint( string.sub( mystring, 1, 4 ) )","output":"Some"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"ToColor","parent":"string","type":"libraryfunc","description":"Fetches a Color type from a string.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/string.lua","line":"317"},"args":{"arg":{"text":"The string to convert from.","name":"Inputstring","type":"string"}},"rets":{"ret":{"text":"The output Color","name":"","type":"table"}}},"example":{"description":"Demonstrates the use of string.ToColor","code":"PrintTable( string.ToColor( \"255 0 255 125\" ) )","output":"```\nr = 255\ng = 0\nb = 255\na = 125\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"ToMinutesSeconds","parent":"string","type":"libraryfunc","description":"Returns given time in \"MM:SS\" format.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/string.lua","line":"185"},"args":{"arg":{"text":"Time in seconds","name":"time","type":"number"}},"rets":{"ret":{"text":"Formatted time","name":"","type":"string"}}},"example":{"description":"Example of using this function","code":"print( string.ToMinutesSeconds( 61 ) )","output":"01:01"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"ToMinutesSecondsMilliseconds","parent":"string","type":"libraryfunc","description":"Returns given time in \"MM:SS:MS\" format.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/string.lua","line":"184"},"args":{"arg":{"text":"Time in seconds","name":"time","type":"number"}},"rets":{"ret":{"text":"Formatted time","name":"","type":"string"}}},"example":{"description":"Example of using this function","code":"print( string.ToMinutesSecondsMilliseconds( 61.128 ) )","output":"01:01:13"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"ToTable","parent":"string","type":"libraryfunc","description":{"text":"Splits the string into characters and creates a sequential table of characters.","warning":"As a result of the  encoding, non-ASCII characters will be split into more than one character in the output table. Each character value in the output table will always be 1 byte."},"realm":"Shared and Menu","file":{"text":"lua/includes/extensions/string.lua","line":"7"},"args":{"arg":{"text":"The string you'll turn into a table.","name":"str","type":"string"}},"rets":{"ret":{"text":"A sequential table where each value is a character from the given string","name":"","type":"table"}}},"example":[{"description":"Demonstrates the use of this function.","code":"local mystring = \"text\"\nPrintTable( string.ToTable( mystring ) )","output":"```\n1 = t\n2 = e\n3 = x\n4 = t\n```"},{"description":"Demonstrates how this function behaves with non-ASCII characters - in this case, Greek letters.","code":"for k, v in ipairs( string.ToTable( \"abcd αβγδ\" ) ) do\n\tprint( k, bit.tohex( string.byte( v ) ), v )\nend","output":"```\n1\t00000061\ta\n2\t00000062\tb\n3\t00000063\tc\n4\t00000064\td\n5\t00000020\t \n6\t000000ce\t?\n7\t000000b1\t?\n8\t000000ce\t?\n9\t000000b2\t?\n10\t000000ce\t?\n11\t000000b3\t?\n12\t000000ce\t?\n13\t000000b4\t?\n```"}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Trim","parent":"string","type":"libraryfunc","description":"Removes leading and trailing matches of a string.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/string.lua","line":"245"},"args":{"arg":[{"text":"The string to trim.","name":"Inputstring","type":"string"},{"text":"String to match - can be multiple characters. Matches spaces by default.","name":"Char","type":"string","default":"%s"}]},"rets":{"ret":{"text":"Modified string","name":"","type":"string"}}},"example":[{"description":"Demonstrates the use of string. Trim without second argument.","code":"MsgN(string.Trim(\" hi whatsup \"))","output":"\"hi whatsup\""},{"description":"Trim with longer strings as second argument.","code":"MsgN(string.Trim(\"you cant be serious ,you\", \"you\"))","output":"\" cant be serious ,\""}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"TrimLeft","parent":"string","type":"libraryfunc","description":"Removes leading spaces/characters from a string.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/string.lua","line":"265"},"args":{"arg":[{"text":"String to trim","name":"str","type":"string"},{"text":"Custom character to remove","name":"char","type":"string","default":""}]},"rets":{"ret":{"text":"Trimmed string","name":"","type":"string"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"upper","parent":"string","type":"libraryfunc","description":{"text":"Changes any lower-case letters in a string to upper-case letters.","note":"This function doesn't work on special non-English UTF-8 characters."},"realm":"Shared and Menu","args":{"arg":{"text":"The string to convert.","name":"str","type":"string"}},"rets":{"ret":{"text":"A string representing the value of a string converted to upper-case.","name":"","type":"string"}}},"example":{"description":"Demonstrates the use of this function.","code":"print( string.upper( \"ABCDEFG\" ) )\nprint( string.upper( \"AbCdefG\" ) )\nprint( string.upper( \"abcdefg\" ) )\nprint( string.upper( \"1234567890\" ) )","output":"```\nABCDEFG\n\nABCDEFG\n\nABCDEFG\n\n1234567890\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"TrimRight","parent":"string","type":"libraryfunc","description":"Removes trailing spaces/passed character from a string.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/string.lua","line":"255"},"args":{"arg":[{"text":"String to remove from","name":"str","type":"string"},{"text":"Custom character to remove, default is a space","name":"char","type":"string","default":""}]},"rets":{"ret":{"text":"Trimmed string","name":"","type":"string"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"DisableClipping","parent":"surface","type":"libraryfunc","description":{"text":"Enables or disables the clipping used by the VGUI that limits the drawing operations to a panels bounds.\n\nIdentical to Global.DisableClipping. See also Panel:NoClipping.","deprecated":{"text":"Alias of Global.DisableClipping so use that instead.","br":""}},"realm":"Client and Menu","args":{"arg":{"text":"True to disable, false to enable the clipping","name":"disable","type":"boolean"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"CreateFont","parent":"surface","type":"libraryfunc","description":{"text":"Creates a new font.\n\nTo prevent the font from displaying incorrectly when using the `outline` setting, set `antialias` to false. This will ensure the text properly fills out the entire outline.\n\nBe sure to check the  first! Those fonts can be used without using this function.\n\nSee Also: Finding the Font Name.","page":",List of Default FontsDefault_Fonts","warning":"Due to the static nature of fonts, do **NOT** create the font more than once. You should only be creating them once, it is recommended to create them at the top of your script. Do not use this function within GM:HUDPaint or any other hook!\n\nDefine fonts that you will actually use, as fonts are very taxing on performance and will cause crashes! Do not create fonts for every size."},"realm":"Client and Menu","args":{"arg":[{"text":"The new font name.","name":"fontName","type":"string"},{"text":"The font properties. See the Structures/FontData.","name":"fontData","type":"table"}]}},"example":{"description":"Creates a font with all the defaults showing (any of the fields could be left out for an equivalent font)","code":"surface.CreateFont( \"TheDefaultSettings\", {\n\tfont = \"Arial\", --  Use the font-name which is shown to you by your operating system Font Viewer, not the file name\n\textended = false,\n\tsize = 13,\n\tweight = 500,\n\tblursize = 0,\n\tscanlines = 0,\n\tantialias = true,\n\tunderline = false,\n\titalic = false,\n\tstrikeout = false,\n\tsymbol = false,\n\trotary = false,\n\tshadow = false,\n\tadditive = false,\n\toutline = false,\n} )\n\nhook.Add( \"HUDPaint\", \"HelloThere\", function()\n\tdraw.SimpleText( \"Hello there!\", \"TheDefaultSettings\", ScrW() * 0.5, ScrH() * 0.25, color_white, TEXT_ALIGN_CENTER )\nend )"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"DrawLine","parent":"surface","type":"libraryfunc","description":{"text":"Draws a line from one point to another.","rendercontext":{"hook":"false","type":"2D"}},"realm":"Client and Menu","args":{"arg":[{"text":"The start x integer coordinate.","name":"startX","type":"number"},{"text":"The start y integer coordinate.","name":"startY","type":"number"},{"text":"The end x integer coordinate.","name":"endX","type":"number"},{"text":"The end y integer coordinate.","name":"endY","type":"number"}]}},"example":{"description":"This example will draw a pixel perfect circle in the middle of your screen.","code":"hook.Add( \"HUDPaint\", \"Circle\", function()\n\tlocal center = Vector( ScrW() / 2, ScrH() / 2, 0 )\n\tlocal scale = Vector( 100, 100, 0 )\n\tlocal segmentdist = 360 / ( 2 * math.pi * math.max( scale.x, scale.y ) / 2 )\n\tsurface.SetDrawColor( 255, 0, 0, 255 )\n \n\tfor a = 0, 360 - segmentdist, segmentdist do\n\t\tsurface.DrawLine( center.x + math.cos( math.rad( a ) ) * scale.x, center.y - math.sin( math.rad( a ) ) * scale.y, center.x + math.cos( math.rad( a + segmentdist ) ) * scale.x, center.y - math.sin( math.rad( a + segmentdist ) ) * scale.y )\n\tend\nend )"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"DrawCircle","parent":"surface","type":"libraryfunc","description":{"text":"Draws a hollow circle, made of lines. For a filled circle, see examples for surface.DrawPoly.","rendercontext":{"hook":"false","type":"2D"}},"realm":"Client and Menu","args":{"arg":[{"text":"The center x integer coordinate.","name":"originX","type":"number"},{"text":"The center y integer coordinate.","name":"originY","type":"number"},{"text":"The radius of the circle.","name":"radius","type":"number"},{"text":"The red value of the color to draw the circle with, or a Color.","name":"r","type":"number"},{"text":"The green value of the color to draw the circle with. Unused if a Color was given.","name":"g","type":"number"},{"text":"The blue value of the color to draw the circle with. Unused if a Color was given.","name":"b","type":"number"},{"text":"The alpha value of the color to draw the circle with. Unused if a Color was given.","name":"a","type":"number","default":"255"}]}},"example":{"description":"Example usage. Draws an orange circle at position 500, 500 with a varying/animated radius of 50 to 150.","code":"hook.Add( \"HUDPaint\", \"DrawCircleExample\", function()\n\n\tsurface.DrawCircle( 500, 500, 100 + math.sin( CurTime() ) * 50, Color( 255, 120, 0 ) )\n\nend )"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"DrawOutlinedRect","parent":"surface","type":"libraryfunc","description":{"text":"Draws a hollow box with a given border width.","rendercontext":{"hook":"false","type":"2D"}},"realm":"Client and Menu","args":{"arg":[{"text":"The start x integer coordinate.","name":"x","type":"number"},{"text":"The start y integer coordinate.","name":"y","type":"number"},{"text":"The integer width.","name":"w","type":"number"},{"text":"The integer height.","name":"h","type":"number"},{"text":"The thickness of the outlined box border.","name":"thickness","type":"number"}]}},"example":{"description":"Draws a 100x100 outlined rectangle in top left corner.","code":"hook.Add( \"HUDPaint\", \"DrawOutlinedRect\", function()\n\tsurface.SetDrawColor( 255, 255, 255, 128 )\n\tsurface.DrawOutlinedRect( 25, 25, 100, 100, math.floor( math.sin( CurTime() * 5 ) * 5 ) + 10 )\nend )"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"DrawPoly","parent":"surface","type":"libraryfunc","description":{"text":"Draws a textured polygon (secretly a triangle fan) with a maximum of 4096 vertices.\nOnly works properly with convex polygons. You may try to render concave polygons, but there is no guarantee that things wont get messed up.\n\nUnlike most surface library functions, non-integer coordinates are not rounded.","warning":"You must reset the drawing color and texture before calling the function to ensure consistent results. See examples below.","rendercontext":{"hook":"false","type":"2D"}},"realm":"Client and Menu","args":{"arg":{"text":"A table containing integer vertices. See the Structures/PolygonVertex.\n\n**The vertices must be in clockwise order.**","name":"vertices","type":"table"}}},"example":[{"description":"Draws a red triangle in the top left corner of the screen.","code":"local triangle = {\n\t{ x = 100, y = 200 },\n\t{ x = 150, y = 100 },\n\t{ x = 200, y = 200 }\n}\n\nhook.Add(\"HUDPaint\", \"PolygonTest\", function()\n\t\n\tsurface.SetDrawColor( 255, 0, 0, 255 )\n\tdraw.NoTexture()\n\tsurface.DrawPoly( triangle )\n\nend )","output":{"image":{"src":"draw_poly.png"}}},{"description":"Draws a red triangle in the top left corner of the screen.","code":"local triangle = {\n\t{ x = 100, y = 200 },\n\n\t{ x = 150, y = 100 },\n\t{ x = 200, y = 200 },\n\t{ x = 150, y = 300 },\n\t{ x = 100, y = 300 },\n}\n\nhook.Add(\"HUDPaint\", \"PolygonExample\", function()\n\n\tsurface.SetDrawColor( 255, 255, 0, 255 )\n\tdraw.NoTexture()\n\tsurface.DrawPoly( triangle )\n\nend )","output":{"upload":{"src":"70c/8d8323cd4ef9932.png","size":"48448","name":"drawpoly_example.png"}}},{"description":"A helper function to draw a circle using surface.DrawPoly.","code":"function draw.Circle( x, y, radius, seg )\n\tlocal cir = {}\n\n\ttable.insert( cir, { x = x, y = y, u = 0.5, v = 0.5 } )\n\tfor i = 0, seg do\n\t\tlocal a = math.rad( ( i / seg ) * -360 )\n\t\ttable.insert( cir, { x = x + math.sin( a ) * radius, y = y + math.cos( a ) * radius, u = math.sin( a ) / 2 + 0.5, v = math.cos( a ) / 2 + 0.5 } )\n\tend\n\n\tlocal a = math.rad( 0 ) -- This is needed for non absolute segment counts\n\ttable.insert( cir, { x = x + math.sin( a ) * radius, y = y + math.cos( a ) * radius, u = math.sin( a ) / 2 + 0.5, v = math.cos( a ) / 2 + 0.5 } )\n\n\tsurface.DrawPoly( cir )\nend\n\nhook.Add(\"HUDPaint\", \"PolygonCircleTest\", function()\n\t\n\tsurface.SetDrawColor( 0, 0, 0, 200)\n\tdraw.NoTexture()\n\tdraw.Circle( ScrW() / 2, ScrH() / 2, 200, math.sin( CurTime() ) * 20 + 25 )\n\n\t--Usage:\n\t--draw.Circle( x, y, radius, segments )\n\nend )"}],"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"DrawText","parent":"surface","type":"libraryfunc","description":{"text":"Draw the specified text on the screen, using the previously set position, font and color.","note":["This function does not handle newlines properly","This function sets new text position at the end of the previous drawn text length - this can be used to change text properties (such as font or color) without recalculating and resetting text position. See example #2 for example use of this behavior."],"rendercontext":{"hook":"false","type":"2D"}},"realm":"Client and Menu","args":{"arg":[{"text":"The text to be rendered.","name":"text","type":"string"},{"text":"`true` to force text to render additive, `false` to force not additive, `nil` to use font's value.","name":"forceAdditive","type":"boolean","default":"nil"}]}},"example":[{"description":"Draws 'Hello World' on the screen. All functions in this example must be called for the draw to work flawlessly.","code":"hook.Add( \"HUDPaint\", \"drawsometext\", function()\n\tsurface.SetFont( \"Default\" )\n\tsurface.SetTextColor( 255, 255, 255 )\n\tsurface.SetTextPos( 128, 128 ) \n\tsurface.DrawText( \"Hello World\" )\nend )"},{"description":"Draws rainbow text without using surface.GetTextSize and surface.SetTextPos for every character (more efficient).","code":"local text = \"~Rainbow~\"\nhook.Add( \"HUDPaint\", \"drawsometext\", function()\n\tsurface.SetFont( \"DermaLarge\" )\n\tsurface.SetTextPos( 400, 128 )\n\tfor char = 1, #text do\n\t\tlocal col = HSVToColor( ( ( RealTime() * 100 ) - char * 15 ) % 360, 1, 1 )\n\t\tsurface.SetTextColor( col.r, col.g, col.b )\t\t\t-- Providing 3 numbers to surface.SetTextColor rather  \n\t\tsurface.DrawText( string.sub( text, char, char ) )\t-- than a single color is faster\n\tend\nend )"}],"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"DrawRect","parent":"surface","type":"libraryfunc","description":{"text":"Draws a solid rectangle on the screen.","rendercontext":{"hook":"false","type":"2D"}},"realm":"Client and Menu","args":{"arg":[{"text":"The X integer co-ordinate.","name":"x","type":"number"},{"text":"The Y integer co-ordinate.","name":"y","type":"number"},{"text":"The integer width of the rectangle.","name":"width","type":"number"},{"text":"The integer height of the rectangle.","name":"height","type":"number"}]}},"example":{"description":"Draws a white 100 by 100 rectangle, 25 pixels from the top left of the screen.","code":"hook.Add(\"HUDPaint\", \"MyRect\", function()\n    surface.SetDrawColor(255,255,255,255)\n    surface.DrawRect(25, 25, 100, 100)\nend)","output":{"image":{"src":"surface_drawrect.png"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"DrawTexturedRect","parent":"surface","type":"libraryfunc","description":{"text":"Draw a textured rectangle with the given position and dimensions on the screen, using the current active texture set with surface.SetMaterial. It is also affected by surface.SetDrawColor.\n\nSee also render.SetMaterial and render.DrawScreenQuadEx.\n\nSee also surface.DrawTexturedRectUV.","br":"","rendercontext":{"hook":"false","type":"2D"}},"realm":"Client and Menu","args":{"arg":[{"text":"The X integer co-ordinate.","name":"x","type":"number"},{"text":"The Y integer co-ordinate.","name":"y","type":"number"},{"text":"The integer width of the rectangle.","name":"width","type":"number"},{"text":"The integer height of the rectangle.","name":"height","type":"number"}]}},"example":{"description":"Draws a 512x512 textured rectangle with the wireframe texture.","code":"-- Calling Material() every frame is quite expensive\n-- So we call it once, outside of any hooks, and cache the result in a local variable\nlocal ourMat = Material( \"models/wireframe\" )\n\nhook.Add( \"HUDPaint\", \"PutAUniqueHookNameHere\", function()\n\tsurface.SetDrawColor( 255, 255, 255, 255 ) -- Set the drawing color\n\tsurface.SetMaterial( ourMat ) -- Use our cached material\n\tsurface.DrawTexturedRect( 0, 0, 512, 512 ) -- Actually draw the rectangle\nend )"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"DrawTexturedRectRotated","parent":"surface","type":"libraryfunc","description":{"text":"Draw a textured rotated rectangle with the given position and dimensions and angle on the screen, using the current active texture.","rendercontext":{"hook":"false","type":"2D"}},"realm":"Client and Menu","args":{"arg":[{"text":"The X integer co-ordinate, representing the center of the rectangle.","name":"x","type":"number"},{"text":"The Y integer co-ordinate, representing the center of the rectangle.","name":"y","type":"number"},{"text":"The integer width of the rectangle.","name":"width","type":"number"},{"text":"The integer height of the rectangle.","name":"height","type":"number"},{"text":"The rotation of the rectangle, in degrees.","name":"rotation","type":"number"}]}},"example":[{"description":"A function that allows you to override the origin of rotation.\n\nx0 and y0 are relative to the center of the rectangle.","code":"function surface.DrawTexturedRectRotatedPoint( x, y, w, h, rot, x0, y0 )\n\t\n\tlocal c = math.cos( math.rad( rot ) )\n\tlocal s = math.sin( math.rad( rot ) )\n\t\n\tlocal newx = y0 * s - x0 * c\n\tlocal newy = y0 * c + x0 * s\n\t\n\tsurface.DrawTexturedRectRotated( x + newx, y + newy, w, h, rot )\n\t\nend"},{"description":"Draws a simple red forever rotating box.","code":"function draw.RotatedBox( x, y, w, h, ang, color )\n\tdraw.NoTexture()\n\tsurface.SetDrawColor( color or color_white )\n\tsurface.DrawTexturedRectRotated( x, y, w, h, ang )\nend\n\nhook.Add( \"HUDPaint\", \"my_rotated_box\", function()\n\tdraw.RotatedBox( 100, 100, 100, 100, CurTime() % 360, Color( 255, 0, 0) )\nend )"}],"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"GetAlphaMultiplier","parent":"surface","type":"libraryfunc","description":"Returns the current alpha multiplier affecting drawing operations. This is set by surface.SetAlphaMultiplier or by the game engine in certain other cases.","realm":"Client and Menu","rets":{"ret":{"text":"The multiplier ranging from 0 to 1.","name":"","type":"number"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"GetDrawColor","parent":"surface","type":"libraryfunc","description":{"text":"Returns the current color affecting draw operations.","bug":{"text":"The returned color will not have the color metatable.","issue":"2407"}},"realm":"Client and Menu","rets":{"ret":{"text":"The color that drawing operations will use as a Color.","name":"","type":"table"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"GetHUDTexture","parent":"surface","type":"libraryfunc","description":"Gets the [HUD icon](https://github.com/Facepunch/garrysmod/blob/master/garrysmod/scripts/hud_textures.txt) TextureID with the specified name.","realm":"Client","args":{"arg":{"text":"The name of the texture.","name":"name","type":"string"}},"rets":{"ret":{"name":"TextureID","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetTextColor","parent":"surface","type":"libraryfunc","description":{"text":"Returns the current color affecting text draw operations.","bug":{"text":"The returned color will not have the color metatable.","issue":"2407"}},"realm":"Client and Menu","rets":{"ret":{"text":"The color that text drawing operations will use as a Color.","name":"","type":"table"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"GetTextSize","parent":"surface","type":"libraryfunc","description":"Returns the width and height (in pixels) of the given text, but only if the font has been set with surface.SetFont.","realm":"Client and Menu","args":{"arg":{"text":"The string to check the size of.","name":"text","type":"string"}},"rets":{"ret":[{"text":"Width of the provided text.","name":"","type":"number"},{"text":"Height of the provided text.","name":"","type":"number"}]}},"example":[{"description":"Prints out the size of `Hello World` in the Trebuchet24 font.","code":"surface.SetFont( \"Trebuchet24\" )\n\nlocal text = \"Hello World\"\nlocal width, height = surface.GetTextSize( text )\n\nprint(\"Text width: \" .. width .. \", text height: \" .. height)","output":"```\nText width: 100, text height: 24\n```"},{"description":"Get text height very quickly. No tables or spare variables used.","code":"surface.SetFont( \"Trebuchet24\" )\n\nlocal text = \"Hello World\"\nlocal height = select( 2, surface.GetTextSize( text ) )\n\nprint( height )","output":"```\n24\n```"}],"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"DrawTexturedRectUV","parent":"surface","type":"libraryfunc","description":{"text":"Draws a textured rectangle with a repeated or partial texture.\n\nu and v refer to texture coordinates.\n* (u, v) = (0, 0) is the top left\n* (u, v) = (1, 0) is the top right\n* (u, v) = (1, 1) is the bottom right\n* (u, v) = (0, 1) is the bottom left\n\nUsing a start point of (1, 0) and an end point to (0, 1), you can draw an image flipped horizontally, same goes with other directions. Going above 1 will tile the texture. Negative values are allowed as well.\n\nHere's a helper image:","upload":{"src":"70c/8d7bba248dc08bd.png","size":"183359","name":"image.png"},"note":["If you are using a .png image, you need supply the \"noclamp\" flag as second parameter for Global.Material if you intend to use tiling.","If you find that surface.DrawTexturedRectUV is getting your texture coordinates (u0, v0), (u1, v1) wrong and you're rendering with a material created with Global.CreateMaterial, try adjusting them with the following code:\n\n```\nlocal du = 0.5 / 32 -- half pixel anticorrection\nlocal dv = 0.5 / 32 -- half pixel anticorrection\nlocal u0, v0 = (u0 - du) / (1 - 2 * du), (v0 - dv) / (1 - 2 * dv)\nlocal u1, v1 = (u1 - du) / (1 - 2 * du), (v1 - dv) / (1 - 2 * dv)\n```\n\n\n**Explanation:**\nsurface.DrawTexturedRectUV tries to correct the texture coordinates by half a pixel (something to do with sampling) and computes the correction using IMaterial::GetMappingWidth()/GetMappingHeight(). If the material was created without a $basetexture, then GetMappingWidth()/GetMappingHeight() uses the width and height of the error material (which is 32x32)."],"rendercontext":{"hook":"false","type":"2D"},"bug":{"text":"The UV offsets might require (sub-)pixel correction for accurate tiling results.","issue":"3173"}},"realm":"Client and Menu","args":{"arg":[{"text":"The X integer coordinate.","name":"x","type":"number"},{"text":"The Y integer coordinate.","name":"y","type":"number"},{"text":"The integer width of the rectangle.","name":"width","type":"number"},{"text":"The integer height of the rectangle.","name":"height","type":"number"},{"text":"The U texture mapping of the rectangle origin.","name":"startU","type":"number"},{"text":"The V texture mapping of the rectangle origin.","name":"startV","type":"number"},{"text":"The U texture mapping of the rectangle end.","name":"endU","type":"number"},{"text":"The V texture mapping of the rectangle end.","name":"endV","type":"number"}]}},"example":[{"description":"Demonstrates the function usage.","code":"local mat = Material( \"gui/tool.png\" )\nhook.Add( \"HUDPaint\", \"DrawTexturedRectUV_example1\", function()\n\tsurface.SetDrawColor( color_white )\n\tsurface.SetMaterial( mat )\n\n\tsurface.DrawTexturedRect( 25, 25, 100, 100 )\n\tsurface.DrawTexturedRectUV( 25, 130, 100, 100, 0, 0, 1, 1 ) -- Exactly same as above line\n\n\t-- Draws right half of the texture\n\t-- Note that we also change the width of the rectangle to avoid stetcing of the texture\n\t-- This is for demonstration purposes, you can do whatever it is you need\n\tsurface.DrawTexturedRectUV( 130, 130, 50, 100, 0.5, 0, 1, 1 )\nend )"},{"description":"Paints repeated texture over a panel","code":"local mat = Material( \"icon16/box.png\", \"noclamp\" )\nfunction PANEL:Paint( w, h )\n\t-- Size of your texture, texW - width, texH - height\n\tlocal texW = 16\n\tlocal texH = 16\n\n\tsurface.SetMaterial( mat )\n\tsurface.SetDrawColor( color_white )\n\tsurface.DrawTexturedRectUV( 0, 0, w, h, 0, 0, w / texW, h / texH )\nend"}],"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"GetTextureID","parent":"surface","type":"libraryfunc","description":{"text":"Returns the texture id of the material with the given name/path.","note":"This function will not work with .png or .jpg images. For that, see Global.Material"},"realm":"Client and Menu","args":{"arg":{"text":"Name or path of the texture.","name":"name/path","type":"string"}},"rets":{"ret":{"text":"The texture ID","name":"","type":"number"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"ScreenHeight","parent":"surface","type":"libraryfunc","description":{"text":"Returns the height of the current client's screen.","deprecated":"You should use Global.ScrH instead."},"realm":"Client and Menu","rets":{"ret":{"text":"screenHeight","name":"","type":"number"}}},"example":{"description":"Prints out the current height of the screen.","code":"MsgN(\"Screen height: \" .. surface.ScreenHeight())","output":"Screen height: 1080"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"PlaySound","parent":"surface","type":"libraryfunc","description":"Play a sound file directly on the client (such as UI sounds, etc).","realm":"Client and Menu","args":{"arg":{"text":"The path to the sound file, which must be relative to the sound/ folder.","name":"soundfile","type":"string"}}},"example":{"description":"Plays a sound with a given name. The game will look for the file in following places in that order:\n* garrysmod/addons/myaddon/sound/mysound.wav\n* garrysmod/gamemodes/mygamemode/content/sound/mysound.wav\n* garrysmod/sound/mysound.wav","code":"surface.PlaySound( \"mysound.wav\" )"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"ScreenWidth","parent":"surface","type":"libraryfunc","description":{"text":"Returns the width of the current client's screen.","deprecated":"You should use Global.ScrW instead."},"realm":"Client and Menu","rets":{"ret":{"text":"screenWidth","name":"","type":"number"}}},"example":{"description":"Prints out the current width of the screen.","code":"MsgN(\"Screen width: \" .. surface.ScreenWidth())","output":"Screen width: 1920"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"GetTextureSize","parent":"surface","type":"libraryfunc","description":"Returns the size of the texture with the associated texture ID.\n\nFor `.png/.jpg` textures loaded with Global.Material you can use the `$realheight` and `$realwidth` material parameters (IMaterial:GetInt) to get the size of the image.","realm":"Client and Menu","args":{"arg":{"text":"The texture ID, returned by surface.GetTextureID.","name":"textureID","type":"number"}},"rets":{"ret":[{"text":"The texture width.","name":"","type":"number"},{"text":"The texture height.","name":"","type":"number"}]}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"SetMaterial","parent":"surface","type":"libraryfunc","description":{"text":"Sets the material to be used in all upcoming draw operations using the surface library.\n\nNot to be confused with render.SetMaterial.\n\nSee also surface.SetTexture.\n\nIf you need to unset the texture, use the draw.NoTexture convenience function.","warning":"Global.Material function calls are expensive to be done inside this function or inside rendering context, you should be caching the results of Global.Material calls","note":"When using render.PushRenderTarget or render.SetRenderTarget, `material` should have the `$ignorez` flag set to make it visible. If the material is not used in 3D rendering, it is probably safe to add it with this code:\n```lua\nmaterial:SetInt( \"$flags\", bit.bor( material:GetInt( \"$flags\" ), 32768 ) )\n```"},"realm":"Client and Menu","args":{"arg":{"text":"The material to be used.","name":"material","type":"IMaterial"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"SetDrawColor","parent":"surface","type":"libraryfunc","description":{"text":"Set the color of any future shapes to be drawn, can be set by either using R, G, B, A as separate values or by a Color. Using a color structure is not recommended to be created procedurally.","note":["Providing a Color structure is slower than providing four numbers. You may use Color:Unpack for this.","The alpha value may not work properly if you're using a material without `$vertexalpha`.","Due to post processing and gamma correction the color you set with this function may appear differently when rendered. This problem does not occur on materials drawn with surface.DrawTexturedRect."]},"realm":"Client and Menu","args":{"arg":[{"text":"The red value of color, or a Color.","name":"r","type":"number"},{"text":"The green value of color. Unused if a Color was given.","name":"g","type":"number"},{"text":"The blue value of color. Unused if a Color was given.","name":"b","type":"number"},{"text":"The alpha value of color. Unused if a Color was given.","name":"a","type":"number","default":"255"}]}},"example":{"description":"Draws a 512x512 textured rectangle with the wireframe material.","code":"local myMaterial = Material( \"models/wireframe\" ) -- Calling Material() every frame is quite expensive\n\nhook.Add( \"HUDPaint\", \"example_hook\", function()\n\tsurface.SetDrawColor( 255, 0, 0 ) -- Set the color to red\n\tsurface.SetMaterial( myMaterial ) -- If you use Material, cache it!\n\tsurface.DrawTexturedRect( 0, 0, 512, 512 )\nend )"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"SetFont","parent":"surface","type":"libraryfunc","description":"Set the current font to be used for text operations later.\n\nThe fonts must first be created with surface.CreateFont or be one of the Default Fonts.","realm":"Client and Menu","args":{"arg":{"text":"The name of the font to use.","name":"fontName","type":"string"}}},"example":{"description":"Draws 'Hello World' on the screen, with the 'Default' font.","code":"hook.Add( \"HUDPaint\", \"HUDPaint_DrawABox\", function()\n\tsurface.SetDrawColor( 0, 0, 0, 128 ) -- Set color for background\n\tsurface.DrawRect( 100, 100, 128, 20 ) -- Draw background\n\n\tsurface.SetTextColor( 255, 255, 255 ) -- Set text color\n\tsurface.SetTextPos( 136, 104 ) -- Set text position, top left corner\n\tsurface.SetFont( \"Default\" ) -- Set the font\n\tsurface.DrawText( \"Hello World\" ) -- Draw the text\nend )"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"SetAlphaMultiplier","parent":"surface","type":"libraryfunc","description":"Sets the alpha multiplier that will influence all upcoming drawing operations.\nSee also render.SetBlend.","realm":"Client and Menu","args":{"arg":{"text":"The multiplier ranging from 0 to 1.","name":"multiplier","type":"number"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"SetTextColor","parent":"surface","type":"libraryfunc","description":{"text":"Set the color of any future text to be drawn, can be set by either using R, G, B, A as separate numbers or by a Color.\n\nUsing a color structure is not recommended to be created procedurally.","note":"Providing a Color structure is slower than providing four numbers. You may use Color:Unpack for this."},"realm":"Client and Menu","args":{"arg":[{"text":"The red value of color, or a Color.","name":"r","type":"number"},{"text":"The green value of color","name":"g","type":"number"},{"text":"The blue value of color","name":"b","type":"number"},{"text":"The alpha value of color","name":"a","type":"number","default":"255"}]}},"example":{"description":"Draws 'Hello World', in white, near the top left of the screen.","code":"hook.Add( \"HUDPaint\", \"HUDPaint_DrawABox\", function()\n\tsurface.SetDrawColor( 0, 0, 0, 128 ) -- Set color for background\n\tsurface.DrawRect( 100, 100, 128, 20 ) -- Draw background\n\n\tsurface.SetTextColor( 255, 255, 255 ) -- Set text color\n\tsurface.SetTextPos( 136, 104 ) -- Set text position, top left corner\n\tsurface.SetFont( \"Default\" ) -- Set the font\n\tsurface.DrawText( \"Hello World\" ) -- Draw the text\nend )"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"SetTextPos","parent":"surface","type":"libraryfunc","description":"Set the top-left position to draw any future text at.","realm":"Client and Menu","args":{"arg":[{"text":"The X integer co-ordinate.","name":"x","type":"number"},{"text":"The Y integer co-ordinate.","name":"y","type":"number"}]}},"example":{"description":"Draws 'Hello World' on the screen, around top-left of the screen.","code":"hook.Add( \"HUDPaint\", \"HUDPaint_DrawABox\", function()\n\tsurface.SetDrawColor( 0, 0, 0, 128 ) -- Set color for background\n\tsurface.DrawRect( 100, 100, 128, 20 ) -- Draw background\n\n\tsurface.SetTextColor( 255, 255, 255 ) -- Set text color\n\tsurface.SetTextPos( 136, 104 ) -- Set text position, top left corner\n\tsurface.SetFont( \"Default\" ) -- Set the font\n\tsurface.DrawText( \"Hello World\" ) -- Draw the text\nend )"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"AppTime","parent":"system","type":"libraryfunc","description":{"text":"Returns the total uptime of the current application as reported by Steam.\n\nThis will return a similar value to Global.SysTime.","note":"This function does not work on Dedicated Servers and will instead return no value."},"realm":"Shared and Menu","rets":{"ret":{"text":"Seconds of game uptime as an integer.","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"SetTexture","parent":"surface","type":"libraryfunc","description":"Sets the texture to be used in all upcoming draw operations using the surface library.\n\nSee also surface.SetMaterial for an IMaterial alternative.","realm":"Client and Menu","args":{"arg":{"text":"The ID of the texture to draw with returned by surface.GetTextureID.","name":"textureID","type":"number"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"GetCountry","parent":"system","type":"libraryfunc","description":{"text":"Returns the country code of this computer, determined by the localisation settings of the OS.","note":"This function does not work on Dedicated Servers and will instead return no value."},"realm":"Shared and Menu","rets":{"ret":{"text":"Two-letter country code, using [ISO 3166-1](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) standard.","name":"","type":"string"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"BatteryPower","parent":"system","type":"libraryfunc","description":"Returns the current battery power.","realm":"Shared and Menu","rets":{"ret":{"text":"0-100 if a battery (laptop, UPS, etc) is present.\n\nWill instead return 255 if plugged in without a battery.","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"HasFocus","parent":"system","type":"libraryfunc","description":{"text":"Returns whether or not the game window has focus.","note":"This function does not work on dedicated servers and will instead return no value.","bug":{"text":"This will return true when minimized in windowed-mode.","issue":"2424"}},"realm":"Shared and Menu","rets":{"ret":{"text":"Whether or not the game window has focus.","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"FlashWindow","parent":"system","type":"libraryfunc","description":"Flashes the window, turning the border to white briefly","realm":"Client and Menu"},"warning":"Currently works only on Windows.","realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"IsOSX","parent":"system","type":"libraryfunc","description":"Returns whether the current OS is OSX.","realm":"Shared and Menu","rets":{"ret":{"text":"Whether or not the game is running on OSX.","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"IsLinux","parent":"system","type":"libraryfunc","description":"Returns whether the current OS is Linux.","realm":"Shared and Menu","rets":{"ret":{"text":"Whether or not the game is running on Linux.","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"IsWindowed","parent":"system","type":"libraryfunc","description":{"text":"Returns whether the game is being run in a window or in fullscreen (you can change this by opening the menu, clicking 'Options', then clicking the 'Video' tab, and changing the Display Mode using the dropdown menu):","image":{"src":"DisplayModeDropdown.jpeg"}},"realm":"Client and Menu","info":"Returns true if the game is currently running windowed, false if it is fullscreen.","rets":{"ret":{"text":"Is the game running in a window?","name":"","type":"boolean"}}},"example":{"description":"If the game is windowed, then the game window will flash","code":"if system.IsWindowed() then\n\tsystem.FlashWindow()\nend"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"IsWindows","parent":"system","type":"libraryfunc","description":"Returns whether the current OS is Windows.","realm":"Shared and Menu","rets":{"ret":{"text":"Whether the system the game runs on is Windows or not.","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"SteamTime","parent":"system","type":"libraryfunc","description":{"text":"Returns the synchronized Steam time. This is the number of seconds since the [Unix epoch](http://en.wikipedia.org/wiki/Unix_time).","note":"This function does not work on Dedicated Servers and will instead return no value."},"realm":"Shared and Menu","rets":{"ret":{"text":"Current Steam-synchronized Unix time.","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"UpTime","parent":"system","type":"libraryfunc","description":{"text":"Returns the amount of seconds since the Steam user last moved their mouse.\n\nThis is a direct binding to ISteamUtils->GetSecondsSinceComputerActive, and is most likely related to Steam's automatic \"Away\" online status.","note":"This function does not work on Dedicated Servers and will instead return no value."},"realm":"Shared and Menu","rets":{"ret":{"text":"The amount of seconds since the Steam user last moved their mouse.","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Add","parent":"table","type":"libraryfunc","description":"Adds the contents from one table into another. The target table will be modified.\n\nSee also table.insert, table.Inherit and table.Merge.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/table.lua","line":"112"},"args":{"arg":[{"text":"The table to insert the new values into.","name":"target","type":"table"},{"text":"The table to retrieve the values from.","name":"source","type":"table"}]},"rets":{"ret":{"text":"The target table.","name":"","type":"table"}}},"example":{"description":"Demonstrates the use of this function. Note that duplicate values will be added.","code":"local Test1 = {\"One\",\"Two\",\"Three\", \"Four\"}\nlocal Test2 = {\"Four\", \"Five\", \"Six\"}\ntable.Add( Test1, Test2 )\nprint( table.concat(Test1, \" \") )","output":"One Two Three Four Four Five Six"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"ClearKeys","parent":"table","type":"libraryfunc","description":"Changes all keys to sequential integers. This creates a new table object and does not affect the original.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/table.lua","line":"468-L481"},"args":{"arg":[{"text":"The original table to modify.","name":"table","type":"table"},{"text":"Save the keys within each member table. This will insert a new field `__key` into each value, and should not be used if the table contains non-table values.","name":"saveKeys","type":"boolean","default":"false"}]},"rets":{"ret":{"text":"Table with integer keys.","name":"","type":"table"}}},"example":[{"description":"Changes all the table's keys to integer values","code":"local Table = {One = \"A\", Two = \"B\", Three = \"C\"}\nlocal Table2 = table.ClearKeys(Table)\nPrintTable(Table2)","output":"1 = A\n\n\n2 = C\n\n\n3 = B"},{"description":"Clears a table of its keys, and preserves the old key names within each member.","code":"local tbl = {\n\tFirstMember = { Name = \"John Smith\", Age  = 25 },\n\tSecondMember = { Name = \"Jane Doe\", Age = 42 },\n\tThirdMember = { Name = \"Joe Bloggs\", Age = 39 }\n}\nprint( \"===== Before =====\" )\nPrintTable( tbl )\nlocal tbl2 = table.ClearKeys( tbl, true )\nprint( \"===== After =====\" )\nPrintTable( tbl2 )","output":"```\n===== Before =====\nFirstMember:\n\t\tName\t=\tJohn Smith\n\t\tAge\t=\t25\nSecondMember:\n\t\tName\t=\tJane Doe\n\t\tAge\t=\t42\nThirdMember:\n\t\tName\t=\tJoe Bloggs\n\t\tAge\t=\t39\n===== After =====\n1:\n\t\tAge\t=\t25\n\t\tName\t=\tJohn Smith\n\t\t__key\t=\tFirstMember\n2:\n\t\tAge\t=\t39\n\t\tName\t=\tJoe Bloggs\n\t\t__key\t=\tThirdMember\n3:\n\t\tAge\t=\t42\n\t\tName\t=\tJane Doe\n\t\t__key\t=\tSecondMember\n```"}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"concat","parent":"table","type":"libraryfunc","description":"Concatenates the contents of a table to a string.","realm":"Shared and Menu","args":{"arg":[{"text":"The table to concatenate.","name":"tbl","type":"table"},{"text":"A separator to insert between strings","name":"concatenator","type":"string","default":""},{"text":"The key to start at","name":"startPos","type":"number","default":"1"},{"text":"The key to end at","name":"endPos","type":"number","default":"#tbl"}]},"rets":{"ret":{"text":"Concatenated values","name":"","type":"string"}}},"example":{"description":"Demonstrates the use of this function.","code":"local Table = { \"A\", \"simple\", \"table.concat\", \"test\" }\nprint( table.concat( Table ) )\nprint( table.concat( Table, \" \" ) )\nprint( table.concat( Table, \" \", 3, 4 ) )","output":"```\nAsimpletable.concattest\nA simple table.concat test\ntable.concat test\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Copy","parent":"table","type":"libraryfunc","description":{"text":"Creates a deep copy and returns that copy.","warning":"This function does NOT copy userdata, such as Vectors and Angles!"},"realm":"Shared and Menu","file":{"text":"lua/includes/extensions/table.lua","line":"24"},"args":{"arg":{"text":"The table to be copied.","name":"originalTable","type":"table"}},"rets":{"ret":{"text":"A deep copy of the original table","name":"","type":"table"}}},"example":{"description":"Creates a deep copy of table A","code":"B = table.Copy(A)"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"CollapseKeyValue","parent":"table","type":"libraryfunc","description":"Collapses a table with keyvalue structure","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/table.lua","line":"430"},"args":{"arg":{"text":"Input table","name":"input","type":"table"}},"rets":{"ret":{"text":"Output table","name":"","type":"table"}}},"example":{"description":"Example usage","code":"local output = table.CollapseKeyValue( {\n\t{ Key = \"mykey1\", Value = \"myvalue1\" },\n\t{ Key = 123, Value = 1345 },\n\t{ Key = 1345, Value = \"myvalue1\" },\n} )","output":"```\nlocal output = {\n\t[ \"mykey1\" ] = \"myvalue1\",\n\t[ 123 ] = 1345,\n\t[ 1345 ] = \"myvalue1\",\n}\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"CopyFromTo","parent":"table","type":"libraryfunc","description":"Empties the target table, and merges all values from the source table into it.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/table.lua","line":"61"},"args":{"arg":[{"text":"The table to copy from.","name":"source","type":"table"},{"text":"The table to write to.","name":"target","type":"table"}]}},"example":{"description":"Demonstrates the use of this function.","code":"local Test1 = {A = \"String keys\", B = \"Table 1\"}\nlocal Test2 = {\"Numeric keys\", \"Table 2\"}\ntable.CopyFromTo( Test2, Test1 )\nPrintTable( Test1 )","output":"1 = Numeric keys\n\n\n2 = Table 2"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Count","parent":"table","type":"libraryfunc","description":"Counts the amount of keys in a table. This should only be used when a table is not numerically and sequentially indexed. For those tables, consider the length (**#**) operator.\n\nIf you only want to test if the table is empty or not, use table.IsEmpty instead as it is a lot faster.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/table.lua","line":"159"},"args":{"arg":{"text":"The table to count the keys of.","name":"tbl","type":"table"}},"rets":{"ret":{"text":"The number of keyvalue pairs. This includes non-numeric and non-sequential keys, unlike the length (**#**) operator.","name":"","type":"number"}}},"example":[{"description":"There are 4 keys in this table. So it will output \"4\"","code":"local Table = { A = \"1\", B = \"2\", C = \"3\", D = \"4\" }\n\nprint( table.Count( Table ) )","output":"```\n4\n```"},{"description":"Difference between the length (**#**) operator and this function.\n\nThe length (**#**) operator is generally considered faster, but has limitations.","code":"local Table = { A = \"1\", B = \"2\", C = \"3\", D = \"4\" }\n\nprint( table.Count( Table ), #Table ) -- #Table will return 0 because the table contains no numeric keys\n\nlocal Table2 = { \"test1\", \"test2\", \"test3\" } -- 1 = \"test1\", 2 = \"test2\"\n\nprint( table.Count( Table2 ), #Table2 ) -- Both will be 3\n\nTable2[ 5 ] = \"test5\" -- Insert a new value at index 5, so index 4 does not exist\n\n-- table.Count here will return correct value, #Table2 will return 3 because\n-- the new value is non sequential ( there is nothing at index 4 )\nprint( table.Count( Table2 ), #Table2 )","output":"```\n4 0\n3 3\n4 3\n```"}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"DeSanitise","parent":"table","type":"libraryfunc","description":"Converts a table that has been sanitised with table.Sanitise back to its original form","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/table.lua","line":"303"},"args":{"arg":{"text":"Table to be de-sanitised","name":"tbl","type":"table"}},"rets":{"ret":{"text":"De-sanitised table","name":"","type":"table"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Empty","parent":"table","type":"libraryfunc","description":"Removes all values from a table.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/table.lua","line":"49"},"args":{"arg":{"text":"The table to empty.","name":"tbl","type":"table"}}},"example":{"description":"Demonstrates the use of this function.","code":"local Table = {\"String Value\", \"Another value\", Var = \"Non-integer key\"}\ntable.Empty(Table)\nprint( table.Count(Table) )","output":"0"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"FindNext","parent":"table","type":"libraryfunc","description":{"text":"Returns the value positioned after the supplied value in a table. If it isn't found then the first element in the table is returned","deprecated":"Instead, iterate the table using ipairs or increment from the previous index using Global.next. Non-numerically indexed tables are not ordered."},"realm":"Shared and Menu","file":{"text":"lua/includes/extensions/table.lua","line":"655"},"args":{"arg":[{"text":"Table to search","name":"tbl","type":"table"},{"text":"Value to return element after","name":"value","type":"any"}]},"rets":{"ret":{"text":"Found element","name":"","type":"any"}}},"example":{"description":"Print the next element after the \"b\" value of the table","code":"local tbl = {\"a\", \"b\", \"c\"}\n\nprint(table.FindNext(tbl, \"b\"))","output":"c in console"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"FindPrev","parent":"table","type":"libraryfunc","description":{"text":"Returns the value positioned before the supplied value in a table. If it isn't found then the last element in the table is returned","deprecated":"Instead, iterate your table with ipairs, storing the previous value and checking for the target. Non-numerically indexed tables are not ordered."},"realm":"Shared and Menu","file":{"text":"lua/includes/extensions/table.lua","line":"667"},"args":{"arg":[{"text":"Table to search","name":"tbl","type":"table"},{"text":"Value to return element before","name":"value","type":"any"}]},"rets":{"ret":{"text":"Found element","name":"","type":"any"}}},"example":{"description":"Print the previous item the value \"b\" of the table","code":"local tbl = {\"a\", \"b\", \"c\"}\n\nprint(table.FindPrev(tbl, \"b\"))","output":"a in console"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"ForceInsert","parent":"table","type":"libraryfunc","description":"Inserts a value in to the given table even if the table is non-existent","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/table.lua","line":"369"},"args":{"arg":[{"text":"Table to insert value in to","name":"tab","type":"table","default":"{}"},{"text":"Value to insert","name":"value","type":"any"}]},"rets":{"ret":{"text":"The supplied or created table","name":"","type":"table"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"foreachi","parent":"table","type":"libraryfunc","description":{"text":"Iterates for each numeric index in the table in order.\n\nThis is inherited from the original Lua implementation and is deprecated in Lua as of 5.1; see [here](http://lua-users.org/wiki/TableLibraryTutorial). You should use Global.ipairs() instead.","deprecated":"This was deprecated in Lua 5.1 and removed in 5.2. You should use Global.ipairs() instead."},"realm":"Shared and Menu","args":{"arg":[{"text":"The table to iterate over.","name":"table","type":"table"},{"text":"The function to run for each index.","name":"func","type":"function"}]}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"foreach","parent":"table","type":"libraryfunc","description":{"text":"Iterates for each key-value pair in the table, calling the function with the key and value of the pair. If the function returns anything, the loop is broken.\n\nThis is inherited from the original Lua implementation and is deprecated in Lua as of 5.1; see [here](http://lua-users.org/wiki/TableLibraryTutorial). You should use Global.pairs instead. The GLua interpretation of this is table.ForEach.","deprecated":"This was deprecated in Lua 5.1 and removed in 5.2. You should use Global.pairs instead."},"realm":"Shared and Menu","args":{"arg":[{"text":"The table to iterate over.","name":"tbl","type":"table"},{"text":"The function to run for each key and value.","name":"callback","type":"function"}]}},"example":[{"description":"Demonstrates the use of this function.","code":"local food = { \"Cake\", \"Pies\", Delicious = \"Cookies\", Awesome = \"Pizza\" }\n\ntable.foreach( food, function( key, value )\n\tprint( tostring(key) .. \" \" .. value)\nend)","output":"```\n1 Cake\n2 Pies\nAwesome Pizza\nDelicious Cookies\n```"},{"description":"Demonstrates the breaking effect if the callback returns a value.","code":"local tbl = { \"One\", \"Two\", \"Three\", \"Four\" }\n\ntable.foreach( tbl, function( key, value )\n\tprint( key, value )\n\tif key == 2 then return true end\nend)","output":"```\n1    One\n2    Two\n```"}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"GetFirstKey","parent":"table","type":"libraryfunc","description":{"text":"Returns the first key found in the given table","deprecated":"Instead, expect the first key to be 1.\n\nNon-numerically indexed tables are not ordered and do not have a first key."},"realm":"Shared and Menu","file":{"text":"lua/includes/extensions/table.lua","line":"603"},"args":{"arg":{"text":"Table to retrieve key from","name":"tab","type":"table"}},"rets":{"ret":{"text":"Key","name":"","type":"any"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"GetFirstValue","parent":"table","type":"libraryfunc","description":{"text":"Returns the first value found in the given table","deprecated":"Instead, index the table with a key of 1.\n\nNon-numerically indexed tables are not ordered and do not have a first key."},"realm":"Shared and Menu","file":{"text":"lua/includes/extensions/table.lua","line":"608"},"args":{"arg":{"text":"Table to retrieve value from","name":"tab","type":"table"}},"rets":{"ret":{"text":"Value","name":"","type":"any"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"GetKeys","parent":"table","type":"libraryfunc","description":"Returns all keys of a table.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/table.lua","line":"706"},"args":{"arg":{"text":"The table to get keys of","name":"tabl","type":"table"}},"rets":{"ret":{"text":"Table of keys","name":"","type":"table"}}},"example":{"description":"Example usage","code":"local tabl = {\none = \"A\",\ntwo = \"B\",\n}\nPrintTable( table.GetKeys( tabl ) )","output":"```\n1\t=\tone\n2\t=\ttwo\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"GetLastValue","parent":"table","type":"libraryfunc","description":{"text":"Returns the last value found in the given table","deprecated":"Instead, index the table with the result of the length (#) operator, ensuring it is not zero. Non-numerically indexed tables are not ordered and do not have a last key."},"realm":"Shared and Menu","file":{"text":"lua/includes/extensions/table.lua","line":"618"},"args":{"arg":{"text":"Table to retrieve value from","name":"tab","type":"table"}},"rets":{"ret":{"text":"Value","name":"","type":"any"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"GetLastKey","parent":"table","type":"libraryfunc","description":{"text":"Returns the last key found in the given table","deprecated":"Instead, use the result of the length (#) operator, ensuring it is not zero. Non-numerically indexed tables are not ordered and do not have a last key."},"realm":"Shared and Menu","file":{"text":"lua/includes/extensions/table.lua","line":"613"},"args":{"arg":{"text":"Table to retrieve key from","name":"tab","type":"table"}},"rets":{"ret":{"text":"Key","name":"","type":"any"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"getn","parent":"table","type":"libraryfunc","description":{"text":"Returns the length of the table.","deprecated":"This function was deprecated in Lua 5.1 and is removed in 5.2. Use the length (#) operator instead."},"realm":"Shared and Menu","args":{"arg":{"text":"The table to check.","name":"tbl","type":"table"}},"rets":{"ret":{"text":"Sequential length.","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"GetWinningKey","parent":"table","type":"libraryfunc","description":"Returns a key of the supplied table with the highest number value.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/table.lua","line":"627"},"args":{"arg":{"text":"The table to search in.","name":"inputTable","type":"table"}},"rets":{"ret":{"text":"winningKey","name":"","type":"any"}}},"example":[{"description":"Code that looks up the most favourite fruit from a table where the fruit's name is the key, and it's number value determines how much favourite it is (the higher value, the better).","code":"favouriteFruit = { banana = 4, strawberry = 4, blueberry = 2, apple = 6 }\nprint(table.GetWinningKey(favouriteFruit))","output":"apple"},{"description":"A code that demonstrates a situation where there are two keys with the same value in the supplied table. String keys in the table represent the fruit name, and their number values determine how favourite it is (the higher value, the better).","code":"favouriteFruit = { apple = 1, banana = 7, strawberry = 3, blueberry = 7 }\nprint(table.GetWinningKey(favouriteFruit))","output":"banana"}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"HasValue","parent":"table","type":"libraryfunc","description":{"text":"Checks if a table has a value.","warning":"This function is **very inefficient for large tables** (O(n)) and should probably not be called in things that run each frame. Instead, consider a table structure such as example 2 below. Also see: Tables: Bad Habits","note":"For optimization, functions that look for a value by sorting the table should never be needed if you work on a table that you built yourself."},"realm":"Shared and Menu","file":{"text":"lua/includes/extensions/table.lua","line":"101-L106"},"args":{"arg":[{"text":"Table to check","name":"tbl","type":"table"},{"text":"Value to search for","name":"value","type":"any"}]},"rets":{"ret":{"text":"Returns true if the table has that value, false otherwise","name":"","type":"boolean"}}},"example":[{"description":"Creates a table with values \"123\" and \"test\" and checks to see it the table holds value \"apple\"","code":"local mytable = {\"123\", \"test\"}\nprint(table.HasValue(mytable, \"apple\"), table.HasValue(mytable, \"test\"))","output":"false\ttrue"},{"description":"Example usage of O(1) associative array structure","code":"local mytable = { [\"123\"] = true, test = true }\nprint(mytable[\"apple\"], mytable[\"test\"])","output":"nil\ttrue"}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Inherit","parent":"table","type":"libraryfunc","description":{"text":"Copies any missing data from base to target, and sets the target's `BaseClass` member to the base table's pointer.\n\nSee table.Merge, which overrides existing values and doesn't add a BaseClass member.\n\n\nSee also table.Add, which simply adds values of one table to another.","bug":{"text":"Sub-tables aren't inherited. The target's table value will take priority.","pull":"1304"}},"realm":"Shared and Menu","file":{"text":"lua/includes/extensions/table.lua","line":"5"},"args":{"arg":[{"text":"Table to copy data to","name":"target","type":"table"},{"text":"Table to copy data from","name":"base","type":"table"}]},"rets":{"ret":{"text":"Target","name":"","type":"table"}}},"example":{"description":"Example of how this function works.","code":"local table1 = { \"A\", \"Golden\" }\nlocal table2 = { \"Two\", \"Orange\", \"Apple\" }\ntable.Inherit( table1, table2 )\nPrintTable( table1 )","output":"```\n1\t=\tA\n2\t=\tGolden\n3\t=\tApple\nBaseClass:\n\t\t1\t=\tTwo\n\t\t2\t=\tOrange\n\t\t3\t=\tApple\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"insert","parent":"table","type":"libraryfunc","description":{"text":"Inserts a value into a table at the end of the table or at the given position.","note":"This function does not call the `__newindex` [metamethod](Metamethods)."},"realm":"Shared and Menu","args":{"arg":[{"text":"The table to insert the variable into.","name":"tbl","type":"table"},{"text":"The position in the table to insert the variable. If the third argument is nil this argument becomes the value to insert at the end of given table.","name":"position","type":"number"},{"text":"The variable to insert into the table.","name":"value","type":"any"}]},"rets":{"ret":{"text":"The index the object was placed at.","name":"","type":"number"}}},"example":{"description":"Demonstrates the use of this function.","code":"sentence = { \"hello\", \"there\", \"my\", \"name\", \"is\", \"drakehawke\" }\ntable.insert( sentence, \"lol\" )\ntable.insert( sentence, 6, \"not\" )\n\nPrintTable( sentence )","output":"```\n1\t=\thello\n2\t=\tthere\n3\t=\tmy\n4\t=\tname\n5\t=\tis\n6\t=\tnot\n7\t=\tdrakehawke\n8\t=\tlol\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"IsEmpty","parent":"table","type":"libraryfunc","description":"Returns whether or not the given table is empty.\n\nThis works on both sequential and non-sequential tables, and is a lot faster to use than `table.Count(tbl) == 0`.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/table.lua","line":"55-L61"},"args":{"arg":{"text":"Table to check.","name":"tab","type":"table"}},"rets":{"ret":{"text":"Is empty?","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"IsSequential","parent":"table","type":"libraryfunc","description":"Returns whether or not the table's keys are sequential","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/table.lua","line":"180"},"args":{"arg":{"text":"Table to check","name":"tab","type":"table"}},"rets":{"ret":{"text":"Is sequential","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"KeysFromValue","parent":"table","type":"libraryfunc","description":"Returns a table of keys containing the supplied value","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/table.lua","line":"677"},"args":{"arg":[{"text":"Table to search","name":"tab","type":"table"},{"text":"Value to search for","name":"value","type":"any"}]},"rets":{"ret":{"text":"Keys","name":"","type":"table"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"KeyFromValue","parent":"table","type":"libraryfunc","description":"Returns the first key found to be containing the supplied value","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/table.lua","line":"661"},"args":{"arg":[{"text":"Table to search","name":"tab","type":"table"},{"text":"Value to search for","name":"value","type":"any"}]},"rets":{"ret":{"text":"Key","name":"","type":"any"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"maxn","parent":"table","type":"libraryfunc","description":"Returns the highest numerical key.","realm":"Shared and Menu","args":{"arg":{"text":"The table to search.","name":"tbl","type":"table"}},"rets":{"ret":{"text":"The highest numerical key.","name":"","type":"number"}}},"example":{"description":"Demonstrates how this differs from the **#** operator.","code":"local tbl = {\"One\", \"Two\", [6] = \"Six\", [42] = \"Answer to life, the universe, and everything\"}\n\nPrintTable(tbl)\nprint(\"\\n\" .. #tbl)\nprint(table.maxn(tbl))","output":"```\n1\t=\tOne\n2\t=\tTwo\n6\t=\tSix\n42\t=\tAnswer to life, the universe, and everything\n\n2\n42\n```\n\nWhereas the length operator (**#**) returns the highest `sequential` index, this returns the value of the highest `numeric` index."},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"LowerKeyNames","parent":"table","type":"libraryfunc","description":"Returns a copy of the input table with all string keys converted to be lowercase recursively","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/table.lua","line":"400"},"args":{"arg":{"text":"Table to convert","name":"tbl","type":"table"}},"rets":{"ret":{"text":"New table","name":"","type":"table"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Merge","parent":"table","type":"libraryfunc","description":{"text":"Merges the contents of the second table with the content in the first one. The destination table will be modified.\n\nSee table.Inherit, which doesn't override existing values.\n\n\nSee also table.Add, which simply adds values of one table to another.","note":"This function will cause a stack overflow under certain circumstances."},"realm":"Shared and Menu","file":{"text":"lua/includes/extensions/table.lua","line":"81-L95"},"args":{"arg":[{"text":"The table you want the source table to merge with","name":"destination","type":"table"},{"text":"The table you want to merge with the destination table","name":"source","type":"table"}]},"rets":{"ret":{"text":"Destination table","name":"","type":"table"}}},"example":{"description":"\"Merges\" the content of the second table with the first one, overwriting any matching key/value pairs in the destination with the source's version and prints the resulting merge.","code":"local destination = {[1] = \"A\", [2] = \"Golden\", [3] = \"Apple\"}\nlocal source = {[1] = \"Two\", [2] = \"Orange\"}\ntable.Merge( destination, source )\nPrintTable( destination )","output":"```\n1\t=\tTwo\n2\t=\tOrange\n3\t=\tApple\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Random","parent":"table","type":"libraryfunc","description":{"text":"Returns a random value from the supplied table.","warning":"This function iterates over the given table **twice**, therefore with sequential tables you should instead use following:\n\n```\nmytable[ math.random( #mytable ) ]\n```"},"realm":"Shared and Menu","file":{"text":"lua/includes/extensions/table.lua","line":"166"},"args":{"arg":{"text":"The table to choose from.","name":"haystack","type":"table"}},"rets":{"ret":[{"text":"A random value from the table.","name":"","type":"any"},{"text":"The key associated with the random value.","name":"","type":"any"}]}},"example":[{"description":"A simple example of this function using two tables.","code":"color = { \"green\", \"red\", \"blue\", \"yellow\" }\nobject = { \"car\", \"house\", \"bike\" }\n\nprint( \"I have a \" .. table.Random( color ) .. \" \" .. table.Random( object ) .. \".\" )","output":"I have a green house."},{"description":"Example of using the alternative with sequential tables for performance reasons.","code":"websites = {\"facepunch.com\", \"google.com\", \"steampowered.com\"}\nprint(\"I think the best website ever is \" .. websites[math.random(1, #websites)] .. \".\")","output":"I think the best website ever is google.com."}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"RemoveByValue","parent":"table","type":"libraryfunc","description":{"text":"Removes the first instance of a given value from the specified table with table.remove, then returns the key that the value was found at.","warning":"Avoid usage of this function. It does not remove all instances of given value in the table, only the first found, and it does not work with non sequential tables!"},"realm":"Shared and Menu","file":{"text":"lua/includes/extensions/table.lua","line":"649-L657"},"args":{"arg":[{"text":"The table that will be searched.","name":"tbl","type":"table"},{"text":"The value to find within the table.","name":"val","type":"any"}]},"rets":{"ret":{"text":"The key at which the value was found, or false if the value was not found.","name":"","type":"any"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"remove","parent":"table","type":"libraryfunc","description":{"text":"Removes a value from a table and shifts any other values down to fill the gap.","note":"Does nothing if index is less than 1 or greater than `#tbl`"},"realm":"Shared and Menu","args":{"arg":[{"text":"The table to remove the value from.","name":"tbl","type":"table"},{"text":"The index of the value to remove.","name":"index","type":"number","default":"#tbl"}]},"rets":{"ret":{"text":"The value that was removed.","name":"","type":"any"}}},"example":{"description":"Demonstrates the use of this function.","code":"sentence = { \"hello\", \"there\", \"my\", \"name\", \"is\", \"Player1\" }\nprint( table.remove( sentence ) ) -- Using no second arg removes the last value\nprint( table.remove( sentence, 2 ) )\nPrintTable( sentence )","output":"```\nPlayer1\nthere\n1 = hello\n2 = my\n3 = name\n4 = is\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Reverse","parent":"table","type":"libraryfunc","description":"Returns a reversed copy of a sequential table. Any non-sequential and non-numeric keyvalue pairs will not be copied.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/table.lua","line":"667-L678"},"args":{"arg":{"text":"Table to reverse.","name":"tbl","type":"table"}},"rets":{"ret":{"text":"A reversed copy of the table.","name":"","type":"table"}}},"example":{"description":"Creates a table and reverses it.","code":"local tbl = { \"One\", \"Two\", \"Three\", four = 4, [5] = \"5\" }\n\nPrintTable(tbl)\nprint(\"\")\nPrintTable(table.Reverse(tbl))","output":"```\n1\t=\tOne\n2\t=\tTwo\n3\t=\tThree\nfour\t=\t4\n5\t=\t5\n\n1\t=\tThree\n2\t=\tTwo\n3\t=\tOne\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Sanitise","parent":"table","type":"libraryfunc","description":"Converts Vectors, Angles and booleans to be able to be converted to and from key-values. table.DeSanitise does the opposite","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/table.lua","line":"266-L311"},"args":{"arg":{"text":"Table to sanitise","name":"tab","type":"table"}},"rets":{"ret":{"text":"Sanitised table","name":"","type":"table"}}},"example":{"description":"Example of what this function does.","code":"local table1 = { \"A\", \"Golden\", Angle( 1, 2, 3 ), Vector( 1, 2, 3 ) }\n\nPrintTable( table.Sanitise( table1 ) )","output":"```\n1\t=\tA\n2\t=\tGolden\n3:\n\t\t__type\t=\tAngle\n\t\tp\t=\t1\n\t\tr\t=\t3\n\t\ty\t=\t2\n4:\n\t\t__type\t=\tVector\n\t\tx\t=\t1\n\t\ty\t=\t2\n\t\tz\t=\t3\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"SortDesc","parent":"table","type":"libraryfunc","description":{"text":"Sorts a table in reverse order from table.sort.","note":"This function modifies the table you give to it. Like table.sort, it does not return anything."},"realm":"Shared and Menu","file":{"text":"lua/includes/extensions/table.lua","line":"129"},"args":{"arg":{"text":"The table to sort in descending order.","name":"tbl","type":"table"}}},"example":{"description":"","code":"local tbl = {\n    20,\n    10,\n    50,\n    30,\n    40,\n}\n\ntable.SortDesc(tbl)\nPrintTable(tbl)","output":"```\n1\t=\t50\n2\t=\t40\n3\t=\t30\n4\t=\t20\n5\t=\t10\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"sort","parent":"table","type":"libraryfunc","description":{"text":"Sorts a sequential table either ascending or by the given sort function.","note":"This function modifies the table you give to it."},"realm":"Shared and Menu","args":{"arg":[{"text":"The table to sort.","name":"tbl","type":"table"},{"text":"If specified, the function will be called with 2 parameters each.\nReturn true in this function if you want the first parameter to come first in the sorted array.","name":"sorter","type":"function"}]}},"example":[{"description":"Sorting table by an integer","code":"local tbl = {\n\t{ \"Jeff\", 8 },\n\t{ \"Peter\", 17 },\n\t{ \"Shay\", 11 },\n\t{ \"Janine\", 1 }\n}\n\ntable.sort( tbl, function(a, b) return a[2] > b[2] end )","output":"Table going from highest number to lowest (1: Peter, 2: Shay, 3: Jeff, 4: Janine)"},{"description":"Sorting a player table by a NWInt","code":"local plys = player.GetAll()\n\ntable.sort( plys, function(a, b) return a:GetNWInt(\"Score\") > b:GetNWInt(\"Score\") end )","output":"Player table sorted by score going from highest to lowest"}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"SortByKey","parent":"table","type":"libraryfunc","description":"Returns a list of keys sorted based on values of those keys.\n\nFor normal sorting see table.sort.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/table.lua","line":"140"},"args":{"arg":[{"text":"Table to sort. All values of this table must be of same type.","name":"tab","type":"table"},{"text":"Should the order be descending?","name":"descending","type":"boolean","default":"false"}]},"rets":{"ret":{"text":"A table of keys sorted by values from supplied table.","name":"","type":"table"}}},"example":{"description":"Example usage of the function.","code":"local t = {}\nt['h'] = 2 -- Lowest value\nt['a'] = 150 -- Highest value\nt['x'] = 30\n\nPrintTable( table.SortByKey( t ) )\nPrintTable( table.SortByKey( t , true ) )","output":"```\n1 = a\n2 = x\n3 = h\n```\n\n\n\n```\n1 = h\n2 = x\n3 = a\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"SortByMember","parent":"table","type":"libraryfunc","description":"Sorts a table by a named member.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/table.lua","line":"372-L408"},"args":{"arg":[{"text":"Table to sort.","name":"tab","type":"table"},{"text":"The key used to identify the member.","name":"memberKey","type":"any"},{"text":"Whether or not the order should be ascending.","name":"ascending","type":"boolean","default":"false"}]}},"example":{"description":"Orders a table by a member and prints it.","code":"local tab = {\n    { Name = \"Bill\", Age = 13 },\n    { Name = \"Jill\", Age = 14 },\n    { Name = \"Phil\", Age = 8 }\n}\n\ntable.SortByMember( tab, \"Age\" )\n\nfor _, v in ipairs( tab ) do\n    print( v.Name )\nend","output":"Jill\nBill\nPhil"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"BestAutoJoinTeam","parent":"team","type":"libraryfunc","description":"Returns the team index of the team with the least players. Falls back to TEAM_UNASSIGNED","realm":"Shared","rets":{"ret":{"text":"Team index","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"AddScore","parent":"team","type":"libraryfunc","description":"Increases the score of the given team","realm":"Shared","args":{"arg":[{"text":"Index of the team","name":"index","type":"number"},{"text":"Amount to increase the team's score by","name":"increment","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ToString","parent":"table","type":"libraryfunc","description":"Converts a table into a string","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/table.lua","line":"239"},"args":{"arg":[{"text":"The table to iterate over.","name":"tbl","type":"table"},{"text":"Optional. A name for the table.","name":"displayName","type":"string"},{"text":"Adds new lines and tabs to the string.","name":"niceFormatting","type":"boolean"}]},"rets":{"ret":{"text":"The table formatted as a string.","name":"","type":"string"}}},"example":{"description":"Demonstrates the use of this function.","code":"local Table = { Red = \"Apple\", Green = \"Celery\", Yellow = \"Banana\"}\nlocal String = table.ToString( Table, \"Fruit and Vegetable\", true )\nprint( String )","output":"```\nFruit and Vegetable\t=\t{\n\t\tRed\t=\t\"Apple\",\n\t\tGreen\t=\t\"Celery\",\n\t\tYellow\t=\t\"Banana\",\n}\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"GetAllTeams","parent":"team","type":"libraryfunc","description":"Returns a table consisting of information on every defined team","realm":"Shared","rets":{"ret":{"text":"Team info","name":"","type":"table"}}},"example":{"description":"Prints all Jobs/Teams on the server. The list in printed from lowest to highest. Information about join able to the player, the score of the team and the colors.","code":"PrintTable( team.GetAllTeams() )","output":"```\n0:\n\t\tColor:\n\t\t\t\ta\t=\t255\n\t\t\t\tb\t=\t100\n\t\t\t\tg\t=\t255\n\t\t\t\tr\t=\t255\n\t\tJoinable\t=\tfalse\n\t\tName\t=\tJoining/Connecting\n\t\tScore\t=\t0\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetClass","parent":"team","type":"libraryfunc","description":"Returns the selectable classes for the given team. This can be added to with team.SetClass","realm":"Shared","args":{"arg":{"text":"Index of the team","name":"index","type":"number"}},"rets":{"ret":{"text":"Selectable classes","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetName","parent":"team","type":"libraryfunc","description":"Returns the name of the team.","realm":"Shared","args":{"arg":{"text":"The team index.","name":"teamIndex","type":"number"}},"rets":{"ret":{"text":"The team name. If the team is not defined, returns an empty string.","name":"","type":"string"}}},"example":{"description":"Returns the teams name as a string.","code":"print(team.GetName(Entity(1):Team()))"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetPlayers","parent":"team","type":"libraryfunc","description":"Returns a table with all player of the specified team.","realm":"Shared","args":{"arg":{"text":"The team index.","name":"teamIndex","type":"number"}},"rets":{"ret":{"text":"A table of Players that belong to the requested team.","name":"","type":"table"}}},"example":{"description":"Prints all the players in a player's team.","code":"PrintTable(team.GetPlayers(ply:Team()))","output":"List of players."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetScore","parent":"team","type":"libraryfunc","description":"Returns the score of the team.","realm":"Shared","args":{"arg":{"text":"The team index.","name":"teamIndex","type":"number"}},"rets":{"ret":{"text":"score","name":"","type":"number"}}},"example":{"description":"Get's the teams score, can be a number 1 or 2 depending on how many teams you've set up.","code":"print(team.GetScore(ply:Team()),team.GetScore(1))","output":"1"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetColor","parent":"team","type":"libraryfunc","description":"Returns the team's color.","realm":"Shared","args":{"arg":{"text":"The team index.","name":"teamIndex","type":"number"}},"rets":{"ret":{"text":"The team's color as a Color.","name":"","type":"table"}}},"example":{"description":"( Clientside Example ) Draws a box with the LocalPlayer team's color in the top left corner of the screen.","code":"hook.Add( \"HUDPaint\", \"WikiTeamGetColorExample\", function()\n\tsurface.SetDrawColor( team.GetColor( LocalPlayer():Team() ) )\n\tsurface.DrawRect( 0, 0, 150, 150 )\nend )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetSpawnPoint","parent":"team","type":"libraryfunc","description":"Returns a table of valid spawnpoint classes the team can use. These are set with team.SetSpawnPoint.","realm":"Shared","args":{"arg":{"text":"Index of the team","name":"index","type":"number"}},"rets":{"ret":{"text":"Valid spawnpoint classes","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"NumPlayers","parent":"team","type":"libraryfunc","description":"Returns the amount of players in a team.","file":{"text":"lua/includes/modules/team.lua","line":"129-L133"},"realm":"Shared","args":{"arg":{"text":"The team index.","name":"teamIndex","type":"number"}},"rets":{"ret":{"text":"playerCount","name":"","type":"number"}}},"example":{"description":"Prints the amount of players in a player's team","code":"print(team.NumPlayers(ply:Team()))","output":"The number of players in ply's team."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetSpawnPoints","parent":"team","type":"libraryfunc","description":"Returns a table of valid spawnpoint entities the team can use. These are set with  team.SetSpawnPoint.","realm":"Shared","args":{"arg":{"text":"Index of the team","name":"index","type":"number"}},"rets":{"ret":{"text":"Valid spawnpoint entities","name":"","type":"table"}}},"example":{"description":"Prints a random spawnpoint entity for TEAM_RED","code":"print(table.Random(team.GetSpawnPoints(TEAM_RED)))","output":"Spawnpoint Entity"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetClass","parent":"team","type":"libraryfunc","description":"Sets valid classes for use by a team. Classes can be created using player_manager.RegisterClass","realm":"Shared","args":{"arg":[{"text":"Index of the team","name":"index","type":"number"},{"text":"A class ID or table of class IDs","name":"classes","type":"any"}]}},"example":{"description":"Allows TEAM_RED to access the \"Soldier\" class","code":"team.SetClass( TEAM_RED, {\"Soldier\"} )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetScore","parent":"team","type":"libraryfunc","description":"Sets the score of the given team","realm":"Shared","args":{"arg":[{"text":"Index of the team","name":"index","type":"number"},{"text":"The team's new score","name":"score","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetColor","parent":"team","type":"libraryfunc","description":"Sets the team's color.","realm":"Shared","args":{"arg":[{"text":"The team index.","name":"teamIndex","type":"number"},{"text":"The team's new color as a Color.","name":"color","type":"table"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetSpawnPoint","parent":"team","type":"libraryfunc","description":{"text":"Sets valid spawnpoint classes for use by a team.","note":"GM.TeamBased must be set to true for this to work"},"realm":"Shared","args":{"arg":[{"text":"Index of the team","name":"index","type":"number"},{"text":"A spawnpoint classname or table of spawnpoint classnames","name":"classes","type":"any"}]}},"example":{"description":"Allows TEAM_BLUE to spawn at terrorist spawn points","code":"team.SetSpawnPoint( TEAM_BLUE, {\"info_terror\"} )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Joinable","parent":"team","type":"libraryfunc","description":"Returns if a team is joinable or not. This is set in team.SetUp.","realm":"Shared","args":{"arg":{"text":"The index of the team.","name":"index","type":"number"}},"rets":{"ret":{"text":"True if the team is joinable. False otherwise.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SetUp","parent":"team","type":"libraryfunc","description":"Creates a new team.","realm":"Shared","args":{"arg":[{"text":"The team index.","name":"teamIndex","type":"number"},{"text":"The team name.","name":"teamName","type":"string"},{"text":"The team color. Uses the Color.","name":"teamColor","type":"table"},{"text":"Whether the team is joinable or not.","name":"isJoinable","type":"boolean","default":"true"}]}},"example":{"description":"Create team 2 with name \"Mingebags\" and color red","code":"team.SetUp(2, \"Mingebags\", Color(255, 0, 0))"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"TotalFrags","parent":"team","type":"libraryfunc","description":"Get's the total frags in a team.","realm":"Shared","args":{"arg":{"text":"Entity or number.","name":"Entity or number","type":"Entity"}},"rets":{"ret":{"text":"index","name":"","type":"number"}}},"example":{"description":"Get's the total frags in a team.","code":"print(team.TotalFrags(ply:Team()),team.TotalFrags(1))","output":"1"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Valid","parent":"team","type":"libraryfunc","description":"Returns true if the given team index is valid","realm":"Shared","args":{"arg":{"text":"Index of the team","name":"index","type":"number"}},"rets":{"ret":{"text":"Is valid","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"TotalDeaths","parent":"team","type":"libraryfunc","description":"Returns the sum of deaths of all players of the team.","realm":"Shared","args":{"arg":{"text":"The team index.","name":"teamIndex","type":"number"}},"rets":{"ret":{"text":"deathCount","name":"","type":"number"}}},"example":{"description":"Get's the total deaths in a team.","code":"print(team.TotalDeaths(ply:Team()),team.TotalDeaths(1))","output":"2"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Adjust","parent":"timer","type":"libraryfunc","description":"Adjusts the timer if the timer with the given identifier exists.","realm":"Shared and Menu","args":{"arg":[{"text":"Identifier of the timer to adjust.","name":"identifier","type":"any"},{"text":"The delay interval in seconds. **Must be specified.**","name":"delay","type":"number"},{"text":"Repetitions. Use `0` for infinite or `nil` to keep previous value.","name":"repetitions","type":"number"},{"text":"The new function. Use `nil` to keep previous value.","name":"func","type":"function"}]},"rets":{"ret":{"text":"`true` if succeeded.","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Check","parent":"timer","type":"libraryfunc","description":{"text":"This function does nothing.","deprecated":""},"realm":"Shared and Menu"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Create","parent":"timer","type":"libraryfunc","description":{"text":"Creates a new timer that will repeat its function given amount of times.\nThis function also requires the timer to be named, which allows you to control it after it was created via the timer.\n\nFor a simple one-time timer with no identifiers, see timer.Simple.","warning":"Timers use Global.CurTime internally. Due to this, they won't advance while the client is timing out from the server or on an empty dedicated server due to hibernation. (unless sv_hibernate_think is set to 1)"},"realm":"Shared and Menu","args":{"arg":[{"text":"Identifier of the timer to create. Must be unique. If a timer already exists with the same identifier, that timer will be updated to the new settings and reset.","name":"identifier","type":"string"},{"text":"The delay interval in seconds. If the delay is too small, the timer will fire on the next frame/tick.","name":"delay","type":"number"},{"text":"The number of times to repeat the timer. Enter 0 for infinite repetitions.","name":"repetitions","type":"number"},{"text":"Function called when timer has finished the countdown.","name":"func","type":"function"}]}},"example":[{"description":"Creates a timer that has a 1 second delay and is only ran once ('UniqueName1'), a timer that has a 2 second delay and is ran continuously ('UniqueName2'), etc.\n\nThis shows the different ways you can interact with functions.","code":"local function PrintSomething( text )\n\tprint( text )\nend\n\nlocal function PrintNoArguments()\n\tprint( \"fun with timers!\" )\nend\n\nlocal function CreateSomeTimers( )\n\ttimer.Create( \"UniqueName1\", 1, 1, function() print(\"inside\") end )\n\ttimer.Create( \"UniqueName2\", 2, 0, function() PrintSomething(\"outside\") end )\n\ttimer.Create( \"UniqueName3\", 5, 1, PrintNoArguments )\nend\nhook.Add( \"Initialize\", \"Timer Example\", CreateSomeTimers )","output":"inside -- 1 second\n\noutside -- 2 seconds\n\noutside -- 4 seconds\n\nfun with timers! -- 5 seconds\n\noutside -- 6 seconds\n\noutside -- 8 seconds"},{"description":"Creates a timer that has 0.01 second delay, to demonstrate that the \"minimum\" delay of a timer is locked at the tickrate period (1/66 seconds).\n\n(As the example below shows, by setting the delay rate to 1/100 (0.01 seconds), the difference in time between the iterations of the timer should be 0.01 seconds, but instead, it is 0.149 (1/66) seconds).","code":"local tick = {} \nlocal tick_key = 1 \n\nlocal function MinimumTimerDelay()\t\n\tlocal current_time = CurTime() \n\tif tick_key > 1 then \n\t\tprint( \"Timer Iteration #\" .. tick_key - 1 .. \" had a delay of \" .. current_time - tick[tick_key - 1])\n\tend\n\ttick[tick_key] = current_time \n\ttick_key = tick_key + 1\t\nend\n\nlocal function Timer()\n\ttimer.Create(\"Timer Delay\", (1/100), 10, MinimumTimerDelay ) \nend\n\nhook.Add(\"Initialize\", \"Commence Timers\", Timer)","output":"Timer Iteration #1 had a delay of 0.014999389648438\n\nTimer Iteration #2 had a delay of 0.014999389648438\n\nTimer Iteration #3 had a delay of 0.014999389648438\n\nTimer Iteration #4 had a delay of 0.0150146484375\n\nTimer Iteration #5 had a delay of 0.014999389648438\n\nTimer Iteration #6 had a delay of 0.014999389648438\n\nTimer Iteration #7 had a delay of 0.014999389648438\n\nTimer Iteration #8 had a delay of 0.014999389648438\n\nTimer Iteration #9 had a delay of 0.014999389648438"}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Destroy","parent":"timer","type":"libraryfunc","description":{"text":"Stops and destroys the given timer. Alias of timer.Remove.","deprecated":"You should be using timer.Remove instead."},"realm":"Shared and Menu","args":{"arg":{"text":"Identifier of the timer to destroy.","name":"identifier","type":"string"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Remove","parent":"timer","type":"libraryfunc","description":{"text":"Stops and removes a timer created by timer.Create.","warning":"The timers are removed in the next frame! Keep this in mind when storing identifiers in variables."},"realm":"Shared and Menu","args":{"arg":{"text":"Identifier of the timer to remove.","name":"identifier","type":"string"}}},"example":{"description":"Creates a timer and then removes it","code":"-- create timer\ntimer.Create( \"UniqueName1\", 5, 1, function() print(\"inside\") end )\n\n-- remove timer\ntimer.Remove( \"UniqueName1\" )"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Pause","parent":"timer","type":"libraryfunc","description":"Pauses the given timer.","realm":"Shared and Menu","args":{"arg":{"text":"Identifier of the timer.","name":"identifier","type":"any"}},"rets":{"ret":{"text":"false if the timer didn't exist or was already paused, true otherwise.","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Exists","parent":"timer","type":"libraryfunc","description":"Returns whenever the given timer exists or not.","realm":"Shared and Menu","args":{"arg":{"text":"Identifier of the timer.","name":"identifier","type":"string"}},"rets":{"ret":{"text":"Returns true if the timer exists, false if it doesn't","name":"","type":"boolean"}}},"example":{"description":"Checks it the timer exists","code":"if ( timer.Exists( \"TimerName\" ) ) then\n\n\t-- The timer exists\n\tprint( \"The timer exists\" )\n\t\nelse\n\t-- The timer doesn't exist\n\tprint( \"The timer does not exist!\" )\n\n\t-- Create a timer\n\ttimer.Create( \"TimerName\", 1, 0, function() print( \"I'm a Timer\" ) end)\nend","output":"```\nThe timer does not exist!\nI'm a Timer\nI'm a Timer\nI'm a Timer\nI'm a Timer\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"RepsLeft","parent":"timer","type":"libraryfunc","description":"Returns amount of repetitions/executions left before the timer destroys itself.","realm":"Shared and Menu","args":{"arg":{"text":"Identifier of the timer.","name":"identifier","type":"any"}},"rets":{"ret":{"text":"The amount of executions left.","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Simple","parent":"timer","type":"libraryfunc","description":{"text":"Creates a simple timer that runs the given function after a specified delay.\n\nFor a more advanced version that you can control after creation, see timer.Create.","warning":"Timers use Global.CurTime internally. Due to this, they won't advance while the client is timing out from the server or on an empty dedicated server due to hibernation. (unless sv_hibernate_think is set to 1)"},"realm":"Shared and Menu","args":{"arg":[{"text":"How long until the function should be ran (in seconds). Use 0 to have the function run in the next GM:Think.","name":"delay","type":"number"},{"text":"The function to run after the specified delay.","name":"func","type":"function"}]}},"example":[{"description":"Print \"Hello World\" after 5 seconds.","code":"timer.Simple( 5, function() print( \"Hello World\" ) end )","output":"Hello World"},{"description":"Spawns 5 zombies and creates a timer.Simple that removes them in 11, 12, 13, 14, and 15 seconds.","code":"for i = 1, 5 do\n\tlocal zombie = ents.Create(\"npc_zombie\")\n\tzombie:SetPos( Vector( i * 40, 0 , 250 ) )\n\tzombie:Spawn()\n\n\ttimer.Simple( 10 + i, function() zombie:Remove() end  )\nend","output":"--11 seconds into game 1st zombie disappears\n\n--12 seconds into game 2nd zombie disappears\n\netc."}],"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Start","parent":"timer","type":"libraryfunc","description":{"text":"Restarts the given timer.","note":"Timers use Global.CurTime for timing.","warning":"Timers won't advance while the client is timing out from the server."},"realm":"Shared and Menu","args":{"arg":{"text":"Identifier of the timer.","name":"identifier","type":"any"}},"rets":{"ret":{"text":"true if the timer exists, false if it doesn't.","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Stop","parent":"timer","type":"libraryfunc","description":"Stops the given timer and rewinds it.","realm":"Shared and Menu","args":{"arg":{"text":"Identifier of the timer.","name":"identifier","type":"any"}},"rets":{"ret":{"text":"false if the timer didn't exist or was already stopped, true otherwise.","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"TimeLeft","parent":"timer","type":"libraryfunc","description":{"text":"Returns amount of time left (in seconds) before the timer executes its function.","note":"If the timer is paused, the amount will be negative."},"realm":"Shared and Menu","args":{"arg":{"text":"Identifier of the timer.","name":"identifier","type":"any"}},"rets":{"ret":{"text":"The amount of time left (in seconds).","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Toggle","parent":"timer","type":"libraryfunc","description":"Runs either timer.Pause or timer.UnPause based on the timer's current status.","realm":"Shared and Menu","args":{"arg":{"text":"Identifier of the timer.","name":"identifier","type":"any"}},"rets":{"ret":{"text":"status of the timer.","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Angle","parent":"umsg","type":"libraryfunc","description":"Writes an angle to the usermessage.","realm":"Server","args":{"arg":{"text":"The angle to be sent.","name":"angle","type":"Angle"}}},"deprecated":"You should be using the net instead","realms":["Server"],"type":"Function"},
{"function":{"name":"Bool","parent":"umsg","type":"libraryfunc","description":"Writes a bool to the usermessage.","realm":"Server","args":{"arg":{"text":"The bool to be sent.","name":"bool","type":"boolean"}}},"deprecated":"You should be using the net instead","realms":["Server"],"type":"Function"},
{"function":{"name":"UnPause","parent":"timer","type":"libraryfunc","description":"Unpauses the timer.","realm":"Shared and Menu","args":{"arg":{"text":"Identifier of the timer.","name":"identifier","type":"any"}},"rets":{"ret":{"text":"false if the timer didn't exist or was already running, true otherwise.","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Char","parent":"umsg","type":"libraryfunc","description":"Writes a signed char to the usermessage.","realm":"Server","args":{"arg":{"text":"The char to be sent.","name":"char","type":"number"}}},"deprecated":"You should be using the net instead","realms":["Server"],"type":"Function"},
{"function":{"name":"End","parent":"umsg","type":"libraryfunc","description":"Dispatches the usermessage to the client(s).","realm":"Server"},"deprecated":"You should be using the net instead","realms":["Server"],"type":"Function"},
{"function":{"name":"Float","parent":"umsg","type":"libraryfunc","description":"Writes a float to the usermessage.","realm":"Server","args":{"arg":{"text":"The float to be sent.","name":"float","type":"number"}}},"deprecated":"You should be using the net instead","realms":["Server"],"type":"Function"},
{"function":{"name":"Long","parent":"umsg","type":"libraryfunc","description":"Writes a signed int (32 bit) to the usermessage.","realm":"Server","args":{"arg":{"text":"The int to be sent.","name":"int","type":"number"}}},"deprecated":"You should be using the net instead","realms":["Server"],"type":"Function"},
{"function":{"name":"Short","parent":"umsg","type":"libraryfunc","description":"Writes a signed short (16 bit) to the usermessage.","realm":"Server","args":{"arg":{"text":"The short to be sent.","name":"short","type":"number"}}},"deprecated":"You should be using the net instead","realms":["Server"],"type":"Function"},
{"function":{"name":"Start","parent":"umsg","type":"libraryfunc","description":{"text":"Starts a new usermessage.","deprecated":"You should be using net instead","warning":"Usermessages have a limit of only 256 bytes!"},"realm":"Server","args":{"arg":[{"text":"The name of the message to be sent.","name":"name","type":"string"},{"text":"If passed a player object, it will only be sent to the player, if passed a CRecipientFilter of players, it will be sent to all specified players, if passed nil (or another invalid value), the message will be sent to all players.","name":"filter","type":"Player"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"PoolString","parent":"umsg","type":"libraryfunc","description":{"text":"The string specified will be networked to the client and receive a identifying number, which will be sent instead of the string to optimize networking.","deprecated":"Inferior version of util.AddNetworkString"},"realm":"Server","args":{"arg":{"text":"The string to be pooled.","name":"string","type":"string"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Entity","parent":"umsg","type":"libraryfunc","description":"Writes an entity object to the usermessage.","realm":"Server","args":{"arg":{"text":"The entity to be sent.","name":"entity","type":"Entity"}}},"deprecated":"You should be using the net instead","realms":["Server"],"type":"Function"},
{"function":{"name":"VectorNormal","parent":"umsg","type":"libraryfunc","description":"Writes a vector normal to the usermessage.","realm":"Server","args":{"arg":{"text":"The vector normal to be sent.","name":"normal","type":"Vector"}}},"deprecated":"You should be using the net instead","realms":["Server"],"type":"Function"},
{"function":{"name":"String","parent":"umsg","type":"libraryfunc","description":"Writes a null terminated string to the usermessage.","realm":"Server","args":{"arg":{"text":"The string to be sent.","name":"string","type":"string"}}},"deprecated":"You should be using the net instead","example":{"description":"An easy way to send any string to the client or clients","code":"umsg.Start(\"Example_SendString\") -- With umsg.Start(\"Example_SendString\",pl) Must get pl value the player entity.\n\tumsg.String(\"Custom Text\")\numsg.End()"},"realms":["Server"],"type":"Function"},
{"function":{"name":"Vector","parent":"umsg","type":"libraryfunc","description":"Writes a Vector to the usermessage.","realm":"Server","args":{"arg":{"text":"The vector to be sent.","name":"vector","type":"Vector"}}},"deprecated":"You should be using the net instead","realms":["Server"],"type":"Function"},
{"function":{"name":"AddEntity","parent":"undo","type":"libraryfunc","description":"Adds an entity to the current undo block","realm":"Server","args":{"arg":{"text":"The entity to add","name":"ent","type":"Entity"}}},"example":{"description":"This example creates a prop_physics, and adds it to the players undo list.","code":"prop = ents.Create(\"prop_physics\")\nprop:SetModel(\"models/props_junk/wood_crate001a.mdl\")\nprop:Spawn()\n\nundo.Create(\"prop\")\n\tundo.AddEntity(prop)\n\tundo.SetPlayer(Player)\nundo.Finish()"},"realms":["Server"],"type":"Function"},
{"function":{"name":"AddFunction","parent":"undo","type":"libraryfunc","description":"Adds a function to call when the current undo block is undone. Note that if an undo has a function, the player will always be notified when this undo is performed, even if the entity it is meant to undo no longer exists.","realm":"Server","args":{"arg":[{"text":"The function to call. First argument will be the , all subsequent arguments will be what was passed after this function in the argument below.\n\nReturning `false` will mark execution of this function as \"failed\", meaning that the undo might be skipped if no other entities are removed by it. This is useful when for example an entity you want to access is removed therefore there's nothing to do.","name":"func","type":"function","page":",Undo StructureStructures/Undo"},{"text":"Arguments to pass to the function (after the undo info table)","name":"arguments","type":"vararg"}]}},"example":{"description":"This example creates a prop_physics, and adds it to the players undo list. A message will be printed to console about it.","code":"prop = ents.Create(\"prop_physics\")\nprop:SetModel(\"models/props_junk/wood_crate001a.mdl\")\nprop:Spawn()\n\nundo.Create(\"prop\")\n\tundo.AddEntity(prop)\n\tundo.AddFunction(function( tab, arg2 )\n\t\tprint( tab.Owner:GetName() .. \" removed prop \" .. tab.Entities[1]:GetModel() .. \", code: \" .. arg2 )\n\tend, 556 )\n\tundo.SetPlayer(ply)\nundo.Finish()","output":"```\nPlayerName removed prop models/props_junk/wood_crate001a.mdl, code: 556\n```\nwill be printed"},"realms":["Server"],"type":"Function"},
{"function":{"name":"Create","parent":"undo","type":"libraryfunc","description":"Begins a new undo entry","realm":"Server","args":{"arg":{"text":"Name of the undo message to show to players","name":"name","type":"string"}}},"example":{"description":"This example creates a prop_physics, and adds it to Player's undo list.","code":"prop = ents.Create(\"prop_physics\")\nprop:SetModel(\"models/props_junk/wood_crate001a.mdl\")\nprop:Spawn()\nundo.Create(\"prop\")\n undo.AddEntity(prop)\n undo.SetPlayer(Player)\nundo.Finish()"},"realms":["Server"],"type":"Function"},
{"function":{"name":"Do_Undo","parent":"undo","type":"libraryfunc","description":"Processes an undo block (in table form). This is used internally by the undo manager when a player presses Z.\n\nYou should use `gm_undo` or `gm_undonum *num*` console commands instead of calling this function directly.","realm":"Server","args":{"arg":{"text":"The undo block to process as an Structures/Undo","name":"tab","type":"table"}},"rets":{"ret":{"text":"Number of removed entities","name":"","type":"number"}}},"example":{"description":"This example removes two entities, and informs player 1 that they just \"Undone Prop!\"","code":"local tab = {}\ntab.Owner = Entity(1)\ntab.Name = \"prop\"\ntab.Entities = {Entity(56),Entity(57)}\nundo.Do_Undo(tab)"},"realms":["Server"],"type":"Function"},
{"function":{"name":"Finish","parent":"undo","type":"libraryfunc","description":"Completes an undo entry, and registers it with the player's client","realm":"Shared","file":{"text":"lua/includes/modules/undo.lua","line":"305"},"args":{"arg":{"text":"Text that appears in the player's undo history","name":"NiceText","type":"string"}}},"example":{"description":"This example creates a prop_physics, and adds it to the players undo list.","code":"prop = ents.Create(\"prop_physics\")\nprop:SetModel(\"models/props_junk/wood_crate001a.mdl\")\nprop:Spawn()\nundo.Create(\"prop\")\n undo.AddEntity(prop)\n undo.SetPlayer(Player)\nundo.Finish( \"Prop (\" .. prop:GetModel() .. \")\" )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetTable","parent":"undo","type":"libraryfunc","description":"Serverside, returns a table containing all undo blocks of all players. Clientside, returns a table of the local player's undo blocks.","realm":"Shared","rets":{"ret":{"text":"The undo table.","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"MakeUIDirty","parent":"undo","type":"libraryfunc","description":{"text":"Makes the UI dirty - it will re-create the controls the next time it is viewed.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"ReplaceEntity","parent":"undo","type":"libraryfunc","description":"Replaces any instance of the \"from\" reference with the \"to\" reference, in any existing undo block. Returns true if something was replaced","realm":"Server","args":{"arg":[{"text":"The old entity","name":"from","type":"Entity"},{"text":"The new entity to replace the old one","name":"to","type":"Entity"}]},"rets":{"ret":{"text":"somethingReplaced","name":"","type":"boolean"}}},"example":{"description":"When an entity is ragdolled, this will replace any instances of the entity with it's ragdoll.","code":"function GM:CreateEntityRagdoll( entity, ragdoll )\n\t// Replace the entity with the ragdoll in cleanups etc\n\tundo.ReplaceEntity( entity, ragdoll )\n\tcleanup.ReplaceEntity( entity, ragdoll )\nend"},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetupUI","parent":"undo","type":"libraryfunc","description":{"text":"Adds a hook (CPanelPaint) to the control panel paint function so we can determine when it is being drawn.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetPlayer","parent":"undo","type":"libraryfunc","description":"Sets the player which the current undo block belongs to","realm":"Server","args":{"arg":{"text":"The player responsible for undoing the block","name":"ply","type":"Player"}}},"example":{"description":"This example creates a prop_physics, and adds it to the players undo list.","code":"prop = ents.Create(\"prop_physics\")\nprop:SetModel(\"models/props_junk/wood_crate001a.mdl\")\nprop:Spawn()\nundo.Create(\"prop\")\n undo.AddEntity(prop)\n undo.SetPlayer(ply)\nundo.Finish()"},"realms":["Server"],"type":"Function"},
{"function":{"name":"SetCustomUndoText","parent":"undo","type":"libraryfunc","description":"Sets a custom undo text for the current undo block","realm":"Server","args":{"arg":{"text":"The text to display when the undo block is undone","name":"customText","type":"string"}}},"example":{"description":"This example creates a prop_physics, adds it to the players undo list, and sets a custom undo text","code":"local prop = ents.Create( \"prop_physics\" )\nprop:SetModel( \"models/props_junk/wood_crate001a.mdl\" )\nprop:Spawn()\nundo.Create( \"prop\" )\n undo.AddEntity( prop )\n undo.SetPlayer( Player )\n undo.SetCustomUndoText(\"Undone a crate prop\")\nundo.Finish()"},"realms":["Server"],"type":"Function"},
{"function":{"name":"Hook","parent":"usermessage","type":"libraryfunc","description":{"text":"Sets a hook for the specified to be called when a usermessage with the specified name arrives.","deprecated":"You should be using net instead","warning":"Usermessages have a limit of only 256 bytes!"},"realm":"Shared","args":{"arg":[{"text":"The message name to hook to.","name":"name","type":"string"},{"text":"The function to be called if the specified message was received.\nParameters (Optional):\n* bf_read msg\n* vararg preArgs","name":"callback","type":"function"},{"text":"Arguments that are passed to the callback function when the hook is called. *ring ring*","name":"preArgs","type":"vararg","default":"nil"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetTable","parent":"usermessage","type":"libraryfunc","description":"Returns a table of every usermessage hook","realm":"Shared","rets":{"ret":{"text":"hooks","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IncomingMessage","parent":"usermessage","type":"libraryfunc","description":{"text":"Called by the engine when a usermessage arrives, this method calls the hook function specified by usermessage.Hook if any.","internal":""},"realm":"Shared","args":{"arg":[{"text":"The message name.","name":"name","type":"string"},{"text":"The message.","name":"msg","type":"bf_read"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"char","parent":"utf8","type":"libraryfunc","description":"Receives zero or more integers, converts each one to its corresponding UTF-8 byte sequence and returns a string with the concatenation of all these sequences.","realm":"Shared","file":{"text":"lua/includes/modules/utf8.lua","line":"90-L139"},"args":{"arg":{"text":"Unicode code points to be converted in to a UTF-8 string.","name":"codepoints","type":"vararg"}},"rets":{"ret":{"text":"UTF-8 string generated from given arguments.","name":"","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"codepoint","parent":"utf8","type":"libraryfunc","description":"Returns the codepoints (as numbers) from all characters in the given string that start between byte position startPos and endPos. It raises an error if it meets any invalid byte sequence. This functions similarly to string.byte.","realm":"Shared","file":{"text":"lua/includes/modules/utf8.lua","line":"170-L195"},"args":{"arg":[{"text":"The string that you will get the code(s) from.","name":"string","type":"string"},{"text":"The starting byte of the string to get the codepoint of.","name":"startPos","type":"number","default":"1"},{"text":"The ending byte of the string to get the codepoint of.","name":"endPos","type":"number","default":"1"}]},"rets":{"ret":{"text":"The codepoint number(s).","name":"","type":"vararg"}}},"example":{"description":"Demonstrates usage of the function.","code":"print( utf8.codepoint( \"Мёнём\", 1, -1 ) )","output":"1052\t1105\t1085\t1105\t1084"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetChar","parent":"utf8","type":"libraryfunc","description":"A UTF-8 compatible version of string.GetChar.","realm":"Shared","added":"2020.06.24","file":{"text":"lua/includes/modules/utf8.lua","line":"352-L362"},"args":{"arg":[{"text":"The string that you will be searching with the supplied index.","name":"str","type":"string"},{"text":"The index's value of the string to be returned.","name":"index","type":"number"}]},"rets":{"ret":{"text":"str","name":"","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"force","parent":"utf8","type":"libraryfunc","description":"Forces a string to contain only valid UTF-8 data. Invalid sequences are replaced with U+FFFD (the Unicode replacement character).\n\nThis is a lazy way for users to ensure a string contains only valid UTF-8 data.","realm":"Shared","file":{"text":"lua/includes/modules/utf8.lua","line":"298-L333"},"args":{"arg":{"text":"The string that will become a valid UTF-8 string.","name":"string","type":"string"}},"rets":{"ret":{"text":"The UTF-8 string.","name":"","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"codes","parent":"utf8","type":"libraryfunc","description":"Returns an iterator (like string.gmatch) which returns both the position and codepoint of each utf8 character in the string. It raises an error if it meets any invalid byte sequence.","realm":"Shared","file":{"text":"lua/includes/modules/utf8.lua","line":"141-L168"},"args":{"arg":{"text":"The string that you will get the codes from.","name":"string","type":"string"}},"rets":{"ret":{"text":"The iterator (to be used in a for loop).","name":"","type":"function"}}},"example":{"description":"Demonstrates usage of the function.","code":"for p, c in utf8.codes(\"( ͡° ͜ʖ ͡°)\") do\n    print(p,c)\nend","output":"```\n1    40    \n2    32    \n3    865    \n5    176    \n7    32    \n8    860    \n10    662    \n12    32    \n13    865    \n15    176    \n17    41\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"len","parent":"utf8","type":"libraryfunc","description":"Returns the number of UTF-8 sequences in the given string between positions startPos and endPos (both inclusive). If it finds any invalid UTF-8 byte sequence, returns false as well as the position of the first invalid byte.","realm":"Shared","file":{"text":"lua/includes/modules/utf8.lua","line":"197-L224"},"args":{"arg":[{"text":"The string to calculate the length of.","name":"string","type":"string"},{"text":"The starting position to get the length from.","name":"startPos","type":"number","default":"1"},{"text":"The ending position to get the length from.","name":"endPos","type":"number","default":"-1"}]},"rets":{"ret":[{"text":"The number of UTF-8 characters in the string. If there are invalid bytes, this will be false.","name":"","type":"number"},{"text":"The position of the first invalid byte. If there were no invalid bytes, this will be nil.","name":"","type":"number"}]}},"example":{"description":"Demonstrates output of this function compared to string.len when given a string that contains Russian text.","code":"print( string.len( \"Мёнём\" ) )\nprint( utf8.len( \"Мёнём\" ) )","output":"```\n11\n5\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"sub","parent":"utf8","type":"libraryfunc","description":"A UTF-8 compatible version of string.sub.","realm":"Shared","added":"2020.06.24","file":{"text":"lua/includes/modules/utf8.lua","line":"364-L377"},"args":{"arg":[{"text":"The string you'll take a sub-string out of.","name":"string","type":"string"},{"text":"The position of the first character that will be included in the sub-string.","name":"StartPos","type":"number"},{"text":"The position of the last character to be included in the sub-string. It can be negative to count from the end.","name":"EndPos","type":"number","default":"nil"}]},"rets":{"ret":{"text":"The substring.","name":"","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"offset","parent":"utf8","type":"libraryfunc","description":"Returns the byte-index of the n'th UTF-8-character after the given startPos (nil if none). startPos defaults to 1 when n is positive and -1 when n is negative. If n is zero, this function instead returns the byte-index of the UTF-8-character startPos lies within.","realm":"Shared","file":{"text":"lua/includes/modules/utf8.lua","line":"226-L296"},"args":{"arg":[{"text":"The string that you will get the byte position from.","name":"string","type":"string"},{"text":"The position to get the beginning byte position from.","name":"n","type":"number"},{"text":"The offset for n.","name":"startPos","type":"number","default":"1 when n>=0, -1 otherwise"}]},"rets":{"ret":{"text":"Starting byte-index of the given position.","name":"","type":"number"}}},"example":[{"description":"Returns the byte-index where the character at the 5th byte begins.","code":"print(utf8.offset(\"( ͡° ͜ʖ ͡°)\", 5))","output":"7"},{"description":"Safely truncates the string that may contain UTF-8 characters. The first print demonstrates the problem of string.sub","code":"local s = 'Текст - Cyrillic text example'\nprint(string.sub(s,1,5))\nprint(string.sub(s,1,utf8.offset(s,5)))","output":"Те?\nТекст"}],"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"AddNetworkString","parent":"util","type":"libraryfunc","description":{"text":"Adds the specified string to a string table, which will cache it and network it to all clients automatically.\nWhenever you want to create a net message with net.Start, you must add the name of that message as a networked string via this function.\n\nIf the passed string already exists, nothing will happen and the ID of the existing item will be returned.","br":"","note":["Each unique network name needs to be pooled once - do not put this function call into any other functions if you're using a constant string. Preferable place for this function is in a serverside lua file, or in a shared file with the net.Receive function.","The string table used for this function does not interfere with the engine string tables and has 2048 slots."]},"realm":"Server","args":{"arg":{"text":"Adds the specified string to the string table.","name":"str","type":"string"}},"rets":{"ret":{"text":"The id of the string that was added to the string table.\nSame as calling util.NetworkStringToID.","name":"","type":"number","br":""}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"AimVector","parent":"util","type":"libraryfunc","description":"Function used to calculate aim vector from 2D screen position. It is used in SuperDOF calculate Distance.\n\nEssentially a generic version of gui.ScreenToVector.","realm":"Shared and Menu","args":{"arg":[{"text":"View angles","name":"ViewAngles","type":"Angle"},{"text":"View Field of View","name":"ViewFOV","type":"number"},{"text":"Mouse X position","name":"x","type":"number"},{"text":"Mouse Y position","name":"y","type":"number"},{"text":"Screen width","name":"scrWidth","type":"number"},{"text":"Screen height","name":"scrHeight","type":"number"}]},"rets":{"ret":{"text":"Calculated aim vector","name":"","type":"Vector"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Base64Decode","parent":"util","type":"libraryfunc","description":"Decodes the specified string from base64.","realm":"Shared and Menu","added":"2020.04.29","args":{"arg":{"text":"String to decode.","name":"str","type":"string"}},"rets":{"ret":{"text":"The raw bytes of the decoded string.","name":"","type":"string"}}},"example":{"description":"Decodes a string.","code":"local decode = util.Base64Decode( \"QmFzZTY0IEVuY29kaW5n\" )\nprint(decode)","output":"`Base64 Encoding`"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Base64Encode","parent":"util","type":"libraryfunc","description":"Encodes the specified string to base64.","realm":"Shared and Menu","args":{"arg":{"text":"String to encode.","name":"str","type":"string"}},"rets":{"ret":{"text":"Base 64 encoded string.","name":"","type":"string"}}},"example":{"description":"Encodes a string","code":"local encoded = util.Base64Encode( \"Base64 Encoding\" )\nprint(encoded)","output":"`QmFzZTY0IEVuY29kaW5n`"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"BlastDamage","parent":"util","type":"libraryfunc","description":"Applies explosion damage to all entities in the specified radius.","realm":"Server","args":{"arg":[{"text":"The entity that caused the damage.","name":"inflictor","type":"Entity"},{"text":"The entity that attacked.","name":"attacker","type":"Entity"},{"text":"The center of the explosion","name":"damageOrigin","type":"Vector"},{"text":"The radius in which entities will be damaged.","name":"damageRadius","type":"number"},{"text":"The amount of damage to be applied.","name":"damage","type":"number"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"BlastDamageInfo","parent":"util","type":"libraryfunc","description":"Applies spherical damage based on damage info to all entities in the specified radius.","realm":"Server","args":{"arg":[{"text":"The information about the damage","name":"dmg","type":"CTakeDamageInfo"},{"text":"Center of the spherical damage","name":"damageOrigin","type":"Vector"},{"text":"The radius in which entities will be damaged.","name":"damageRadius","type":"number"}]}},"realms":["Server"],"type":"Function"},
{"function":{"name":"Compress","parent":"util","type":"libraryfunc","description":"Compresses the given string using the [LZMA](https://en.wikipedia.org/wiki/LZMA) algorithm.\n\nUse with net.WriteData and net.ReadData for networking and  util.Decompress to decompress the data.","realm":"Shared and Menu","args":{"arg":{"text":"String to compress.","name":"str","type":"string"}},"rets":{"ret":{"text":"The compressed string, or nil if the input string was zero length (\"\").","name":"","type":"string"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"DateStamp","parent":"util","type":"libraryfunc","description":"Returns the current date formatted like '2012-10-31 18-00-00'","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/util.lua","line":"97"},"rets":{"ret":{"text":"date","name":"","type":"string"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"CRC","parent":"util","type":"libraryfunc","description":"Generates the [CRC Checksum](https://en.wikipedia.org/wiki/Cyclic_redundancy_check) of the specified string.","realm":"Shared","args":{"arg":{"text":"The string to calculate the checksum of.","name":"stringToHash","type":"string"}},"rets":{"ret":{"text":"The unsigned 32 bit checksum.","name":"","type":"string"}}},"example":{"description":"Prints out the CRC-32 checksum of \"a\".","code":"print( util.CRC( \"a\" ))","output":"3904355907"},"realms":["Server","Client"],"type":"Function"},
{"text":"##  Built in Decals \nHere's a list of all the decal names that should be possible to use by default.\n* BeerSplash\n* BirdPoop\n* Blood\n* BulletProof\n* Cross\n* Dark\n* ExplosiveGunshot\n* Eye\n* FadingScorch\n* GlassBreak\n* Impact.Antlion\n* Impact.BloodyFlesh\n* Impact.Concrete\n* Impact.Glass\n* Impact.Metal\n* Impact.Sand\n* Impact.Wood\n* Light\n* ManhackCut\n* Nought\n* Noughtsncrosses\n* PaintSplatBlue\n* PaintSplatGreen\n* PaintSplatPink\n* Scorch\n* SmallScorch\n* Smile\n* Splash.Large\n* YellowBlood","function":{"name":"Decal","parent":"util","type":"libraryfunc","description":"Performs a trace and paints a decal to the surface hit.","realm":"Shared","args":{"arg":[{"text":"The name of the decal to paint.","name":"name","type":"string"},{"text":"The start of the trace.","name":"start","type":"Vector"},{"text":"The end of the trace.","name":"end","type":"Vector"},{"text":"If set, the decal will not be able to be placed on given entity. Can also be a table of entities.","name":"filter","type":"Entity","default":"NULL"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"DecalEx","parent":"util","type":"libraryfunc","description":{"text":"Performs a trace and paints a decal to the surface hit.","note":"This function has trouble spanning across multiple brushes on the map."},"realm":"Client","args":{"arg":[{"text":"The name of the decal to paint. Can be retrieved with util.DecalMaterial.","name":"material","type":"IMaterial"},{"text":"The entity to apply the decal to","name":"ent","type":"Entity"},{"text":"The position of the decal.","name":"position","type":"Vector"},{"text":"The direction of the decal.","name":"normal","type":"Vector"},{"text":"The color of the decal. Uses the Color.\n\nThis only works when used on a brush model and only if the decal material has set **$vertexcolor** to 1.","name":"color","type":"table"},{"text":"The width scale of the decal.","name":"w","type":"number"},{"text":"The height scale of the decal.","name":"h","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"DecalMaterial","parent":"util","type":"libraryfunc","description":"Gets the full material path by the decal name. Used with util.DecalEx.","realm":"Shared","args":{"arg":{"text":"Name of the decal.","name":"decalName","type":"string"}},"rets":{"ret":{"text":"Material path of the decal.","name":"","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Decompress","parent":"util","type":"libraryfunc","description":"Decompresses the given string using [LZMA](https://en.wikipedia.org/wiki/LZMA) algorithm. Used to decompress strings previously compressed with util.Compress.","realm":"Shared and Menu","args":{"arg":[{"text":"The compressed string to decompress.","name":"compressedString","type":"string"},{"text":"The maximal size in bytes it will decompress.","name":"maxSize","type":"number","default":"nil"}]},"rets":{"ret":{"text":"The original, decompressed string or an empty string on failure or invalid input.","name":"","type":"string"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"DistanceToLine","parent":"util","type":"libraryfunc","description":"Gets the distance between a line and a point in 3d space.","realm":"Shared","args":{"arg":[{"text":"Start of the line.","name":"lineStart","type":"Vector"},{"text":"End of the line.","name":"lineEnd","type":"Vector"},{"text":"The position of the point.","name":"pointPos","type":"Vector"}]},"rets":{"ret":[{"text":"Distance from line.","name":"","type":"number"},{"text":"Nearest point on line.","name":"","type":"Vector"},{"text":"Distance along line from start.","name":"","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Effect","parent":"util","type":"libraryfunc","description":{"text":"Creates an effect with the specified data.\n\nFor Orange Box `.pcf` particles, see Global.ParticleEffect, Global.ParticleEffectAttach and  Global.CreateParticleSystem.","note":{"text":"When dispatching an effect from the server, some values may be clamped for networking optimizations. Visit the Set accessors on CEffectData to see which ones are affected.\n\nYou will need to couple this function with Global.IsFirstTimePredicted if you want to use it in .","page":",predicted hookPrediction"}},"realm":"Shared","args":{"arg":[{"text":"The name of the effect to create.\n\nYou can find a list of . You can create your own, [example effects can be found here](https://github.com/garrynewman/garrysmod/tree/master/garrysmod/gamemodes/sandbox/entities/effects) and [here](https://github.com/garrynewman/garrysmod/tree/master/garrysmod/gamemodes/base/entities/effects).","name":"effectName","type":"string","page":",built-in engine effects hereEffects"},{"text":"The effect data describing the effect.","name":"effectData","type":"CEffectData"},{"text":"Whether Lua-defined effects should override engine-defined effects with the same name for this/single function call.","name":"allowOverride","type":"boolean","default":"true"},{"text":"Can either be a boolean to ignore the prediction filter or a CRecipientFilter.\n\nSet this to true if you wish to call this function in multiplayer from server.","name":"ignorePredictionOrRecipientFilter","type":"any","default":"nil"}]}},"example":{"description":"Creates a HelicopterMegaBomb effect at the origin of the map. ( 0, 0, 0 )","code":"local vPoint = Vector( 0, 0, 0 )\nlocal effectdata = EffectData()\neffectdata:SetOrigin( vPoint )\nutil.Effect( \"HelicopterMegaBomb\", effectdata )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetModelMeshes","parent":"util","type":"libraryfunc","description":{"text":"Returns a table of visual meshes of given model.\n\n\n\nSee also ENTITY:GetRenderMesh.","note":"This does not work on brush models (`*number` models)"},"realm":"Client","args":{"arg":[{"text":"The full path to a model to get the visual meshes of.","name":"model","type":"string"},{"name":"lod","type":"number","default":"0"},{"name":"bodygroupMask","type":"number","default":"0"}]},"rets":{"ret":{"text":"A table of tables with the following format:\n* string material - The material of the specific mesh\n* table triangles - A table of Structures/MeshVertexes ready to be fed into IMesh:BuildFromTriangles\n* table verticies - A table of Structures/MeshVertexes representing all the vertexes of the mesh. This table is used internally to generate the \"triangles\" table.\n\nEach Structures/MeshVertex returned also has an extra table of tables field called \"weights\" with the following data:\n* number boneID - The bone this vertex is attached to\n* number weight - How \"strong\" this vertex is attached to the bone. A vertex can be attached to multiple bones at once.","name":"","type":"table"}}},"example":{"description":"Simple example usage on a Scripted Entity.","code":"-- The default material to render with in case we for some reason don't have one\nlocal myMaterial = Material( \"models/wireframe\" ) -- models/debug/debugwhite\n\nfunction ENT:CreateMesh()\n\t-- Destroy any previous meshes\n\tif ( self.Mesh ) then self.Mesh:Destroy() end\n\n\t-- Get a list of all meshes of a model\n\tlocal visualMeshes = util.GetModelMeshes( \"models/combine_helicopter/helicopter_bomb01.mdl\" )\n\n\t-- Check if the model even exists\n\tif ( !visualMeshes ) then return end\n\n\t-- Select the first mesh\n\tlocal visualMesh = visualMeshes[ 1 ]\n\n\t-- Set the material to draw the mesh with from the model data\n\tmyMaterial = Material( visualMesh.material )\n\n\t-- You can apply any changes to visualMesh.trianges table here, distorting the mesh\n\t-- or any other changes you can come up with\n\n\t-- Create and build the mesh\n\tself.Mesh = Mesh()\n\tself.Mesh:BuildFromTriangles( visualMesh.triangles )\nend\n\n-- A special hook to override the normal mesh for rendering\nfunction ENT:GetRenderMesh()\n\t-- If the mesh doesn't exist, create it!\n\tif ( !self.Mesh ) then return self:CreateMesh() end\n\n\treturn { Mesh = self.Mesh, Material = myMaterial }\nend\n\nfunction ENT:Draw()\n\t-- Draw the entity's model normally, this calls GetRenderMesh at some point\n\tself:DrawModel()\nend"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetPData","parent":"util","type":"libraryfunc","description":{"text":"Gets PData of an offline player using their SteamID","warning":"This function internally uses Player:UniqueID, which can cause collisions (two or more players sharing the same PData entry). It's recommended that you don't use it. See the related wiki page for more information."},"realm":"Shared and Menu","file":{"text":"lua/includes/extensions/util.lua","line":"332-L344"},"args":{"arg":[{"text":"SteamID of the player","name":"steamID","type":"string"},{"text":"Variable name to get the value of","name":"name","type":"string"},{"text":"The default value, in case there's nothing stored","name":"default","type":"string"}]},"rets":{"ret":{"text":"The stored value","name":"","type":"string"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"GetModelInfo","parent":"util","type":"libraryfunc","description":{"text":"Returns a table containing the info about the model.","note":"This function will silently fail if used on models with following strings in them:\n* _shared\n* _anims\n* _gestures\n* _anim\n* _postures\n* _gst\n* _pst\n* _shd\n* _ss\n* _anm\n* _include"},"realm":"Shared","args":{"arg":{"text":"Model path","name":"mdl","type":"string"}},"rets":{"ret":{"text":"The model info as a table with the following keys:\n* number SkinCount - Identical to Entity:SkinCount.\n* string KeyValues - Valve key-value formatted info about the model's physics (Constraint Info, etc). This is limited to 4096 characters.\n* string ModelKeyValues - Valve key-value formatted info about the model ($keyvalues command in the .qc of the model), if present","name":"","type":"table"}}},"example":{"description":"Example usage of the function. We use util.KeyValuesToTablePreserveOrder in order to preserve multiple keys with the same name.","code":"local ModelInfo = util.GetModelInfo(\"models/combine_gate_vehicle.mdl\" )\nprint( ModelInfo.SkinCount ) // The skin count\nPrintTable( util.KeyValuesToTablePreserveOrder( ModelInfo.KeyValues ) ) // Physics data","output":"```\n1:\n\t\tKey\t=\tsolid\n\t\tValue:\n\t\t\t\t1:\n\t\t\t\t\t\tKey\t=\tindex\n\t\t\t\t\t\tValue\t=\t0\n\t\t\t\t2:\n\t\t\t\t\t\tKey\t=\tname\n\t\t\t\t\t\tValue\t=\tVehicle_Gate.Gate2_L\n\t\t\t\t3:\n\t\t\t\t\t\tKey\t=\tmass\n\t\t\t\t\t\tValue\t=\t1\n\t\t\t\t4:\n\t\t\t\t\t\tKey\t=\tsurfaceprop\n\t\t\t\t\t\tValue\t=\tmetal\n\t\t\t\t5:\n\t\t\t\t\t\tKey\t=\tdamping\n\t\t\t\t\t\tValue\t=\t0\n\t\t\t\t6:\n\t\t\t\t\t\tKey\t=\trotdamping\n\t\t\t\t\t\tValue\t=\t0\n\t\t\t\t7:\n\t\t\t\t\t\tKey\t=\tinertia\n\t\t\t\t\t\tValue\t=\t1\n\t\t\t\t8:\n\t\t\t\t\t\tKey\t=\tvolume\n\t\t\t\t\t\tValue\t=\t68522.9296875\n\n...\n\n6:\n\t\tKey\t=\teditparams\n\t\tValue:\n\t\t\t\t1:\n\t\t\t\t\t\tKey\t=\trootname\n\t\t\t\t\t\tValue\t=\t\n\t\t\t\t2:\n\t\t\t\t\t\tKey\t=\ttotalmass\n\t\t\t\t\t\tValue\t=\t1\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetPixelVisibleHandle","parent":"util","type":"libraryfunc","description":"Creates a new PixVis handle. See util.PixelVisible.","realm":"Client","rets":{"ret":{"text":"PixVis","name":"","type":"pixelvis handle t"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetPlayerTrace","parent":"util","type":"libraryfunc","description":"Utility function to quickly generate a trace table that starts at the players view position, and ends `32768` units along a specified direction.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/util.lua","line":"31-L48"},"args":{"arg":[{"text":"The player the trace should be based on","name":"ply","type":"Player"},{"text":"The direction of the trace","name":"dir","type":"Vector","default":"ply:GetAimVector()"}]},"rets":{"ret":{"text":"The trace data. See Structures/Trace","name":"","type":"table"}}},"example":{"description":"Prints the entity's model the local player is looking at to console","code":"local tr = util.TraceLine( util.GetPlayerTrace( LocalPlayer() ) )\nif IsValid(tr.Entity) then print(\"I saw a \"..tr.Entity:GetModel()) end\n\nlocal trground = util.TraceLine( util.GetPlayerTrace( LocalPlayer(), Vector(0,0,-1) ) )\nif IsValid(trground.Entity) then print(\"I'm standing on a \"..trground.Entity:GetModel()) end"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"GetSurfaceData","parent":"util","type":"libraryfunc","description":"Returns data of a surface property at given ID.","realm":"Shared","args":{"arg":{"text":"Surface property ID. You can get it from Structures/TraceResult.","name":"id","type":"number"}},"rets":{"ret":{"text":"The data or no value if there is no valid surface property at given index.\n\nSee Structures/SurfacePropertyData","name":"","type":"table"}}},"example":{"description":"Prints the Surface Property Data of the place the player is looking at when executing the console command.","code":"concommand.Add( \"surfprop\", function( ply )\n\tlocal surface = ply:GetEyeTrace().SurfaceProps\n\tPrintTable( util.GetSurfaceData( surface ) )\nend )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetSurfaceIndex","parent":"util","type":"libraryfunc","description":"Returns the matching surface property index for the given surface property name.\n\nSee also util.GetSurfaceData and util.GetSurfacePropName for opposite function.","realm":"Shared","args":{"arg":{"text":"The name of the surface.","name":"surfaceName","type":"string"}},"rets":{"ret":{"text":"The surface property index, or -1 if name doesn't correspond to a valid surface property.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetSunInfo","parent":"util","type":"libraryfunc","description":"Gets information about the sun position and obstruction or nil if there is no sun.","realm":"Client","rets":{"ret":{"text":"The sun info. See Structures/SunInfo","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetSurfacePropName","parent":"util","type":"libraryfunc","description":"Returns the name of a surface property at given ID.\n\nSee also util.GetSurfaceData and util.GetSurfaceIndex for opposite function.","realm":"Shared","args":{"arg":{"text":"Surface property ID. You can get it from Structures/TraceResult.","name":"id","type":"number"}},"rets":{"ret":{"text":"The name or an empty string if there is no valid surface property at given index.","name":"","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetUserGroups","parent":"util","type":"libraryfunc","description":{"text":"Returns a table of all SteamIDs that have a usergroup.","note":"This returns the original usergroups table, changes done to this table are not retroactive and will only affect newly connected users"},"realm":"Server","file":{"text":"lua/includes/extensions/player_auth.lua","line":"77"},"rets":{"ret":{"text":"The table of users. The table consists of SteamID-Table pairs, where the table has 2 fields:\nstring name - Players name\nstring group - The players user group","name":"","type":"table"}}},"realms":["Server"],"type":"Function"},
{"function":{"name":"IntersectRayWithOBB","parent":"util","type":"libraryfunc","description":"Performs a \"ray\" box intersection and returns position, normal and the fraction.","realm":"Shared","args":{"arg":[{"text":"Origin/start position of the ray.","name":"rayStart","type":"Vector"},{"text":"The ray vector itself. This can be thought of as: the ray end point relative to the start point.\n\nNote that in this implementation, the ray is not infinite - it's only a segment.","name":"rayDelta","type":"Vector"},{"text":"The center of the box.","name":"boxOrigin","type":"Vector"},{"text":"The angles of the box.","name":"boxAngles","type":"Angle"},{"text":"The min position of the box.","name":"boxMins","type":"Vector"},{"text":"The max position of the box.","name":"boxMaxs","type":"Vector"}]},"rets":{"ret":[{"text":"Hit position, nil if not hit.","name":"","type":"Vector"},{"text":"Normal/direction vector, nil if not hit.","name":"","type":"Vector"},{"text":"Fraction of trace used, nil if not hit.","name":"","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsInWorld","parent":"util","type":"libraryfunc","description":"Checks if a certain position is within the world bounds.","realm":"Server","args":{"arg":{"text":"Position to check.","name":"position","type":"Vector"}},"rets":{"ret":{"text":"Whether the vector is in world.","name":"","type":"boolean"}}},"example":{"description":"Here's a trick you can do to achieve the behavior of this function on the client.\n\n(This may be less efficient than the serverside function itself)","code":"local tr = { collisiongroup = COLLISION_GROUP_WORLD, output = {} }\n\nfunction util.IsInWorld( pos )\n\ttr.start = pos\n\ttr.endpos = pos\n\n\treturn not util.TraceLine( tr ).HitWorld\nend"},"realms":["Server"],"type":"Function"},
{"function":{"name":"IsModelLoaded","parent":"util","type":"libraryfunc","description":"Checks if the model is loaded in the game.","realm":"Shared","args":{"arg":{"text":"Name/Path of the model to check.","name":"modelName","type":"string"}},"rets":{"ret":{"text":"Returns true if the model is loaded in the game; otherwise false.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IntersectRayWithPlane","parent":"util","type":"libraryfunc","description":"Performs a [ray-plane intersection](https://en.wikipedia.org/wiki/Line%E2%80%93plane_intersection) and returns the hit position or nil.","realm":"Shared","args":{"arg":[{"text":"Origin/start position of the ray.","name":"rayOrigin","type":"Vector"},{"text":"The direction of the ray.","name":"rayDirection","type":"Vector"},{"text":"Any position of the plane.","name":"planePosition","type":"Vector"},{"text":"The normal vector of the plane.","name":"planeNormal","type":"Vector"}]},"rets":{"ret":{"text":"The position of intersection, nil if not hit.","name":"","type":"Vector"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsValidModel","parent":"util","type":"libraryfunc","description":"Checks if the specified model is valid.\n \n\nA model is considered invalid in following cases:\n* Starts with a space or **maps**\n* Doesn't start with **models**\n* Contains any of the following:\n* * _gestures\n* * _animations\n* * _postures\n* * _gst\n* * _pst\n* * _shd\n* * _ss\n* * _anm\n* * .bsp\n* * cs_fix\n* On server: If the model isn't precached, if the model file doesn't exist on the disk\n* If precache failed\n* Model is the error model\n\nRunning this function will also precache the model.","realm":"Shared","args":{"arg":{"text":"Name/Path of the model to check.","name":"modelName","type":"string"}},"rets":{"ret":{"text":"Whether the model is valid or not. Returns false clientside if the model is not precached by the server.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsValidPhysicsObject","parent":"util","type":"libraryfunc","description":"Checks if given numbered physics object of given entity is valid or not. Most useful for ragdolls.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/util.lua","line":"13"},"args":{"arg":[{"text":"The entity","name":"ent","type":"Entity"},{"text":"Number of the physics object to test","name":"physobj","type":"number"}]},"rets":{"ret":{"text":"true is valid, false otherwise","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"IsValidRagdoll","parent":"util","type":"libraryfunc","description":"Checks if the specified model name points to a valid ragdoll.","realm":"Shared","args":{"arg":{"text":"Name/Path of the ragdoll model to check.","name":"ragdollName","type":"string"}},"rets":{"ret":{"text":"Returns true if the specified model name points to a valid ragdoll; otherwise false.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsSkyboxVisibleFromPoint","parent":"util","type":"libraryfunc","description":{"text":"Check whether the skybox is visible from the point specified.","note":"This will always return true in fullbright maps."},"realm":"Client","args":{"arg":{"text":"The position to check the skybox visibility from.","name":"position","type":"Vector"}},"rets":{"ret":{"text":"Whether the skybox is visible from the position.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsValidProp","parent":"util","type":"libraryfunc","description":"Checks if the specified prop is valid.","realm":"Shared","args":{"arg":{"text":"Name/Path of the model to check.","name":"modelName","type":"string"}},"rets":{"ret":{"text":"Returns true if the specified prop is valid; otherwise false.","name":"","type":"boolean"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"JSONToTable","parent":"util","type":"libraryfunc","description":{"text":"Converts a JSON string to a Lua table.","warning":["Keys are converted to numbers wherever possible. This means using Player:SteamID64 as keys won't work.","There is a limit of 15,000 keys total."],"bug":[{"text":"This will attempt cast the string keys \"inf\", \"nan\", \"true\", and \"false\" to their respective Lua values. This completely ignores nulls in arrays.","issue":"3561"},{"text":"Colors will not have the color metatable.","issue":"2407"}]},"realm":"Shared and Menu","args":{"arg":{"text":"The JSON string to convert.","name":"json","type":"string"}},"rets":{"ret":{"text":"The table containing converted information. Returns nothing on failure.","name":"","type":"table"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"KeyValuesToTable","parent":"util","type":"libraryfunc","description":{"text":"Converts a KeyValue string to a Lua table.","note":"Table keys will not repeat, see util.KeyValuesToTablePreserveOrder."},"realm":"Shared and Menu","args":{"arg":[{"text":"The KeyValue string to convert.","name":"keyValues","type":"string"},{"text":"If set to true, will replace \\t, \\n, \\\" and \\\\ in the input text with their escaped variants","name":"usesEscapeSequences","type":"boolean","default":"false"},{"text":"Whether we should preserve key case (may fail) or not (always lowercase)","name":"preserveKeyCase","type":"boolean","default":"false"}]},"rets":{"ret":{"text":"The converted table","name":"","type":"table"}}},"example":{"description":"Example usage and output of this function. Note how there's only one \"solid\" key in the table despite the fact that input string contains multiple.","code":"local ModelInfo = util.GetModelInfo(\"models/combine_gate_vehicle.mdl\" )\nPrintTable( util.KeyValuesToTable( ModelInfo.KeyValues ) )","output":"```\neditparams:\n\t\trootname\t=\t\n\t\ttotalmass\t=\t1\nsolid:\n\t\tdamping\t=\t0\n\t\tindex\t=\t4\n\t\tinertia\t=\t1\n\t\tmass\t=\t1\n\t\tname\t=\tVehicle_Gate.Gate1_L\n\t\trotdamping\t=\t0\n\t\tsurfaceprop\t=\tmetal\n\t\tvolume\t=\t68522.8828125\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"KeyValuesToTablePreserveOrder","parent":"util","type":"libraryfunc","description":"Similar to util.KeyValuesToTable but it also preserves order of keys.","realm":"Shared and Menu","args":{"arg":[{"text":"The key value string","name":"keyvals","type":"string"},{"text":"If set to true, will replace \\t, \\n, \\\" and \\\\ in the input text with their escaped variants","name":"usesEscapeSequences","type":"boolean","default":"false"},{"text":"Whether we should preserve key case (may fail) or not (always lowercase)","name":"preserveKeyCase","type":"boolean","default":"false"}]},"rets":{"ret":{"text":"The output table","name":"","type":"table"}}},"example":{"description":"Example usage and output of this function. Note how there are multiple entries where they key is \"solid\", just like in the input string.","code":"local ModelInfo = util.GetModelInfo(\"models/combine_gate_vehicle.mdl\" )\nPrintTable( util.KeyValuesToTablePreserveOrder( ModelInfo.KeyValues ) )","output":"```\n1:\n\t\tKey\t=\tsolid\n\t\tValue:\n\t\t\t\t1:\n\t\t\t\t\t\tKey\t=\tindex\n\t\t\t\t\t\tValue\t=\t0\n\t\t\t\t2:\n\t\t\t\t\t\tKey\t=\tname\n\t\t\t\t\t\tValue\t=\tVehicle_Gate.Gate2_L\n\t\t\t\t3:\n\t\t\t\t\t\tKey\t=\tmass\n\t\t\t\t\t\tValue\t=\t1\n\t\t\t\t4:\n\t\t\t\t\t\tKey\t=\tsurfaceprop\n\t\t\t\t\t\tValue\t=\tmetal\n\t\t\t\t5:\n\t\t\t\t\t\tKey\t=\tdamping\n\t\t\t\t\t\tValue\t=\t0\n\t\t\t\t6:\n\t\t\t\t\t\tKey\t=\trotdamping\n\t\t\t\t\t\tValue\t=\t0\n\t\t\t\t7:\n\t\t\t\t\t\tKey\t=\tinertia\n\t\t\t\t\t\tValue\t=\t1\n\t\t\t\t8:\n\t\t\t\t\t\tKey\t=\tvolume\n\t\t\t\t\t\tValue\t=\t68522.9296875\n2:\n\t\tKey\t=\tsolid\n\t\tValue:\n\t\t\t\t1:\n\t\t\t\t\t\tKey\t=\tindex\n\t\t\t\t\t\tValue\t=\t1\n\t\t\t\t2:\n\t\t\t\t\t\tKey\t=\tname\n\t\t\t\t\t\tValue\t=\tVehicle_Gate.Gate3_R\n...\n```"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"LocalToWorld","parent":"util","type":"libraryfunc","description":"Returns a vector in world coordinates based on an entity and local coordinates","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/util.lua","line":"79"},"args":{"arg":[{"text":"The entity lpos is local to","name":"ent","type":"Entity"},{"text":"Coordinates local to the ent","name":"lpos","type":"Vector"},{"text":"The bonenumber of the ent lpos is local to","name":"bonenum","type":"number"}]},"rets":{"ret":{"text":"wpos","name":"","type":"Vector"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"NetworkStringToID","parent":"util","type":"libraryfunc","description":"Returns the networked ID associated with the given string from the string table.","realm":"Shared","args":{"arg":{"text":"String to get the associated networked ID from.","name":"networkString","type":"string"}},"rets":{"ret":{"text":"The networked ID of the string, or 0 if it hasn't been networked with util.AddNetworkString.","name":"","type":"number"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"NetworkIDToString","parent":"util","type":"libraryfunc","description":"Returns the networked string associated with the given ID from the string table.","realm":"Shared","args":{"arg":{"text":"ID to get the associated string from.","name":"stringTableID","type":"number"}},"rets":{"ret":{"text":"The networked string, or nil if it wasn't found.","name":"","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"NiceFloat","parent":"util","type":"libraryfunc","description":"Formats a float by stripping off extra `0's` and `.'s`.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/util.lua","line":"146-L164"},"args":{"arg":{"text":"The float to format.","name":"float","type":"number"}},"rets":{"ret":{"text":"Formatted float.","name":"","type":"string"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"ParticleTracer","parent":"util","type":"libraryfunc","description":"Creates a tracer effect with the given parameters.","realm":"Shared","args":{"arg":[{"text":"The name of the tracer effect.","name":"name","type":"string"},{"text":"The start position of the tracer.","name":"startPos","type":"Vector"},{"text":"The end position of the tracer.","name":"endPos","type":"Vector"},{"text":"Play the hit miss(whiz) sound.","name":"doWhiz","type":"boolean"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"PointContents","parent":"util","type":"libraryfunc","description":"Returns the contents of the position specified.","realm":"Shared","args":{"arg":{"text":"Position to get the contents sample from.","name":"position","type":"Vector"}},"rets":{"ret":{"text":"Contents bitflag, see Enums/CONTENTS","name":"","type":"number"}}},"example":{"description":"Check if the trace position is underwater.","code":"local tr = Entity( 1 ):GetEyeTrace()\nprint( bit.band( util.PointContents( tr.HitPos ), CONTENTS_WATER ) == CONTENTS_WATER )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"PrecacheModel","parent":"util","type":"libraryfunc","description":{"text":"Precaches a model for later use. Model is cached after being loaded once.","warning":"Modelprecache is limited to 4096 unique models. When it reaches the limit the game will crash."},"realm":"Shared","args":{"arg":{"text":"The model to precache.","name":"modelName","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"PrecacheModel","parent":"util","type":"libraryfunc","description":{"text":"Precaches a model for later use. Model is cached after being loaded once.","warning":"Modelprecache is limited to 4096 unique models. When it reaches the limit the game will crash."},"realm":"Shared","args":{"arg":{"text":"The model to precache.","name":"modelName","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"ParticleTracerEx","parent":"util","type":"libraryfunc","description":"Creates a tracer effect with the given parameters.","realm":"Shared","args":{"arg":[{"text":"The name of the tracer effect.","name":"name","type":"string"},{"text":"The start position of the tracer.","name":"startPos","type":"Vector"},{"text":"The end position of the tracer.","name":"endPos","type":"Vector"},{"text":"Play the hit miss(whiz) sound.","name":"doWhiz","type":"boolean"},{"text":"Entity index of the emitting entity.","name":"entityIndex","type":"number"},{"text":"Attachment index to be used as origin.","name":"attachmentIndex","type":"number"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"PrecacheSound","parent":"util","type":"libraryfunc","description":{"text":"Precaches a sound for later use. Sound is cached after being loaded once.","note":"Soundcache is limited to 16384 unique sounds on the server.","bug":["Broken on purpose because hitting the limit above causes the server to shutdown","Ultimately does nothing on client, and only works with sound scripts, not direct paths."]},"realm":"Shared","args":{"arg":{"text":"The sound to precache.","name":"soundName","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"QuickTrace","parent":"util","type":"libraryfunc","description":"Performs a trace with the given origin, direction and filter.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/util.lua","line":"55-65"},"args":{"arg":[{"text":"The origin of the trace.","name":"origin","type":"Vector"},{"text":"The end point of the trace, relative to the start.\nThis is the direction of the trace times the distance of the trace.","name":"endpos","type":"Vector"},{"text":"Entity which should be ignored by the trace. Can also be a table of entities or a function - see Structures/Trace.","name":"filter","type":"Entity","default":"nil"}]},"rets":{"ret":{"text":"Trace result. See Structures/TraceResult.","name":"","type":"table"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"RemovePData","parent":"util","type":"libraryfunc","description":{"text":"Removes PData of offline player using his SteamID.","warning":"This function internally uses Player:UniqueID, which can cause collisions (two or more players sharing the same PData entry). It's recommended that you don't use it. See the related wiki page for more information."},"realm":"Shared and Menu","file":{"text":"lua/includes/extensions/util.lua","line":"344"},"args":{"arg":[{"text":"SteamID of the player","name":"steamID","type":"string"},{"text":"Variable name to remove","name":"name","type":"string"}]}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"SetPData","parent":"util","type":"libraryfunc","description":{"text":"Sets PData for offline player using his SteamID","warning":"This function internally uses Player:UniqueID, which can cause collisions (two or more players sharing the same PData entry). It's recommended that you don't use it. See the related wiki page for more information."},"realm":"Shared and Menu","file":{"text":"lua/includes/extensions/util.lua","line":"346-L355"},"args":{"arg":[{"text":"SteamID of the player","name":"steamID","type":"string"},{"text":"Variable name to store the value in","name":"name","type":"string"},{"text":"The value to store","name":"value","type":"any"}]}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"ScreenShake","parent":"util","type":"libraryfunc","description":{"text":"Makes the screen shake.","note":"The screen shake effect is rendered by modifying the view origin on the client. If you override the view origin in GM:CalcView you may not be able to see the shake effect."},"realm":"Shared","args":{"arg":[{"text":"The origin of the effect.","name":"pos","type":"Vector","note":"Does nothing on client."},{"text":"The strength of the effect.","name":"amplitude","type":"number"},{"text":"The frequency of the effect in hertz.","name":"frequency","type":"number"},{"text":"The duration of the effect in seconds.","name":"duration","type":"number"},{"text":"The range from the origin within which views will be affected, in Hammer units.","name":"radius","type":"number","note":"Does nothing on client."}]}},"example":{"description":"This will shake the screen, from the position 0, 0, 0 (X, Y, Z) and 5000 units away, with 5 amp, frequency 5, for 10 seconds.","code":"util.ScreenShake( Vector(0, 0, 0), 5, 5, 10, 5000 )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SharedRandom","parent":"util","type":"libraryfunc","description":{"text":"Generates a random float value that should be the same on client and server.","note":"This function is best used in a Predicted Hook"},"realm":"Shared","args":{"arg":[{"text":"The seed for the random value","name":"uniqueName","type":"string"},{"text":"The minimum value of the random range","name":"min","type":"number"},{"text":"The maximum value of the random range","name":"max","type":"number"},{"text":"The additional seed","name":"additionalSeed","type":"number","default":"0"}]},"rets":{"ret":{"text":"The random float value","name":"","type":"number"}}},"example":{"description":"Example usage of the function. Generates some random values.","code":"print( util.SharedRandom( \"23\", 0, 100 ) )\nprint( util.SharedRandom( \"23\", 0, 100 ) )\nprint( util.SharedRandom( \"23\", 0, 100, 0 ) )\nprint( util.SharedRandom( \"23\", 0, 100, 1337 ) )\nprint( util.SharedRandom( \"lol\", 0, 100, 1337 ) )","output":"```\n15.979786317786\n15.979786317786\n15.979786317786\n24.08124470342\n78.480193614252\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SpriteTrail","parent":"util","type":"libraryfunc","description":"Adds a trail to the specified entity.","realm":"Server","args":{"arg":[{"text":"Entity to attach trail to","name":"ent","type":"Entity"},{"text":"Attachment ID of the entities model to attach trail to. If you are not sure, set this to 0","name":"attachmentID","type":"number"},{"text":"Color of the trail, use Global.Color","name":"color","type":"table"},{"text":"Should the trail be additive or not","name":"additive","type":"boolean"},{"text":"Start width of the trail","name":"startWidth","type":"number"},{"text":"End width of the trail","name":"endWidth","type":"number"},{"text":"How long it takes to transition from startWidth to endWidth","name":"lifetime","type":"number"},{"text":"The resolution of trails texture. A good value can be calculated using this formula: 1 / ( startWidth + endWidth ) * 0.5","name":"textureRes","type":"number"},{"text":"Path to the texture to use as a trail.","name":"texture","type":"string"}]},"rets":{"ret":{"text":"Entity of created trail ([env_spritetrail](https://developer.valvesoftware.com/wiki/Env_spritetrail))","name":"","type":"Entity"}}},"example":{"description":"A console command that gives the player a red trail.","code":"concommand.Add( \"givetrail\", function( ply )\n\tlocal trail = util.SpriteTrail( ply, 0, Color( 255, 0, 0 ), false, 15, 1, 4, 1 / ( 15 + 1 ) * 0.5, \"trails/plasma\" )\n\tprint( trail )\nend )"},"realms":["Server"],"type":"Function"},
{"function":{"name":"Stack","parent":"util","type":"libraryfunc","description":"Returns a new Stack object","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/util.lua","line":"301"},"rets":{"ret":{"text":"A brand new stack object","name":"","type":"Stack"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"TableToJSON","parent":"util","type":"libraryfunc","description":{"text":"Converts a table to a JSON string.","warning":["All integers will be converted to decimals (5 -> 5.0).","All keys are strings in the JSON format, so all keys will be converted to strings!"],"bug":{"text":"This will produce invalid JSON if the provided table contains nan or inf values.","issue":"3561"}},"realm":"Shared and Menu","args":{"arg":[{"text":"Table to convert.","name":"table","type":"table"},{"text":"Format and indent the JSON.","name":"prettyPrint","type":"boolean","default":"false"}]},"rets":{"ret":{"text":"A JSON formatted string containing the serialized data","name":"","type":"string"}}},"example":{"description":"Writes the positions and angles of every player to a JSON file called playerstuff.json.","code":"local Players = {}\nfor k, v in ipairs(player.GetAll()) do \n\tPlayers[k] = { pos = v:GetPos(), ang = v:GetAngles() }\nend\n\t\nlocal tab = util.TableToJSON( Players ) -- Convert the player table to JSON\nfile.CreateDir( \"jsontest\" ) -- Create the directory\nfile.Write( \"jsontest/playerstuff.json\", tab) -- Write to .json"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"SteamIDTo64","parent":"util","type":"libraryfunc","description":"Given a STEAM_0 style Steam ID will return a 64bit Steam ID","realm":"Shared","file_name":"src/garrysmod/Library/gl_util.cpp","file_line":"1275","args":{"arg":{"text":"The STEAM_0 style id","name":"id","type":"string"}},"rets":{"ret":{"text":"64bit Steam ID","name":"","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"SteamIDFrom64","parent":"util","type":"libraryfunc","description":"Given a 64bit SteamID will return a STEAM_0: style Steam ID","realm":"Shared","file_name":"src/garrysmod/Library/gl_util.cpp","file_line":"1295","args":{"arg":{"text":"The 64 bit Steam ID","name":"id","type":"string"}},"rets":{"ret":{"text":"STEAM_0 style Steam ID","name":"","type":"string"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"StringToType","parent":"util","type":"libraryfunc","file":{"text":"lua/includes/extensions/util.lua","line":"106-119"},"description":"Converts a string to the specified type.\n\nThis can be useful when dealing with ConVars.","realm":"Shared and Menu","args":{"arg":[{"text":"The string to convert","name":"str","type":"string"},{"text":"The type to attempt to convert the string to. This can be vector, angle, float, int, bool, or string (case insensitive).","name":"typename","type":"string"}]},"rets":{"ret":{"text":"The result of the conversion, or nil if a bad type is specified.","name":"","type":"any"}}},"example":{"description":"Creates a vector from a string representation.","code":"local vec = util.StringToType(\"5 6 75\", \"Vector\")","output":"A vector with components **(5, 6, 75)**"},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"TableToKeyValues","parent":"util","type":"libraryfunc","description":"Converts the given table into a key value string.","realm":"Shared and Menu","args":{"arg":[{"text":"The table to convert.","name":"table","type":"table"},{"text":"The parent key.","name":"parentKey","type":"string","default":"TableToKeyValues"}]},"rets":{"ret":{"text":"KeyValueString","name":"","type":"string"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"tobool","parent":"util","type":"libraryfunc","description":{"text":"Converts string or a number to a bool, if possible. Alias of Global.tobool.","deprecated":"You should use Global.tobool instead."},"realm":"Shared and Menu","args":{"arg":{"text":"A string or a number to convert.","name":"input","type":"any"}},"rets":{"ret":{"text":"False if the input is equal to the string or boolean \"false\", if the input is equal to the string or number \"0\", or if the input is nil. Returns true otherwise.","name":"","type":"boolean"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"Timer","parent":"util","type":"libraryfunc","description":"Creates a timer object.","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/util.lua","line":"213"},"args":{"arg":{"text":"How long you want the timer to be.","name":"startdelay","type":"number","default":"0"}},"rets":{"ret":{"text":"A timer object. It has next methods:\n;Reset() - Resets the timer to nothing\n;Start( time ) - Starts the timer, call with end time\n;Started() - Returns true if the timer has been started\n;Elapsed() - Returns true if the time has elapsed","name":"","type":"table"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"TimerCycle","parent":"util","type":"libraryfunc","description":"Returns the time since this function has been last called","realm":"Shared and Menu","rets":{"ret":{"text":"Time since this function has been last called in ms","name":"","type":"number"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"TraceEntityHull","parent":"util","type":"libraryfunc","description":{"text":"Traces from one entity to another.","deprecated":"This function is broken and returns the same values all the time"},"realm":"Shared","args":{"arg":[{"text":"The first entity to trace from","name":"ent1","type":"Entity"},{"text":"The second entity to trace to","name":"ent2","type":"Entity"}]},"rets":{"ret":{"text":"Trace result. See Structures/TraceResult","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"TraceHull","parent":"util","type":"libraryfunc","description":{"text":"Performs an AABB hull (axis-aligned bounding box, aka not rotated) trace with the given trace data.","note":["Clientside entities will not be hit by traces.","This function may not always give desired results clientside due to certain physics mechanisms not existing on the client. Use it serverside for accurate results."]},"realm":"Shared","args":{"arg":{"text":"The trace data to use. See Structures/HullTrace","name":"TraceData","type":"table"}},"rets":{"ret":{"text":"Trace result. See Structures/TraceResult","name":"","type":"table"}}},"example":[{"description":"From a SWEP:PrimaryAttack()","code":"local tr = util.TraceHull( {\n\tstart = self.Owner:GetShootPos(),\n\tendpos = self.Owner:GetShootPos() + ( self.Owner:GetAimVector() * 100 ),\n\tfilter = self.Owner,\n\tmins = Vector( -10, -10, -10 ),\n\tmaxs = Vector( 10, 10, 10 ),\n\tmask = MASK_SHOT_HULL\n} )"},{"description":"Visual representation of a Hull Trace.","code":"function ENT:Draw()\n\n\tself:DrawModel()\n\t\n\tlocal ent = self\n\t\n\tlocal mins = ent:OBBMins()\n\tlocal maxs = ent:OBBMaxs()\n\tlocal startpos = ent:GetPos()\n\tlocal dir = ent:GetUp()\n\tlocal len = 128\n\n\tlocal tr = util.TraceHull( {\n\t\tstart = startpos,\n\t\tendpos = startpos + dir * len,\n\t\tmaxs = maxs,\n\t\tmins = mins,\n\t\tfilter = ent\n\t} )\n\t\n\trender.DrawLine( tr.HitPos, startpos + dir * len, color_white, true )\n\trender.DrawLine( startpos, tr.HitPos, Color( 0, 0, 255 ), true )\n\t\n\tlocal clr = color_white\n\tif ( tr.Hit ) then\n\t\tclr = Color( 255, 0, 0 )\n\tend\n\n\trender.DrawWireframeBox( startpos, Angle( 0, 0, 0 ), mins, maxs, Color( 255, 255, 255 ), true )\n\trender.DrawWireframeBox( tr.HitPos, Angle( 0, 0, 0 ), mins, maxs, clr, true )\n\nend","output":{"image":{"src":"HullTrace.gif"}}},{"description":"Trace a player sized hull to detect if a player can spawn here without getting stuck inside anything.","code":"local pos = Entity(1):GetPos() -- Choose your position.\n\nlocal tr = {\n\tstart = pos,\n\tendpos = pos,\n\tmins = Vector( -16, -16, 0 ),\n\tmaxs = Vector( 16, 16, 71 )\n}\n\nlocal hullTrace = util.TraceHull( tr )\nif ( hullTrace.Hit ) then\n    -- Find a new spawnpoint\nend"}],"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"TraceLine","parent":"util","type":"libraryfunc","description":{"text":"Performs a trace with the given trace data.","note":"Clientside entities will not be hit by traces."},"realm":"Shared","args":{"arg":{"text":"The trace data to use. See Structures/Trace","name":"TraceData","type":"table"}},"rets":{"ret":{"text":"Trace result. See Structures/TraceResult.\n\nCan return nil if game.GetWorld or its  is invalid. This will be the case for any traces done before GM:InitPostEntity is called.","name":"","type":"table","page":",physics objectEntity:GetPhysicsObject"}}},"example":{"description":"Using a function callback as filter.","code":"local tr = util.TraceLine( {\n\tstart = LocalPlayer():EyePos(),\n\tendpos = LocalPlayer():EyePos() + EyeAngles():Forward() * 10000,\n\tfilter = function( ent ) if ( ent:GetClass() == \"prop_physics\" ) then return true end end\n} )\n\nprint( tr.HitPos, tr.Entity )","output":"The trace will only hit prop_physics or world."},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"TraceEntity","parent":"util","type":"libraryfunc","description":{"text":"Runs a trace using the entity's collisionmodel between two points. This does not take the entity's angles into account and will trace its unrotated collisionmodel.","note":"Clientside entities will not be hit by traces."},"realm":"Shared","args":{"arg":[{"text":"Trace data. See Structures/Trace","name":"tracedata","type":"table"},{"text":"The entity to use","name":"ent","type":"Entity"}]},"rets":{"ret":{"text":"Trace result. See Structures/TraceResult","name":"","type":"table"}}},"example":{"description":"From sandbox/gamemode/prop_tools.lua, this checks if there are any entities inside our entity","code":"local trace = { start = ent:GetPos(), endpos = ent:GetPos(), filter = ent }\nlocal tr = util.TraceEntity( trace, ent ) \nif ( tr.Hit ) then\n -- Do stuff\nend"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"TypeToString","parent":"util","type":"libraryfunc","description":"Converts a type to a (nice, but still parsable) string","realm":"Shared and Menu","file":{"text":"lua/includes/extensions/util.lua","line":"124"},"args":{"arg":{"text":"What to convert","name":"input","type":"any"}},"rets":{"ret":{"text":"Converted string","name":"","type":"string"}}},"realms":["Server","Client","Menu"],"type":"Function"},
{"function":{"name":"CreateFromTable","parent":"vgui","type":"libraryfunc","description":"Creates a panel from table.","realm":"Client and Menu","file":{"text":"lua/includes/extensions/client/panel/scriptedpanels.lua","line":"50-69"},"args":{"arg":[{"text":"Your PANEL table","name":"metatable","type":"table"},{"text":"Which panel to parent the newly created panel to","name":"parent","type":"Panel","default":"nil"},{"text":"Name of your panel","name":"name","type":"string","default":"nil"}]},"rets":{"ret":{"text":"Created panel","name":"","type":"Panel"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"Create","parent":"vgui","type":"libraryfunc","description":{"text":"Creates a panel by the specified classname.","note":"Custom VGUI elements are not loaded instantly. Use GM:OnGamemodeLoaded to create them on startup."},"realm":"Client and Menu","file":{"text":"lua/includes/extensions/client/panel/scriptedpanels.lua","line":"19-48"},"args":{"arg":[{"text":"Classname of the panel to create. Valid classnames are listed at: VGUI Element List.","name":"classname","type":"string"},{"text":"Parent of the created panel.","name":"parent","type":"Panel","default":"nil"},{"text":"Name of the created panel.","name":"name","type":"string","default":"nil"}]},"rets":{"ret":{"text":"panel","name":"","type":"Panel"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"CreateX","parent":"vgui","type":"libraryfunc","description":{"text":"Creates a engine panel.","internal":""},"realm":"Client and Menu","file":{"text":"lua/includes/extensions/client/panel/scriptedpanels.lua","line":"13-13"},"args":{"arg":[{"text":"Class of the panel to create","name":"class","type":"string"},{"text":"If specified, parents created panel to given one","name":"parent","type":"Panel","default":"nil"},{"text":"Name of the created panel","name":"name","type":"string","default":"nil"}]},"rets":{"ret":{"text":"Created panel","name":"","type":"Panel"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"FocusedHasParent","parent":"vgui","type":"libraryfunc","description":"Returns whether the currently focused panel is a child of the given one.","realm":"Client and Menu","args":{"arg":{"text":"The parent panel to check the currently focused one against. This doesn't need to be a direct parent (focused panel can be a child of a child and so on).","name":"parent","type":"Panel"}},"rets":{"ret":{"text":"Whether or not the focused panel is a child of the passed one.","name":"","type":"boolean"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"CursorVisible","parent":"vgui","type":"libraryfunc","description":"Returns whenever the cursor is currently active and visible.","realm":"Client and Menu","rets":{"ret":{"text":"isCursorVisible","name":"","type":"boolean"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"GetControlTable","parent":"vgui","type":"libraryfunc","description":"Gets the method table of this panel. Does not return parent methods!","realm":"Client and Menu","file":{"text":"lua/includes/extensions/client/panel/scriptedpanels.lua","line":"15-17"},"args":{"arg":{"text":"The name of the panel","name":"Panelname","type":"string"}},"rets":{"ret":{"text":"methods","name":"","type":"table"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"GetHoveredPanel","parent":"vgui","type":"libraryfunc","description":{"text":"Returns the panel the cursor is hovering above.","warning":"This returns a cached value that is only updated after rendering and `before` the next VGUI Think/Layout pass.\n\nie. it lags one frame behind panel layout and is completely unhelpful for PANEL:Paint if your panels are moving around under the mouse a lot every frame."},"realm":"Client and Menu","rets":{"ret":{"text":"The panel that the user is currently hovering over with their cursor.","name":"","type":"Panel"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"GetWorldPanel","parent":"vgui","type":"libraryfunc","description":"Returns the global world panel which is the parent to all others, except for the HUD panel.\n\nSee also Global.GetHUDPanel.","realm":"Client and Menu","rets":{"ret":{"text":"The world panel","name":"","type":"Panel"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"GetKeyboardFocus","parent":"vgui","type":"libraryfunc","description":"Returns the panel which is currently receiving keyboard input.","realm":"Client and Menu","rets":{"ret":{"text":"The panel with keyboard focus","name":"","type":"Panel"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"IsHoveringWorld","parent":"vgui","type":"libraryfunc","description":"Returns whenever the cursor is hovering the world panel.","realm":"Client and Menu","rets":{"ret":{"text":"isHoveringWorld","name":"","type":"boolean"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"Register","parent":"vgui","type":"libraryfunc","description":"Registers a panel for later creation.","realm":"Client and Menu","file":{"text":"lua/includes/extensions/client/panel/scriptedpanels.lua","line":"71-95"},"args":{"arg":[{"text":"Classname of the panel to create.","name":"classname","type":"string"},{"text":"The table containg the panel information.","name":"panelTable","type":"table"},{"text":"Name of the base of the panel.","name":"baseName","type":"string","default":"Panel"}]},"rets":{"ret":{"text":"The given panel table from second argument","name":"","type":"table"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"RegisterTable","parent":"vgui","type":"libraryfunc","description":"Registers a table to use as a panel. All this function does is assigns Base key to your table and returns the table.","realm":"Client and Menu","file":{"text":"lua/includes/extensions/client/panel/scriptedpanels.lua","line":"97-107"},"args":{"arg":[{"text":"The PANEL table","name":"panel","type":"table"},{"text":"A base for the panel","name":"base","type":"string","default":"Panel"}]},"rets":{"ret":{"text":"The PANEL table","name":"","type":"table"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"RegisterFile","parent":"vgui","type":"libraryfunc","description":"Registers a new VGUI panel from a file.","realm":"Client and Menu","file":{"text":"lua/includes/extensions/client/panel/scriptedpanels.lua","line":"109-126"},"args":{"arg":{"text":"The file to register","name":"file","type":"string"}},"rets":{"ret":{"text":"A table containing info about the panel. Can be supplied to vgui.CreateFromTable","name":"","type":"table"}}},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"Record","parent":"video","type":"libraryfunc","description":"Attempts to create an IVideoWriter.","realm":"Client and Menu","args":{"arg":{"text":"The video config. See Structures/VideoData.","name":"config","type":"table"}},"rets":{"ret":[{"text":"The video object (returns **false** if there is an error)","name":"","type":"IVideoWriter"},{"text":"The error string, if there is an error","name":"","type":"string"}]}},"example":{"description":"How to create a basic IVideoWriter, and how to use it","code":"local config = {\n\tcontainer = \"webm\",\n\tvideo = \"vp8\",\n\taudio = \"vorbis\",\n\tquality = 50,\n\tbitrate = 200,\n\tfps = 30,\n\tlockfps = true,\n\tname = \"Test\",\n\twidth = 1280,\n\theight = 720\n}\nlocal iVideoWriter = video.Record( config )\niVideoWriter:SetRecordSound( true )\n\nlocal function Record()\n\tiVideoWriter:AddFrame( FrameTime(), true )\nend\n\nfunction StartRecording()\n\thook.Add( \"DrawOverlay\", \"Record\", Record )\nend\n\nfunction StopRecording()\n\thook.Remove( \"DrawOverlay\", \"Record\" )\n\tiVideoWriter:Finish()\nend"},"realms":["Client","Menu"],"type":"Function"},
{"function":{"name":"GetList","parent":"weapons","type":"libraryfunc","description":"Get a list of all the registered SWEPs. This does not include weapons added to spawnmenu manually.","realm":"Shared","file":{"text":"lua/includes/modules/weapons.lua","line":"174-L182"},"rets":{"ret":{"text":"List of all the registered SWEPs","name":"","type":"table"}}},"example":{"description":"Example structure.","code":"PrintTable( weapons.GetList() )","output":"```\n1:\n\tFolder = weapons/weapon_myweapon\n\tClassName = weapon_myweapon\n\t-- The rest of the SWEP table\n2:\n\tFolder = weapons/weapon_myweapon2\n\tClassName = weapon_myweapon2\n\t-- The rest of the SWEP table\n```"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"Get","parent":"weapons","type":"libraryfunc","description":{"text":"Get a `copy` of weapon table by name. This function also inherits fields from the weapon's base class, unlike weapons.GetStored.","note":"This will only work on SWEP's, this means that this will not return anything for HL2 weapons."},"realm":"Shared","file":{"text":"lua/includes/modules/weapons.lua","line":"129-L160"},"args":{"arg":{"text":"Class name of weapon to retrieve","name":"classname","type":"string"}},"rets":{"ret":{"text":"The retrieved table or nil","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetStored","parent":"weapons","type":"libraryfunc","description":{"text":"Gets the REAL weapon table, not a copy. The produced table does `not` inherit fields from the weapon's base class, unlike weapons.Get.","warning":"Modifying this table will modify what is stored by the weapons library. Take a copy or use weapons.Get to avoid this."},"realm":"Shared","file":{"text":"lua/includes/modules/weapons.lua","line":"166-L168"},"args":{"arg":{"text":"Weapon class to retrieve weapon table of","name":"weapon_class","type":"string"}},"rets":{"ret":{"text":"The weapon table","name":"","type":"table"}}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"IsBasedOn","parent":"weapons","type":"libraryfunc","description":"Checks if name is based on base","realm":"Shared","file":{"text":"lua/includes/modules/weapons.lua","line":"32-L39"},"args":{"arg":[{"text":"Entity's class name to be checked","name":"name","type":"string"},{"text":"Base class name to be checked","name":"base","type":"string"}]},"rets":{"ret":{"text":"Returns true if class name is based on base, else false.","name":"","type":"boolean"}}},"example":{"description":"See if gmod_tool is based on weapon_base, and whether weapon_base is based on itself.","code":"print(weapons.IsBasedOn(\"gmod_tool\", \"weapon_base\"), weapons.IsBasedOn(\"weapon_base\", \"weapon_base\"))","output":"true    \nfalse"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"RenderMe","parent":"widgets","type":"libraryfunc","description":"Renders a widget. Normally you won't need to call this.","realm":"Client","args":{"arg":{"text":"Widget entity to render","name":"ent","type":"Entity"}}},"example":{"description":"Example usage in **lua/entities/widget_base.lua**","code":"function ENT:Draw()\n\n\twidgets.RenderMe( self )\n\t\nend"},"realms":["Client"],"type":"Function"},
{"function":{"name":"Register","parent":"weapons","type":"libraryfunc","description":{"text":"Registers a Scripted Weapon (SWEP) class manually. When the engine spawns an entity, weapons registered with this function will be created if the class names match.\n\nSee also scripted_ents.Register for Scritped Entities (SENTs)","bug":{"text":"Sub-tables provided in the first argument will not carry over their metatable, and will receive a BaseClass key if the table was merged with the base's. Userdata references, which includes Vectors, Angles, Entities, etc. will not be copied.","pull":"1300"}},"realm":"Shared","file":{"text":"lua/includes/modules/weapons.lua","line":"46-L105"},"args":{"arg":[{"text":"The SWEP table","name":"swep_table","type":"table"},{"text":"Classname to assign to that swep","name":"classname","type":"string"}]}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"OnLoaded","parent":"weapons","type":"libraryfunc","description":{"text":"Called after all SWEPS have been loaded and runs baseclass.Set on each one.\n\nYou can retrieve all the currently registered SWEPS with weapons.GetList.","internal":"","note":"This is not called after a SWEP auto refresh, and thus the inherited baseclass functions retrieved with baseclass.Get will not be updated"},"realm":"Shared","file":{"text":"lua/includes/modules/weapons.lua","line":"110-L123"}},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetNPCWeapon","parent":"ContentIcon","type":"panelfunc","ispanel":true,"description":"Returns a table of weapon classes for the content icon with \"NPC\" content type to be randomly chosen from when user tries to spawn the NPC.","realm":"Client","rets":{"ret":{"text":"A table of weapon classes to be chosen from when user tries to spawn the NPC.","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetContentType","parent":"ContentIcon","type":"panelfunc","ispanel":true,"description":"Returns the content type used to save and restore the content icon in a spawnlist.","realm":"Client","rets":{"ret":{"text":"The content type, for example \"entity\" or \"weapon\".","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetColor","parent":"ContentIcon","type":"panelfunc","ispanel":true,"description":"Returns the color set by ContentIcon:SetColor","realm":"Client","rets":{"ret":{"text":"See Color","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"PlayerTick","parent":"widgets","type":"libraryfunc","description":{"text":"Automatically called to update all widgets.","internal":""},"realm":"Shared","args":{"arg":[{"text":"The player","name":"ply","type":"Player"},{"text":"Player move data","name":"mv","type":"CMoveData"}]}},"example":{"description":"That's how it is used in **lua/includes/modules/widget.lua**","code":"hook.Add( \"PlayerTick\", \"TickWidgets\", function( pl, mv ) widgets.PlayerTick( pl, mv ) end )"},"realms":["Server","Client"],"type":"Function"},
{"function":{"name":"GetSpawnName","parent":"ContentIcon","type":"panelfunc","ispanel":true,"description":"Returns the internal \"name\" for the content icon, usually a class name for an entity.","realm":"Client","rets":{"ret":{"text":"Internal \"name\" to be used when user left clicks the icon.","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OpenMenu","parent":"ContentIcon","type":"panelfunc","ispanel":true,"description":"A hook for override, by default does nothing. Called when user right clicks on the content icon, you are supposed to open a Global.DermaMenu here with additional options.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetAdminOnly","parent":"ContentIcon","type":"panelfunc","ispanel":true,"description":"Sets whether the content item is admin only. This makes the icon to display a admin icon in the top left corner of the icon.","realm":"Client","args":{"arg":{"text":"Whether this content should be admin only or not","name":"adminOnly","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetColor","parent":"ContentIcon","type":"panelfunc","ispanel":true,"description":"Sets the color for the content icon. Currently is not used by the content icon panel.","realm":"Client","args":{"arg":{"text":"The color to set. See Color","name":"clr","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetContentType","parent":"ContentIcon","type":"panelfunc","ispanel":true,"description":"Sets the content type used to save and restore the content icon in a spawnlist.","realm":"Client","args":{"arg":{"text":"The content type, for example \"entity\" or \"weapon\"","name":"type","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetMaterial","parent":"ContentIcon","type":"panelfunc","ispanel":true,"description":"Sets the material to be displayed as the content icon.","realm":"Client","args":{"arg":{"text":"Path to the icon to use.","name":"path","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetNPCWeapon","parent":"ContentIcon","type":"panelfunc","ispanel":true,"description":"Sets a table of weapon classes for the content icon with \"NPC\" content type to be randomly chosen from when user tries to spawn the NPC.","realm":"Client","args":{"arg":{"text":"A table of weapon classes to be chosen from when user tries to spawn the NPC.","name":"weapons","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetName","parent":"ContentIcon","type":"panelfunc","ispanel":true,"description":"Sets the tool tip and the \"nice\" name to be displayed by the content icon.","realm":"Client","args":{"arg":{"text":"\"Nice\" name to display.","name":"name","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ControlValues","parent":"ContextBase","type":"panelfunc","ispanel":true,"description":"Called by spawnmenu functions (when creating a context menu) to fill this control with data.","file":{"text":"lua/vgui/contextbase.lua","line":"20-L25"},"realm":"Client","args":{"arg":{"text":"A two-membered table:\n* string convar - The console variable to use. Calls ContextBase:SetConVar.\n* string label - The text to display inside the control's label.","name":"contextData","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetSpawnName","parent":"ContentIcon","type":"panelfunc","ispanel":true,"description":"Sets the internal \"name\" for the content icon, usually a class name for an entity.","realm":"Client","args":{"arg":{"text":"Internal \"name\" to be used when user left clicks the icon.","name":"name","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ConVar","parent":"ContextBase","type":"panelfunc","ispanel":true,"description":"Returns the ConVar for the panel to change/handle, set by ContextBase:SetConVar","realm":"Client","rets":{"ret":{"text":"The ConVar for the panel to change.","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"TestForChanges","parent":"ContextBase","type":"panelfunc","ispanel":true,"description":"You should override this function and use it to check whether your convar value changed.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetConVar","parent":"ContextBase","type":"panelfunc","ispanel":true,"description":"Sets the ConVar for the panel to change/handle.","realm":"Client","args":{"arg":{"text":"The ConVar for the panel to change.","name":"cvar","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddControl","parent":"ControlPanel","type":"panelfunc","ispanel":true,"description":{"text":"Adds a control to the control panel.","deprecated":"It is recommended to use DForm's members instead."},"file":{"text":"gamemodes/sandbox/gamemode/spawnmenu/controlpanel.lua","line":"119-L397"},"realm":"Client","args":{"arg":[{"text":"The control type to add. The complete list is:\n* header\n* textbox\n* label\n* checkbox/toggle\n* slider\n* propselect\n* matselect\n* ropematerial\n* button\n* numpad\n* color\n* combobox\n* listbox\n* materialgallery","name":"type","type":"string"},{"text":"Each control takes their own table structure. You may search \"AddControl\" on GitHub for examples.\n\nHere is a full list of each type and the table members it requires:\n\n* header\n\t* description\n\n* textbox:\n\t* label (def: \"Untitled\")\n\t* command\n\n* label:\n\t* text\n\n* checkbox, toggle (same thing):\n\t* label (def: \"Untitled\")\n\t* command\n\t* help (boolean, if true assumes label is a language string (`#tool.toolname.stuff`) and adds `.help` at the end)\n\n* slider: (DForm:NumSlider)\n\t* type (optional string, if equals `float` then 2 digits after the decimal will be used, otherwise 0)\n\t* label (def: `Untitled`)\n\t* command\n\t* min (def: `0`)\n\t* max (def: `100`)\n\t* help (boolean, see above)\n\n* propselect:\n\t* (data goes directly to PropSelect's :ControlValues(data))\n\n* matselect:\n\t* (data goes directly to MatSelect's :ControlValues(data))\n\n* ropematerial:\n\t* convar (notice: NOT called command this time!)\n\n* button:\n\t* label / text (if label is missing will use text. Def: `No Label`)\n\t* command\n\n* numpad:\n\t* command\n\t* command2\n\t* label\n\t* label2\n\n* color:\n\t* label\n\t* red (convar)\n\t* green (convar)\n\t* blue (convar)\n\t* alpha (convar)\n\n* combobox:\n\t* menubutton (if doesn't equal \"1\", becomes a listbox)\n\t* folder\n\t* options (optional, ha)\n\t* cvars (optional)\n\n* listbox:\n\t* height (if set, becomes DListView, otherwise is CtrlListBox)\n\t* label (def: `unknown`)\n\t* options (optional)\n\n* materialgallery:\n\t* width (def: `32`)\n\t* height (def: `32`)\n\t* rows (def: `4`)\n\t* convar\n\t* options","name":"controlinfo","type":"table"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddPanel","parent":"ControlPanel","type":"panelfunc","ispanel":true,"description":"Adds an item by calling DForm:AddItem.","file":{"text":"gamemodes/sandbox/gamemode/spawnmenu/controlpanel.lua","line":"41-L46"},"realm":"Client","args":{"arg":{"text":"Panel to add as an item to the control panel.","name":"panel","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"FillViaFunction","parent":"ControlPanel","type":"panelfunc","ispanel":true,"description":"Calls the given function with this panel as the only argument. Used by the spawnmenu to populate the control panel.","file":{"text":"gamemodes/sandbox/gamemode/spawnmenu/controlpanel.lua","line":"98-L102"},"realm":"Client","args":{"arg":{"text":"A function that takes one argument:\n* ControlPanel panelToPopulate","name":"func","type":"function"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetEmbeddedPanel","parent":"ControlPanel","type":"panelfunc","ispanel":true,"description":"Returns this control panel.","file":{"text":"gamemodes/sandbox/gamemode/spawnmenu/controlpanel.lua","line":"32-L36"},"realm":"Client","rets":{"ret":{"text":"The same control panel the function is being called on.","name":"","type":"ControlPanel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ControlValues","parent":"ControlPanel","type":"panelfunc","ispanel":true,"description":"Sets control values of the control panel.","file":{"text":"gamemodes/sandbox/gamemode/spawnmenu/controlpanel.lua","line":"107-L114"},"realm":"Client","args":{"arg":{"text":"A two-membered table:\n* boolean closed - Sets if the control panel should be unexpanded.\n* string label - The text to display inside the control's label.","name":"data","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"MatSelect","parent":"ControlPanel","type":"panelfunc","ispanel":true,"description":{"text":"Creates a MatSelect panel and adds it as an .","page":",itemControlPanel:AddPanel"},"file":{"text":"gamemodes/sandbox/gamemode/spawnmenu/controlpanel.lua","line":"51-L73"},"realm":"Client","args":{"arg":[{"text":"Calls MatSelect: with this value.","name":"convar","type":"string","page":",SetConVarContextBase:SetConVar"},{"text":"If specified, calls MatSelect:AddMaterial(key, value) for each table entry. If the table key is a number, the function will instead be called with the value as both arguments.","name":"options","type":"table","default":"nil"},{"text":"If specified, calls MatSelect:SetAutoHeight with this value.","name":"autostretch","type":"boolean","default":"nil"},{"text":"If specified, calls MatSelect:SetItemWidth with this value.","name":"width","type":"number","default":"nil"},{"text":"If specified, calls MatSelect:SetItemHeight with this value.","name":"height","type":"number","default":"nil"}]},"rets":{"ret":{"text":"The created MatSelect panel.","name":"","type":"MatSelect"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddConVar","parent":"ControlPresets","type":"panelfunc","ispanel":true,"description":"Adds a convar to be managed by this control.","realm":"Client","args":{"arg":{"text":"The convar to add.","name":"convar","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetLabel","parent":"ControlPresets","type":"panelfunc","ispanel":true,"description":"Set the name label text.","realm":"Client","args":{"arg":{"text":"The text to put in the label","name":"name","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetConVars","parent":"ControlPresets","type":"panelfunc","ispanel":true,"description":"Get a list of all Console Variables being managed by this panel.","realm":"Client","rets":{"ret":{"text":"numbered table of convars","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"CaptureMouse","parent":"DAdjustableModelPanel","type":"panelfunc","ispanel":true,"description":{"text":"Used by the panel to perform mouse capture operations when adjusting the model.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"FirstPersonControls","parent":"DAdjustableModelPanel","type":"panelfunc","ispanel":true,"description":{"text":"Used to adjust the perspective in the model panel via the keyboard, when the right mouse button is used.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetFirstPerson","parent":"DAdjustableModelPanel","type":"panelfunc","ispanel":true,"description":"Gets whether mouse and keyboard-based adjustment of the perspective has been enabled. See DAdjustableModelPanel:SetFirstPerson for more information.","realm":"Client","rets":{"ret":{"text":"Whether first person controls are enabled. See DAdjustableModelPanel:FirstPersonControls.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetBarColor","parent":"DAlphaBar","type":"panelfunc","ispanel":true,"description":"Returns the base color of the alpha bar. This is the color for which the alpha channel is being modified.","realm":"Client","rets":{"ret":{"text":"The current base color.","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetFirstPerson","parent":"DAdjustableModelPanel","type":"panelfunc","ispanel":true,"description":"Enables mouse and keyboard-based adjustment of the perspective.\n\nThis is set to `true` automatically each time mouse capture is enabled, and hence doesn't serve as a usable setting, other than to disable this functionality after the PANEL:OnMousePressed event.","realm":"Client","args":{"arg":{"text":"Whether to enable/disable first person controls. See DAdjustableModelPanel:FirstPersonControls.","name":"enable","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetValue","parent":"DAlphaBar","type":"panelfunc","ispanel":true,"description":"Returns the alpha value of the alpha bar.","realm":"Client","rets":{"ret":{"text":"The current alpha value.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnChange","parent":"DAlphaBar","type":"panelfunc","ispanel":true,"description":"Called when user changes the desired alpha value with the control.","realm":"Client","args":{"arg":{"text":"The new alpha value","name":"alpha","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetBarColor","parent":"DAlphaBar","type":"panelfunc","ispanel":true,"description":"Sets the base color of the alpha bar. This is the color for which the alpha channel is being modified.","realm":"Client","args":{"arg":{"text":"The new Color to set. See Global.Color.","name":"clr","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetValue","parent":"DAlphaBar","type":"panelfunc","ispanel":true,"description":"Sets the alpha value or the alpha bar.","realm":"Client","args":{"arg":{"text":"The new alpha value to set","name":"alpha","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetValue","parent":"DBinder","type":"panelfunc","ispanel":true,"description":"Gets the code of the key currently bound by the DBinder. Same as DBinder:GetSelectedNumber.","realm":"Client","rets":{"ret":{"text":"The key code of the bound key. See Enums/KEY.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetSelectedNumber","parent":"DBinder","type":"panelfunc","ispanel":true,"description":"Gets the code of the key currently bound by the DBinder. Same as DBinder:GetValue.","realm":"Client","rets":{"ret":{"text":"The key code of the bound key. See Enums/KEY.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetSelectedNumber","parent":"DBinder","type":"panelfunc","ispanel":true,"description":"Sets the current key bound by the DBinder, and updates the button's text as well as the ConVar.","realm":"Client","args":{"arg":{"text":"The key code of the key to bind. See Enums/KEY.","name":"keyCode","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnChange","parent":"DBinder","type":"panelfunc","ispanel":true,"description":"Called when the player selects a new bind.","realm":"Client","args":{"arg":{"text":"The new bound key. See input.GetKeyName.","name":"iNum","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"UpdateText","parent":"DBinder","type":"panelfunc","ispanel":true,"description":{"text":"Used to set the text of the DBinder to the current key binding, or `NONE`.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetValue","parent":"DBinder","type":"panelfunc","ispanel":true,"description":"Alias of DBinder:SetSelectedNumber.","realm":"Client","args":{"arg":{"text":"The key code of the key to bind. See Enums/KEY.","name":"keyCode","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OpenForPos","parent":"DBubbleContainer","type":"panelfunc","ispanel":true,"description":"Sets the speech bubble position and size along with the dialog point position.","realm":"Client","args":{"arg":[{"text":"The x position of the dialog point. If this is set to a value greater than half of the set width, the entire bubble container will be moved in addition to the dialog point.","name":"x","type":"number"},{"text":"The y position of the bubble container. Has no effect unless set to a value greater than the set height + 64 pixels.","name":"y","type":"number"},{"text":"The width of the bubble container.","name":"w","type":"number"},{"text":"The height of the bubble container.","name":"h","type":"number"}]}},"example":{"description":"Creates a bubble container that properly fits a 200x200 background panel.","code":"-- Length and width of background panel\nlocal size = 200\n\t\t\n-- Background panel\nBGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetSize(size, size)\nBGPanel:Center()\n\n\nlocal bubble1 = vgui.Create(\"DBubbleContainer\", BGPanel)\n\n-- x = 100 (Set pointer in the middle of the speech bubble)\n-- y = 0 (Don't adjust height)\n-- w = 180 (20 pixel right margin)\n-- h = 184 (16 pixel bottom margin)\nbubble1:OpenForPos(size/2, 0, size-20, size-16)","output":{"image":{"src":"DBubbleContainer_OpenForPos_example1.jpg"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetDrawBorder","parent":"DButton","type":"panelfunc","ispanel":true,"description":{"text":"Returns value set by DButton:SetDrawBorder. See that page for more info.","deprecated":""},"realm":"Client","rets":{"ret":{"text":"value set by DButton:SetDrawBorder.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsDown","parent":"DButton","type":"panelfunc","ispanel":true,"description":"Returns true if the DButton is currently depressed (a user is clicking on it).","realm":"Client","rets":{"ret":{"text":"Whether or not the button is depressed.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetConsoleCommand","parent":"DButton","type":"panelfunc","ispanel":true,"description":"Sets a console command to be called when the button is clicked.\n\nThis overrides the button's `DoClick` method.","realm":"Client","args":{"arg":[{"text":"The console command to be called.","name":"command","type":"string"},{"text":"The arguments for the command.","name":"args","type":"string"}]}},"example":{"description":"Creates a button that makes the player say their name.","code":"local button = vgui.Create( \"DButton\" )\nbutton:SetSize( 100, 35 )\nbutton:SetText( \"Say your nickname\" )\nbutton:Center()\nbutton:MakePopup()\nbutton:SetConsoleCommand( \"say\", LocalPlayer():Nick() )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDisabled","parent":"DButton","type":"panelfunc","ispanel":true,"description":{"text":"Sets whether or not the DButton is disabled.\n\nWhen disabled, the button is `greyed out` and cannot be clicked.","deprecated":"Use Panel:SetEnabled instead."},"realm":"Client","args":{"arg":{"text":"When true Enable the button, when false Disable the button.","name":"disable","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDrawBorder","parent":"DButton","type":"panelfunc","ispanel":true,"description":{"text":"Does absolutely nothing at all. Default value is automatically set to true.","deprecated":""},"realm":"Client","args":{"arg":{"text":"Does nothing.","name":"draw","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetIcon","parent":"DButton","type":"panelfunc","ispanel":true,"description":"Sets an image to be displayed as the button's background. Alias of DButton:SetImage","realm":"Client","args":{"arg":{"text":"The image file to use, relative to `/materials`. If this is nil, the image background is removed.","name":"img","type":"string","default":"nil"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetImage","parent":"DButton","type":"panelfunc","ispanel":true,"description":"Sets an image to be displayed as the button's background.\n\nSee DButton:SetMaterial for equivalent function that uses IMaterial instead.\n\nAlso see: DImageButton","realm":"Client","args":{"arg":{"text":"The image file to use, relative to `/materials`. If this is nil, the image background is removed.","name":"img","type":"string","default":"nil"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetMaterial","parent":"DButton","type":"panelfunc","ispanel":true,"description":"Sets an image to be displayed as the button's background.\n\nSee DButton:SetImage for equivalent function that uses file paths instead. Also see DImageButton.","added":"2020.08.12","realm":"Client","args":{"arg":{"text":"The material to use. If this is nil, the image background is removed.","name":"img","type":"IMaterial","default":"nil"}}},"realms":["Client"],"type":"Function"},
{"text":"Condition |  Value |\n----------|-------|\n|  | skin.Colours.Button.Disabled |\n| self.Depressed | skin.Colours.Button.Down |\n| self.m_bSelected | skin.Colours.Button.Down |\n| self.Hovered | skin.Colours.Button.Hover |","function":{"name":"UpdateColours","parent":"DButton","type":"panelfunc","ispanel":true,"file":{"text":"lua/vgui/dbutton.lua","line":"85-93"},"description":"A hook called from within DLabel's PANEL:ApplySchemeSettings to determine the color of the text on display.","realm":"Client","args":{"arg":{"text":"A table supposed to contain the color values listed above.","name":"skin","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddItem","parent":"DCategoryList","type":"panelfunc","ispanel":true,"description":"Adds an element to the list.","realm":"Client","args":{"arg":{"text":"VGUI element to add to the list.","name":"element","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Add","parent":"DCategoryList","type":"panelfunc","ispanel":true,"description":"Adds a DCollapsibleCategory to the list.","realm":"Client","args":{"arg":{"text":"The name of the category to add.","name":"categoryName","type":"string"}},"rets":{"ret":{"text":"The created DCollapsibleCategory","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"UnselectAll","parent":"DCategoryList","type":"panelfunc","ispanel":true,"description":"Calls Panel:UnselectAll on all child elements, if they have it.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetChecked","parent":"DCheckBox","type":"panelfunc","ispanel":true,"description":"Gets the checked state of the checkbox.","file":{"text":"lua/vgui/dcheckbox.lua","line":"4"},"realm":"Client","rets":{"ret":{"text":"Whether the box is checked or not.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsEditing","parent":"DCheckBox","type":"panelfunc","ispanel":true,"description":"Returns whether the state of the checkbox is being edited. This means whether the user is currently clicking (mouse-down) on the checkbox, and applies to both the left and right mouse buttons.","realm":"Client","rets":{"ret":{"text":"Whether the checkbox is being clicked.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnChange","parent":"DCheckBox","type":"panelfunc","ispanel":true,"description":"Called when the \"checked\" state is changed.","realm":"Client","args":{"arg":{"text":"Whether the CheckBox is checked or not.","name":"bVal","type":"boolean"}}},"example":{"description":"Creates a metamethod on the DCheckBox class to print any changes to the console.","code":"function DCheckBox:OnChange(bVal)\n\tif (bVal) then\n\t\tprint(\"Checked!\")\n\telse\n\t\tprint(\"Unchecked!\")\n\tend\nend","output":"All new checkboxes created will print `Checked!` or `Unchecked!` when their checked state is changed."},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetChecked","parent":"DCheckBox","type":"panelfunc","ispanel":true,"description":"Sets the checked state of the checkbox. Does not call the checkbox's DCheckBox:OnChange and Panel:ConVarChanged methods, unlike DCheckBox:SetValue.","realm":"Client","args":{"arg":{"text":"Whether the box should be checked or not.","name":"checked","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetValue","parent":"DCheckBox","type":"panelfunc","ispanel":true,"description":"Sets the checked state of the checkbox, and calls the checkbox's DCheckBox:OnChange and Panel:ConVarChanged methods.","realm":"Client","args":{"arg":{"text":"Whether the box should be checked or not.","name":"checked","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Toggle","parent":"DCheckBox","type":"panelfunc","ispanel":true,"description":"Toggles the checked state of the checkbox, and calls the checkbox's DCheckBox:OnChange and Panel:ConVarChanged methods. This is called by DCheckBox:DoClick.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetIndent","parent":"DCheckBoxLabel","type":"panelfunc","ispanel":true,"description":"Gets the indentation of the element on the X axis.","realm":"Client","rets":{"ret":{"text":"How much the content is moved to the right in pixels","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnChange","parent":"DCheckBoxLabel","type":"panelfunc","ispanel":true,"description":"Called when the \"checked\" state is changed.","file":{"text":"lua/vgui/dcheckbox.lua","line":"168-L172"},"realm":"Client","args":{"arg":{"text":"Whether the checkbox is checked or unchecked.","name":"bVal","type":"boolean"}}},"example":{"description":"Creates a a DCheckBoxLabel that prints to the console when ticked/unticked","code":"local Frame = vgui.Create( \"DFrame\" )\nFrame:SetSize( 300, 100 )\nFrame:SetPos( 200, 200 )\n\nlocal LabelBox = vgui.Create( \"DCheckBoxLabel\", Frame )\nLabelBox:SetPos( 10, 40 )\nLabelBox:SetText( \"This is a DLabel\" )\nfunction LabelBox:OnChange( val )\n\tif val then\n\t\tprint( \"The box has been ticked!\" )\n\telse\n\t\tprint( \"The box has been unticked!\" )\n\tend\nend","output":"The box has been ticked!"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetBright","parent":"DCheckBoxLabel","type":"panelfunc","ispanel":true,"description":{"text":"Sets the color of the DCheckBoxLabel's text to the bright text color defined in the skin.","deprecated":"You really should be using DCheckBoxLabel:SetTextColor instread"},"realm":"Client","args":{"arg":{"text":"true makes the text bright.","name":"bright","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetConVar","parent":"DCheckBoxLabel","type":"panelfunc","ispanel":true,"description":"Sets the console variable to be set when the checked state of the DCheckBoxLabel changes.","realm":"Client","args":{"arg":{"text":"The name of the convar to set","name":"convar","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetChecked","parent":"DCheckBoxLabel","type":"panelfunc","ispanel":true,"description":"Gets the checked state of the checkbox. This calls the checkbox's DCheckBox:GetChecked function.","file":{"text":"lua/vgui/dcheckbox.lua","line":"110-L112"},"realm":"Client","rets":{"ret":{"text":"Whether the box is checked or not.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDark","parent":"DCheckBoxLabel","type":"panelfunc","ispanel":true,"description":{"text":"Sets the text of the DCheckBoxLabel to be dark colored.","deprecated":"You really should be using DCheckBoxLabel:SetTextColor instread"},"realm":"Client","args":{"arg":{"text":"True to be dark, false to be default","name":"darkify","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetChecked","parent":"DCheckBoxLabel","type":"panelfunc","ispanel":true,"description":"Sets the checked state of the checkbox. Does not call DCheckBoxLabel:OnChange or Panel:ConVarChanged, unlike DCheckBoxLabel:SetValue.","file":{"text":"lua/vgui/dcheckbox.lua","line":"106-L108"},"realm":"Client","args":{"arg":{"text":"Whether the box should be checked or not.","name":"checked","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetValue","parent":"DCheckBoxLabel","type":"panelfunc","ispanel":true,"description":"Sets the checked state of the checkbox, and calls DCheckBoxLabel:OnChange and the checkbox's Panel:ConVarChanged methods.","file":{"text":"lua/vgui/dcheckbox.lua","line":"102-L104"},"realm":"Client","args":{"arg":{"text":"Whether the box should be checked or not (1 or 0 can also be used).","name":"checked","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetIndent","parent":"DCheckBoxLabel","type":"panelfunc","ispanel":true,"description":"Sets the indentation of the element on the X axis.","realm":"Client","args":{"arg":{"text":"How much in pixels to move the content to the right","name":"ident","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetTextColor","parent":"DCheckBoxLabel","type":"panelfunc","ispanel":true,"description":"Sets the text color for the DCheckBoxLabel.","file":{"text":"lua/vgui/dcheckbox.lua","line":"130-L134"},"realm":"Client","args":{"arg":{"text":"The text color. Uses the Color.","name":"color","type":"table"}}},"example":{"description":"Creates a DCheckBoxLabel and changes the text color to red.","code":"local LabelBox = vgui.Create( \"DCheckBoxLabel\" )\nLabelBox:SetTextColor( Color(255,0,0) )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetFont","parent":"DCheckBoxLabel","type":"panelfunc","ispanel":true,"description":"Sets the font of the text part of the DCheckBoxLabel.","realm":"Client","args":{"arg":{"text":"Font name","name":"font","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Toggle","parent":"DCheckBoxLabel","type":"panelfunc","ispanel":true,"description":"Toggles the checked state of the DCheckBoxLabel.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"AnimSlide","parent":"DCollapsibleCategory","type":"panelfunc","ispanel":true,"description":{"text":"Internal function that handles the open/close animations.","internal":""},"realm":"Client","args":{"arg":[{"name":"anim","type":"table"},{"name":"delta","type":"number"},{"name":"data","type":"table"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Add","parent":"DCollapsibleCategory","type":"panelfunc","ispanel":true,"description":"Adds a new text button to the collapsible category, like the tool menu in Spawnmenu.","realm":"Client","args":{"arg":{"text":"The name of the button","name":"name","type":"string"}},"rets":{"ret":{"text":"The DButton","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"DoExpansion","parent":"DCollapsibleCategory","type":"panelfunc","ispanel":true,"description":"Forces the category to open or collapse","realm":"Client","args":{"arg":{"text":"True to open, false to collapse","name":"expand","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetAnimTime","parent":"DCollapsibleCategory","type":"panelfunc","ispanel":true,"description":"Returns the expand/collapse animation time set by DCollapsibleCategory:SetAnimTime.","realm":"Client","rets":{"ret":{"text":"The animation time in seconds","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetExpanded","parent":"DCollapsibleCategory","type":"panelfunc","ispanel":true,"description":"Returns whether the DCollapsibleCategory is expanded or not.","realm":"Client","rets":{"ret":{"text":"If expanded it will return true.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetHeaderHeight","parent":"DCollapsibleCategory","type":"panelfunc","ispanel":true,"description":"Returns the header height of the DCollapsibleCategory.\n\nSee also DCollapsibleCategory:SetHeaderHeight.","added":"2020.08.12","realm":"Client","rets":{"ret":{"text":"The current height of the header.","name":"height","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetList","parent":"DCollapsibleCategory","type":"panelfunc","ispanel":true,"description":"No Description","realm":"Client","rets":{"ret":{"name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetPadding","parent":"DCollapsibleCategory","type":"panelfunc","ispanel":true,"description":"Doesn't actually do anything.\n\nReturns the number set by DCollapsibleCategory:SetPadding.","realm":"Client","rets":{"ret":{"name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetPaintBackground","parent":"DCollapsibleCategory","type":"panelfunc","ispanel":true,"description":"Returns whether or not the background should be painted.","realm":"Client","rets":{"ret":{"text":"If the background is painted or not","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetStartHeight","parent":"DCollapsibleCategory","type":"panelfunc","ispanel":true,"description":"No Description","realm":"Client","rets":{"ret":{"name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnToggle","parent":"DCollapsibleCategory","type":"panelfunc","ispanel":true,"description":"Called by DCollapsibleCategory:Toggle. This function does nothing by itself, as you're supposed to overwrite it.","realm":"Client","args":{"arg":{"text":"If it was expanded or not","name":"expanded","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetAnimTime","parent":"DCollapsibleCategory","type":"panelfunc","ispanel":true,"description":"Sets the time in seconds it takes to expand the DCollapsibleCategory","realm":"Client","args":{"arg":{"text":"The time in seconds it takes to expand","name":"time","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetExpanded","parent":"DCollapsibleCategory","type":"panelfunc","ispanel":true,"description":"Sets whether the DCollapsibleCategory is expanded or not upon opening the container.\n\nYou should use DCollapsibleCategory:Toggle or DCollapsibleCategory:DoExpansion instead.","realm":"Client","args":{"arg":{"text":"Whether it shall be expanded or not by default","name":"expanded","type":"boolean","default":"true"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetContents","parent":"DCollapsibleCategory","type":"panelfunc","ispanel":true,"description":"Sets the contents of the DCollapsibleCategory.","realm":"Client","args":{"arg":{"text":"The panel, containing the contents for the DCollapsibleCategory, mostly an DScrollPanel","name":"pnl","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetLabel","parent":"DCollapsibleCategory","type":"panelfunc","ispanel":true,"description":"Sets the name of the DCollapsibleCategory.","realm":"Client","args":{"arg":{"text":"The label/name of the DCollapsibleCategory.","name":"label","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetHeaderHeight","parent":"DCollapsibleCategory","type":"panelfunc","ispanel":true,"description":"Sets the header height of the DCollapsibleCategory.\n\nSee also DCollapsibleCategory:GetHeaderHeight.","added":"2020.08.12","realm":"Client","args":{"arg":{"text":"The new height to set. Default height is 20.","name":"height","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetPadding","parent":"DCollapsibleCategory","type":"panelfunc","ispanel":true,"description":"Doesn't actually do anything.","realm":"Client","args":{"arg":{"name":"padding","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetList","parent":"DCollapsibleCategory","type":"panelfunc","ispanel":true,"description":"No Description","realm":"Client","args":{"arg":{"name":"pnl","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetStartHeight","parent":"DCollapsibleCategory","type":"panelfunc","ispanel":true,"description":"No Description","realm":"Client","args":{"arg":{"name":"height","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetPaintBackground","parent":"DCollapsibleCategory","type":"panelfunc","ispanel":true,"description":"Sets whether or not the background should be painted.","realm":"Client","args":{"arg":{"name":"paint","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Toggle","parent":"DCollapsibleCategory","type":"panelfunc","ispanel":true,"description":"Toggles the expanded state of the DCollapsibleCategory.\n\nSee DCollapsibleCategory:GetExpanded for a function to retrieve the expanded state.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"UnselectAll","parent":"DCollapsibleCategory","type":"panelfunc","ispanel":true,"description":"No Description","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetColor","parent":"DColorButton","type":"panelfunc","ispanel":true,"description":"Returns the color of the button","realm":"Client","rets":{"ret":{"text":"The Color of the button","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"UpdateAltLines","parent":"DCollapsibleCategory","type":"panelfunc","ispanel":true,"description":{"text":"Used internally to update the \"AltLine\" property on all \"child\" panels.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetColor","parent":"DColorButton","type":"panelfunc","ispanel":true,"description":"Sets the color of the DColorButton.","realm":"Client","args":{"arg":[{"text":"A Color to set the color as","name":"color","type":"table"},{"text":"If true, the tooltip will not be reset to display the selected color.","name":"noTooltip","type":"boolean","default":"false"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsDown","parent":"DColorButton","type":"panelfunc","ispanel":true,"description":"Returns whether the DColorButton is currently being pressed (the user is holding it down).","realm":"Client","rets":{"ret":{"name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetID","parent":"DColorButton","type":"panelfunc","ispanel":true,"description":"Returns the unique ID set by DColorButton:SetID.\n\nUsed internally by DColorPalette","realm":"Client","rets":{"ret":{"text":"The unique ID of the button","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetID","parent":"DColorButton","type":"panelfunc","ispanel":true,"description":"Used internally by DColorPalette to detect which button is which.","realm":"Client","args":{"arg":{"text":"A unique ID to give this button","name":"id","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetColor","parent":"DColorCombo","type":"panelfunc","ispanel":true,"description":"Returns the color of the DColorCombo.","realm":"Client","rets":{"ret":{"text":"A Color","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"BuildControls","parent":"DColorCombo","type":"panelfunc","ispanel":true,"description":{"text":"Called internally to create panels necessary for this panel to work.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsEditing","parent":"DColorCombo","type":"panelfunc","ispanel":true,"description":"Returns true if the panel is currently being edited\n\nMore of a internal method, it technically should only ever work (i.e. return true) inside DColorCombo:OnValueChanged.","realm":"Client","rets":{"ret":{"name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetColor","parent":"DColorCombo","type":"panelfunc","ispanel":true,"description":"Sets the color of this panel.","realm":"Client","args":{"arg":{"text":"A Color.","name":"clr","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetBaseRGB","parent":"DColorCube","type":"panelfunc","ispanel":true,"description":"Returns the base Color set by DColorCube:SetBaseRGB.","realm":"Client","rets":{"ret":{"text":"A Color","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnValueChanged","parent":"DColorCombo","type":"panelfunc","ispanel":true,"description":"Called when the value (color) of this panel was changed.","realm":"Client","args":{"arg":{"name":"newcol","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetHue","parent":"DColorCube","type":"panelfunc","ispanel":true,"description":{"text":"Returns the value set by DColorCube:SetHue.","deprecated":""},"realm":"Client","rets":{"ret":{"name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetRGB","parent":"DColorCube","type":"panelfunc","ispanel":true,"description":"Returns the color cube's current set color.","realm":"Client","rets":{"ret":{"text":"The set color, uses Color.","name":"","type":"table"}}},"example":{"description":"Creates a color cube, sets the color to cyan, adjusts the saturation and value to 50% each, and prints out the final color.","code":"local color_cube = vgui.Create(\"DColorCube\")\ncolor_cube:SetSize(200, 200)\ncolor_cube:Center()\n\n-- Set color to cyan\ncolor_cube:SetColor(Color(0, 255, 255))\n\n-- 50% saturated, 50% valued\ncolor_cube:TranslateValues(0.5, 0.5)\n\n-- Print set color\nPrintTable(color_cube:GetRGB())","output":"```\nr\t=\t63\nb\t=\t127\na\t=\t255\ng\t=\t127\n```"},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnUserChanged","parent":"DColorCube","type":"panelfunc","ispanel":true,"description":"Function which is called when the color cube slider is moved (through user input). Meant to be overridden.","realm":"Client","args":{"arg":{"text":"The new color, uses Color.","name":"color","type":"table"}}},"example":{"description":"Creates a color cube which controls the blue saturation and value of a ball image.","code":"-- Frame\nMainFrame = vgui.Create(\"DFrame\")\nMainFrame:SetSize(320, 200)\nMainFrame:Center()\nMainFrame:SetTitle(\"Choose the saturation and value\")\n\n-- Image of a ball\nlocal ball_img = vgui.Create(\"DImage\", MainFrame)\nball_img:SetPos(20, 45)\nball_img:SetSize(128, 128)\n\nball_img:SetImage(\"sprites/sent_ball\")\n\n-- Color cube\nlocal color_cube = vgui.Create(\"DColorCube\", MainFrame)\ncolor_cube:SetPos(160, 40)\ncolor_cube:SetSize(150, 150)\n\n-- Set color to blue\ncolor_cube:SetColor(Color(0, 0, 255))\n\n-- Called when slider is moved by user\nfunction color_cube:OnUserChanged(col)\n\t\n\t-- Update ball color\n\tball_img:SetImageColor(col)\n\nend","output":{"image":{"src":"DColorCube_OnUserChanged_example1.gif"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetHue","parent":"DColorCube","type":"panelfunc","ispanel":true,"description":{"text":"Appears to do nothing and unused.","deprecated":""},"realm":"Client","args":{"arg":{"name":"hue","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetRGB","parent":"DColorCube","type":"panelfunc","ispanel":true,"description":{"text":"Used internally to set the real \"output\" color of the panel.","internal":""},"realm":"Client","args":{"arg":{"text":"A Color","name":"clr","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetColor","parent":"DColorCube","type":"panelfunc","ispanel":true,"description":"Sets the base color of the color cube and updates the slider position.","realm":"Client","args":{"arg":{"text":"The color to set, uses Color.","name":"color","type":"table"}}},"example":{"description":"Picks the color at the center screen pixel and applies it to the base color of a color cube and its background panel.","code":"-- Get the color of the pixel at the center of the screen\nrender.CapturePixels()\nlocal p_r, p_g, p_b = render.ReadPixel(ScrW()/2, ScrH()/2)\n\n-- Background panel\nBGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetPos((ScrW()/2)-50, ScrH()/2-100)\nBGPanel:SetSize(100, 100)\n\n-- Color cube\nlocal color_cube = vgui.Create(\"DColorCube\", BGPanel)\ncolor_cube:SetSize(75, 75)\ncolor_cube:Center()\n\n-- Set the color to the center pixel color\ncolor_cube:SetColor(Color(p_r, p_g, p_b))\n\n-- Change background color too\nBGPanel:SetBackgroundColor(Color(p_r, p_g, p_b))","output":{"image":{"src":"DColorCube_SetColor_example.jpg"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"TranslateValues","parent":"DColorCube","type":"panelfunc","ispanel":true,"description":{"text":"Updates the color cube RGB based on the given x and y position and returns its arguments. Similar to DColorCube:UpdateColor.","internal":""},"realm":"Client","args":{"arg":[{"text":"The x position to sample color from/the percentage of saturation to remove from the color (ranges from 0.0 to 1.0).","name":"x","type":"number"},{"text":"The y position to sample color from/the percentage of brightness or value to remove from the color (ranges from 0.0 to 1.0).","name":"y","type":"number"}]},"rets":{"ret":[{"text":"The given x position.","name":"","type":"number"},{"text":"The given y position.","name":"","type":"number"}]}},"example":{"description":"Creates a green color cube and prints out the color at the (0.2, 0.4) position.","code":"local color_cube = vgui.Create(\"DColorCube\")\ncolor_cube:SetSize(200, 200)\ncolor_cube:Center()\n\n-- Set base color to green\ncolor_cube:SetColor(Color(0, 255, 0))\n\n-- 20% desaturated, 40% darker\ncolor_cube:TranslateValues(0.2, 0.4)\n\n-- Get new color\nlocal new_color = color_cube:GetRGB()\n\n-- Update slider position\ncolor_cube:SetColor(new_color)\n\n-- Print out new color\nprint(\"Color( \"..new_color.r..\", \"..new_color.g..\", \"..new_color.b..\", \"..new_color.a..\" )\")","output":{"text":"```\nColor( 30, 153, 30, 255 )\n```","image":{"src":"DColorCube_TranslateValues_example1.png"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetBaseRGB","parent":"DColorCube","type":"panelfunc","ispanel":true,"description":{"text":"Sets the base color and the color used to draw the color cube panel itself.","note":"Calling this when using a color that isn't 100% saturated and valued (Global.HSVToColor with saturation and value set to 1) causes the color cube to look inaccurate compared to the color that's returned by methods like DColorCube:GetRGB and DColorCube:OnUserChanged. You should use DColorCube:SetColor instead"},"realm":"Client","args":{"arg":{"text":"The base color to set, uses Color.","name":"color","type":"table"}}},"example":{"description":"Creates a background panel and color cube that controls the background color. Demonstrates how setting the base RGB explicitly can cause a disconnect between the color represented by the cube and the color output.","code":"-- Background panel\nBGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetSize(200, 200)\nBGPanel:Center()\n\n-- Color cube\nlocal color_cube = vgui.Create(\"DColorCube\", BGPanel)\ncolor_cube:SetSize(180, 180)\ncolor_cube:Center()\n\n-- Base color set to white\ncolor_cube:SetBaseRGB(Color(255, 255, 255))\n\n-- Called when the color is changed by user input\nfunction color_cube:OnUserChanged(col)\n\n\t-- Update background panel color\n\tBGPanel:SetBackgroundColor(col)\n\t\nend","output":{"text":"Notice how the output/background color doesn't match the color where the slider is positioned.","image":{"src":"DColorCube_SetBaseRGB_example1.png"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"UpdateColor","parent":"DColorCube","type":"panelfunc","ispanel":true,"description":{"text":"Updates the color cube RGB based on the given x and y position. Similar to DColorCube:TranslateValues.","internal":""},"realm":"Client","args":{"arg":[{"text":"The x position to set color to/the percentage of saturation to remove from the color (ranges from 0.0 to 1.0).","name":"x","type":"number","default":"nil"},{"text":"The y position to set color to/the percentage of brightness or value to remove from the color (ranges from 0.0 to 1.0).","name":"y","type":"number","default":"nil"}]}},"example":{"description":"Creates a yellow color cube and updates/prints out the color at the (0.1, 0.6) position.","code":"local color_cube = vgui.Create(\"DColorCube\")\ncolor_cube:SetSize(200, 200)\ncolor_cube:Center()\n\n-- Set base color to yellow\ncolor_cube:SetColor(Color(255, 255, 0))\n\n-- 10% less saturation, 60% darker\ncolor_cube:UpdateColor(0.1, 0.6)\n\n-- Get new color\nlocal new_color = color_cube:GetRGB()\n\n-- Print new color\nprint(\"Color( \"..new_color.r..\", \"..new_color.g..\", \"..new_color.b..\", \"..new_color.a..\" )\")","output":"```\nColor( 102, 102, 10, 255 )\n```"},"realms":["Client"],"type":"Function"},
{"function":{"name":"ConVarThink","parent":"DColorMixer","type":"panelfunc","ispanel":true,"description":{"internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"DoConVarThink","parent":"DColorMixer","type":"panelfunc","ispanel":true,"description":{"internal":""},"realm":"Client","args":{"arg":{"name":"cvar","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetAlphaBar","parent":"DColorMixer","type":"panelfunc","ispanel":true,"description":"Return true if alpha bar is shown, false if not.","realm":"Client","rets":{"ret":{"text":"Return true if shown, false if not.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetColor","parent":"DColorMixer","type":"panelfunc","ispanel":true,"description":"Returns the current selected color.","realm":"Client","rets":{"ret":{"text":"The current selected color as a Color.","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetConVarA","parent":"DColorMixer","type":"panelfunc","ispanel":true,"description":"Returns the ConVar name for the alpha channel of the color.\n\nSee also:\n* DColorMixer:GetConVarR - For the red channel\n* DColorMixer:GetConVarG - For the green channel\n* DColorMixer:GetConVarB - For the blue channel","realm":"Client","rets":{"ret":{"text":"The ConVar name for the alpha channel of the color","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetConVarB","parent":"DColorMixer","type":"panelfunc","ispanel":true,"description":"Returns the ConVar name for the blue channel of the color.\n\nSee also:\n* DColorMixer:GetConVarR - For the red channel\n* DColorMixer:GetConVarG - For the green channel\n* DColorMixer:GetConVarA - For the alpha channel","realm":"Client","rets":{"ret":{"text":"The ConVar name for the blue channel of the color","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetConVarG","parent":"DColorMixer","type":"panelfunc","ispanel":true,"description":"Returns the ConVar name for the green channel of the color.\n\nSee also:\n* DColorMixer:GetConVarR - For the red channel\n* DColorMixer:GetConVarB - For the blue channel\n* DColorMixer:GetConVarA - For the alpha channel","realm":"Client","rets":{"ret":{"text":"The ConVar name for the green channel of the color","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetPalette","parent":"DColorMixer","type":"panelfunc","ispanel":true,"description":"Return true if palette is shown, false if not.","realm":"Client","rets":{"ret":{"text":"Return true if shown, false if not.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetConVarR","parent":"DColorMixer","type":"panelfunc","ispanel":true,"description":"Returns the ConVar name for the red channel of the color.\n\nSee also:\n* DColorMixer:GetConVarG - For the green channel\n* DColorMixer:GetConVarB - For the blue channel\n* DColorMixer:GetConVarA - For the alpha channel","realm":"Client","rets":{"ret":{"text":"The ConVar name for the red channel of the color","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetVector","parent":"DColorMixer","type":"panelfunc","ispanel":true,"description":"Returns the color as a normalized Vector.","realm":"Client","rets":{"ret":{"text":"A vector representing the color of the DColorMixer, each value being in range of 0 to 1. Alpha is not included.","name":"","type":"Vector"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetWangs","parent":"DColorMixer","type":"panelfunc","ispanel":true,"description":"Return true if the wangs are shown, false if not.","realm":"Client","rets":{"ret":{"text":"Return true if shown, false if not.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetAlphaBar","parent":"DColorMixer","type":"panelfunc","ispanel":true,"description":"Show/Hide the alpha bar in DColorMixer","realm":"Client","args":{"arg":{"text":"Show / Hide the alpha bar","name":"show","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetBaseColor","parent":"DColorMixer","type":"panelfunc","ispanel":true,"description":"Sets the base color of the DColorCube part of the DColorMixer.\n\nSee also DColorCube:SetBaseRGB","realm":"Client","args":{"arg":{"text":"Color","name":"clr","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetColor","parent":"DColorMixer","type":"panelfunc","ispanel":true,"description":"Sets the color of the DColorMixer","realm":"Client","args":{"arg":{"text":"The color to set. See Global.Color","name":"color","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetConVarA","parent":"DColorMixer","type":"panelfunc","ispanel":true,"description":"Sets the ConVar name for the alpha channel of the color.\n\nSee also:\n* DColorMixer:SetConVarR - For the red channel\n* DColorMixer:SetConVarG - For the green channel\n* DColorMixer:SetConVarB - For the blue channel","realm":"Client","args":{"arg":{"text":"The ConVar name for the alpha channel of the color","name":"convar","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetConVarB","parent":"DColorMixer","type":"panelfunc","ispanel":true,"description":"Sets the ConVar name for the blue channel of the color.\n\nSee also:\n* DColorMixer:SetConVarR - For the red channel\n* DColorMixer:SetConVarG - For the green channel\n* DColorMixer:SetConVarA - For the alpha channel","realm":"Client","args":{"arg":{"text":"The ConVar name for the blue channel of the color","name":"convar","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetConVarG","parent":"DColorMixer","type":"panelfunc","ispanel":true,"description":"Sets the ConVar name for the green channel of the color.\n\nSee also:\n* DColorMixer:SetConVarR - For the red channel\n* DColorMixer:SetConVarB - For the blue channel\n* DColorMixer:SetConVarA - For the alpha channel","realm":"Client","args":{"arg":{"text":"The ConVar name for the green channel of the color","name":"convar","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetConVarR","parent":"DColorMixer","type":"panelfunc","ispanel":true,"description":"Sets the ConVar name for the red channel of the color.\n\nSee also:\n* DColorMixer:SetConVarG - For the green channel\n* DColorMixer:SetConVarB - For the blue channel\n* DColorMixer:SetConVarA - For the alpha channel","realm":"Client","args":{"arg":{"text":"The ConVar name for the red channel of the color","name":"convar","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetLabel","parent":"DColorMixer","type":"panelfunc","ispanel":true,"description":"Sets the label's text to show.","realm":"Client","args":{"arg":{"text":"Set to non empty string to show the label and its text.\n\nGive it an empty string or nothing and the label will be hidden.","name":"text","type":"string","default":"nil"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetPalette","parent":"DColorMixer","type":"panelfunc","ispanel":true,"description":"Show or hide the palette panel","realm":"Client","args":{"arg":{"text":"Show or hide the palette panel?","name":"enabled","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetVector","parent":"DColorMixer","type":"panelfunc","ispanel":true,"description":"Sets the color of DColorMixer from a Vector. Alpha is not included.","realm":"Client","args":{"arg":{"text":"The color to set. It is expected that the vector will have values be from 0 to 1. (i.e. be normalized)","name":"vec","type":"Vector"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetWangs","parent":"DColorMixer","type":"panelfunc","ispanel":true,"description":"Show / Hide the colors indicators in DColorMixer","realm":"Client","args":{"arg":{"text":"Show / Hide the colors indicators","name":"show","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"TranslateValues","parent":"DColorMixer","type":"panelfunc","ispanel":true,"description":{"text":"Does nothing.","internal":"","deprecated":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"UpdateColor","parent":"DColorMixer","type":"panelfunc","ispanel":true,"description":{"text":"Use DColorMixer:SetColor instead!","internal":""},"realm":"Client","args":{"arg":{"name":"clr","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"UpdateConVar","parent":"DColorMixer","type":"panelfunc","ispanel":true,"description":{"internal":""},"realm":"Client","args":{"arg":[{"text":"The ConVar name","name":"cvar","type":"string"},{"text":"The color part to set the cvar to. \"r\", \"g\", \"b\" or \"a\".","name":"part","type":"string"},{"text":"The Color","name":"clr","type":"table"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ValueChanged","parent":"DColorMixer","type":"panelfunc","ispanel":true,"description":{"text":"Called when the player changes the color of the DColorMixer.","bug":"The returned color will not have the color metatable."},"realm":"Client","args":{"arg":{"text":"The new color. See Color","name":"col","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"UpdateConVars","parent":"DColorMixer","type":"panelfunc","ispanel":true,"description":{"internal":""},"realm":"Client","args":{"arg":{"text":"The Color","name":"clr","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"DoClick","parent":"DColorPalette","type":"panelfunc","ispanel":true,"description":{"text":"Basically the same functionality as DColorPalette:OnValueChanged, you should use that instead!","deprecated":""},"realm":"Client","args":{"arg":[{"text":"The new color via the Color","name":"clr","type":"table"},{"text":"The DColorButton that was pressed.","name":"btn","type":"Panel"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetButtonSize","parent":"DColorPalette","type":"panelfunc","ispanel":true,"description":"Returns the size of each palette button. Set by DColorPalette:SetButtonSize.","realm":"Client","rets":{"ret":{"text":"The size of each palette button","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetConVarB","parent":"DColorPalette","type":"panelfunc","ispanel":true,"description":"Returns the ConVar name for the blue channel of the color.\n\nSee also:\n* DColorPalette:GetConVarR - For the red channel\n* DColorPalette:GetConVarG - For the green channel\n* DColorPalette:GetConVarA - For the alpha channel","realm":"Client","rets":{"ret":{"text":"The ConVar name for the blue channel of the color","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetConVarG","parent":"DColorPalette","type":"panelfunc","ispanel":true,"description":"Returns the ConVar name for the green channel of the color.\n\nSee also:\n* DColorPalette:GetConVarR - For the red channel\n* DColorPalette:GetConVarB - For the blue channel\n* DColorPalette:GetConVarA - For the alpha channel","realm":"Client","rets":{"ret":{"text":"The ConVar name for the green channel of the color","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetConVarR","parent":"DColorPalette","type":"panelfunc","ispanel":true,"description":"Returns the ConVar name for the red channel of the color.\n\nSee also:\n* DColorPalette:GetConVarG - For the green channel\n* DColorPalette:GetConVarB - For the blue channel\n* DColorPalette:GetConVarA - For the alpha channel","realm":"Client","rets":{"ret":{"text":"The ConVar name for the red channel of the color","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetConVarA","parent":"DColorPalette","type":"panelfunc","ispanel":true,"description":"Returns the ConVar name for the alpha channel of the color.\n\nSee also:\n* DColorPalette:GetConVarR - For the red channel\n* DColorPalette:GetConVarG - For the green channel\n* DColorPalette:GetConVarB - For the blue channel","realm":"Client","rets":{"ret":{"text":"The ConVar name for the alpha channel of the color","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"NetworkColorChange","parent":"DColorPalette","type":"panelfunc","ispanel":true,"description":{"text":"Used internally to make sure changes on one palette affect other palettes with same name.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetNumRows","parent":"DColorPalette","type":"panelfunc","ispanel":true,"description":"Returns the number of rows of the palette, provided 6 colors fill each row. This value is equal to the number of colors in the DColorPalette divided by 6.","realm":"Client","rets":{"ret":{"text":"Number of rows of the DColorPalette.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnValueChanged","parent":"DColorPalette","type":"panelfunc","ispanel":true,"description":"Called when the color is changed after clicking a new value.","realm":"Client","args":{"arg":{"text":"The new color of the DColorPalette","name":"newcol","type":"table"}}},"example":{"description":"Creates a DFrame with a color palette that prints values after being changed.","code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetSize( ScrW() - 100, ScrH() - 100 )\nframe:Center()\nframe:MakePopup()\n\nlocal palette = vgui.Create( \"DColorPalette\", frame )\npalette:Dock( FILL )\n\nfunction palette:OnValueChanged( newcol )\n\tPrintTable( newcol )\nend","output":"The color chosen on the palette."},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnRightClickButton","parent":"DColorPalette","type":"panelfunc","ispanel":true,"description":"Called when a palette button has been pressed","realm":"Client","args":{"arg":{"text":"The DColorButton that was pressed.","name":"pnl","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ResetSavedColors","parent":"DColorPalette","type":"panelfunc","ispanel":true,"description":"Resets this entire color palette to a default preset one and saves the changes.\n\nSee DColorPalette:Reset for version that does not save the changes.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"Reset","parent":"DColorPalette","type":"panelfunc","ispanel":true,"description":"Resets this entire color palette to a default preset one, without saving.\n\nSee DColorPalette:ResetSavedColors for version that also saves the changes.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetColor","parent":"DColorPalette","type":"panelfunc","ispanel":true,"description":{"text":"Currently does nothing. Intended to \"select\" the color.","deprecated":""},"realm":"Client","args":{"arg":{"name":"clr","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetButtonSize","parent":"DColorPalette","type":"panelfunc","ispanel":true,"description":{"text":"Sets the size of each palette button.\n\nThis is best kept to such a number, where this equation would return a whole number:\n`WidthOfColorPalette / ButtonSize= WholeNumber`\n\nIf not, there will be ugly whitespace on the right side of the panel.","br":""},"realm":"Client","args":{"arg":{"text":"Sets the new size","name":"size","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SaveColor","parent":"DColorPalette","type":"panelfunc","ispanel":true,"description":"Saves the color of given button across sessions.\n\nThe color is saved as a panel cookie, see Panel:SetCookie and Panel:SetCookieName.\n```\n\n \n```\n\nIt is expected that the amount of colors per palette (Panel:SetCookieName) is the same every time.","realm":"Client","args":{"arg":[{"text":"The button to save the color of. Used to get the ID of the button.","name":"btn","type":"Panel"},{"text":"The color to save to this button's index","name":"clr","type":"table"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetColorButtons","parent":"DColorPalette","type":"panelfunc","ispanel":true,"description":"Clears the palette and adds new buttons with given colors.","realm":"Client","args":{"arg":{"text":"A number indexed table where each value is a Color","name":"tab","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetConVarB","parent":"DColorPalette","type":"panelfunc","ispanel":true,"description":"Sets the ConVar name for the blue channel of the color.\n\nSee also:\n* DColorPalette:SetConVarR - For the red channel\n* DColorPalette:SetConVarG - For the green channel\n* DColorPalette:SetConVarA - For the alpha channel","realm":"Client","args":{"arg":{"text":"The ConVar name for the blue channel of the color","name":"convar","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetConVarA","parent":"DColorPalette","type":"panelfunc","ispanel":true,"description":"Sets the ConVar name for the alpha channel of the color.\n\nSee also:\n* DColorPalette:SetConVarR - For the red channel\n* DColorPalette:SetConVarG - For the green channel\n* DColorPalette:SetConVarB - For the blue channel","realm":"Client","args":{"arg":{"text":"The ConVar name for the alpha channel of the color","name":"convar","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetConVarG","parent":"DColorPalette","type":"panelfunc","ispanel":true,"description":"Sets the ConVar name for the green channel of the color.\n\nSee also:\n* DColorPalette:SetConVarR - For the red channel\n* DColorPalette:SetConVarB - For the blue channel\n* DColorPalette:SetConVarA - For the alpha channel","realm":"Client","args":{"arg":{"text":"The ConVar name for the green channel of the color","name":"convar","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetNumRows","parent":"DColorPalette","type":"panelfunc","ispanel":true,"description":{"text":"Roughly sets the number of colors that can be picked by the user. If the DColorPalette is exactly 6 rows tall, this function will set the number of colors shown per row in the palette.","note":"DColorPalette:Reset or DColorPalette:ResetSavedColors must be called after this function to apply changes."},"realm":"Client","args":{"arg":{"text":"Scale for the range of colors that the user can pick. Default is 8.","name":"rows","type":"number"}}},"example":{"description":"Creates four DColorPalettes, each with a varying number of colors per row.","code":"local frame = vgui.Create( \"DFrame\" ) -- Create the window\nframe:SetSize( 350, 350 )\nframe:SetTitle( \"SetNumRows Demonstration\" )\nframe:Center()\nframe:MakePopup()\n\nlocal label = vgui.Create( \"DLabel\", frame ) -- Create the help text\nlabel:Dock( TOP )\nlabel:SetText( \"Difference between SetNumRows( 4 ), SetNumRows( 8 ), SetNumRows( 16 ) and SetNumRows( 24 )\" )\nlabel:SetWrap( true ) -- Enables text wrapping for lower resolutions\nlabel:SetAutoStretchVertical( true ) -- Needed for the text to show properly\n\nlocal pallette1 = vgui.Create( \"DColorPalette\", frame ) -- First DColorPalette with 4 colors per row\npallette1:SetPos( 4, 60 )\npallette1:SetNumRows( 4 )\npallette1:SetSize( 40, 60 )\npallette1:Reset()\n\nlocal pallette2 = vgui.Create( \"DColorPalette\", frame ) -- Second DColorPalette with 8 colors per row\npallette2:SetPos( 4, 130 )\npallette2:SetNumRows( 8 )\npallette2:SetSize( 80, 60 )\npallette2:Reset()\n\nlocal pallette3 = vgui.Create( \"DColorPalette\", frame ) -- Third DColorPalette with 16 colors per row\npallette3:SetPos( 4, 200 )\npallette3:SetNumRows( 16 )\npallette3:SetSize( 160, 60 )\npallette3:Reset()\n\nlocal pallette4 = vgui.Create( \"DColorPalette\", frame ) -- Fourth DColorPalette with 24 colors per row\npallette4:SetPos( 4, 270 )\npallette4:SetNumRows( 24 )\npallette4:SetSize( 240, 60 )\npallette4:Reset()","output":{"image":{"src":"setnumrows_demonstration.png"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetConVarR","parent":"DColorPalette","type":"panelfunc","ispanel":true,"description":"Sets the ConVar name for the red channel of the color.\n\nSee also:\n* DColorPalette:SetConVarG - For the green channel\n* DColorPalette:SetConVarB - For the blue channel\n* DColorPalette:SetConVarA - For the alpha channel","realm":"Client","args":{"arg":{"text":"The ConVar name for the red channel of the color","name":"convar","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"UpdateConVar","parent":"DColorPalette","type":"panelfunc","ispanel":true,"description":{"text":"Internal helper function for DColorPalette:UpdateConVars.","internal":""},"realm":"Client","args":{"arg":[{"text":"The name of the console variable to set","name":"name","type":"string"},{"text":"The key of the 3rd argument to set the convar to\nPossible values: \"r\", \"g\", \"b\", \"a\"","name":"key","type":"string"},{"text":"The Color to retrieve the info from.","name":"clr","type":"table"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"UpdateConVars","parent":"DColorPalette","type":"panelfunc","ispanel":true,"description":{"text":"Updates all the console variables set by DColorPalette:SetConVarR and so on with given color.\n\nCalled internally when a palette color is clicked.","internal":""},"realm":"Client","args":{"arg":{"text":"A Color","name":"clr","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetActiveButton","parent":"DColumnSheet","type":"panelfunc","ispanel":true,"description":"Returns the active button of this DColumnSheet.","realm":"Client","rets":{"ret":{"text":"The active button","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddSheet","parent":"DColumnSheet","type":"panelfunc","ispanel":true,"description":"Adds a new column/tab.","realm":"Client","args":{"arg":[{"text":"Name of the column/tab","name":"name","type":"string"},{"text":"Panel to be used as contents of the tab. This normally would be a DPanel","name":"pnl","type":"Panel"},{"text":"Icon for the tab. This will ideally be a , but any material name can be used.","name":"icon","type":"string","default":"nil","page":",silkiconSilkicons"}]},"rets":{"ret":{"text":"A table containing the following keys:\n* Panel Button - The created tab button that will switch to the given panel\n* Panel Panel - The given panel to switch to when the button is pressed","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetActiveButton","parent":"DColumnSheet","type":"panelfunc","ispanel":true,"description":{"text":"Makes a button an active button for this DColumnSheet.","internal":""},"realm":"Client","args":{"arg":{"text":"The button to make active button","name":"active","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"UseButtonOnlyStyle","parent":"DColumnSheet","type":"panelfunc","ispanel":true,"description":"Makes the tabs/buttons show only the image and no text.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddSpacer","parent":"DComboBox","type":"panelfunc","ispanel":true,"description":"Adds a spacer below the currently last item in the drop down. Recommended to use with DComboBox:SetSortItems set to `false`.","realm":"Client","added":"2021.03.31"},"realms":["Client"],"type":"Function"},
{"function":{"name":"ChooseOptionID","parent":"DComboBox","type":"panelfunc","ispanel":true,"description":"Selects an option within a combo box based on its table index.","realm":"Client","file":{"text":"lua/vgui/dcombobox.lua","line":"99-L104"},"args":{"arg":{"text":"Selects the option with given index.","name":"index","type":"number"}}},"example":{"description":"A simple combo box menu which gives choices for a favorite lunch meal, including a non-preference choice which randomly chooses an option.","code":"BGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetPos(20, 20)\nBGPanel:SetSize(200, 100)\n\n-- Text output\nlocal lbl = vgui.Create(\"DLabel\", BGPanel)\nlbl:SetPos(10, 80)\nlbl:SetSize(180, 20)\nlbl:SetDark(true)\nlbl:SetText(\"You choose...\")\n\n-- Combo box\nlocal cbox = vgui.Create(\"DComboBox\", BGPanel)\ncbox:SetPos(5, 5)\ncbox:SetSize(190, 20)\n\ncbox:SetValue(\"What's your favorite lunch meal?\")\n\n-- Choices\ncbox:AddChoice(\"BBQ Chicken\")\ncbox:AddChoice(\"Fish and Chips\")\ncbox:AddChoice(\"Pizza\")\ncbox:AddChoice(\"Potato Salad\")\ncbox:AddChoice(\"Roast Beef Sandwich\")\ncbox:AddChoice(\"Spaghetti\")\n\n-- No preference: data is set to -1\ncbox:AddChoice(\"I don't have a favorite.\", -1)\n\nfunction cbox:OnSelect(index, value, data)\n\n\t-- No preference? Choose a random choice\n\tif(data == -1) then\t\t\t\t\n\t\tself:ChooseOptionID(math.random(1, 6))\n\t\t\n\t-- Otherwise update the text label with our choice\n\telse\n\t\tlbl:SetText(\"You choose \"..value..\".\")\n\tend\n\t\nend","output":{"image":{"src":"DComboBox_ChooseOptionID_example1.gif"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddChoice","parent":"DComboBox","type":"panelfunc","ispanel":true,"description":"Adds a choice to the combo box.","file":{"text":"lua/vgui/dcombobox.lua","line":"126-L146"},"realm":"Client","args":{"arg":[{"text":"The text show to the user.","name":"value","type":"string"},{"text":"The data accompanying this string. If left empty, the value argument is used instead.\n\nCan be accessed with the second argument of DComboBox:GetSelected, DComboBox:GetOptionData and as an argument of DComboBox:OnSelect.","name":"data","type":"any","default":"nil"},{"text":"Should this be the default selected text show to the user or not.","name":"select","type":"boolean","default":"false"},{"text":"Adds an icon for this choice.","name":"icon","type":"string","default":"nil"}]},"rets":{"ret":{"text":"The index of the new option.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ChooseOption","parent":"DComboBox","type":"panelfunc","ispanel":true,"description":"Selects a combo box option by its index and changes the text displayed at the top of the combo box.","realm":"Client","file":{"text":"lua/vgui/dcombobox.lua","line":"82-L97"},"args":{"arg":[{"text":"The text to display at the top of the combo box.","name":"value","type":"string"},{"text":"The option index.","name":"index","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Clear","parent":"DComboBox","type":"panelfunc","ispanel":true,"description":"Clears the combo box's text value, choices, and data values.","realm":"Client","file":{"text":"lua/vgui/dcombobox.lua","line":"27-L40"}},"realms":["Client"],"type":"Function"},
{"function":{"name":"CloseMenu","parent":"DComboBox","type":"panelfunc","ispanel":true,"description":"Closes the combo box menu. Called when the combo box is clicked while open.","realm":"Client","file":{"text":"lua/vgui/dcombobox.lua","line":"201-L207"}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetOptionData","parent":"DComboBox","type":"panelfunc","ispanel":true,"description":"Returns an option's data based on the given index.","realm":"Client","file":{"text":"lua/vgui/dcombobox.lua","line":"48-L52"},"args":{"arg":{"text":"The option index.","name":"index","type":"number"}},"rets":{"ret":{"text":"The option's data value.","name":"","type":"any"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetOptionTextByData","parent":"DComboBox","type":"panelfunc","ispanel":true,"description":"Returns an option's text based on the given data.","realm":"Client","file":{"text":"lua/vgui/dcombobox.lua","line":"54-L72"},"args":{"arg":{"text":"The data to look up the name of.\n\nIf given a number and no matching data was found, the function will test given data against each Global.tonumber'd data entry.","name":"data","type":"string"}},"rets":{"ret":{"text":"The option's text value.\n\nIf no matching data was found, the data itself will be returned. If multiple identical data entries exist, the first instance will be returned.","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetOptionText","parent":"DComboBox","type":"panelfunc","ispanel":true,"description":"Returns an option's text based on the given index.","realm":"Client","file":{"text":"lua/vgui/dcombobox.lua","line":"42-L46"},"args":{"arg":{"text":"The option index.","name":"index","type":"number"}},"rets":{"ret":{"text":"The option's text value.","name":"","type":"string"}}},"example":{"description":"Create a combo box listing some colors and print the 3rd option's text.","code":"local cbox = vgui.Create(\"DComboBox\")\ncbox:SetPos(5, 5)\ncbox:SetSize(200, 20)\n\ncbox:SetValue(\"Colors\")\ncbox:AddChoice(\"Red\")\ncbox:AddChoice(\"Green\")\ncbox:AddChoice(\"Blue\")\ncbox:AddChoice(\"Yellow\")\n\nprint(cbox:GetOptionText(3))","output":"Blue"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetSelected","parent":"DComboBox","type":"panelfunc","ispanel":true,"description":"Returns the currently selected option's text and data","realm":"Client","file":{"text":"lua/vgui/dcombobox.lua","line":"112-L118"},"rets":{"ret":[{"text":"The option's text value.","name":"","type":"string"},{"text":"The option's stored data.","name":"","type":"any"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetSelectedID","parent":"DComboBox","type":"panelfunc","ispanel":true,"description":"Returns the index (ID) of the currently selected option.","realm":"Client","file":{"text":"lua/vgui/dcombobox.lua","line":"106-L110"},"rets":{"ret":{"text":"The ID of the currently selected option.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetSortItems","parent":"DComboBox","type":"panelfunc","ispanel":true,"description":"Returns an whether the items in the dropdown will be alphabetically sorted or not.\n\nSee DComboBox:SetSortItems.","realm":"Client","rets":{"ret":{"text":"True if enabled, false otherwise.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsMenuOpen","parent":"DComboBox","type":"panelfunc","ispanel":true,"description":"Returns whether or not the combo box's menu is opened.","realm":"Client","file":{"text":"lua/vgui/dcombobox.lua","line":"148-L152"},"rets":{"ret":{"text":"True if the menu is open, false otherwise.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OpenMenu","parent":"DComboBox","type":"panelfunc","ispanel":true,"description":"Opens the combo box drop down menu. Called when the combo box is clicked.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnSelect","parent":"DComboBox","type":"panelfunc","ispanel":true,"description":"Called when an option in the combo box is selected. This function does nothing by itself, you're supposed to overwrite it.","realm":"Client","file":{"text":"lua/vgui/dcombobox.lua","line":"120-L124"},"args":{"arg":[{"text":"The index of the option for use with other DComboBox functions.","name":"index","type":"number"},{"text":"The name of the option.","name":"value","type":"string"},{"text":"The data assigned to the option.","name":"data","type":"any"}]}},"example":{"description":"Creates a combo box that controls the color of the background panel.","code":"local frame = vgui.Create(\"DFrame\")\nframe:SetSize( 500, 500 )\nframe:Center()\nframe:MakePopup()\n\n-- Background panel\nlocal BGPanel = vgui.Create( \"DPanel\", frame )\nBGPanel:Dock( FILL )\n\nlocal cbox = vgui.Create( \"DComboBox\", BGPanel )\ncbox:SetPos( 5, 5 )\ncbox:SetSize( 190, 20 )\ncbox:SetValue( \"Pick a color\" ) -- Default text\n\n-- Color choices\ncbox:AddChoice( \"Red\", Color( 255, 0, 0 ) )\ncbox:AddChoice( \"Orange\", Color( 255, 128, 0 ) )\ncbox:AddChoice( \"Yellow\", Color( 255, 255, 0 ) )\ncbox:AddChoice( \"Green\", Color( 0, 255, 0 ) )\ncbox:AddChoice( \"Blue\", Color( 0, 0, 255 ) )\ncbox:AddChoice( \"Indigo\", Color( 64, 0, 255 ) )\ncbox:AddChoice( \"Violet\", Color( 128, 0, 255 ) )\ncbox:AddChoice( \"Pink\", Color( 255, 0, 255 ) )\n\nfunction cbox:OnSelect( index, text, data )\n\n\t-- Set background panel color\n\tBGPanel:SetBackgroundColor( data )\n\nend"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetValue","parent":"DComboBox","type":"panelfunc","ispanel":true,"description":"Sets the text shown in the combo box when the menu is not collapsed.","realm":"Client","args":{"arg":{"text":"The text in the DComboBox.","name":"value","type":"string"}}},"example":{"description":"A simple feedback combo box which has the value set to a thank you message once a choice is clicked.","code":"BGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetPos(20, 20)\nBGPanel:SetSize(200, 30)\n\nlocal cbox = vgui.Create(\"DComboBox\", BGPanel)\ncbox:SetPos(5, 5)\ncbox:SetSize(190, 20)\n\ncbox:SetValue(\"What do you think of this server?\")\n\n-- Responses\ncbox:AddChoice(\"It's the best server of all time!\")\ncbox:AddChoice(\"It's pretty good.\")\ncbox:AddChoice(\"It's okay.\")\ncbox:AddChoice(\"It's not that good.\")\ncbox:AddChoice(\"Don't bother me with this.\")\n\nfunction cbox:OnSelect(index, value, data)\n\n\t-- Clear combo box and set a thank you message\n\tself:Clear()\n\tself:SetText(\"Thank you for your feedback!\")\n\t\n\t-- Here you would send the feedback to the server using a net message\n\t-- The choice is stored in the 'data' variable\n\nend","output":{"image":{"src":"DComboBox_SetValue_example1.gif"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetSortItems","parent":"DComboBox","type":"panelfunc","ispanel":true,"description":"Sets whether or not the items should be sorted alphabetically in the dropdown menu of the DComboBox. If set to false, items will appear in the order they were added by DComboBox:AddChoice calls.\n\nThis is enabled by default.","realm":"Client","args":{"arg":{"text":"true to enable, false to disable","name":"sort","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"DropAction_Copy","parent":"DDragBase","type":"panelfunc","ispanel":true,"description":{"text":"Internal function used in DDragBase:MakeDroppable","internal":""},"realm":"Client","args":{"arg":[{"name":"drops","type":"table"},{"name":"bDoDrop","type":"boolean"},{"name":"command","type":"string"},{"name":"y","type":"number"},{"name":"x","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"DropAction_Normal","parent":"DDragBase","type":"panelfunc","ispanel":true,"description":{"text":"Internal function used in DDragBase:DropAction_Copy","internal":""},"realm":"Client","args":{"arg":[{"name":"drops","type":"table"},{"name":"bDoDrop","type":"boolean"},{"name":"command","type":"string"},{"name":"y","type":"number"},{"name":"x","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetDnD","parent":"DDragBase","type":"panelfunc","ispanel":true,"description":"No Description","realm":"Client","rets":{"ret":{"text":"Name of the DnD family.","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"DropAction_Simple","parent":"DDragBase","type":"panelfunc","ispanel":true,"description":{"text":"Internal function used in DDragBase:DropAction_Normal","internal":""},"realm":"Client","args":{"arg":[{"name":"drops","type":"table"},{"name":"bDoDrop","type":"boolean"},{"name":"command","type":"string"},{"name":"y","type":"number"},{"name":"x","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetUseLiveDrag","parent":"DDragBase","type":"panelfunc","ispanel":true,"description":"No Description","realm":"Client","rets":{"ret":{"name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"MakeDroppable","parent":"DDragBase","type":"panelfunc","ispanel":true,"description":"Makes the panel a receiver for any droppable panel with the same DnD name. Internally calls Panel:Receiver.","realm":"Client","args":{"arg":[{"text":"The unique name for the receiver slot. Only droppable panels with the same DnD name as this can be dropped on the panel.","name":"name","type":"string"},{"text":"Whether or not to allow droppable panels to be copied when the  key is held down.","name":"allowCopy","type":"boolean","key":"Ctrl"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDnD","parent":"DDragBase","type":"panelfunc","ispanel":true,"description":"No Description","realm":"Client","args":{"arg":{"text":"Name of the DnD family.","name":"name","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDropPos","parent":"DDragBase","type":"panelfunc","ispanel":true,"description":"Determines where you can drop stuff.\n\"4\" for left\n\"5\" for center\n\"6\" for right\n\"8\" for top\n\"2\" for bottom","realm":"Client","args":{"arg":{"text":"Where you're allowed to drop things.","name":"pos","type":"string","default":"5"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnModified","parent":"DDragBase","type":"panelfunc","ispanel":true,"description":"Called when anything is dropped on or rearranged within the DDragBase.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetUseLiveDrag","parent":"DDragBase","type":"panelfunc","ispanel":true,"description":"No Description","realm":"Client","args":{"arg":{"name":"newState","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"UpdateDropTarget","parent":"DDragBase","type":"panelfunc","ispanel":true,"description":{"text":"Internal function used in DDragBase:DropAction_Normal","internal":""},"realm":"Client","args":{"arg":[{"name":"drop","type":"number"},{"name":"pnl","type":"Panel"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Close","parent":"DDrawer","type":"panelfunc","ispanel":true,"description":"Closes the DDrawer.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetOpenTime","parent":"DDrawer","type":"panelfunc","ispanel":true,"description":"Return the Open Time of DDrawer.","realm":"Client","rets":{"ret":{"text":"Time in seconds.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetOpenSize","parent":"DDrawer","type":"panelfunc","ispanel":true,"description":"Return the Open Size of DDrawer.","realm":"Client","rets":{"ret":{"text":"Open size.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Open","parent":"DDrawer","type":"panelfunc","ispanel":true,"description":"Opens the DDrawer.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetOpenSize","parent":"DDrawer","type":"panelfunc","ispanel":true,"description":"Set the height of DDrawer","realm":"Client","args":{"arg":{"text":"Height of DDrawer. Default is 100.","name":"Value","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetOpenTime","parent":"DDrawer","type":"panelfunc","ispanel":true,"description":"Set the time (in seconds) for DDrawer to open.","realm":"Client","args":{"arg":{"text":"Length in seconds. Default is 0.3","name":"value","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"EntityLost","parent":"DEntityProperties","type":"panelfunc","ispanel":true,"description":{"text":"Called internally when an entity being edited became invalid.\n\nYou should use DEntityProperties:OnEntityLost instead.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"Toggle","parent":"DDrawer","type":"panelfunc","ispanel":true,"description":"Toggles the DDrawer.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnEntityLost","parent":"DEntityProperties","type":"panelfunc","ispanel":true,"description":"Called when we were editing an entity and then it became invalid (probably removed)","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"EditVariable","parent":"DEntityProperties","type":"panelfunc","ispanel":true,"description":{"text":"Called internally by DEntityProperties:RebuildControls.","internal":""},"realm":"Client","args":{"arg":[{"name":"varname","type":"string"},{"name":"editdata","type":"table"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetEntity","parent":"DEntityProperties","type":"panelfunc","ispanel":true,"description":"Sets the entity to be edited by this panel. The entity must support the Editable Entities system or nothing will happen.","realm":"Client","args":{"arg":{"text":"The entity to edit","name":"ent","type":"Entity"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"RebuildControls","parent":"DEntityProperties","type":"panelfunc","ispanel":true,"description":{"text":"Called internally by DEntityProperties:SetEntity to rebuild the controls.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetExpanded","parent":"DExpandButton","type":"panelfunc","ispanel":true,"description":"Sets whether this DExpandButton should be expanded or not. Only changes appearance.","realm":"Client","args":{"arg":{"text":"True to expand ( visually will show a \"-\" )","name":"expanded","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetExpanded","parent":"DExpandButton","type":"panelfunc","ispanel":true,"description":"Returns whether this DExpandButton is expanded or not.","realm":"Client","rets":{"ret":{"text":"True if expanded, false otherwise","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetBaseFolder","parent":"DFileBrowser","type":"panelfunc","ispanel":true,"description":"Returns the root directory/folder of the file tree.","realm":"Client","rets":{"ret":{"text":"The path to the root folder.","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetCurrentFolder","parent":"DFileBrowser","type":"panelfunc","ispanel":true,"description":"Returns the current directory/folder being displayed.","realm":"Client","rets":{"ret":{"text":"The directory the file list is currently displaying.","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Clear","parent":"DFileBrowser","type":"panelfunc","ispanel":true,"description":"Clears the file tree and list, and resets all values.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetFileTypes","parent":"DFileBrowser","type":"panelfunc","ispanel":true,"description":"Returns the current file type filter on the file list.","realm":"Client","rets":{"ret":{"text":"The current filter applied to the file list.","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetFolderNode","parent":"DFileBrowser","type":"panelfunc","ispanel":true,"description":"Returns the DTree Node that the file tree stems from.\n\nThis is a child of the root node of the DTree.","realm":"Client","rets":{"ret":{"text":"The DTree_Node used for the tree.","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetName","parent":"DFileBrowser","type":"panelfunc","ispanel":true,"description":"Returns the name being used for the file tree.","realm":"Client","rets":{"ret":{"text":"The name used for the root of the file tree.","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetModels","parent":"DFileBrowser","type":"panelfunc","ispanel":true,"description":"Returns whether or not the model viewer mode is enabled. In this mode, files are displayed as SpawnIcons instead of a list.","realm":"Client","rets":{"ret":{"text":"Whether or not files will be displayed using SpawnIcons.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetOpen","parent":"DFileBrowser","type":"panelfunc","ispanel":true,"description":"Returns whether or not the file tree is open.","realm":"Client","rets":{"ret":{"text":"Whether or not the file tree is open.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetPath","parent":"DFileBrowser","type":"panelfunc","ispanel":true,"description":"Returns the access path of the file tree. This is `GAME` unless changed with DFileBrowser:SetPath.\n\nSee file.Read for how paths work.","realm":"Client","rets":{"ret":{"text":"The current access path i.e. \"GAME\", \"LUA\", \"DATA\" etc.","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetSearch","parent":"DFileBrowser","type":"panelfunc","ispanel":true,"description":"Returns the current search filter on the file tree.","realm":"Client","rets":{"ret":{"text":"The filter in use on the file tree.","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnDoubleClick","parent":"DFileBrowser","type":"panelfunc","ispanel":true,"description":{"text":"Called when a file is double-clicked.","note":"Double-clicking a file or icon will trigger **both** this and DFileBrowser:OnSelect."},"realm":"Client","args":{"arg":[{"text":"The path to the file that was double-clicked.","name":"filePath","type":"string"},{"text":"The panel that was double-clicked to select this file.This will either be a DListView_Line or SpawnIcon depending on whether the model viewer mode is enabled. See DFileBrowser:SetModels.","name":"selectedPanel","type":"Panel","br":["",""]}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnRightClick","parent":"DFileBrowser","type":"panelfunc","ispanel":true,"description":{"text":"Called when a file is right-clicked.","note":"When not in model viewer mode, DFileBrowser:OnSelect will also be called if the file is not already selected."},"realm":"Client","args":{"arg":[{"text":"The path to the file that was right-clicked.","name":"filePath","type":"string"},{"text":"The panel that was right-clicked to select this file.\n\nThis will either be a DListView_Line or SpawnIcon depending on whether the model viewer mode is enabled. See DFileBrowser:SetModels.","name":"selectedPanel","type":"Panel","br":""}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetBaseFolder","parent":"DFileBrowser","type":"panelfunc","ispanel":true,"description":"Sets the root directory/folder of the file tree.\n\nThis needs to be set for the file tree to be displayed.","realm":"Client","args":{"arg":{"text":"The path to the folder to use as the root.","name":"baseDir","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnSelect","parent":"DFileBrowser","type":"panelfunc","ispanel":true,"description":"Called when a file is selected.","realm":"Client","args":{"arg":[{"text":"The path to the file that was selected.","name":"filePath","type":"string"},{"text":"The panel that was clicked to select this file.This will either be a DListView_Line or SpawnIcon depending on whether the model viewer mode is enabled. See DFileBrowser:SetModels.","name":"selectedPanel","type":"Panel","br":["",""]}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetCurrentFolder","parent":"DFileBrowser","type":"panelfunc","ispanel":true,"description":"Sets the directory/folder from which to display the file list.","realm":"Client","args":{"arg":{"text":"The directory to display files from.","name":"currentDir","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetFileTypes","parent":"DFileBrowser","type":"panelfunc","ispanel":true,"description":"Sets the file type filter for the file list.\n\nThis accepts the same file extension wildcards as file.Find.","realm":"Client","args":{"arg":{"text":"A list of file types to display, separated by spaces e.g.\n```\n\"*.lua *.txt *.mdl\"\n```","name":"fileTypes","type":"string","default":"*.*"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetModels","parent":"DFileBrowser","type":"panelfunc","ispanel":true,"description":{"text":"Enables or disables the model viewer mode. In this mode, files are displayed as SpawnIcons instead of a list.","note":"This should only be used for `.mdl` files; the spawn icons will display error models for others. See DFileBrowser:SetFileTypes"},"realm":"Client","args":{"arg":{"text":"Whether or not to display files using SpawnIcons.","name":"showModels","type":"boolean","default":"false"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetName","parent":"DFileBrowser","type":"panelfunc","ispanel":true,"description":"Sets the name to use for the file tree.","realm":"Client","args":{"arg":{"text":"The name for the root of the file tree. Passing no value causes this to be the base folder name. See DFileBrowser:SetBaseFolder.","name":"treeName","type":"string","default":"`baseFolder`"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetOpen","parent":"DFileBrowser","type":"panelfunc","ispanel":true,"description":"Opens or closes the file tree.","realm":"Client","args":{"arg":[{"text":"`true` to open the tree, `false` to close it.","name":"open","type":"boolean","default":"false"},{"text":"If `true`, the DTree's open/close animation is used.","name":"useAnim","type":"boolean","default":"false"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetSearch","parent":"DFileBrowser","type":"panelfunc","ispanel":true,"description":"Sets the search filter for the file tree.\n\nThis accepts the same wildcards as file.Find.","realm":"Client","args":{"arg":{"text":"The filter to use on the file tree.","name":"filter","type":"string","default":"*"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetPath","parent":"DFileBrowser","type":"panelfunc","ispanel":true,"description":"Sets the access path for the file tree. This is set to `GAME` by default.\n\nSee file.Read for how paths work.","realm":"Client","args":{"arg":{"text":"The access path i.e. \"GAME\", \"LUA\", \"DATA\" etc.","name":"path","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Setup","parent":"DFileBrowser","type":"panelfunc","ispanel":true,"description":{"text":"Called to set up the DTree and file viewer when a base path has been set.\n\nCalls DFileBrowser:SetupTree and DFileBrowser:SetupFiles.","internal":""},"realm":"Client","rets":{"ret":{"text":"Whether or not the variables needed to set up have been defined.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetupTree","parent":"DFileBrowser","type":"panelfunc","ispanel":true,"description":{"text":"Called to set up the DTree by DFileBrowser:Setup.","internal":""},"realm":"Client","rets":{"ret":{"text":"Whether or not the tree was set up successfully.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ShowFolder","parent":"DFileBrowser","type":"panelfunc","ispanel":true,"description":{"text":"Builds the file or icon list for the current directory.\n\nYou should use DFileBrowser:SetCurrentFolder to change the directory.","internal":""},"realm":"Client","args":{"arg":{"text":"The directory to populate the list from.","name":"currentDir","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SortFiles","parent":"DFileBrowser","type":"panelfunc","ispanel":true,"description":{"text":"Sorts the file list.","note":"This is only functional when not using the model viewer. See DFileBrowser:SetModels"},"realm":"Client","args":{"arg":{"text":"The sort order. `true` for descending (z-a), `false` for ascending (a-z).","name":"descending","type":"boolean","default":"false"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetupFiles","parent":"DFileBrowser","type":"panelfunc","ispanel":true,"description":{"text":"Called to set up the DListView or DIconBrowser by DFileBrowser:Setup.\n\nThe icon browser is used when in models mode. See DFileBrowser:SetModels.","internal":""},"realm":"Client","rets":{"ret":{"text":"Whether or not the files pane was set up successfully.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddItem","parent":"DForm","type":"panelfunc","ispanel":true,"description":"Adds one or two items to the DForm.\nIf this method is called with only one argument, it is added to the bottom of the form. If two arguments are passed, they are placed side-by-side at the bottom of the form.\n\nInternally, this function is used by the various DForm functions to, for example, add labels to the left of buttons.","realm":"Client","args":{"arg":[{"text":"Left-hand element to add to the DForm.","name":"left","type":"Panel"},{"text":"Right-hand element to add to the DForm.","name":"right","type":"Panel","default":"nil"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Button","parent":"DForm","type":"panelfunc","ispanel":true,"description":"Adds a DButton onto the DForm","realm":"Client","args":{"arg":[{"text":"The text on the button","name":"text","type":"string"},{"text":"The concommand to run when the button is clicked","name":"concommand","type":"string"},{"text":"The arguments to pass on to the concommand when the button is clicked","name":"args","type":"vararg"}]},"rets":{"ret":{"text":"The created DButton","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ControlHelp","parent":"DForm","type":"panelfunc","ispanel":true,"description":"Adds a DLabel onto the DForm. Unlike DForm:Help, this is indented and is colored blue, depending on the derma skin.","realm":"Client","args":{"arg":{"text":"The help message to be displayed.","name":"help","type":"string"}},"rets":{"ret":{"text":"The created DLabel","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Help","parent":"DForm","type":"panelfunc","ispanel":true,"description":"Adds a DLabel onto the DForm as a helper","realm":"Client","args":{"arg":{"text":"The help message to be displayed","name":"help","type":"string"}},"rets":{"ret":{"text":"The created DLabel","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ComboBox","parent":"DForm","type":"panelfunc","ispanel":true,"description":"Adds a DComboBox onto the DForm","realm":"Client","args":{"arg":[{"text":"Text to the left of the combo box","name":"title","type":"string"},{"text":"Console variable to change when the user selects something from the dropdown.","name":"convar","type":"string"}]},"rets":{"ret":[{"text":"The created DComboBox","name":"","type":"Panel"},{"text":"The created DLabel","name":"","type":"Panel"}]}},"example":{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetSize( ScrW() / 2, ScrH() / 2 )\nframe:MakePopup()\n\nlocal form = frame:Add(\"DForm\")\nform:Dock( FILL )\nform:DockMargin( 5, 5, 5, 5 )\n\nlocal combobox, label = form:ComboBox( \"test\", \"sv_accelerate\" )\ncombobox:AddChoice( \"10\" ) -- 10 will be used as convar value\ncombobox:AddChoice( \"1000\", 100 ) -- 100 will be used as convar value"},"realms":["Client"],"type":"Function"},
{"function":{"name":"CheckBox","parent":"DForm","type":"panelfunc","ispanel":true,"description":{"text":"Adds a DCheckBoxLabel onto the DForm.","note":"This will run DCheckBoxLabel:OnChange when being added. This is caused by Panel:SetConVar being used when this function is used. To avoid this, use DForm:AddItem with a DCheckBoxLabel."},"realm":"Client","args":{"arg":[{"text":"The label to be set next to the check box","name":"label","type":"string"},{"text":"The console variable to change when this is changed","name":"convar","type":"string"}]},"rets":{"ret":{"text":"The created DCheckBoxLabel","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"NumSlider","parent":"DForm","type":"panelfunc","ispanel":true,"description":"Adds a DNumSlider onto the DForm","realm":"Client","args":{"arg":[{"text":"The label of the DNumSlider","name":"label","type":"string"},{"text":"The console variable to change when the slider is changed","name":"convar","type":"string"},{"text":"The minimum value of the slider","name":"min","type":"number"},{"text":"The maximum value of the slider","name":"max","type":"number"},{"text":"The number of decimals to allow on the slider. (Optional)","name":"decimals","type":"number","default":"nil"}]},"rets":{"ret":{"text":"The created DNumSlider","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"NumberWang","parent":"DForm","type":"panelfunc","ispanel":true,"description":"Adds a DNumberWang onto the DForm","realm":"Client","args":{"arg":[{"text":"The label to be placed next to the DNumberWang","name":"label","type":"string"},{"text":"The console variable to change when the slider is changed","name":"convar","type":"string"},{"text":"The minimum value of the slider","name":"min","type":"number"},{"text":"The maximum value of the slider","name":"max","type":"number"},{"text":"The number of decimals to allow in the slider (Optional)","name":"decimals","type":"number","default":"nil"}]},"rets":{"ret":[{"text":"The created DNumberWang","name":"","type":"Panel"},{"text":"The created DLabel","name":"","type":"Panel"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"PanelSelect","parent":"DForm","type":"panelfunc","ispanel":true,"description":{"text":"Creates a DPanelSelect and docks it to the top of the DForm.","deprecated":"This is derived from the deprecated DPanelSelect."},"realm":"Client","rets":{"ret":{"text":"The created DPanelSelect.","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ListBox","parent":"DForm","type":"panelfunc","ispanel":true,"description":{"text":"Adds a DListBox onto the DForm","deprecated":"Use DListView with DForm:AddItem instead."},"realm":"Client","args":{"arg":{"text":"The label to set on the DListBox","name":"label","type":"string"}},"rets":{"ret":[{"text":"The created DListBox","name":"","type":"Panel"},{"text":"The created DLabel","name":"","type":"Panel"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetName","parent":"DForm","type":"panelfunc","ispanel":true,"description":"Sets the title (header) name of the DForm. This is `Label` until set.","realm":"Client","args":{"arg":{"text":"The new header name.","name":"name","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Rebuild","parent":"DForm","type":"panelfunc","ispanel":true,"description":{"text":"Does nothing.","deprecated":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"TextEntry","parent":"DForm","type":"panelfunc","ispanel":true,"description":"Adds a DTextEntry to a DForm","realm":"Client","args":{"arg":[{"text":"The label to be next to the text entry","name":"label","type":"string"},{"text":"The console variable to be changed when the text entry is changed","name":"convar","type":"string"}]},"rets":{"ret":[{"text":"The created DTextEntry","name":"","type":"Panel"},{"text":"The created DLabel","name":"","type":"Panel"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Center","parent":"DFrame","type":"panelfunc","ispanel":true,"description":"Centers the frame relative to the whole screen and invalidates its layout. This overrides Panel:Center.","realm":"Client","file":{"text":"lua/vgui/dframe.lua","line":"104-L110"}},"note":"You must use Panel:SetSize before using this function.","realms":["Client"],"type":"Function"},
{"function":{"name":"Close","parent":"DFrame","type":"panelfunc","ispanel":true,"description":"Hides or removes the DFrame, and calls DFrame:OnClose.\n\nTo set whether the frame is hidden or removed, use DFrame:SetDeleteOnClose.","realm":"Client","file":{"text":"lua/vgui/dframe.lua","line":"89-L99"}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetBackgroundBlur","parent":"DFrame","type":"panelfunc","ispanel":true,"description":"Gets whether the background behind the frame is being blurred.","realm":"Client","rets":{"ret":{"text":"Whether or not background blur is enabled.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetDeleteOnClose","parent":"DFrame","type":"panelfunc","ispanel":true,"description":"Determines whether or not the DFrame will be removed when it is closed. This is set with DFrame:SetDeleteOnClose.","realm":"Client","rets":{"ret":{"text":"Whether or not the frame will be removed on close.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetIsMenu","parent":"DFrame","type":"panelfunc","ispanel":true,"description":"Gets whether or not the frame is part of a derma menu. This is set with DFrame:SetIsMenu.","realm":"Client","rets":{"ret":{"text":"Whether or not this frame is a menu component.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetIsMenu","parent":"DFrame","type":"panelfunc","ispanel":true,"description":"Gets whether or not the frame is part of a derma menu. This is set with DFrame:SetIsMenu.","realm":"Client","rets":{"ret":{"text":"Whether or not this frame is a menu component.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetMinHeight","parent":"DFrame","type":"panelfunc","ispanel":true,"description":"Gets the minimum height the DFrame can be resized to by the user.\n\nYou must call DFrame:SetSizable before the user can resize the frame.","realm":"Client","rets":{"ret":{"text":"The minimum height the user can resize the frame to.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetMinWidth","parent":"DFrame","type":"panelfunc","ispanel":true,"description":"Gets the minimum width the DFrame can be resized to by the user.\n\nYou must call DFrame:SetSizable before the user can resize the frame.","realm":"Client","rets":{"ret":{"text":"The minimum width the user can resize the frame to.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetPaintShadow","parent":"DFrame","type":"panelfunc","ispanel":true,"description":"Gets whether or not the shadow effect bordering the DFrame is being drawn.","realm":"Client","rets":{"ret":{"text":"Whether or not the shadow is being drawn.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetScreenLock","parent":"DFrame","type":"panelfunc","ispanel":true,"description":"Gets whether or not the DFrame is restricted to the boundaries of the screen resolution.","realm":"Client","rets":{"ret":{"text":"Whether or not the frame is restricted.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetSizable","parent":"DFrame","type":"panelfunc","ispanel":true,"description":"Gets whether or not the DFrame can be resized by the user.\n\nThis is achieved by clicking and dragging in the bottom right corner of the frame.","realm":"Client","rets":{"ret":{"text":"Whether the frame can be resized or not.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetTitle","parent":"DFrame","type":"panelfunc","ispanel":true,"description":"Returns the title of the frame.","realm":"Client","file":{"text":"lua/vgui/dframe.lua","line":"77-L81"},"rets":{"ret":{"text":"Title of the frame.","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsActive","parent":"DFrame","type":"panelfunc","ispanel":true,"description":"Determines if the frame or one of its children has the screen focus.","realm":"Client","file":{"text":"lua/vgui/dframe.lua","line":"112-L119"},"rets":{"ret":{"text":"Whether or not the frame has focus.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetBackgroundBlur","parent":"DFrame","type":"panelfunc","ispanel":true,"description":"Blurs background behind the frame.","realm":"Client","args":{"arg":{"text":"Whether or not to create background blur or not.","name":"blur","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnClose","parent":"DFrame","type":"panelfunc","ispanel":true,"description":"Called when the DFrame is closed with DFrame:Close. This applies when the `close` button in the DFrame's control box is clicked.\n\nThis function is does nothing and is safe to override.\n\nThis is **not** called when the DFrame is removed with Panel:Remove.","realm":"Client","file":{"text":"lua/vgui/dframe.lua","line":"101-L102"}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDeleteOnClose","parent":"DFrame","type":"panelfunc","ispanel":true,"description":"Determines whether or not the DFrame is removed when it is closed with DFrame:Close.","realm":"Client","args":{"arg":{"text":"Whether or not to delete the frame on close. This is `true` by default.","name":"shouldDelete","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDraggable","parent":"DFrame","type":"panelfunc","ispanel":true,"description":"Sets whether the frame should be draggable by the user. The DFrame can only be dragged from its title bar.","realm":"Client","args":{"arg":{"text":"Whether to be draggable or not.","name":"draggable","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetIsMenu","parent":"DFrame","type":"panelfunc","ispanel":true,"description":"Sets whether the frame is part of a derma menu or not.\n\nIf this is set to `true`, Global.CloseDermaMenus will not be called when the frame is clicked, and thus any open menus will remain open.","realm":"Client","args":{"arg":{"text":"Whether or not this frame is a menu component.","name":"isMenu","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetMinHeight","parent":"DFrame","type":"panelfunc","ispanel":true,"description":"Sets the minimum height the DFrame can be resized to by the user.\n\nThis only applies to users attempting to resize the frame; Panel:SetTall and similar methods will not be affected. You must call DFrame:SetSizable before the user can resize the frame.","realm":"Client","args":{"arg":{"text":"The minimum height the user can resize the frame to.","name":"minH","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetIcon","parent":"DFrame","type":"panelfunc","ispanel":true,"description":"Adds or removes an icon on the left of the DFrame's title.","realm":"Client","file":{"text":"lua/vgui/dframe.lua","line":"121-L135"},"args":{"arg":{"text":"Set to nil to remove the icon.\n\nOtherwise, set to file path to create the icon.","name":"path","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetScreenLock","parent":"DFrame","type":"panelfunc","ispanel":true,"description":"Sets whether the DFrame is restricted to the boundaries of the screen resolution.","realm":"Client","args":{"arg":{"text":"If `true`, the frame cannot be dragged outside of the screen bounds","name":"lock","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetMinWidth","parent":"DFrame","type":"panelfunc","ispanel":true,"description":"Sets the minimum width the DFrame can be resized to by the user.\n\nThis only applies to users attempting to resize the frame; Panel:SetWide and similar methods will not be affected. You must call DFrame:SetSizable before the user can resize the frame.","realm":"Client","args":{"arg":{"text":"The minimum width the user can resize the frame to.","name":"minW","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetSizable","parent":"DFrame","type":"panelfunc","ispanel":true,"description":"Sets whether or not the DFrame can be resized by the user.\n\nThis is achieved by clicking and dragging in the bottom right corner of the frame.\n\nYou can set the minimum size using DFrame:SetMinWidth and DFrame:SetMinHeight.","realm":"Client","args":{"arg":{"text":"Whether the frame should be resizeable or not.","name":"sizeable","type":"boolean"}}},"example":{"description":"A snippet of code that makes a frame resizable and sets the minimum size to its current size.","code":"frame:SetSizable( true )\nframe:SetMinWidth( frame:GetWide() )\nframe:SetMinHeight( frame:GetTall() )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetPaintShadow","parent":"DFrame","type":"panelfunc","ispanel":true,"description":"Sets whether or not the shadow effect bordering the DFrame should be drawn.","realm":"Client","args":{"arg":{"text":"Whether or not to draw the shadow. This is `true` by default.","name":"shouldPaint","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetTitle","parent":"DFrame","type":"panelfunc","ispanel":true,"description":"Sets the title of the frame.","realm":"Client","file":{"text":"lua/vgui/dframe.lua","line":"83-L87"},"args":{"arg":{"text":"New title of the frame.","name":"title","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddItem","parent":"DGrid","type":"panelfunc","ispanel":true,"description":"Adds a new item to the grid.","realm":"Client","args":{"arg":{"text":"The item to add. It will be forced visible and parented to the DGrid.","name":"item","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ShowCloseButton","parent":"DFrame","type":"panelfunc","ispanel":true,"description":"Determines whether the DFrame's control box (close, minimise and maximise buttons) is displayed.","realm":"Client","file":{"text":"lua/vgui/dframe.lua","line":"69-L75"},"args":{"arg":{"text":"`false` hides the control box; this is `true` by default.","name":"show","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetCols","parent":"DGrid","type":"panelfunc","ispanel":true,"description":"Returns the number of columns of this DGrid. Set by DGrid:SetCols.","realm":"Client","rets":{"ret":{"text":"The number of columns of this DGrid","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetColWide","parent":"DGrid","type":"panelfunc","ispanel":true,"description":"Returns the width of each column of the DGrid, which is set by DGrid:SetColWide.","realm":"Client","rets":{"ret":{"text":"The width of each column","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetRowHeight","parent":"DGrid","type":"panelfunc","ispanel":true,"description":"Returns the height of each row of the DGrid, which is set by DGrid:SetRowHeight.","realm":"Client","rets":{"ret":{"text":"The height of each row","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"RemoveItem","parent":"DGrid","type":"panelfunc","ispanel":true,"description":"Removes given panel from the DGrid:GetItems.","realm":"Client","args":{"arg":[{"text":"Item to remove from the grid","name":"item","type":"Panel"},{"text":"If set to true, the actual panel will not be removed via Panel:Remove.","name":"bDontDelete","type":"boolean","default":"false"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetItems","parent":"DGrid","type":"panelfunc","ispanel":true,"description":"Returns a list of panels in the grid.","realm":"Client","rets":{"ret":{"text":"A list of Panels.","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetCols","parent":"DGrid","type":"panelfunc","ispanel":true,"description":"Sets the number of columns this panel should have.\n\nThe DGrid will resize its width to match this value.","realm":"Client","args":{"arg":{"text":"The desired number of columns","name":"cols","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetColWide","parent":"DGrid","type":"panelfunc","ispanel":true,"description":"Sets the width of each column.\n\nThe cell panels (grid items) will not be resized or centered.","realm":"Client","args":{"arg":{"text":"The width of each column.","name":"colWidth","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetDividerWidth","parent":"DHorizontalDivider","type":"panelfunc","ispanel":true,"description":"Returns the width of the horizontal divider bar, set by DHorizontalDivider:SetDividerWidth.","realm":"Client","rets":{"ret":{"text":"The width of the horizontal divider bar","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetRowHeight","parent":"DGrid","type":"panelfunc","ispanel":true,"description":"Sets the height of each row. \n\nThe cell panels (grid items) will not be resized or centered.","realm":"Client","args":{"arg":{"text":"The height of each row","name":"rowHeight","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SortByMember","parent":"DGrid","type":"panelfunc","ispanel":true,"description":"Sorts the items in the grid. Does not visually update the grid, use Panel:InvalidateLayout for that.","realm":"Client","args":{"arg":[{"text":"A key in the panel from DGrid:GetItems. The key's value must be numeric.","name":"key","type":"string"},{"text":"True for descending order, false for ascending.","name":"desc","type":"boolean","default":"true"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetDragging","parent":"DHorizontalDivider","type":"panelfunc","ispanel":true,"description":"Returns whether or not the player is currently dragging the middle divider bar.","realm":"Client","rets":{"ret":{"text":"Whether or not the player is currently dragging the middle divider bar.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetHoldPos","parent":"DHorizontalDivider","type":"panelfunc","ispanel":true,"description":{"text":"Returns the local X coordinate of where the player started dragging the thing","internal":""},"realm":"Client","rets":{"ret":{"name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetLeftMin","parent":"DHorizontalDivider","type":"panelfunc","ispanel":true,"description":"Returns the minimum width of the left side, set by DHorizontalDivider:SetLeftMin.","realm":"Client","rets":{"ret":{"text":"The minimum width of the left side","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetLeft","parent":"DHorizontalDivider","type":"panelfunc","ispanel":true,"description":"Returns the left side content of the DHorizontalDivider","realm":"Client","rets":{"ret":{"text":"The content on the left side","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetLeftWidth","parent":"DHorizontalDivider","type":"panelfunc","ispanel":true,"description":"Returns the current width of the left side, set by DHorizontalDivider:SetLeftWidth or by the user.","realm":"Client","rets":{"ret":{"text":"The current width of the left side","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetMiddle","parent":"DHorizontalDivider","type":"panelfunc","ispanel":true,"description":"Returns the middle content, set by DHorizontalDivider:SetMiddle.","realm":"Client","rets":{"ret":{"text":"The middle content","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetRight","parent":"DHorizontalDivider","type":"panelfunc","ispanel":true,"description":"Returns the right side content","realm":"Client","rets":{"ret":{"text":"The right side content","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetRightMin","parent":"DHorizontalDivider","type":"panelfunc","ispanel":true,"description":"Returns the minimum width of the right side, set by DHorizontalDivider:SetRightMin.","realm":"Client","rets":{"ret":{"text":"The minimum width of the right side","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDividerWidth","parent":"DHorizontalDivider","type":"panelfunc","ispanel":true,"description":"Sets the width of the horizontal divider bar.","realm":"Client","args":{"arg":{"text":"The width of the horizontal divider bar.","name":"width","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetHoldPos","parent":"DHorizontalDivider","type":"panelfunc","ispanel":true,"description":{"text":"Sets the local X coordinate of where the player started dragging the thing","internal":""},"realm":"Client","args":{"arg":{"name":"x","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetLeft","parent":"DHorizontalDivider","type":"panelfunc","ispanel":true,"description":"Sets the left side content of the DHorizontalDivider.","realm":"Client","args":{"arg":{"text":"The panel to set as the left side","name":"pnl","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDragging","parent":"DHorizontalDivider","type":"panelfunc","ispanel":true,"description":{"text":"Sets whether the player is dragging the divider or not","internal":""},"realm":"Client","args":{"arg":{"name":"dragonot","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetLeftWidth","parent":"DHorizontalDivider","type":"panelfunc","ispanel":true,"description":"Sets the current/starting width of the left side.\n\nThe width of the right side is automatically calculated by subtracting this from the total width of the DHorizontalDivider.","realm":"Client","args":{"arg":{"text":"The current/starting width of the left side","name":"width","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetLeftMin","parent":"DHorizontalDivider","type":"panelfunc","ispanel":true,"description":"Sets the minimum width of the left side","realm":"Client","args":{"arg":{"text":"The minimum width of the left side","name":"minWidth","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetMiddle","parent":"DHorizontalDivider","type":"panelfunc","ispanel":true,"description":"Sets the middle content, over the draggable divider bar panel.","realm":"Client","args":{"arg":{"text":"The middle content","name":"middle","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetRight","parent":"DHorizontalDivider","type":"panelfunc","ispanel":true,"description":"Sets the right side content","realm":"Client","args":{"arg":{"text":"The right side content","name":"pnl","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetRightMin","parent":"DHorizontalDivider","type":"panelfunc","ispanel":true,"description":"Sets the minimum width of the right side","realm":"Client","args":{"arg":{"text":"The minimum width of the right side","name":"minWidth","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"StartGrab","parent":"DHorizontalDivider","type":"panelfunc","ispanel":true,"description":{"internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddPanel","parent":"DHorizontalScroller","type":"panelfunc","ispanel":true,"description":"Adds a panel to the DHorizontalScroller.","realm":"Client","args":{"arg":{"text":"The panel to add. It will be automatically parented.","name":"pnl","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetCanvas","parent":"DHorizontalScroller","type":"panelfunc","ispanel":true,"description":"Returns the internal canvas panel where the content of DHorizontalScroller are placed on.","realm":"Client","rets":{"ret":{"text":"The DDragBase panel.","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetShowDropTargets","parent":"DHorizontalScroller","type":"panelfunc","ispanel":true,"description":"No Description","realm":"Client","rets":{"ret":{"name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetOverlap","parent":"DHorizontalScroller","type":"panelfunc","ispanel":true,"description":"No Description","realm":"Client","rets":{"ret":{"name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"MakeDroppable","parent":"DHorizontalScroller","type":"panelfunc","ispanel":true,"description":"Same as DDragBase:MakeDroppable.\nTODO: Transclude or whatever to here?","realm":"Client","args":{"arg":{"name":"name","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnDragModified","parent":"DHorizontalScroller","type":"panelfunc","ispanel":true,"description":"Called when the panel is scrolled.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"ScrollToChild","parent":"DHorizontalScroller","type":"panelfunc","ispanel":true,"description":"Scrolls the DHorizontalScroller to given child panel.","realm":"Client","args":{"arg":{"text":"The target child panel. Must be a child of DHorizontalScroller:GetCanvas","name":"target","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetOverlap","parent":"DHorizontalScroller","type":"panelfunc","ispanel":true,"description":"Controls the spacing between elements of the horizontal scroller.","realm":"Client","args":{"arg":{"text":"Overlap in pixels. Positive numbers will make elements `overlap` each other, negative will add spacing.","name":"overlap","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetShowDropTargets","parent":"DHorizontalScroller","type":"panelfunc","ispanel":true,"description":"No Description","realm":"Client","args":{"arg":{"name":"newState","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetScroll","parent":"DHorizontalScroller","type":"panelfunc","ispanel":true,"description":"Sets the scroll amount, automatically clamping the value.","realm":"Client","args":{"arg":{"text":"The new scroll amount","name":"scroll","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetUseLiveDrag","parent":"DHorizontalScroller","type":"panelfunc","ispanel":true,"description":"Same as DDragBase:SetUseLiveDrag","realm":"Client","args":{"arg":{"name":"newState","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddFunction","parent":"DHTML","type":"panelfunc","ispanel":true,"description":{"text":"Defines a Javascript function that when called will call a Lua callback.","note":"Must be called after the HTML document has fully loaded."},"realm":"Client","args":{"arg":[{"text":"Library name of the JS function you are defining.","name":"library","type":"string"},{"text":"Name of the JS function you are defining.","name":"name","type":"string"},{"text":"Function called when the JS function is called. Arguments passed to the JS function will be passed here.","name":"callback","type":"function"}]}},"example":{"description":"Prints text from Javascript to the console in color.","code":"-- Create the frame\nlocal f = vgui.Create(\"DFrame\")\nf:SetSize(800, 600)\nf:Center()\n\n-- Create a green color variable\nlocal color_green = Color(0, 255, 0)\n\n-- Define the Javascript function in the DHTML element\nlocal DHTML = vgui.Create(\"DHTML\", f)\nDHTML:Dock(FILL)\nDHTML:OpenURL(\"https://wiki.facepunch.com/gmod/DHTML\")\nDHTML:AddFunction(\"console\", \"luaprint\", function(str)\n\tMsgC(color_green, str) -- Print the given string\nend)\n\n--This runs our function. Our function could also be called from Javascript on the DHTML's page.\nDHTML:RunJavascript(\"console.luaprint('Hello from Javascript!');\")"},"realms":["Client"],"type":"Function"},
{"function":{"name":"Call","parent":"DHTML","type":"panelfunc","ispanel":true,"description":{"text":"Runs/Executes a string as JavaScript code in a panel.","note":[{"text":"This function does **NOT** evaluate expression (i.e. allow you to pass variables from JavaScript (JS) to Lua context).Because a return value is nil/no value (a.k.a. void).If you wish to pass/return values from JS to Lua, you may want to use DHTML:AddFunction function to accomplish that job.","br":["",""]},"This function is an alias of DHTML:QueueJavascript ([source](https://github.com/Facepunch/garrysmod/blob/master/garrysmod/lua/vgui/dhtml.lua#L62))."]},"realm":"Client","args":{"arg":{"text":"Specify JavaScript code to be executed.","name":"js","type":"string"}}},"example":{"description":"Shows how to change [document.body.innerHTML](http://www.w3schools.com/jsref/prop_html_innerhtml.asp) property by calling this function on  panel.","code":"-- First we create a container, in this case it is a full-screen Derma Frame window.\nlocal dframe = vgui.Create( 'DFrame' )\ndframe:SetSize( ScrW(), ScrH() )\ndframe:SetTitle( \"Garry's Mod Wiki\" )\ndframe:Center()\ndframe:MakePopup() -- Enable keyboard and mouse interaction for DFrame panel.\n\n-- Create a new DHTML panel as a child of dframe, and dock-fill it.\nlocal dhtml = vgui.Create( 'DHTML', dframe )\ndhtml:Dock( FILL )\n-- Navigate to Garry's Mod wikipedia website.\ndhtml:OpenURL( 'https://wiki.garrysmod.com/index.php' )\n-- Run JavaScript code.\ndhtml:Call( [[document.body.innerHTML = 'HTML changed from Lua using JavaScript!';]] )\n\n-- This does not throw an error/exception, but instead returns nil/no value.\n-- That means you can't pass/return values from JavaScript back to Lua context using this function.\nlocal number = dhtml:Call( '22;' )\nprint( number )","output":"Inner HTML of document body in DHTML panel is now set to \"HTML changed from Lua using JavaScript!\"."},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetAllowLua","parent":"DHTML","type":"panelfunc","ispanel":true,"description":"Returns if the loaded page can run Lua code, set by DHTML:SetAllowLua","realm":"Client","rets":{"ret":{"text":"Whether or not Lua code can be called from the loaded page.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ConsoleMessage","parent":"DHTML","type":"panelfunc","ispanel":true,"description":"Called when the page inside the DHTML window runs `console.log`. This can also be called within the Lua environment to emulate `console.log`. If the contained message begins with `RUNLUA:` the following text will be executed as code within the Lua environment (this is how Lua is called from DHTML windows).","realm":"Client","args":{"arg":{"text":"The message to be logged (or Lua code to be executed; see above).","name":"msg","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"QueueJavascript","parent":"DHTML","type":"panelfunc","ispanel":true,"description":{"text":"Runs/Executes a string as JavaScript code in a panel.","note":[{"text":"This function does **NOT** evaluate expression (i.e. allow you to pass variables from JavaScript (JS) to Lua context).Because a return value is nil/no value (a.k.a. void).If you wish to pass/return values from JS to Lua, you may want to use DHTML:AddFunction function to accomplish that job.","br":["",""]},{"text":"If Panel:IsVisible is `false`, PANEL:Think will **NOT** run, meaning the Javascript Queue will not be processed.Consider overriding PANEL:Paint to stop the panel from drawing instead.","br":["",""]}]},"realm":"Client","args":{"arg":{"text":"Specify JavaScript code to be executed.","name":"js","type":"string"}}},"example":{"description":"Shows how to change [document.body.innerHTML](http://www.w3schools.com/jsref/prop_html_innerhtml.asp) property by calling this function on  panel.","code":"-- First we create a container, in this case it is a full-screen Derma Frame window.\nlocal dframe = vgui.Create( 'DFrame' )\ndframe:SetSize( ScrW(), ScrH() )\ndframe:SetTitle( \"Garry's Mod Wiki\" )\ndframe:Center()\ndframe:MakePopup() -- Enable keyboard and mouse interaction for DFrame panel.\n\n-- Create a new DHTML panel as a child of dframe, and dock-fill it.\nlocal dhtml = vgui.Create( 'DHTML', dframe )\ndhtml:Dock( FILL )\n-- Navigate to Garry's Mod wikipedia website.\ndhtml:OpenURL( 'https://wiki.garrysmod.com/index.php' )\n-- Run JavaScript code.\ndhtml:QueueJavascript( \"document.body.innerHTML = 'HTML changed from Lua using JavaScript!';\" )\n\n-- This does not throw an error/exception, but instead returns nil/no value.\n-- That means you can't pass/return values from JavaScript back to Lua context using this function.\nlocal number = dhtml:QueueJavascript( '22;' )\nprint( number )","output":"Inner HTML of document body in DHTML panel is now set to \"HTML changed from Lua using JavaScript!\"."},"realms":["Client"],"type":"Function"},
{"function":{"name":"StopLoading","parent":"DHTML","type":"panelfunc","ispanel":true,"description":"Stops the loading of the HTML panel's current page.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetAllowLua","parent":"DHTML","type":"panelfunc","ispanel":true,"description":"Determines whether the loaded page can run Lua code or not. See DHTML for how to run Lua from a DHTML window.","realm":"Client","args":{"arg":{"text":"Whether or not to allow Lua.","name":"allow","type":"boolean","default":"false"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetScrollbars","parent":"DHTML","type":"panelfunc","ispanel":true,"description":{"text":"Sets if the loaded window should display scrollbars when the webpage is larger than the viewing window. This is similar to the CSS `overflow` rule.","deprecated":"Broken. Use the CSS `overflow` rule instead."},"realm":"Client","args":{"arg":{"text":"True if scrollbars should be visible.","name":"show","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"FinishedLoading","parent":"DHTMLControls","type":"panelfunc","ispanel":true,"description":{"internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetHTML","parent":"DHTMLControls","type":"panelfunc","ispanel":true,"description":"Sets the DHTML element to control with these DHTMLControls.","realm":"Client","args":{"arg":{"text":"The HTML panel","name":"dhtml","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"StartedLoading","parent":"DHTMLControls","type":"panelfunc","ispanel":true,"description":{"internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetButtonColor","parent":"DHTMLControls","type":"panelfunc","ispanel":true,"description":"Sets the color of the navigation buttons.","realm":"Client","args":{"arg":{"text":"A Color","name":"clr","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"UpdateHistory","parent":"DHTMLControls","type":"panelfunc","ispanel":true,"description":{"text":"Basically adds an URL to the history.","internal":""},"realm":"Client","args":{"arg":{"name":"url","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"UpdateNavButtonStatus","parent":"DHTMLControls","type":"panelfunc","ispanel":true,"description":{"internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"Fill","parent":"DIconBrowser","type":"panelfunc","ispanel":true,"description":{"text":"Automatically called to fill the browser with icons. Will not work if DIconBrowser:SetManual is set to true.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetManual","parent":"DIconBrowser","type":"panelfunc","ispanel":true,"description":"Returns whether or not the browser should fill itself with icons.","realm":"Client","rets":{"ret":{"name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"FilterByText","parent":"DIconBrowser","type":"panelfunc","ispanel":true,"description":"A simple unused search feature, hides all icons that do not contain given text in their file path.","realm":"Client","args":{"arg":{"text":"The text to search for","name":"text","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnChange","parent":"DIconBrowser","type":"panelfunc","ispanel":true,"description":"Called when the selected icon was changed. Use DIconBrowser:GetSelectedIcon to get the selected icon's filepath.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetSelectedIcon","parent":"DIconBrowser","type":"panelfunc","ispanel":true,"description":"Returns the currently selected icon's file path.","realm":"Client","rets":{"ret":{"text":"The currently selected icon's file path.","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnChangeInternal","parent":"DIconBrowser","type":"panelfunc","ispanel":true,"description":{"text":"Use DIconBrowser:OnChange instead","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"ScrollToSelected","parent":"DIconBrowser","type":"panelfunc","ispanel":true,"description":"Scrolls the browser to the selected icon","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SelectIcon","parent":"DIconBrowser","type":"panelfunc","ispanel":true,"description":"Selects an icon from file path","realm":"Client","args":{"arg":{"text":"The file path of the icon to select. Do not include the \"materials/\" part.","name":"icon","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetManual","parent":"DIconBrowser","type":"panelfunc","ispanel":true,"description":"Sets whether or not the browser should automatically fill itself with icons.","realm":"Client","args":{"arg":{"name":"manual","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetSelectedIcon","parent":"DIconBrowser","type":"panelfunc","ispanel":true,"description":{"text":"Set the currently selected file path. Do not use. Use DIconBrowser:SelectIcon instead.","internal":""},"realm":"Client","args":{"arg":{"name":"str","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"CopyContents","parent":"DIconLayout","type":"panelfunc","ispanel":true,"description":"Copies the contents (Child elements) of another DIconLayout to itself.","realm":"Client","args":{"arg":{"text":"DIconLayout to copy from.","name":"from","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Copy","parent":"DIconLayout","type":"panelfunc","ispanel":true,"description":"Creates a replica of the DIconLayout it is called on.","realm":"Client","rets":{"ret":{"text":"The replica.","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetBorder","parent":"DIconLayout","type":"panelfunc","ispanel":true,"description":"Returns the size of the border.","realm":"Client","rets":{"ret":{"name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetLayoutDir","parent":"DIconLayout","type":"panelfunc","ispanel":true,"description":"Returns the direction that it will be layed out, using the DOCK enumerations.","realm":"Client","rets":{"ret":{"text":"Layout direction.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetSpaceX","parent":"DIconLayout","type":"panelfunc","ispanel":true,"description":"Returns the distance between two 'icons' on the X axis.","realm":"Client","rets":{"ret":{"text":"Distance between two 'icons' on the X axis.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetSpaceY","parent":"DIconLayout","type":"panelfunc","ispanel":true,"description":"Returns distance between two \"Icons\" on the Y axis.","realm":"Client","rets":{"ret":{"text":"distance between two \"Icons\" on the Y axis.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetStretchHeight","parent":"DIconLayout","type":"panelfunc","ispanel":true,"description":"Returns whether the icon layout will stretch its height to fit all the children.\n\nSee also DIconLayout:GetStretchWidth","realm":"Client","rets":{"ret":{"name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Layout","parent":"DIconLayout","type":"panelfunc","ispanel":true,"description":"Resets layout vars before calling Panel:InvalidateLayout. This is called when children are added or removed, and must be called when the spacing, border or layout direction is changed.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"LayoutIcons_LEFT","parent":"DIconLayout","type":"panelfunc","ispanel":true,"description":{"text":"Used internally to layout the child elements if the DIconLayout:SetLayoutDir is set to LEFT (See Enums/DOCK).","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetStretchWidth","parent":"DIconLayout","type":"panelfunc","ispanel":true,"description":"Returns whether the icon layout will stretch its width to fit all the children.\n\nSee also DIconLayout:GetStretchHeight","realm":"Client","rets":{"ret":{"name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnModified","parent":"DIconLayout","type":"panelfunc","ispanel":true,"description":"Called when the panel is modified.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"LayoutIcons_TOP","parent":"DIconLayout","type":"panelfunc","ispanel":true,"description":{"text":"Used internally to layout the child elements if the DIconLayout:SetLayoutDir is set to TOP (See Enums/DOCK).","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetBorder","parent":"DIconLayout","type":"panelfunc","ispanel":true,"description":"Sets the internal border (padding) within the DIconLayout. This will not change its size, only the positioning of children. You must call DIconLayout:Layout in order for the changes to take effect.","realm":"Client","args":{"arg":{"text":"The border (padding) inside the DIconLayout.","name":"width","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetLayoutDir","parent":"DIconLayout","type":"panelfunc","ispanel":true,"description":"Sets the direction that it will be layed out, using the Enums/DOCK.\n\nCurrently only TOP and LEFT are supported.","realm":"Client","args":{"arg":{"text":"Enums/DOCK","name":"direction","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetSpaceY","parent":"DIconLayout","type":"panelfunc","ispanel":true,"description":"Sets the vertical (y) spacing between children within the DIconLayout. You must call DIconLayout:Layout in order for the changes to take effect.","realm":"Client","args":{"arg":{"text":"The vertical gap between rows in the DIconLayout.","name":"ySpacing","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetSpaceX","parent":"DIconLayout","type":"panelfunc","ispanel":true,"description":"Sets the horizontal (x) spacing between children within the DIconLayout. You must call DIconLayout:Layout in order for the changes to take effect.","realm":"Client","args":{"arg":{"text":"The width of the gap between child objects.","name":"xSpacing","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetStretchHeight","parent":"DIconLayout","type":"panelfunc","ispanel":true,"description":"If set to true, the icon layout will stretch its height to fit all the children.\n\nSee also DIconLayout:SetStretchWidth","realm":"Client","args":{"arg":{"name":"do_stretch","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetStretchWidth","parent":"DIconLayout","type":"panelfunc","ispanel":true,"description":"If set to true, the icon layout will stretch its width to fit all the children.\n\nSee also DIconLayout:SetStretchHeight","realm":"Client","args":{"arg":{"name":"stretchW","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"DoLoadMaterial","parent":"DImage","type":"panelfunc","ispanel":true,"description":{"text":"Actually loads the IMaterial to render it. Called from DImage:LoadMaterial.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetImage","parent":"DImage","type":"panelfunc","ispanel":true,"description":"Returns the image loaded in the image panel.","realm":"Client","rets":{"ret":{"text":"The path to the image that is loaded.","name":"","type":"string"}}},"example":{"description":"Creates a frame with a randomly chosen post process effect thumbnail and prints the image path to console.","code":"-- Frame\nMainFrame = vgui.Create(\"DFrame\")\nMainFrame:SetSize(200, 200)\nMainFrame:Center()\nMainFrame:SetTitle(\"Post process effect\")\n\n-- Load post process effect thumbnail\nlocal postprocess = vgui.Create(\"DImage\", MainFrame)\npostprocess:SetSize(128, 128)\npostprocess:Center()\n\nlocal materials = file.Find(\"materials/gui/postprocess/*.png\", \"GAME\")\n\npostprocess:SetImage(\"materials/gui/postprocess/\"..materials[math.random(1, #materials)])\n\nprint(postprocess:GetImage())","output":{"text":"```\nmaterials/gui/postprocess/colourmod.png\n```","image":{"src":"DImage_GetImage_example1.jpg"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetFailsafeMatName","parent":"DImage","type":"panelfunc","ispanel":true,"description":{"text":"Returns the texture path set by DImage:SetFailsafeMatName.","internal":""},"realm":"Client","rets":{"ret":{"name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"FixVertexLitMaterial","parent":"DImage","type":"panelfunc","ispanel":true,"description":{"text":"\"Fixes\" the current material of the DImage if it has VertexLit shader by creating a new one with the same name and a prefix of \"_DImage\" and automatically calling DImage:SetMaterial with the new material.\n\nThis fixes the problem where using materials using shaders that expect lighting information causing \"weird\" flickering when displayed in 2D/Unlit environment.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetImageColor","parent":"DImage","type":"panelfunc","ispanel":true,"description":"Returns the color override of the image panel.","realm":"Client","rets":{"ret":{"text":"The color override of the image. Uses the Color.","name":"col","type":"table"}}},"example":{"description":"Creates an image panel and prints the default color override to console.","code":"-- Generic image panel\nlocal img = vgui.Create(\"DImage\")\nimg:SetSize(128, 128)\nimg:Center()\nimg:SetImage(\"cantop\")\n\nprint(img:GetImageColor())","output":"```\n255 255 255 255\n```"},"realms":["Client"],"type":"Function"},
{"function":{"name":"LoadMaterial","parent":"DImage","type":"panelfunc","ispanel":true,"description":{"text":"Initializes the loading process of the material to render if it is not loaded yet.\n\nYou do not need to call this function. It is done for you automatically.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetMaterial","parent":"DImage","type":"panelfunc","ispanel":true,"description":"Returns the current Global.Material of the DImage.","realm":"Client","rets":{"ret":{"name":"","type":"IMaterial"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetMatName","parent":"DImage","type":"panelfunc","ispanel":true,"description":{"text":"Returns the texture path set by DImage:SetMatName.","internal":""},"realm":"Client","rets":{"ret":{"name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetMatName","parent":"DImage","type":"panelfunc","ispanel":true,"description":{"text":"Returns the texture path set by DImage:SetMatName.","internal":""},"realm":"Client","rets":{"ret":{"name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetImageColor","parent":"DImage","type":"panelfunc","ispanel":true,"description":"Sets the image's color override.","realm":"Client","args":{"arg":{"text":"The color override of the image. Uses the Color.","name":"col","type":"table"}}},"example":{"description":"Creates a frame with a Portal box inside and sets the color to green.","code":"-- Frame\nMainFrame = vgui.Create(\"DFrame\")\nMainFrame:SetSize(200, 180)\nMainFrame:Center()\nMainFrame:SetTitle(\"Color example\")\n\n-- Image of a Portal box\nlocal metalbox_img = vgui.Create(\"DImage\", MainFrame)\nmetalbox_img:SetPos(35, 35)\nmetalbox_img:SetSize(128, 128)\nmetalbox_img:SetImage(\"spawnicons/models/props/metal_box_128.png\")\n\nmetalbox_img:SetImageColor(Color(128, 255, 0, 255))","output":{"image":{"src":"DImage_SetImageColor_example1.png"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetFailsafeMatName","parent":"DImage","type":"panelfunc","ispanel":true,"description":{"text":"Sets the backup material to be loaded when the image is first rendered. Used by DImage:SetOnViewMaterial.","internal":""},"realm":"Client","args":{"arg":{"name":"backupMat","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetImage","parent":"DImage","type":"panelfunc","ispanel":true,"description":"Sets the image to load into the frame. If the first image can't be loaded and `strBackup` is set, that image will be loaded instead.\n\nThis eventually calls DImage:SetMaterial.","file":{"text":"lua/vgui/dimage.lua","line":"91"},"realm":"Client","args":{"arg":[{"text":"The path of the image to load. When no file extension is supplied the VMT file extension is used.","name":"strImage","type":"string"},{"text":"The path of the backup image.","name":"strBackup","type":"string","default":"nil"}]}},"example":{"description":"Creates a frame with a map of de_inferno inside, with the default avatar image loaded as a backup.","code":"-- Frame\nMainFrame = vgui.Create( \"DFrame\" )\nMainFrame:SetSize( 300, 300 )\nMainFrame:Center()\nMainFrame:SetTitle( \"Map of de_inferno\" )\n\n-- Map of de_inferno (requires CS:S)\nlocal css_map = vgui.Create( \"DImage\", MainFrame )\ncss_map:SetPos( 25, 40 )\ncss_map:SetSize( 250, 250 )\n\n-- Set image to de_inferno map\n-- If it can't be loaded, load the [?] avatar image instead\ncss_map:SetImage(\"overviews/de_inferno\", \"vgui/avatar_default\")","output":{"text":"If CS:S is mounted then the left image is shown, otherwise the right image is shown.","image":[{"src":"DImage_SetImage_example1.jpg"},{"src":"DImage_SetImage_example2.jpg"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetKeepAspect","parent":"DImage","type":"panelfunc","ispanel":true,"description":"Sets whether the DImage should keep the aspect ratio of its image when being resized.\n\nNote that this will not try to fit the image inside the button, but instead it will fill the button with the image.","realm":"Client","args":{"arg":{"text":"true to keep the aspect ratio, false not to","name":"keep","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"PaintAt","parent":"DImage","type":"panelfunc","ispanel":true,"description":"Paints a ghost copy of the DImage panel at the given position and dimensions. This function overrides Panel:PaintAt.","realm":"Client","args":{"arg":[{"text":"The x coordinate to draw the panel from.","name":"posX","type":"number"},{"text":"The y coordinate to draw the panel from.","name":"posY","type":"number"},{"text":"The width of the panel image to be drawn.","name":"width","type":"number"},{"text":"The height of the panel image to be drawn.","name":"height","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetMaterial","parent":"DImage","type":"panelfunc","ispanel":true,"description":"Sets a Global.Material directly as an image.","realm":"Client","args":{"arg":{"text":"The material to set","name":"mat","type":"IMaterial"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetMatName","parent":"DImage","type":"panelfunc","ispanel":true,"description":{"text":"Sets the material to be loaded when the image is first rendered. Used by DImage:SetOnViewMaterial.","internal":""},"realm":"Client","args":{"arg":{"name":"mat","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetOnViewMaterial","parent":"DImage","type":"panelfunc","ispanel":true,"description":"Similar to DImage:SetImage, but will only do the expensive part of actually loading the textures/material if the material is about to be rendered/viewed.\n\nUseful for cases like DIconBrowser, where there are hundreds of small icons in 1 panel in a list that do not need all to be loaded at the same time.","realm":"Client","args":{"arg":[{"name":"mat","type":"string"},{"name":"backupMat","type":"string"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetImage","parent":"DImageButton","type":"panelfunc","ispanel":true,"description":"Returns the \"image\" of the DImageButton. Equivalent of DImage:GetImage.","realm":"Client","rets":{"ret":{"text":"The path to the image that is loaded.","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Unloaded","parent":"DImage","type":"panelfunc","ispanel":true,"description":"Returns true if the image is **not** yet loaded.","realm":"Client","rets":{"ret":{"name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetStretchToFit","parent":"DImageButton","type":"panelfunc","ispanel":true,"description":"Returns whether the image inside the button should be stretched to fit it or not\n\nSee DImageButton:SetStretchToFit","realm":"Client","rets":{"ret":{"name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetIcon","parent":"DImageButton","type":"panelfunc","ispanel":true,"description":{"text":"Alias of DImageButton:SetImage.","deprecated":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetImageVisible","parent":"DImageButton","type":"panelfunc","ispanel":true,"description":"Hides or shows the image of the image button. Internally this calls Panel:SetVisible on the internal DImage.","realm":"Client","args":{"arg":{"text":"Set true to make it visible ( default ), or false to hide the image","name":"visible","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetColor","parent":"DImageButton","type":"panelfunc","ispanel":true,"description":"Sets the color of the image. Equivalent of DImage:SetImageColor","realm":"Client","args":{"arg":{"text":"The Global.Color to set","name":"color","type":"table"}}},"example":{"description":"Changes the image to blue:","code":"-- E.g. for the Engineer (blue)\nlocal engineerClass = vgui.Create(\"DImageButton\", container)\nengineerClass:SetColor(Color(22, 166, 236, 255))\n-- ...","output":{"image":[{"src":"MBD_Lobby_DImageButtonWithoutSetColor.png","alt":"thumb|left|Without_SetColor(...)"},{"src":"MBD_Lobby_DImageButtonWithSetColor.png","alt":"thumb|left|With_SetColor(...)"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetImage","parent":"DImageButton","type":"panelfunc","ispanel":true,"description":"Sets the \"image\" of the DImageButton. Equivalent of DImage:SetImage.","realm":"Client","args":{"arg":[{"text":"The path of the image to load. When no file extension is supplied the VMT file extension is used.","name":"strImage","type":"string"},{"text":"The path of the backup image.","name":"strBackup","type":"string"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetKeepAspect","parent":"DImageButton","type":"panelfunc","ispanel":true,"description":"Sets whether the DImageButton should keep the aspect ratio of its image. Equivalent of DImage:SetKeepAspect.\n\nNote that this will not try to fit the image inside the button, but instead it will fill the button with the image.","realm":"Client","args":{"arg":{"text":"true to keep the aspect ratio, false not to","name":"keep","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetOnViewMaterial","parent":"DImageButton","type":"panelfunc","ispanel":true,"description":"See DImage:SetOnViewMaterial","realm":"Client","args":{"arg":[{"name":"mat","type":"string"},{"name":"backup","type":"string"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetMaterial","parent":"DImageButton","type":"panelfunc","ispanel":true,"description":"Sets a Global.Material directly as an image. Equivalent of DImage:SetMaterial.","realm":"Client","args":{"arg":{"text":"The material to set","name":"mat","type":"IMaterial"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetStretchToFit","parent":"DImageButton","type":"panelfunc","ispanel":true,"description":"Sets whether the image inside the DImageButton should be stretched to fill the entire size of the button, without preserving aspect ratio.\n\nIf set to false, the image will not be resized at all.","realm":"Client","args":{"arg":{"text":"True to stretch, false to not to stretch","name":"stretch","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"DoClickInternal","parent":"DLabel","type":"panelfunc","ispanel":true,"description":"Called just before DLabel:DoClick.\n\nIn DLabel does nothing and is safe to override. Used by DMenuOption and DCollapsibleCategory's tabs.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetName","parent":"DKillIcon","type":"panelfunc","ispanel":true,"description":"Sets the killicon to be displayed. You should call Panel:SizeToContents following this.\n\nKillicons can be added with killicon.Add and killicon.AddFont.","realm":"Client","args":{"arg":{"text":"The name of the killicon to be displayed.","name":"iconName","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"DoDoubleClickInternal","parent":"DLabel","type":"panelfunc","ispanel":true,"description":"Called just before DLabel:DoDoubleClick. In DLabel does nothing and is safe to override.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetAutoStretchVertical","parent":"DLabel","type":"panelfunc","ispanel":true,"description":"Returns whether the label stretches vertically or not.\n\nSet by DLabel:SetAutoStretchVertical.","realm":"Client","rets":{"ret":{"text":"Whether the label stretches vertically or not.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetName","parent":"DKillIcon","type":"panelfunc","ispanel":true,"description":"Gets the killicon being shown.","realm":"Client","rets":{"ret":{"text":"The name of the killicon currently being displayed.","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetColor","parent":"DLabel","type":"panelfunc","ispanel":true,"description":"Returns the actual color of the text.\n\nSee also DLabel:GetTextColor and DLabel:GetTextStyleColor.","realm":"Client","rets":{"ret":{"text":"The the actual color of the text.","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetBright","parent":"DLabel","type":"panelfunc","ispanel":true,"description":"Returns whether the DLabel should set its text color to the current skin's bright text color.\n\nSee DLabel:SetBright.","realm":"Client","rets":{"ret":{"name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetDark","parent":"DLabel","type":"panelfunc","ispanel":true,"description":"Returns whether the DLabel should set its text color to the current skin's dark text color.\n\nSee DLabel:SetDark.","realm":"Client","rets":{"ret":{"name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetFont","parent":"DLabel","type":"panelfunc","ispanel":true,"description":"Returns the current font of the DLabel. This is set with DLabel:SetFont.","realm":"Client","rets":{"ret":{"text":"The name of the font in use.","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetDoubleClickingEnabled","parent":"DLabel","type":"panelfunc","ispanel":true,"description":"Returns whether or not double clicking will call DLabel:DoDoubleClick.\n\nSee DLabel:SetDoubleClickingEnabled.","realm":"Client","rets":{"ret":{"text":"true = enabled, false means disabled","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetDisabled","parent":"DLabel","type":"panelfunc","ispanel":true,"description":{"text":"Gets the disabled state of the DLabel. This is set with DLabel:SetDisabled.","deprecated":"Use Panel:IsEnabled instead."},"realm":"Client","rets":{"ret":{"text":"The disabled state of the label.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetTextColor","parent":"DLabel","type":"panelfunc","ispanel":true,"description":"Returns the \"override\" text color, set by DLabel:SetTextColor.","realm":"Client","rets":{"ret":{"text":"The color of the text, or nil.","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetHighlight","parent":"DLabel","type":"panelfunc","ispanel":true,"description":"Returns whether the DLabel should set its text color to the current skin's highlighted text color.\n\nSee DLabel:SetHighlight.","realm":"Client","rets":{"ret":{"name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetIsToggle","parent":"DLabel","type":"panelfunc","ispanel":true,"description":"Returns whether the toggle functionality is enabled for a label. Set with DLabel:SetIsToggle.","realm":"Client","rets":{"ret":{"text":"Whether or not toggle functionality is enabled.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetTextStyleColor","parent":"DLabel","type":"panelfunc","ispanel":true,"description":{"text":"Returns the \"internal\" or fallback color of the text.\n\nSee also DLabel:GetTextColor and DLabel:SetTextStyleColor.","internal":""},"realm":"Client","rets":{"ret":{"text":"The \"internal\" color of the text","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetToggle","parent":"DLabel","type":"panelfunc","ispanel":true,"description":"Returns the current toggle state of the label. This can be set with DLabel:SetToggle and toggled with DLabel:Toggle.\n\nIn order to use toggle functionality, you must first call DLabel:SetIsToggle with `true`, as it is disabled by default.","realm":"Client","rets":{"ret":{"text":"The current toggle state.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetAutoStretchVertical","parent":"DLabel","type":"panelfunc","ispanel":true,"description":"Automatically adjusts the height of the label dependent of the height of the text inside of it.","realm":"Client","args":{"arg":{"text":"Whenever to stretch the label vertically or not.","name":"stretch","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetColor","parent":"DLabel","type":"panelfunc","ispanel":true,"description":"Changes color of label. Alias of DLabel:SetTextColor.","realm":"Client","args":{"arg":{"text":"The color to set. Uses the Color structure.","name":"color","type":"table"}}},"example":{"description":"Creates a label and changes it color to red.","code":"local DLabel = vgui.Create( \"DLabel\" )\nDLabel:SetPos( 90, 50 )\nDLabel:SetColor(Color(255, 0, 0))\nDLabel:SetText( \"Hello world.\" )\nDLabel:SizeToContents()"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetBright","parent":"DLabel","type":"panelfunc","ispanel":true,"description":{"text":"Sets the color of the text to the bright text color defined in the skin.\n\nSee also DLabel:SetDark and DLabel:SetHighlight.\n\nYou should only consider using this if you are using background elements that are not manually painted and are using the skin colors.","deprecated":"You really should use DLabel:SetTextColor."},"realm":"Client","args":{"arg":{"text":"Whenever to set the text to bright or not.","name":"bright","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetFont","parent":"DLabel","type":"panelfunc","ispanel":true,"description":"Sets the font of the label.","realm":"Client","args":{"arg":{"text":"The name of the font.\n\nSee  for a list of existing fonts.\nAlternatively, use surface.CreateFont to create your own custom font.","name":"fontName","type":"string","page":",hereDefault_Fonts"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDoubleClickingEnabled","parent":"DLabel","type":"panelfunc","ispanel":true,"description":"Sets whether or not double clicking should call DLabel:DoDoubleClick.\n\nThis is enabled by default.","realm":"Client","args":{"arg":{"text":"true to enable, false to disable","name":"enable","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDark","parent":"DLabel","type":"panelfunc","ispanel":true,"description":{"text":"Sets the color of the text to the dark text color defined in the skin.\n\nSee also DLabel:SetBright and DLabel:SetHighlight.\n\nYou should only consider using this if you are using background elements that are not manually painted and are using the skin colors.","deprecated":"You really should use DLabel:SetTextColor."},"realm":"Client","args":{"arg":{"text":"Whenever to set the text to dark or not.","name":"dark","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDisabled","parent":"DLabel","type":"panelfunc","ispanel":true,"description":{"text":"Sets the disabled state of the DLabel.\n\nWhen disabled, the label does not respond to click, toggle or drag & drop actions.","deprecated":"Use Panel:SetEnabled instead."},"realm":"Client","args":{"arg":{"text":"`true` to disable the DLabel, `false` to enable it.","name":"disable","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetHighlight","parent":"DLabel","type":"panelfunc","ispanel":true,"description":{"text":"Sets the color of the text to the highlight text color defined in the skin.\n\nFor the default Derma skin this makes the label red.\n\nSee also DLabel:SetBright and DLabel:SetDark.\n\nYou should only consider using this if you are using background elements that are not manually painted and are using the skin colors.","deprecated":"You really should use DLabel:SetTextColor."},"realm":"Client","args":{"arg":{"text":"true to set the label's color to skins's text highlight color, false otherwise.","name":"highlight","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetTextColor","parent":"DLabel","type":"panelfunc","ispanel":true,"description":"Sets the text color of the DLabel. This will take precedence over DLabel:SetTextStyleColor.","realm":"Client","args":{"arg":{"text":"The text color. Uses the Color.","name":"color","type":"table"}}},"example":{"description":"Changes the text color to red.","code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetTitle( \"Text Color Example\" )\nframe:SetSize( 300, 100 )\nframe:Center()\nframe:MakePopup()\n\nlocal frame_label = vgui.Create( \"DLabel\", frame )\nframe_label:SetPos( 10, 30 )\nframe_label:SetTextColor( Color( 255, 0, 0) )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetIsToggle","parent":"DLabel","type":"panelfunc","ispanel":true,"description":"Enables or disables toggle functionality for a label. Retrieved with DLabel:GetIsToggle.\n\nYou must call this before using DLabel:SetToggle, DLabel:GetToggle or DLabel:Toggle.","realm":"Client","args":{"arg":{"text":"Whether or not to enable toggle functionality.","name":"allowToggle","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetTextStyleColor","parent":"DLabel","type":"panelfunc","ispanel":true,"description":{"text":"Used by DLabel:SetDark, DLabel:SetBright and DLabel:SetHighlight to set the text color without affecting DLabel:SetTextColor calls.","internal":"Use DLabel:SetTextColor instead!"},"realm":"Client","args":{"arg":{"text":"The text color. Uses the Color.","name":"color","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Toggle","parent":"DLabel","type":"panelfunc","ispanel":true,"description":"Toggles the label's state. This can be set and retrieved with DLabel:SetToggle and DLabel:GetToggle.\n\nIn order to use toggle functionality, you must first call DLabel:SetIsToggle with `true`, as it is disabled by default.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetToggle","parent":"DLabel","type":"panelfunc","ispanel":true,"description":"Sets the toggle state of the label. This can be retrieved with DLabel:GetToggle and toggled with DLabel:Toggle.\n\nIn order to use toggle functionality, you must first call DLabel:SetIsToggle with `true`, as it is disabled by default.","realm":"Client","args":{"arg":{"text":"The toggle state to be set.","name":"toggleState","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"text":"Condition |  Value |\n----------|-------|\n| self.m_bBright | skin.Colours.Label.Bright |\n| self.m_bDark | skin.Colours.Label.Dark |\n| self.m_bHighlight | skin.Colours.Label.Highlight |","function":{"name":"UpdateColours","parent":"DLabel","type":"panelfunc","ispanel":true,"file":{"text":"lua/vgui/dlabel.lua","line":"289-279"},"description":"A hook called from within PANEL:ApplySchemeSettings to determine the color of the text on display.","realm":"Client","args":{"arg":{"text":"A table supposed to contain the color values listed above.","name":"skin","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetAutoStretch","parent":"DLabelEditable","type":"panelfunc","ispanel":true,"description":"Returns whether the editable label will stretch to the text entered or not.","realm":"Client","added":"2020.08.12","rets":{"ret":{"text":"Whether the editable label will stretch to the text entered or not.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"UpdateFGColor","parent":"DLabel","type":"panelfunc","ispanel":true,"description":{"text":"Called internally to update the color of the text.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnLabelTextChanged","parent":"DLabelEditable","type":"panelfunc","ispanel":true,"description":"A hook called when the player presses Enter (i.e. the finished editing the label) and the text has changed.\n\nAllows you to override/modify the text that will be set to display.","realm":"Client","args":{"arg":{"text":"The original user input text","name":"txt","type":"string"}},"rets":{"ret":{"text":"If provided, will override the text that will be applied to the label itself.","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetColor","parent":"DLabelURL","type":"panelfunc","ispanel":true,"description":"Gets the current text color of the DLabelURL. Alias as DLabelURL:GetTextColor.","realm":"Client","rets":{"ret":{"text":"The current text Global.Color.","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetAutoStretch","parent":"DLabelEditable","type":"panelfunc","ispanel":true,"description":"Sets whether the editable label should stretch to the text entered or not.","realm":"Client","added":"2020.08.12","args":{"arg":{"text":"Whether the editable label should stretch to the text entered or not.","name":"stretch","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetTextColor","parent":"DLabelURL","type":"panelfunc","ispanel":true,"description":"Gets the current text color of the DLabelURL set by DLabelURL:SetTextColor.","realm":"Client","rets":{"ret":{"text":"The current text Global.Color.","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetTextStyleColor","parent":"DLabelURL","type":"panelfunc","ispanel":true,"description":"Returns the color set by DLabelURL:SetTextStyleColor.","realm":"Client","rets":{"ret":{"text":"The Color","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetTextColor","parent":"DLabelURL","type":"panelfunc","ispanel":true,"description":"Sets the text color of the DLabelURL. Overrides DLabelURL:SetTextStyleColor.\n\n\nThis should only be used immediately after it is created, and otherwise Panel:SetFGColor.","realm":"Client","args":{"arg":{"text":"The Global.Color to use.","name":"col","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetColor","parent":"DLabelURL","type":"panelfunc","ispanel":true,"description":"Alias of DLabelURL:SetTextColor.","realm":"Client","args":{"arg":{"text":"The Global.Color to use.","name":"col","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetTextStyleColor","parent":"DLabelURL","type":"panelfunc","ispanel":true,"description":"Sets the base text color of the DLabelURL. This is overridden by DLabelURL:SetTextColor.","realm":"Client","args":{"arg":{"text":"The Global.Color to set","name":"color","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddColumn","parent":"DListView","type":"panelfunc","ispanel":true,"description":"Adds a column to the listview.","realm":"Client","args":{"arg":[{"text":"The name of the column to add.","name":"column","type":"string"},{"text":"Sets the ordering of this column compared to other columns.","name":"position","type":"number"}]},"rets":{"ret":{"text":"The newly created DListView_Column.","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Clear","parent":"DListView","type":"panelfunc","ispanel":true,"description":"Removes all lines that have been added to the DListView.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddLine","parent":"DListView","type":"panelfunc","ispanel":true,"description":"Adds a line to the list view.","realm":"Client","args":{"arg":{"text":"Values for a new row in the DListView, If several arguments are supplied, each argument will correspond to a respective column in the DListView.","name":"text","type":"vararg"}},"rets":{"ret":{"text":"The newly created DListView_Line.","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ColumnWidth","parent":"DListView","type":"panelfunc","ispanel":true,"description":"Gets the width of a column.","realm":"Client","args":{"arg":{"text":"The column to get the width of.","name":"column","type":"number"}},"rets":{"ret":{"text":"Width of the column.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ClearSelection","parent":"DListView","type":"panelfunc","ispanel":true,"description":"Clears the current selection in the DListView.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"DataLayout","parent":"DListView","type":"panelfunc","ispanel":true,"description":"Creates the lines and gets the height of the contents, in a DListView.","realm":"Client","rets":{"ret":{"text":"The height of the contents","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"FixColumnsLayout","parent":"DListView","type":"panelfunc","ispanel":true,"description":{"text":"Internal helper function called from the PANEL:PerformLayout of DListView.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"DisableScrollbar","parent":"DListView","type":"panelfunc","ispanel":true,"description":"Removes the scrollbar.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetCanvas","parent":"DListView","type":"panelfunc","ispanel":true,"description":"Gets the canvas.","realm":"Client","rets":{"ret":{"text":"The canvas.","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetDataHeight","parent":"DListView","type":"panelfunc","ispanel":true,"description":"Returns the height of the data of the DListView.\n\nSee also DListView:SetDataHeight.","realm":"Client","rets":{"ret":{"text":"The height of the data of the DListView.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetHeaderHeight","parent":"DListView","type":"panelfunc","ispanel":true,"description":"Returns the height of the header of the DListView.\n\nSee also DListView:SetHeaderHeight.","realm":"Client","rets":{"ret":{"text":"The height of the header of the DListView.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetHideHeaders","parent":"DListView","type":"panelfunc","ispanel":true,"description":"Returns whether the header line should be visible on not.","realm":"Client","rets":{"ret":{"text":"Whether the header line should be visible on not.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetDirty","parent":"DListView","type":"panelfunc","ispanel":true,"description":{"text":"See DListView:SetDirty.","internal":""},"realm":"Client","rets":{"ret":{"name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetInnerTall","parent":"DListView","type":"panelfunc","ispanel":true,"description":"Returns the height of DListView:GetCanvas.\n\nIntended to represent the height of all data lines.","realm":"Client","rets":{"ret":{"text":"The height of DListView:GetCanvas.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetLines","parent":"DListView","type":"panelfunc","ispanel":true,"description":"Gets all of the lines added to the DListView.","realm":"Client","rets":{"ret":{"text":"The lines added to the DListView.","name":"","type":"table"}}},"example":{"description":"Loops through all of the lines of a DListView and prints their first value.","code":"local list = vgui.Create( \"DListView\" )\nlist:AddColumn( \"Fruit\" )\n\nfor _, line in ipairs( { \"Apple\", \"Orange\", \"Banana\" } ) do\n    list:AddLine( line )\nend\n\nfor k, line in ipairs( list:GetLines() ) do\n    print( k, line:GetValue( 1 ) )\nend","output":"```\n1\tApple\n2\tOrange\n3\tBanana\n```"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetMultiSelect","parent":"DListView","type":"panelfunc","ispanel":true,"description":"Returns whether multiple lines can be selected or not.\n\nSee DListView:SetMultiSelect.","realm":"Client","rets":{"ret":{"text":"Whether multiple lines can be selected or not.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetLine","parent":"DListView","type":"panelfunc","ispanel":true,"description":"Gets the DListView_Line at the given index.","realm":"Client","args":{"arg":{"text":"The index of the line to get.","name":"id","type":"number"}},"rets":{"ret":{"text":"The DListView_Line at the given index.","name":"","type":"Panel"}}},"example":{"description":"An example of how to retrieve a DListView_Line from a DListView.","code":"local list = vgui.Create( \"DListView\" )\nlist:AddColumn( \"Name\" )\nlist:AddLine( \"Garry :D\" )\n\nprint( list:GetLine( 1 ) )","output":"Panel: [name:DListView_Line][class:Panel][0,0,64,24]"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetSelected","parent":"DListView","type":"panelfunc","ispanel":true,"description":"Gets all of the lines that are currently selected.","realm":"Client","rets":{"ret":{"text":"A table of DListView_Lines.","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetSortedID","parent":"DListView","type":"panelfunc","ispanel":true,"description":{"text":"Converts LineID to SortedID","internal":""},"realm":"Client","args":{"arg":{"text":"The DListView_Line:GetID of a line to look up","name":"lineId","type":"number"}},"rets":{"ret":{"name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetSortable","parent":"DListView","type":"panelfunc","ispanel":true,"description":"Returns whether sorting of columns by clicking their headers is allowed or not.\n\nSee also DListView:SetSortable.","realm":"Client","rets":{"ret":{"text":"Whether sorting of columns by clicking their headers is allowed or not","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetSelectedLine","parent":"DListView","type":"panelfunc","ispanel":true,"description":"Gets the currently selected DListView_Line index.\n\nIf DListView:SetMultiSelect is set to true, only the first line of all selected lines will be returned. Use DListView:GetSelected instead to get all of the selected lines.","realm":"Client","rets":{"ret":[{"text":"The index of the currently selected line.","name":"","type":"number"},{"text":"The currently selected DListView_Line.","name":"","type":"Panel"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnClickLine","parent":"DListView","type":"panelfunc","ispanel":true,"description":{"text":"Called whenever a line is clicked.","internal":"Use DListView:OnRowSelected instead!"},"realm":"Client","args":{"arg":[{"text":"The selected line.","name":"line","type":"Panel"},{"text":"Boolean indicating whether the line is selected.","name":"isSelected","type":"boolean"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"RemoveLine","parent":"DListView","type":"panelfunc","ispanel":true,"description":"Removes a line from the list view.","realm":"Client","args":{"arg":{"text":"Removes the given row, by row id (same number as DListView:GetLine).","name":"line","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SelectFirstItem","parent":"DListView","type":"panelfunc","ispanel":true,"description":"Selects the line at the first index of the DListView if one has been added.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnRowRightClick","parent":"DListView","type":"panelfunc","ispanel":true,"description":"Called when a row is right-clicked","realm":"Client","args":{"arg":[{"text":"The line ID of the right clicked line","name":"lineID","type":"number"},{"text":"The line panel itself, a DListView_Line.","name":"line","type":"Panel"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnRequestResize","parent":"DListView","type":"panelfunc","ispanel":true,"description":{"text":"Called from DListView_Column.","internal":""},"realm":"Client","args":{"arg":[{"text":"The column which initialized the resize","name":"column","type":"Panel"},{"name":"size","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SelectItem","parent":"DListView","type":"panelfunc","ispanel":true,"description":"Selects a line in the listview.","realm":"Client","args":{"arg":{"text":"The line to select.","name":"Line","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetHeaderHeight","parent":"DListView","type":"panelfunc","ispanel":true,"description":"Sets the height of the header line of the DListView.\n\nSee also DListView:SetDataHeight.","realm":"Client","args":{"arg":{"text":"The new height to set. Default value is 16.","name":"height","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDataHeight","parent":"DListView","type":"panelfunc","ispanel":true,"description":"Sets the height of all lines of the DListView except for the header line.\n\nSee also DListView:SetHeaderHeight.","realm":"Client","args":{"arg":{"text":"The new height to set. Default value is 17.","name":"height","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDirty","parent":"DListView","type":"panelfunc","ispanel":true,"description":{"text":"Used internally to signify if the DListView needs a rebuild.","internal":""},"realm":"Client","args":{"arg":{"name":"isDirty","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetHideHeaders","parent":"DListView","type":"panelfunc","ispanel":true,"description":"Sets whether the header line should be visible on not.","realm":"Client","args":{"arg":{"text":"Whether the header line should be visible on not.","name":"hide","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SortByColumn","parent":"DListView","type":"panelfunc","ispanel":true,"description":"Sorts the items in the specified column.","realm":"Client","args":{"arg":[{"text":"The index of the column that should be sorted.","name":"columnIndex","type":"number"},{"text":"Whether the items should be sorted in descending order or not.","name":"descending","type":"boolean","default":"false"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetSortable","parent":"DListView","type":"panelfunc","ispanel":true,"description":"Enables/disables the sorting of columns by clicking.","realm":"Client","args":{"arg":{"text":"Whether sorting columns with clicking is allowed or not.","name":"isSortable","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetMultiSelect","parent":"DListView","type":"panelfunc","ispanel":true,"description":{"text":"Sets whether multiple lines can be selected by the user by using the  or  keys. When set to false, only one line can be selected.","key":["Ctrl","Shift"]},"realm":"Client","args":{"arg":{"text":"Whether multiple lines can be selected or not","name":"allowMultiSelect","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SortByColumns","parent":"DListView","type":"panelfunc","ispanel":true,"description":"Sorts the list based on given columns.\n\nAll arguments are optional","realm":"Client","args":{"arg":[{"name":"column1","type":"number","default":"nil"},{"name":"descrending1","type":"boolean","default":"false"},{"name":"column2","type":"number","default":"nil"},{"name":"descrending2","type":"boolean","default":"false"},{"name":"column3","type":"number","default":"nil"},{"name":"descrending3","type":"boolean","default":"false"},{"name":"column4","type":"number","default":"nil"},{"name":"descrending4","type":"boolean","default":"false"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetFixedWidth","parent":"DListView_Column","type":"panelfunc","ispanel":true,"description":"Sets the fixed width of the column.","realm":"Client","args":{"arg":{"text":"The number value which will determine a fixed width.","name":"width","type":"number"}}},"example":{"description":"Creates a DListView and populates it with two columns and two items, only one of which can be selected at a time.\n\nThe first column will be longer than the second column.","code":"local Frame = vgui.Create( \"DFrame\" )\nFrame:SetSize( 500, 500 )\nFrame:Center()\nFrame:MakePopup()\n\nlocal SimpleList = vgui.Create( \"DListView\", Frame )\nSimpleList:Dock( FILL )\nSimpleList:SetMultiSelect( false )\n\nSimpleList:AddColumn( \"Column 1\" )\nSimpleList:AddColumn( \"Column 2\" ):SetFixedWidth(125)\n\nSimpleList:AddLine( \"First\", \"Column\" )\nSimpleList:AddLine( \"Second\", \"Column\" )","output":{"image":{"src":"DListView_Column_SetFixedWidth.png"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetMaxWidth","parent":"DListView_Column","type":"panelfunc","ispanel":true,"description":"Sets the maximum width of a column.","realm":"Client","args":{"arg":{"text":"The number value which will determine a maximum width.","name":"width","type":"number"}}},"example":{"description":"Creates a DListView and populates it with two columns and two items, only one of which can be selected at a time.\n\nThe second column can't be bigger than the argument value.","code":"local Frame = vgui.Create( \"DFrame\" )\nFrame:SetSize( 500, 500 )\nFrame:Center()\nFrame:MakePopup()\n\nlocal SimpleList = vgui.Create( \"DListView\", Frame )\nSimpleList:Dock( FILL )\nSimpleList:SetMultiSelect( false )\n\nSimpleList:AddColumn( \"Column 1\" )\nSimpleList:AddColumn( \"Column 2\" ):SetMaxWidth(225)\n\nSimpleList:AddLine( \"First\", \"Column\" )\nSimpleList:AddLine( \"Second\", \"Column\" )","output":{"image":{"src":"DListView_Column_SetMaxWidth.png"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetTextAlign","parent":"DListView_Column","type":"panelfunc","ispanel":true,"description":"Sets the text alignment for the column","realm":"Client","args":{"arg":{"text":"The direction of the content, based on the number pad.\n\n|   |   |   |\n| --- | --- | --- |\n| : **top-left** | : **top-center**\t| : **top-right** |\n| : **middle-left** | : **center** | : **middle-right** |\n| : **bottom-left** | : **bottom-center** | : **bottom-right** |","name":"alignment","type":"number","key":["7","8","9","4","5","6","1","2","3"]}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"DataLayout","parent":"DListView_Line","type":"panelfunc","ispanel":true,"description":{"text":"Called by DListView:DataLayout","internal":""},"realm":"Client","args":{"arg":{"text":"The list view.","name":"pnl","type":"DListView"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetMinWidth","parent":"DListView_Column","type":"panelfunc","ispanel":true,"description":"Sets the minimum width of a column.","realm":"Client","args":{"arg":{"text":"The number value which will determine a minimum width.","name":"width","type":"number"}}},"example":{"description":"Creates a DListView and populates it with two columns and two items, only one of which can be selected at a time.\n\nThe second column can't be smaller than the argument value.","code":"local Frame = vgui.Create( \"DFrame\" )\nFrame:SetSize( 500, 500 )\nFrame:Center()\nFrame:MakePopup()\n\nlocal SimpleList = vgui.Create( \"DListView\", Frame )\nSimpleList:Dock( FILL )\nSimpleList:SetMultiSelect( false )\n\nSimpleList:AddColumn( \"Column 1\" )\nSimpleList:AddColumn( \"Column 2\" ):SetMinWidth(125)\n\nSimpleList:AddLine( \"First\", \"Column\" )\nSimpleList:AddLine( \"Second\", \"Column\" )","output":{"image":{"src":"DListView_Column_SetMinWidth.png"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetWidth","parent":"DListView_Column","type":"panelfunc","ispanel":true,"description":"Sets the width of the panel.","realm":"Client","args":{"arg":{"text":"The number value which will determine panel width.","name":"width","type":"number"}}},"example":{"description":"Creates a DListView and populates it with two columns and two items, only one of which can be selected at a time.\n\nThe first column width is 15.\nThe second column width is 350.","code":"local Frame = vgui.Create( \"DFrame\" )\nFrame:SetSize( 500, 500 )\nFrame:Center()\nFrame:MakePopup()\n\nlocal SimpleList = vgui.Create( \"DListView\", Frame )\nSimpleList:Dock( FILL )\nSimpleList:SetMultiSelect( false )\n\nSimpleList:AddColumn( \"Column 1\" ):SetWidth(15)\nSimpleList:AddColumn( \"Column 2\" ):SetWidth(350)\n\nSimpleList:AddLine( \"First\", \"Column\" )\nSimpleList:AddLine( \"Second\", \"Column\" )","output":{"image":{"src":"DListView_Column_SetWidth.png"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetAltLine","parent":"DListView_Line","type":"panelfunc","ispanel":true,"description":"Returns whether this line is odd or even in the list. This is internally used (and set) to change the looks of every other line.","realm":"Client","rets":{"ret":{"text":"Whether this line is 'alternative'.","name":"alt","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetListView","parent":"DListView_Line","type":"panelfunc","ispanel":true,"description":"Returns the parent DListView of this line.","realm":"Client","rets":{"ret":{"text":"The parent DListView of this line.","name":"pnl","type":"DListView"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetID","parent":"DListView_Line","type":"panelfunc","ispanel":true,"description":"Returns the ID of this line, set automatically in DListView:AddLine.","realm":"Client","rets":{"ret":{"text":"The ID of this line.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetColumnText","parent":"DListView_Line","type":"panelfunc","ispanel":true,"description":{"text":"Gets the string held in the specified column of a DListView_Line panel.\n\nThis is the same thing as doing ( column_number ).","page":",DListView_Line:GetValuePanel:GetValue"},"realm":"Client","args":{"arg":{"text":"The number of the column to retrieve the text from, starts with 1.","name":"column","type":"number"}},"rets":{"ret":{"text":"The contents of the specified column.","name":"","type":"string"}}},"example":{"code":"local dframe = vgui.Create(\"DFrame\")\ndframe:SetSize(450, 350)\ndframe:Center()\n\nlocal dlist = vgui.Create(\"DListView\", dframe)\ndlist:Dock(FILL)\ndlist:SetMultiSelect(false)\ndlist:AddColumn(\"Name\")\ndlist:AddColumn(\"SteamID\")\ndlist:AddLine(\"Stalker\", \"STEAM_0:1:18093014\")\nfunction dlist:DoDoubleClick(linenumber, lineinfo)\n\tprint(lineinfo:GetColumnText(2))\nend","output":"Prints \"STEAM_0:1:18093014\" when the line containing Stalker is double clicked."},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetSortValue","parent":"DListView_Line","type":"panelfunc","ispanel":true,"description":"Returns the data stored on given cell of this line.\n\n\tUsed in the DListView:SortByColumn function in case you want to sort with something else than the text.","realm":"Client","args":{"arg":{"text":"The number of the column to write the text from, starts with 1.","name":"column","type":"number"}},"rets":{"ret":{"text":"The data that is set for given column of this line, if any.","name":"data","type":"any"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetAltLine","parent":"DListView_Line","type":"panelfunc","ispanel":true,"description":{"text":"Sets whether this line is odd or even in the list. This is internally used (and set automatically) to change the looks of every other line.","internal":""},"realm":"Client","args":{"arg":{"text":"Whether this line is 'alternative'.","name":"alt","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsLineSelected","parent":"DListView_Line","type":"panelfunc","ispanel":true,"description":"Returns whether this line is selected.","realm":"Client","rets":{"ret":{"text":"Whether this line is selected.","name":"selected","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetColumnText","parent":"DListView_Line","type":"panelfunc","ispanel":true,"description":"Sets the string held in the specified column of a DListView_Line panel.","realm":"Client","args":{"arg":[{"text":"The number of the column to write the text from, starts with 1.","name":"column","type":"number"},{"text":"Column text you want to set","name":"value","type":"string"}]},"rets":{"ret":{"text":"The DLabel in which the text was set.","name":"label","type":"DLabel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetSelected","parent":"DListView_Line","type":"panelfunc","ispanel":true,"description":"Sets whether this line is selected or not.","realm":"Client","args":{"arg":{"text":"Whether this line is selected.","name":"selected","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddCVar","parent":"DMenu","type":"panelfunc","ispanel":true,"description":"Creates a DMenuOptionCVar and adds it as an option into the menu. Checking and unchecking the option will alter the given console variable's value.","realm":"Client","args":{"text":".","arg":[{"text":"The text of the button","name":"strText","type":"string"},{"text":"The console variable to change","name":"convar","type":"string"},{"text":"The value of the console variable to set when the option is checked","name":"on","type":"string"},{"text":"The value of the console variable to set when the option is unchecked","name":"off","type":"string"},{"text":"If set, the function will be called every time the option is pressed/clicked/selected.\n\nIt will have only one argument:\nPanel pnl - The created DMenuOptionCVar","name":"funcFunction","type":"function","default":"nil"}]},"rets":{"ret":{"text":"The created DMenuOptionCVar","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetSortValue","parent":"DListView_Line","type":"panelfunc","ispanel":true,"description":"Allows you to store data per column.\n\n\tUsed in the DListView:SortByColumn function in case you want to sort with something else than the text.","realm":"Client","args":{"arg":[{"text":"The number of the column to write the text from, starts with 1.","name":"column","type":"number"},{"text":"Data for given column on the line you wish to set.","name":"data","type":"any"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddOption","parent":"DMenu","type":"panelfunc","ispanel":true,"description":"Add an option to the DMenu","file":{"text":"lua/vgui/dmenu.lua","line":"36"},"realm":"Client","args":{"arg":[{"text":"Name of the option.","name":"name","type":"string"},{"text":"Function to execute when this option is clicked.","name":"func","type":"function","default":"nil"}]},"rets":{"ret":{"text":"Returns the created DMenuOption panel.","name":"","type":"Panel"}}},"example":{"description":"Creates a DMenu with 2 options: One that kills yourself; One that does nothing.","code":"local m = DermaMenu()\n\nm:AddOption( \"Suicide\", function() RunConsoleCommand(\"kill\") end )\nm:AddOption( \"It does nothing\" )\n\nm:Open()"},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddPanel","parent":"DMenu","type":"panelfunc","ispanel":true,"description":"Adds a panel to the DMenu as if it were an option.\n\nThis invokes DScrollPanel:AddItem and will not create a new panel if a class name is passed, unlike Panel:Add.","file":{"text":"lua/vgui/dmenu.lua","line":"29"},"realm":"Client","args":{"arg":{"text":"The panel that you want to add.","name":"pnl","type":"Panel"}}},"example":{"description":"Creates a DMenu with some options and places a red DPanel between them.","code":"local m = DermaMenu()\n\nm:AddOption( \"Kill yourself\", function() RunConsoleCommand( \"kill\" ) end ) -- Add first option\nm:AddSpacer()\n\n-- Create a red DPanel\nlocal panel = vgui.Create( \"DPanel\", m )\npanel:SetSize( 50, 100 )\npanel:SetBackgroundColor( Color( 255, 0, 0 ) )\n\nm:AddPanel( panel ) -- Add the panel\n\nm:AddSpacer()\nm:AddOption( \"Say hi\", function() RunConsoleCommand( \"say\", \"Hi!\" ) end ) -- Add second option\n\nm:Open() -- Show our menu","output":{"image":{"src":"DMenu_AddPanel_eg.png"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddSpacer","parent":"DMenu","type":"panelfunc","ispanel":true,"description":"Adds a horizontal line spacer.","realm":"Client"},"example":{"description":"Creates a DMenu with 3 options and adds a spacer before the third.","code":"local m = DermaMenu()\n\nm:AddOption( \"Kill yourself\", function() RunConsoleCommand( \"kill\" ) end ) -- Add first option\nm:AddOption( \"Disconnect\", function() RunConsoleCommand( \"disconnect\" ) end ) -- Add second option\n\nm:AddSpacer() -- Add a spacer\n\nm:AddOption( \"Say hi\", function() RunConsoleCommand( \"say\", \"Hi!\" ) end ) -- Add third option\n\nm:Open() -- Show our menu","output":{"image":{"src":"DMenu_spacer.png"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddSubMenu","parent":"DMenu","type":"panelfunc","ispanel":true,"description":"Add a sub menu to the DMenu","realm":"Client","args":{"arg":[{"text":"Name of the sub menu.","name":"Name","type":"string"},{"text":"Function to execute when this sub menu is clicked.","name":"func","type":"function","default":"nil"}]},"rets":{"ret":[{"text":"The created sub DMenu","name":"","type":"Panel"},{"text":"The created DMenuOption","name":"","type":"Panel"}]}},"example":{"description":"Creates a menu with one option \"Do you want to die?\", which has two sub-options \"Yes\" and \"No\".","code":"local parentMenu = DermaMenu()\n\nlocal subMenu, parentMenuOption = parentMenu:AddSubMenu(\"Do you want to die?\")\nparentMenuOption:SetIcon(\"icon16/user_red.png\")\n\nlocal yesOption = subMenu:AddOption(\"Yes\", function() LocalPlayer():ConCommand(\"kill\") end)\nyesOption:SetIcon(\"icon16/accept.png\")\n\nlocal noOption = subMenu:AddOption(\"No\", function() print(\"You chose to live another day\") end)\nnoOption:SetIcon(\"icon16/cross.png\")\n\nparentMenu:Open()","output":{"image":{"src":"DMenuSubMenu.png"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ChildCount","parent":"DMenu","type":"panelfunc","ispanel":true,"description":"Returns the number of child elements of DMenu's DScrollPanel:GetCanvas.","realm":"Client","rets":{"ret":{"text":"The number of child elements","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"CloseSubMenu","parent":"DMenu","type":"panelfunc","ispanel":true,"description":{"text":"Used internally by DMenu:OpenSubMenu.","internal":""},"realm":"Client","args":{"arg":{"text":"The menu to close","name":"menu","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ClearHighlights","parent":"DMenu","type":"panelfunc","ispanel":true,"description":{"text":"Clears all highlights made by DMenu:HighlightItem.\n\nDoesn't appear to be used or do anything.","deprecated":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetChild","parent":"DMenu","type":"panelfunc","ispanel":true,"description":"Gets a child by its index.","realm":"Client","args":{"arg":{"text":"The index of the child to get.","name":"childIndex","type":"number","note":"Unlike Panel:GetChild, this index starts at 1."}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetDeleteSelf","parent":"DMenu","type":"panelfunc","ispanel":true,"description":{"text":"Set by DMenu:SetDeleteSelf","deprecated":""},"realm":"Client","rets":{"ret":{"name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetDrawBorder","parent":"DMenu","type":"panelfunc","ispanel":true,"description":{"text":"Returns the value set by DMenu:SetDrawBorder.","deprecated":""},"realm":"Client","rets":{"ret":{"name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetDrawColumn","parent":"DMenu","type":"panelfunc","ispanel":true,"description":"Returns whether the DMenu should draw the icon column with a different color or not.\n\nSee DMenu:SetDrawColumn","realm":"Client","rets":{"ret":{"text":"Whether to draw the column or not","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetMaxHeight","parent":"DMenu","type":"panelfunc","ispanel":true,"description":"Returns the maximum height of the DMenu.","realm":"Client","rets":{"ret":{"text":"The maximum height in pixels","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetMinimumWidth","parent":"DMenu","type":"panelfunc","ispanel":true,"description":"Returns the minimum width of the DMenu in pixels","realm":"Client","rets":{"ret":{"text":"the minimum width of the DMenu","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Hide","parent":"DMenu","type":"panelfunc","ispanel":true,"description":"Used to safely hide (not remove) the menu. This will also hide any opened submenues recursively.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetOpenSubMenu","parent":"DMenu","type":"panelfunc","ispanel":true,"description":{"text":"Returns the currently opened submenu.\n\nUsed internally to store the open submenu by DMenu:Hide, DMenu:OpenSubMenu.","internal":""},"realm":"Client","rets":{"ret":{"text":"The currently opened submenu, if any.","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"HighlightItem","parent":"DMenu","type":"panelfunc","ispanel":true,"description":{"text":"Highlights selected item in the DMenu by setting the item's key \"Highlight\" to true.\n\nDoesn't appear to be working or used.","deprecated":""},"realm":"Client","args":{"arg":{"text":"The item to highlight.","name":"item","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OptionSelected","parent":"DMenu","type":"panelfunc","ispanel":true,"description":"Called when a option has been selected","realm":"Client","args":{"arg":[{"text":"The DMenuOption that was selected","name":"option","type":"Panel"},{"text":"The options text","name":"optionText","type":"string"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Open","parent":"DMenu","type":"panelfunc","ispanel":true,"description":"Opens the DMenu at the current mouse position","realm":"Client","args":{"arg":[{"text":"Position (X coordinate) to open the menu at.","name":"x","type":"number","default":"gui.MouseX()"},{"text":"Position (Y coordinate) to open the menu at.","name":"y","type":"number","default":"gui.MouseY()"},{"text":"This argument does nothing.","name":"skipanimation","type":"any","default":"nil"},{"text":"If `x` and `y` are not set manually, setting this argument will offset the `y` position of the opened menu by the height of given panel.","name":"ownerpanel","type":"Panel","default":"nil"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OpenSubMenu","parent":"DMenu","type":"panelfunc","ispanel":true,"description":"Closes any active sub menus, and opens a new one.","realm":"Client","args":{"arg":[{"text":"The DMenuOption to open the submenu at","name":"item","type":"Panel"},{"text":"The submenu to open. If set to nil, the function just closes existing submenus.","name":"menu","type":"Panel","default":"nil"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OptionSelectedInternal","parent":"DMenu","type":"panelfunc","ispanel":true,"description":{"text":"Called by DMenuOption. Calls DMenu:OptionSelected.","internal":""},"realm":"Client","args":{"arg":{"text":"The DMenuOption that called this function","name":"option","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDrawBorder","parent":"DMenu","type":"panelfunc","ispanel":true,"description":{"text":"Does nothing.","deprecated":""},"realm":"Client","args":{"arg":{"name":"bool","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDeleteSelf","parent":"DMenu","type":"panelfunc","ispanel":true,"description":"Set to true by default. IF set to true, the menu will be deleted when it is closed, not simply hidden.\n\nThis is used by DMenuBar","realm":"Client","args":{"arg":{"text":"true to delete menu on close, false to simply hide.","name":"newState","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDrawColumn","parent":"DMenu","type":"panelfunc","ispanel":true,"description":"Sets whether the DMenu should draw the icon column with a different color.","realm":"Client","args":{"arg":{"text":"Whether to draw the column or not","name":"draw","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetMinimumWidth","parent":"DMenu","type":"panelfunc","ispanel":true,"description":"Sets the minimum width of the DMenu. The menu will be stretched to match the given value.","realm":"Client","args":{"arg":{"text":"The minimum width of the DMenu in pixels","name":"minWidth","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetMaxHeight","parent":"DMenu","type":"panelfunc","ispanel":true,"description":"Sets the maximum height the DMenu can have. If the height of all menu items exceed this value, a scroll bar will be automatically added.","realm":"Client","args":{"arg":{"text":"The maximum height of the DMenu to set, in pixels","name":"maxHeight","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetOpenSubMenu","parent":"DMenu","type":"panelfunc","ispanel":true,"description":{"text":"Used internally to store the open submenu by DMenu:Hide, DMenu:OpenSubMenu, DMenu:CloseSubMenu","internal":""},"realm":"Client","args":{"arg":{"text":"The menu to store","name":"item","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddMenu","parent":"DMenuBar","type":"panelfunc","ispanel":true,"description":"Creates a new DMenu object tied to a DButton with the given label on the menu bar.\n\nThis will create a new menu regardless of whether or not one with the same label exists. To add **or** get a menu, use DMenuBar:AddOrGetMenu.","realm":"Client","args":{"arg":{"text":"The name (label) of the derma menu to create.","name":"label","type":"string"}},"rets":{"ret":{"text":"The new DMenu which will be opened when the button is clicked.","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetBackgroundColor","parent":"DMenuBar","type":"panelfunc","ispanel":true,"description":"Returns the DMenuBar's background color","realm":"Client","rets":{"ret":{"text":"The background's color. See Color","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddOrGetMenu","parent":"DMenuBar","type":"panelfunc","ispanel":true,"description":"Retrieves a DMenu object from the menu bar. If one with the given label doesn't exist, a new one is created.\n\nTo add a DMenu without checking, use DMenuBar:AddMenu.","realm":"Client","args":{"arg":{"text":"The name (label) of the derma menu to get or create.","name":"label","type":"string"}},"rets":{"ret":{"text":"The DMenu with the given label.","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetDisabled","parent":"DMenuBar","type":"panelfunc","ispanel":true,"description":"Returns whether or not the DMenuBar is disabled","realm":"Client","rets":{"ret":{"text":"Is disabled","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetOpenMenu","parent":"DMenuBar","type":"panelfunc","ispanel":true,"description":"If a menu is visible/opened, then the menu is returned.","realm":"Client","rets":{"ret":{"text":"Returns the visible/open menu or nil.","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetPaintBackground","parent":"DMenuBar","type":"panelfunc","ispanel":true,"description":"Returns whether or not the background should be painted. Is the same as DMenuBar:GetDrawBackground","realm":"Client","rets":{"ret":{"text":"Should the background be painted","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetIsMenu","parent":"DMenuBar","type":"panelfunc","ispanel":true,"description":"Returns whether or not the panel is a menu. Used for closing menus when another panel is selected.","realm":"Client","rets":{"ret":{"text":"Is a menu","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetDrawBackground","parent":"DMenuBar","type":"panelfunc","ispanel":true,"description":{"text":"Returns whether or not the background should be painted. Is the same as DMenuBar:GetPaintBackground","deprecated":"Use DMenuBar:GetPaintBackground instead."},"realm":"Client","rets":{"ret":{"text":"Should the background be painted","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetBackgroundColor","parent":"DMenuBar","type":"panelfunc","ispanel":true,"description":"Sets the background color","realm":"Client","args":{"arg":{"text":"See Color","name":"color","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDisabled","parent":"DMenuBar","type":"panelfunc","ispanel":true,"description":"Sets whether or not the panel is disabled","realm":"Client","args":{"arg":{"text":"Should be disabled or not","name":"disable","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDrawBackground","parent":"DMenuBar","type":"panelfunc","ispanel":true,"description":{"text":"Sets whether or not the background should be painted. Is the same as DMenuBar:SetPaintBackground","deprecated":"Use DMenuBar:SetPaintBackground"},"realm":"Client","args":{"arg":{"text":"Should the background be painted","name":"shouldPaint","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetIsMenu","parent":"DMenuBar","type":"panelfunc","ispanel":true,"description":"Sets whether or not the panel is a menu. Used for closing menus when another panel is selected.","realm":"Client","args":{"arg":{"text":"Is this a menu","name":"isMenu","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetPaintBackground","parent":"DMenuBar","type":"panelfunc","ispanel":true,"description":"Sets whether or not the background should be painted. Is the same as DMenuBar:SetDrawBackground","realm":"Client","args":{"arg":{"text":"Should the background be painted","name":"shouldPaint","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddSubMenu","parent":"DMenuOption","type":"panelfunc","ispanel":true,"description":"Creates a sub DMenu and returns it. Has no duplicate call protection.","realm":"Client","rets":{"ret":{"text":"The created DMenu to add options to.","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetChecked","parent":"DMenuOption","type":"panelfunc","ispanel":true,"description":"Returns the checked state of DMenuOption.","realm":"Client","rets":{"ret":{"text":"Are we checked or not","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetIsCheckable","parent":"DMenuOption","type":"panelfunc","ispanel":true,"description":"Returns whether the DMenuOption is a checkbox option or a normal button option.","realm":"Client","rets":{"ret":{"name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnChecked","parent":"DMenuOption","type":"panelfunc","ispanel":true,"description":"Called whenever the DMenuOption's checked state changes.","realm":"Client","args":{"arg":{"text":"The new checked state","name":"checked","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetMenu","parent":"DMenuOption","type":"panelfunc","ispanel":true,"description":"No Description","realm":"Client","rets":{"ret":{"text":"A DMenu","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetChecked","parent":"DMenuOption","type":"panelfunc","ispanel":true,"description":"Sets the checked state of the DMenuOption. Does not invoke DMenuOption:OnChecked.","realm":"Client","args":{"arg":{"name":"checked","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetMenu","parent":"DMenuOption","type":"panelfunc","ispanel":true,"description":"No Description","realm":"Client","args":{"arg":{"name":"pnl","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetIsCheckable","parent":"DMenuOption","type":"panelfunc","ispanel":true,"description":"Sets whether the DMenuOption is a checkbox option or a normal button option.","realm":"Client","args":{"arg":{"name":"checkable","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ToggleCheck","parent":"DMenuOption","type":"panelfunc","ispanel":true,"description":"Toggles the checked state of DMenuOption. Does not respect DMenuOption:GetIsCheckable.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetSubMenu","parent":"DMenuOption","type":"panelfunc","ispanel":true,"description":{"text":"Used internally by DMenuOption:AddSubMenu to create the submenu arrow and assign the created submenu to be opened this this option is hovered.","internal":""},"realm":"Client","args":{"arg":{"name":"menu","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetValueOff","parent":"DMenuOptionCVar","type":"panelfunc","ispanel":true,"description":{"text":"Returns the value of the  when the DMenuOptionCVar is not checked.","page":",console variableConVars"},"realm":"Client","rets":{"ret":{"text":"The value","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetConVar","parent":"DMenuOptionCVar","type":"panelfunc","ispanel":true,"description":{"text":"Returns the  used by the DMenuOptionCVar.","page":",console variableConVars"},"realm":"Client","rets":{"ret":{"text":"The  used","name":"","type":"string","page":",console variableConVars"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetValueOn","parent":"DMenuOptionCVar","type":"panelfunc","ispanel":true,"description":{"text":"Return the value of the  when the DMenuOptionCVar is checked.","page":",console variableConVars"},"realm":"Client","rets":{"ret":{"text":"The value","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetValueOn","parent":"DMenuOptionCVar","type":"panelfunc","ispanel":true,"description":{"text":"Sets the value of the  when the DMenuOptionCVar is checked.","page":",console variableConVars"},"realm":"Client","args":{"arg":{"text":"The value","name":"value","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetConVar","parent":"DMenuOptionCVar","type":"panelfunc","ispanel":true,"description":{"text":"Sets the  to be used by DMenuOptionCVar.","page":",console variableConVars"},"realm":"Client","args":{"arg":{"text":"The  name to set","name":"cvar","type":"string","page":",console variableConVars"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetValueOff","parent":"DMenuOptionCVar","type":"panelfunc","ispanel":true,"description":{"text":"Sets the value of the  when the DMenuOptionCVar is not checked.","page":",console variableConVars"},"realm":"Client","args":{"arg":{"text":"The value","name":"value","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"DrawModel","parent":"DModelPanel","type":"panelfunc","ispanel":true,"description":{"text":"Used by the DModelPanel's paint hook to draw the model and background.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetAnimated","parent":"DModelPanel","type":"panelfunc","ispanel":true,"description":"Returns whether or not the panel entity should be animated when the default DModelPanel:LayoutEntity function is called.","realm":"Client","rets":{"ret":{"text":"True if the panel entity can be animated with Entity:SetSequence directly, false otherwise.","name":"","type":"boolean"}}},"example":{"description":"Prints out the default boolean value for this function.","code":"local mdl = vgui.Create(\"DModelPanel\")\nmdl:SetPos(20, 20)\nmdl:SetSize(200, 200)\nmdl:SetModel(\"models/props_junk/watermelon01.mdl\")\n\nprint(mdl:GetAnimated())","output":"false"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetAmbientLight","parent":"DModelPanel","type":"panelfunc","ispanel":true,"description":"Returns the ambient lighting used on the rendered entity.","realm":"Client","rets":{"ret":{"text":"The color of the ambient lighting.","name":"","type":"table"}}},"example":{"description":"Prints out the default ambient lighting used on models.","code":"local mdl = vgui.Create(\"DModelPanel\")\nmdl:SetPos(20, 20)\nmdl:SetSize(200, 200)\nmdl:SetModel(\"models/props_junk/watermelon01.mdl\")\n\nprint(mdl:GetAmbientLight())","output":"50 50 50 255"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetAnimSpeed","parent":"DModelPanel","type":"panelfunc","ispanel":true,"description":"Returns the animation speed of the panel entity, see DModelPanel:SetAnimSpeed.","realm":"Client","rets":{"ret":{"text":"The animation speed.","name":"","type":"number"}}},"example":{"description":"Prints out the default animation speed.","code":"local mdl = vgui.Create(\"DModelPanel\")\nmdl:SetPos(20, 20)\nmdl:SetSize(200, 200)\nmdl:SetModel(\"models/props_junk/watermelon01.mdl\")\n\nprint(mdl:GetAnimSpeed())","output":"0.5"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetCamPos","parent":"DModelPanel","type":"panelfunc","ispanel":true,"description":"Returns the position of the model viewing camera.","realm":"Client","rets":{"ret":{"text":"The position of the camera.","name":"","type":"Vector"}}},"example":{"description":"Prints out the default camera position.","code":"local mdl = vgui.Create(\"DModelPanel\")\nmdl:SetPos(20, 20)\nmdl:SetSize(200, 200)\nmdl:SetModel(\"models/props_junk/watermelon01.mdl\")\n\nprint(mdl:GetCamPos())","output":"```\n50.000000 50.000000 50.000000\n```"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetColor","parent":"DModelPanel","type":"panelfunc","ispanel":true,"description":"Returns the color of the rendered entity.","realm":"Client","rets":{"ret":{"text":"The color of the entity, see Color.","name":"","type":"table"}}},"example":{"description":"Prints out the default entity color.","code":"local mdl = vgui.Create(\"DModelPanel\")\nmdl:SetPos(20, 20)\nmdl:SetSize(200, 200)\nmdl:SetModel(\"models/props_junk/watermelon01.mdl\")\n\nprint(mdl:GetColor())","output":"```\n255 255 255 255\n```"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetFOV","parent":"DModelPanel","type":"panelfunc","ispanel":true,"description":"Returns the FOV (field of view) the camera is using.","realm":"Client","rets":{"ret":{"text":"The FOV of the camera.","name":"","type":"number"}}},"example":{"description":"Prints out the default camera FOV.","code":"local mdl = vgui.Create(\"DModelPanel\")\nmdl:SetPos(20, 20)\nmdl:SetSize(200, 200)\nmdl:SetModel(\"models/props_junk/watermelon01.mdl\")\n\nprint(mdl:GetFOV())","output":"70"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetEntity","parent":"DModelPanel","type":"panelfunc","ispanel":true,"description":"Returns the entity being rendered by the model panel.","realm":"Client","rets":{"ret":{"text":"The rendered entity (client-side)","name":"","type":"CSEnt"}}},"example":{"description":"Creates an antlion model panel and sets the antlion's skin to 1.","code":"BGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetPos(20, 20)\nBGPanel:SetSize(200, 200)\n\t\nlocal mdl = vgui.Create(\"DModelPanel\", BGPanel)\nmdl:SetSize(200, 200)\nmdl:SetModel(\"models/antlion.mdl\")\nmdl:SetLookAt(Vector(0, 0, 20))\n\nmdl:GetEntity():SetSkin(1)","output":{"image":{"src":"DModelPanel_GetEntity_example1.jpg"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetLookAng","parent":"DModelPanel","type":"panelfunc","ispanel":true,"description":"Returns the angles of the model viewing camera. Is **nil** until changed with DModelPanel:SetLookAng.","realm":"Client","rets":{"ret":{"text":"The angles of the camera.","name":"","type":"Angle"}}},"example":{"description":"Prints out the default camera angles.","code":"local mdl = vgui.Create(\"DModelPanel\")\nmdl:SetPos(20, 20)\nmdl:SetSize(200, 200)\nmdl:SetModel(\"models/props_junk/watermelon01.mdl\")\n\nprint(mdl:GetLookAng())","output":"nil"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetModel","parent":"DModelPanel","type":"panelfunc","ispanel":true,"description":"Gets the model of the rendered entity.","realm":"Client","rets":{"ret":{"text":"The model of the rendered entity.","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"LayoutEntity","parent":"DModelPanel","type":"panelfunc","ispanel":true,"description":{"text":"By default, this function slowly rotates and animates the entity being rendered.\n\nIf you want to change this behavior, you should override it.","internal":""},"realm":"Client","args":{"arg":{"text":"The entity that is being rendered.","name":"entity","type":"Entity"}}},"example":{"description":"Stops the rendered entity from rotating.","code":"local modelPanel = vgui.Create( \"DModelPanel\" )\nmodelPanel:SetPos( 0, 0 )\nmodelPanel:SetSize( 200, 200 )\nmodelPanel:SetModel( \"models/player/kleiner.mdl\" )\n\nfunction modelPanel:LayoutEntity( ent )\n\t-- do nothing\nend"},"realms":["Client"],"type":"Function"},
{"function":{"name":"PostDrawModel","parent":"DModelPanel","type":"panelfunc","ispanel":true,"description":"Called when the entity of the DModelPanel was drawn.\n\nThis is a rendering hook with 3d drawing context.","realm":"Client","args":{"arg":{"text":"The clientside entity of the DModelPanel that has been drawn.","name":"ent","type":"Entity"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetLookAt","parent":"DModelPanel","type":"panelfunc","ispanel":true,"description":"Returns the position the viewing camera is pointing toward.","realm":"Client","rets":{"ret":{"text":"The position the camera is pointing toward.","name":"","type":"Vector"}}},"example":{"description":"Prints out the default camera look-at position.","code":"local mdl = vgui.Create(\"DModelPanel\")\nmdl:SetPos(20, 20)\nmdl:SetSize(200, 200)\nmdl:SetModel(\"models/props_junk/watermelon01.mdl\")\n\nprint(mdl:GetLookAt())","output":"```\n0.000000 0.000000 40.000000\n```"},"realms":["Client"],"type":"Function"},
{"function":{"name":"PreDrawModel","parent":"DModelPanel","type":"panelfunc","ispanel":true,"description":"Called **before** the entity of the DModelPanel is drawn.","realm":"Client","args":{"arg":{"text":"The clientside entity of the DModelPanel that has been drawn.","name":"ent","type":"Entity"}},"rets":{"ret":{"text":"Return false to stop the entity from being drawn. This will also cause DModelPanel:PostDrawModel to stop being called.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"RunAnimation","parent":"DModelPanel","type":"panelfunc","ispanel":true,"description":"This function is used in the **DModelPanel:LayoutEntity**. It will set the active model to the last set animation using Entity:SetSequence. By default, it is the walking animation.","realm":"Client"},"example":{"description":"Sets the model to alyx and puts her in a walking animation","code":"local ModelPanel = vgui.Create( \"DModelPanel\", Panel )\nModelPanel:SetModel( \"models/player/alyx.mdl\" )\nfunction ModelPanel:LayoutEntity( ent )\n     ModelPanel:RunAnimation()\nend"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetAmbientLight","parent":"DModelPanel","type":"panelfunc","ispanel":true,"description":"Sets the ambient lighting used on the rendered entity.","realm":"Client","args":{"arg":{"text":"The color of the ambient lighting.","name":"color","type":"table"}}},"example":{"description":"Displays a model panel with a watermelon that has red ambient lighting.","code":"BGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetPos(20, 20)\nBGPanel:SetSize(200, 200)\n\t\nlocal mdl = vgui.Create(\"DModelPanel\", BGPanel)\nmdl:SetSize(BGPanel:GetSize())\nmdl:SetModel(\"models/props_junk/watermelon01.mdl\")\n\nmdl:SetCamPos(Vector(15, 15, 0))\nmdl:SetLookAt(Vector(0, 0, 0))\n\nmdl:SetAmbientLight(Color(255, 0, 0, 255))","output":{"image":{"src":"DModelPanel_SetAmbientLight_example1.jpg"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetAnimated","parent":"DModelPanel","type":"panelfunc","ispanel":true,"description":"Sets whether or not to animate the entity when the default DModelPanel:LayoutEntity is called.","realm":"Client","args":{"arg":{"text":"True to animate, false otherwise.","name":"animated","type":"boolean"}}},"example":{"description":"A comparison between 2 model panels: the first one has `animated` set to false and the second one has it set to true. Both are using the default DModelPanel:LayoutEntity method.","code":"BGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetPos(20, 20)\nBGPanel:SetSize(400, 200)\n\t\n-- Left panel\nlocal mdl1 = vgui.Create(\"DModelPanel\", BGPanel)\nmdl1:SetPos(0, 0)\nmdl1:SetSize(200, 200)\nmdl1:SetModel(\"models/player/mossman.mdl\")\nmdl1:SetCamPos(Vector(40, 40, 40))\n\nmdl1:SetAnimated(false)\n\n-- Right panel\nlocal mdl2 = vgui.Create(\"DModelPanel\", BGPanel)\nmdl2:SetPos(200, 0)\nmdl2:SetSize(200, 200)\nmdl2:SetModel(\"models/player/mossman.mdl\")\nmdl2:SetCamPos(Vector(40, 40, 40))\n\nmdl2:SetAnimated(true)\n\n-- Dance sequence\t\nlocal dance = mdl1:GetEntity():LookupSequence(\"taunt_dance\")\n\n-- Make both dance\nmdl1:GetEntity():SetSequence(dance)\nmdl2:GetEntity():SetSequence(dance)","output":{"image":{"src":"DModelPanel_SetAnimated_example1.jpg"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetAnimSpeed","parent":"DModelPanel","type":"panelfunc","ispanel":true,"description":{"text":"Sets the speed used by DModelPanel:RunAnimation to advance frame on an entity sequence.","note":"Entity:FrameAdvance doesn't seem to have any functioning arguments and therefore changing this will not have any affect on the panel entity's sequence speed without reimplementation. It only affects the value returned by DModelPanel:GetAnimSpeed"},"realm":"Client","args":{"arg":{"text":"The animation speed.","name":"animSpeed","type":"number"}}},"example":{"description":"A reimplementation of DModelPanel:LayoutEntity which will modify the entity's sequence playback rate based on the set animation speed. This example has Alyx run twice as fast as normal.","code":"local mdl = vgui.Create(\"DModelPanel\")\nmdl:SetPos(20, 20)\nmdl:SetSize(200, 200)\nmdl:SetModel(\"models/alyx.mdl\")\n\n-- Play sequence twice as fast\nmdl:SetAnimSpeed(2)\n\t\n-- Make Alyx run\nmdl:GetEntity():SetSequence(mdl:GetEntity():LookupSequence(\"run_all\"))\n\n-- Play animation\nfunction mdl:LayoutEntity(ent)\n\n\t-- Playback rate based on anim speed\n\tent:SetPlaybackRate(self:GetAnimSpeed())\n\t\n\t-- Advance frame\n\tent:FrameAdvance()\n\nend"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetCamPos","parent":"DModelPanel","type":"panelfunc","ispanel":true,"description":"Sets the position of the camera.","realm":"Client","args":{"arg":{"text":"The position to set the camera at.","name":"pos","type":"Vector"}}},"example":[{"description":"Creates a model panel focused on Gman's face while he adjusts his tie.","code":"BGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetPos(20, 20)\nBGPanel:SetSize(200, 200)\nBGPanel:SetBackgroundColor(Color(0, 0, 0, 255))\n\t\nlocal mdl = vgui.Create(\"DModelPanel\", BGPanel)\nmdl:SetSize(BGPanel:GetSize())\nmdl:SetModel(\"models/player/gman_high.mdl\")\n\nfunction mdl:LayoutEntity(ent)\n\tent:SetSequence(ent:LookupSequence(\"menu_gman\"))\n\tmdl:RunAnimation()\t\t\n\treturn\nend\n\nlocal eyepos = mdl.Entity:GetBonePosition(mdl.Entity:LookupBone(\"ValveBiped.Bip01_Head1\"))\n\neyepos:Add(Vector(0, 0, 2))\t-- Move up slightly\n\nmdl:SetLookAt(eyepos)\n\nmdl:SetCamPos(eyepos-Vector(-12, 0, 0))\t-- Move cam in front of eyes\n\nmdl.Entity:SetEyeTarget(eyepos-Vector(-12, 0, 0))","output":{"image":{"src":"DModelPanel_SetCamPos_example1.jpg"}}},{"description":"Sets a model panel's camera position so the model won't go outside it","code":"local mdlpnl = vgui.Create( \"DModelPanel\" )\n\nlocal mn, mx = mdlpnl.Entity:GetRenderBounds()\nlocal size = 0\nsize = math.max( size, math.abs(mn.x) + math.abs(mx.x) )\nsize = math.max( size, math.abs(mn.y) + math.abs(mx.y) )\nsize = math.max( size, math.abs(mn.z) + math.abs(mx.z) )\n\nmdlpnl:SetFOV( 45 )\nmdlpnl:SetCamPos( Vector( size, size, size ) )\nmdlpnl:SetLookAt( (mn + mx) * 0.5 )"}],"realms":["Client"],"type":"Function"},
{"function":{"name":"SetColor","parent":"DModelPanel","type":"panelfunc","ispanel":true,"description":{"text":"Sets the color of the rendered entity.","note":"This does not work on Garry's Mod player models since they use a different color system. To modify a player model color, see Example 2 on the DModelPanel page"},"realm":"Client","args":{"arg":{"text":"The render color of the entity.","name":"color","type":"table"}}},"example":{"description":"Creates a model panel with a red watermelon inside.","code":"local panel = vgui.Create(\"DPanel\")\npanel:SetPos(20, 20)\npanel:SetSize(200, 200)\n\t\nlocal mdl = vgui.Create(\"DModelPanel\", panel)\nmdl:SetSize(panel:GetSize())\nmdl:SetModel(\"models/props_junk/watermelon01.mdl\")\nmdl:SetLookAt(Vector(0, 0, 0))\nmdl:SetCamPos(Vector(10, 10, 10))\nmdl:SetColor(Color(255, 0, 0))","output":{"image":{"src":"DModelPanel_SetColor_example1.jpg"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetEntity","parent":"DModelPanel","type":"panelfunc","ispanel":true,"description":{"text":"Sets the entity to be rendered by the model panel.","note":"If you set `ent` to a shared entity you must set `ent` to nil before removing this panel or else a \"Trying to remove server entity on client!\" error is thrown"},"realm":"Client","args":{"arg":{"text":"The new panel entity.","name":"ent","type":"Entity"}}},"example":{"description":"Implementation of a function called **StartBreencast** which makes Dr. Breen recite his instinct speech within a model panel that's displayed to all clients. This mainly demonstrates how even shared entities such as NPCs can be used with DModelPanel as long as they're networked properly.","code":"g_Breen = nil\t-- Breen NPC\n\nif(SERVER) then\n\t-- Broadcast propaganda to clients\n\tutil.AddNetworkString(\"BreencastSentence\")\nend\n\n-- Broadcast Breen to clients each time he starts a new sentence.\nfunction GM:EntityEmitSound(data)\n\n\tif(data.Entity == g_Breen) then\n\t\n\t\tlocal st, en = string.find(data.SoundName, \"vo/\")\n\t\tlocal sentence = \"sound/\"..string.sub(data.SoundName, st)\t-- Properly format sound name\n\t\n\t\tnet.Start(\"BreencastSentence\")\n\t\t\tnet.WriteEntity(data.Entity)\n\t\t\tnet.WriteString(sentence)\n\t\tnet.Broadcast()\n\t\t\n\tend\n\t\n\treturn nil\n\t\nend\n\nif(CLIENT) then\n\n\t-- Receive latest breencast sound byte and update screen\n\tfunction BreencastSentence()\n\t\n\t\t-- Client-side reference to Breen NPC\n\t\tg_Breen = net.ReadEntity()\n\t\t\n\t\tlocal soundname = net.ReadString()\n\t\t\n\t\t-- Play sound byte\n\t\tsound.PlayFile(soundname, \"\", function(sentence, errnum, err)\n\t\t\n\t\t\tif(err) then\n\t\t\t\tError(err)\n\t\t\telse\n\t\t\t\tsentence:Play()\n\t\t\t\tStartBreencast()\t-- Update breencast monitor\n\t\t\tend\n\t\t\n\t\tend)\n\t\n\tend\n\t\n\tnet.Receive(\"BreencastSentence\", BreencastSentence)\n\t\nend\n\n-- Call this server-side to begin Breencast\nfunction StartBreencast()\n\n\tif(SERVER) then\n\n\t\t-- Remove existing Breen NPC\n\t\tif(g_Breen && IsValid(g_Breen)) then\n\t\t\tg_Breen:Remove()\n\t\tend\n\n\t\t-- Create new Breen NPC\n\t\tg_Breen = ents.Create(\"npc_breen\")\n\t\tg_Breen:Spawn()\n\t\t\n\t\t-- Hide NPC everywhere except inside model panel\n\t\tg_Breen:SetSaveValue(\"m_takedamage\", 0)\n\t\tg_Breen:SetMoveType(MOVETYPE_NONE)\n\t\tg_Breen:SetSolid(SOLID_NONE)\n\t\tg_Breen:SetRenderMode(RENDERMODE_TRANSALPHA)\n\t\tg_Breen:SetColor(Color(255, 255, 255, 0))\n\t\t\n\t\t-- Play propaganda\t\t\n\t\tg_Breen:PlayScene(\"scenes/breencast/instinct_tv.vcd\")\n\t\tg_Breen:SetEyeTarget(Vector(100, 0, 60))\n\n\telseif(CLIENT) then\n\n\t\t-- Remove existing panel and clear model entity to prevent error\n\t\tif(BGPanel) then\n\t\t\tif(BGPanel:GetChild(0)) then BGPanel:GetChild(0):SetEntity(nil) end\n\t\t\tBGPanel:Remove()\n\t\t\tBGPanel = nil\t\t\t\n\t\tend\n\t\t\n\t\t-- Don't continue if Breen is undefined\n\t\tif(!g_Breen or !IsValid(g_Breen)) then return end\n\t\t\n\t\t-- Black background panel\n\t\tBGPanel = vgui.Create(\"DPanel\")\n\t\tBGPanel:SetPos(20, 20)\n\t\tBGPanel:SetSize(200, 200)\n\t\tBGPanel:SetBackgroundColor(Color(0, 0, 0, 255))\n\t\t\n\t\t-- Model panel\n\t\tlocal mdl = vgui.Create(\"DModelPanel\", BGPanel)\n\t\tmdl:SetSize(BGPanel:GetSize())\n\t\tmdl:SetFOV(40)\t-- Default FOV is too jarring\n\t\t\n\t\tmdl:SetEntity(g_Breen)\t-- Add Breen NPC to model panel\n\t\t\n\t\t-- Focus camera on Breen's head\n\t\tfunction mdl:LayoutEntity(ent)\n\t\t\n\t\t\t-- If Breen has been removed somehow then remove screen\n\t\t\tif(!IsValid(ent)) then\n\t\t\t\tif(mdl:GetParent()) then mdl:GetParent():Remove() end\n\t\t\t\treturn\n\t\t\tend\n\t\t\n\t\t\tlocal eyepos = ent:GetBonePosition(ent:LookupBone(\"ValveBiped.Bip01_Head1\"))\n\t\t\n\t\t\tmdl:SetLookAt(eyepos)\n\t\t\tmdl:SetCamPos(eyepos+Vector(35, 0, -4))\n\t\t\t\n\t\t\treturn\n\t\t\t\n\t\tend\n\t\t\n\tend\n\t\nend","output":{"text":"\"I find it helpful at times like these to remind myself that our true enemy is: Instinct.\"","image":{"src":"Breencast_example.jpg"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetFOV","parent":"DModelPanel","type":"panelfunc","ispanel":true,"description":"Sets the panel camera's FOV (field of view).","realm":"Client","args":{"arg":{"text":"The field of view value.","name":"fov","type":"number"}}},"example":{"description":"The best FOV demo you've ever seen.","code":"BGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetPos(20, 20)\nBGPanel:SetSize(200, 200)\n\t\nlocal mdl = vgui.Create(\"DModelPanel\", BGPanel)\nmdl:Dock(FILL)\nmdl:SetModel(\"models/player/barney.mdl\")\n\nlocal fov = 10\t-- starting value\nlocal offset = 0.1\t-- amount to increment by\n\nfunction mdl:LayoutEntity(ent)\n\t\n\tmdl:SetFOV(fov)\t-- update FOV\n\t\n\tfov = fov + offset\t-- increment\n\t\n\tif(fov >= 120 or fov <= 10) then\n\t\toffset = offset*-1\t-- inverse increment amount\n\tend\n\t\n\tent:SetSequence(ent:LookupSequence(\"taunt_muscle\"))\t-- FLEX\n\tif(ent:GetCycle() >= 0.95) then ent:SetCycle(0.05) end\t-- YOUR\n\tmdl:RunAnimation()\t-- MUSCLES\n\t\nend","output":{"image":{"src":"DModelPanel_SetFOV_example1.jpg"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDirectionalLight","parent":"DModelPanel","type":"panelfunc","ispanel":true,"description":"Sets the directional lighting used on the rendered entity.","realm":"Client","args":{"arg":[{"text":"The light direction, see Enums/BOX.","name":"direction","type":"number"},{"text":"The color of the directional lighting.","name":"color","type":"table"}]}},"example":{"description":"Displays a model panel with no directional lighting. Dr. Kleiner is only lit by the ambient light set by DModelPanel:SetAmbientLight.","code":"-- Black background panel\nBGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetPos(20, 20)\nBGPanel:SetSize(400, 400)\nBGPanel:SetBackgroundColor(Color(0, 0, 0, 255))\n\nlocal mdl = vgui.Create(\"DModelPanel\", BGPanel)\nmdl:SetSize(BGPanel:GetSize())\n\t\n-- Setup model and camera\nmdl:SetModel(\"models/kleiner.mdl\")\nmdl:SetCamPos(Vector(20, 20, 60))\nmdl:SetLookAt(Vector(0, 0, 60))\n\n-- Make Kleiner pace\nmdl:GetEntity():SetSequence(mdl:GetEntity():LookupSequence(\"pace_all\"))\n\n-- Disable directional lighting\nmdl:SetDirectionalLight(BOX_TOP, Color(0, 0, 0))\nmdl:SetDirectionalLight(BOX_FRONT, Color(0, 0, 0))\n\n-- Spin around faster and play animation\nfunction mdl:LayoutEntity(ent)\n\tent:SetAngles(Angle( 0, self.LastPaint*60,  0))\n\tself:RunAnimation()\nend","output":{"image":{"src":"DModelPanel_SetDirectionalLight_example1.jpg"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetLookAng","parent":"DModelPanel","type":"panelfunc","ispanel":true,"description":"Sets the angles of the camera.","realm":"Client","args":{"arg":{"text":"The angles to set the camera to.","name":"ang","type":"Angle"}}},"example":{"description":"Creates a model panel with Eli rotating normally and the camera angles rotating sideways.","code":"BGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetPos(20, 20)\nBGPanel:SetSize(400, 400)\nBGPanel:SetBackgroundColor(Color(0, 0, 0, 255))\n\nlocal mdl = vgui.Create(\"DModelPanel\", BGPanel)\nmdl:SetSize(BGPanel:GetSize())\nmdl:SetModel(\"models/eli.mdl\")\n\n-- Position camera\nmdl:SetCamPos(Vector(0, 60, 36))\n\nlocal yaw = 0\n\nfunction mdl:LayoutEntity(ent)\n\n\t-- Point camera toward the look pos\n\tlocal lookAng = (self.vLookatPos-self.vCamPos):Angle()\n\t\n\t-- Rotate the look angles based on incrementing yaw value\n\tlookAng:RotateAroundAxis(Vector(0, 1, 0), yaw)\n\t\n\t-- Set camera look angles\n\tself:SetLookAng(lookAng)\n\t\n\t-- Make entity rotate like normal\n\tent:SetAngles(Angle(0, RealTime()*30,  0))\n\t\n\tyaw = yaw + 1\n\nend","output":{"image":{"src":"DModelPanel_SetLookAng_example1.gif"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetModel","parent":"DModelPanel","type":"panelfunc","ispanel":true,"description":{"text":"Sets the model of the rendered entity.","note":"This function may give a different model than expected. This is not a bug, however this problem may appear with some player models which are renamed several times in a wrong way. To solve that, you can use Entity:SetModel and Entity:SetModelName on the internal panel entity. More information : https://github.com/Facepunch/garrysmod-issues/issues/4534."},"realm":"Client","args":{"arg":{"text":"The model to apply to the entity.","name":"model","type":"string"}}},"example":{"description":"Creates a new DModelPanel with the Kleiner playermodel.","code":"local modelPanel = vgui.Create( \"DModelPanel\" )\nmodelPanel:SetPos( 0, 0 )\nmodelPanel:SetSize( 200, 200 )\nmodelPanel:SetModel( \"models/player/kleiner.mdl\" )","output":{"upload":{"src":"22674/8d8e01367a4ebd3.png","size":"88682","name":"image.png"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetHeight","parent":"DModelSelect","type":"panelfunc","ispanel":true,"description":"Sets the height of the panel **in the amount of 64px spawnicons**.\n\nOverrides Panel:SetHeight.","realm":"Client","args":{"arg":{"text":"Basically how many rows of 64x64 px spawnicons should fit in this DModelSelect","name":"num","type":"number","default":"2"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetLookAt","parent":"DModelPanel","type":"panelfunc","ispanel":true,"description":"Makes the panel's camera face the given position.","realm":"Client","args":{"arg":{"text":"The position to orient the camera toward.","name":"pos","type":"Vector"}}},"example":{"description":"Creates a model panel focused on Colonel Odessa Cubbage's face.","code":"BGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetPos(20, 20)\nBGPanel:SetSize(200, 200)\t\t\n\t\nlocal mdl = vgui.Create(\"DModelPanel\", BGPanel)\nmdl:SetSize(BGPanel:GetSize())\nmdl:SetModel(\"models/player/odessa.mdl\")\n\nfunction mdl:LayoutEntity( Entity ) return end\t-- Disable cam rotation\n\nlocal headpos = mdl.Entity:GetBonePosition(mdl.Entity:LookupBone(\"ValveBiped.Bip01_Head1\"))\nmdl:SetLookAt(headpos)\n\nmdl:SetCamPos(headpos-Vector(-15, 0, 0))\t-- Move cam in front of face\n\n--mdl.Entity:SetEyeTarget(headpos-Vector(-15, 0, 0))\n-- Makes Odessa look at the camera\n-- Commented out because the result is funnier without this","output":{"image":{"src":"DModelPanel_SetLookAt_example1.jpg"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"StartScene","parent":"DModelPanel","type":"panelfunc","ispanel":true,"description":"No Description","realm":"Client","args":{"arg":{"text":"The path to the scene file. (.vcd)","name":"path","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddItem","parent":"DNotify","type":"panelfunc","ispanel":true,"description":"Adds a panel to the notification","realm":"Client","args":{"arg":[{"text":"The panel to add","name":"pnl","type":"Panel"},{"text":"If set, overrides DNotify:SetLife.","name":"lifeLength","type":"number","default":"nil"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetModelList","parent":"DModelSelect","type":"panelfunc","ispanel":true,"description":"Called to set the list of models within the panel element.","realm":"Client","args":{"arg":[{"text":"Each key is a model path, the value is a kay-value table where they key is a convar name and value is the value to set to that convar.","name":"models","type":"table"},{"name":"convar","type":"string"},{"name":"dontSort","type":"boolean"},{"name":"DontCallListConVars","type":"boolean"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetItems","parent":"DNotify","type":"panelfunc","ispanel":true,"description":"Returns all the items added with DNotify:AddItem.","realm":"Client","rets":{"ret":{"text":"A table of Panels.","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetAlignment","parent":"DNotify","type":"panelfunc","ispanel":true,"description":"Returns the current alignment of this notification panel. Set by DNotify:SetAlignment.","realm":"Client","rets":{"ret":{"text":"The numpad alignment","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetLife","parent":"DNotify","type":"panelfunc","ispanel":true,"description":"Returns the display time in seconds of the DNotify. This is set with \nDNotify:SetLife.","realm":"Client","rets":{"ret":{"text":"The display time in seconds.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetAlignment","parent":"DNotify","type":"panelfunc","ispanel":true,"description":"Sets the alignment of the child panels in the notification","realm":"Client","args":{"arg":{"text":"It's the Numpad alignment, 6 is right, 9 is top left, etc.","name":"alignment","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetSpacing","parent":"DNotify","type":"panelfunc","ispanel":true,"description":"Sets the spacing between child elements of the notification panel.","realm":"Client","args":{"arg":{"name":"spacing","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetLife","parent":"DNotify","type":"panelfunc","ispanel":true,"description":"Sets the display time in seconds for the DNotify.","realm":"Client","args":{"arg":{"text":"The time in seconds.","name":"time","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetSpacing","parent":"DNotify","type":"panelfunc","ispanel":true,"description":"Returns the spacing between items set by DNotify:SetSpacing.","realm":"Client","rets":{"ret":{"name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Shuffle","parent":"DNotify","type":"panelfunc","ispanel":true,"description":{"internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"DrawScreen","parent":"DNumberScratch","type":"panelfunc","ispanel":true,"description":{"text":"Used by DNumberScratch:PaintScratchWindow.","internal":""},"realm":"Client","args":{"arg":[{"name":"x","type":"number"},{"name":"y","type":"number"},{"name":"w","type":"number"},{"name":"h","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"DrawNotches","parent":"DNumberScratch","type":"panelfunc","ispanel":true,"description":{"text":"Used by DNumberScratch:DrawScreen.","internal":""},"realm":"Client","args":{"arg":[{"name":"level","type":"number"},{"name":"x","type":"number"},{"name":"y","type":"number"},{"name":"w","type":"number"},{"name":"h","type":"number"},{"name":"range","type":"number"},{"name":"value","type":"number"},{"name":"min","type":"number"},{"name":"max","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetDecimals","parent":"DNumberScratch","type":"panelfunc","ispanel":true,"description":"Returns the desired amount of numbers after the decimal point.","realm":"Client","rets":{"ret":{"text":"0 for whole numbers only, 1 for one number after the decimal point, etc.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetActive","parent":"DNumberScratch","type":"panelfunc","ispanel":true,"description":"Returns whether this panel is active or not, i.e. if the player is currently changing its value.","realm":"Client","rets":{"ret":{"name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetFloatValue","parent":"DNumberScratch","type":"panelfunc","ispanel":true,"description":"Returns the real value of the DNumberScratch as a number.\n\nSee also DNumberScratch:GetTextValue and DNumberScratch:GetFraction.","realm":"Client","rets":{"ret":{"text":"The real value of the DNumberScratch","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetMin","parent":"DNumberScratch","type":"panelfunc","ispanel":true,"description":"Returns the minimum value that can be selected on the number scratch","realm":"Client","rets":{"ret":{"text":"The minimum value that can be selected on the number scratch","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetMax","parent":"DNumberScratch","type":"panelfunc","ispanel":true,"description":"Returns the maximum value that can be selected on the number scratch","realm":"Client","rets":{"ret":{"text":"The maximum value that can be selected on the number scratch","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetFraction","parent":"DNumberScratch","type":"panelfunc","ispanel":true,"description":"Returns the value of the DNumberScratch as a fraction, a value between 0 and 1 where 0 is the minimum and 1 is the maximum value of the DNumberScratch.\n\nSee also:\n* DNumberScratch:GetTextValue\n* DNumberScratch:GetFloatValue\n* DNumberScratch:SetFraction","realm":"Client","rets":{"ret":{"text":"A value between 0 and 1","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetRange","parent":"DNumberScratch","type":"panelfunc","ispanel":true,"description":"Returns the range of the DNumberScratch. Basically max value - min value.","realm":"Client","rets":{"ret":{"text":"The range of the DNumberScratch","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetTextValue","parent":"DNumberScratch","type":"panelfunc","ispanel":true,"description":"Returns the real value of the DNumberScratch as a string.\n\nSee also DNumberScratch:GetFloatValue and DNumberScratch:GetFraction.","realm":"Client","rets":{"ret":{"text":"The real value of the DNumberScratch","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetZoom","parent":"DNumberScratch","type":"panelfunc","ispanel":true,"description":"Returns the zoom level of the scratch window","realm":"Client","rets":{"ret":{"name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetShouldDrawScreen","parent":"DNumberScratch","type":"panelfunc","ispanel":true,"description":"Returns whether the scratch window should be visible or not.","realm":"Client","rets":{"ret":{"name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IdealZoom","parent":"DNumberScratch","type":"panelfunc","ispanel":true,"description":"Returns the ideal zoom level for the panel based on the DNumberScratch:GetRange.","realm":"Client","rets":{"ret":{"text":"The ideal zoom level for the panel based on the panels range.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"LockCursor","parent":"DNumberScratch","type":"panelfunc","ispanel":true,"description":{"text":"Used to lock the cursor in place.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsEditing","parent":"DNumberScratch","type":"panelfunc","ispanel":true,"description":"Returns whether the player is currently editing the value of the DNumberScratch.","realm":"Client","rets":{"ret":{"name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnValueChanged","parent":"DNumberScratch","type":"panelfunc","ispanel":true,"description":"Called when the value of the DNumberScratch is changed.","realm":"Client","args":{"arg":{"text":"The new value","name":"newValue","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetActive","parent":"DNumberScratch","type":"panelfunc","ispanel":true,"description":{"text":"Sets whether or not the panel is 'active'.\n\nForcing this panel to be active may not work.","internal":""},"realm":"Client","args":{"arg":{"text":"true to activate, false to deactivate.","name":"active","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDecimals","parent":"DNumberScratch","type":"panelfunc","ispanel":true,"description":"Sets the desired amount of numbers after the decimal point.","realm":"Client","args":{"arg":{"text":"0 for whole numbers only, 1 for one number after the decimal point, etc.","name":"decimals","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"PaintScratchWindow","parent":"DNumberScratch","type":"panelfunc","ispanel":true,"description":{"text":"Used to paint the 'scratch' window.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetFraction","parent":"DNumberScratch","type":"panelfunc","ispanel":true,"description":"Sets the value of the DNumberScratch as a fraction, a value between 0 and 1 where 0 is the minimum and 1 is the maximum value of the DNumberScratch","realm":"Client","args":{"arg":{"text":"A value between 0 and 1","name":"frac","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetFloatValue","parent":"DNumberScratch","type":"panelfunc","ispanel":true,"description":{"text":"Does not trigger DNumberScratch:OnValueChanged\n\nUse DNumberScratch:SetValue instead.","internal":""},"realm":"Client","args":{"arg":{"text":"The value to set","name":"val","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetMax","parent":"DNumberScratch","type":"panelfunc","ispanel":true,"description":"Sets the max value that can be selected on the number scratch","realm":"Client","args":{"arg":{"text":"The maximum number","name":"max","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetMin","parent":"DNumberScratch","type":"panelfunc","ispanel":true,"description":"Sets the minimum value that can be selected on the number scratch.","realm":"Client","args":{"arg":{"text":"The minimum number","name":"min","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetShouldDrawScreen","parent":"DNumberScratch","type":"panelfunc","ispanel":true,"description":{"text":"Sets if the scratch window should be drawn or not. Cannot be used to force it to draw, only to hide it, which will not stop the panel from working with invisible window.","internal":""},"realm":"Client","args":{"arg":{"name":"shouldDraw","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetZoom","parent":"DNumberScratch","type":"panelfunc","ispanel":true,"description":"Sets the zoom level of the scratch panel.","realm":"Client","args":{"arg":{"name":"zoom","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetValue","parent":"DNumberScratch","type":"panelfunc","ispanel":true,"description":"Sets the value of the DNumberScratch and triggers DNumberScratch:OnValueChanged","realm":"Client","args":{"arg":{"text":"The value to set.","name":"val","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"UpdateConVar","parent":"DNumberScratch","type":"panelfunc","ispanel":true,"description":{"text":"Forces the assigned ConVar to be updated to the value of this DNumberScratch","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetDecimals","parent":"DNumberWang","type":"panelfunc","ispanel":true,"description":"Returns the amount of decimal places allowed in the number selector, set by DNumberWang:SetDecimals","realm":"Client","rets":{"ret":{"text":"The amount of decimal places allowed in the number selector.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetFloatValue","parent":"DNumberWang","type":"panelfunc","ispanel":true,"description":{"text":"Returns whatever is set by DNumberWang:SetFloatValue or 0.","deprecated":""},"realm":"Client","rets":{"ret":{"name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetFraction","parent":"DNumberWang","type":"panelfunc","ispanel":true,"description":"Returns a fraction representing the current number selector value to number selector min/max range ratio. If argument `val` is supplied, that number will be computed instead.","realm":"Client","args":{"arg":{"text":"The fraction numerator.","name":"val","type":"number"}}},"example":{"description":"Prints out some fractions based on a number selector with a min/max range of 0 to 255.","code":"local numinput = vgui.Create(\"DNumberWang\")\nnuminput:SetPos(5, 5)\nnuminput:SetSize(90, 20)\n\nnuminput:SetMinMax(0, 255)\n\nnuminput:SetValue(64)\n\nprint(numinput:GetFraction())\t-- Should return ~0.25\nprint(numinput:GetFraction(128))\t-- Should return ~0.5\nprint(numinput:GetFraction(192))\t-- Should return ~0.75\nprint(numinput:GetFraction(255))\t-- Should return 1","output":"```\n0.25098039215686\n0.50196078431373\n0.75294117647059\n1\n```"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetInterval","parent":"DNumberWang","type":"panelfunc","description":"Returns interval at which the up and down buttons change the current value.","realm":"Client","rets":{"ret":{"text":"The current interval.","name":"min","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetMin","parent":"DNumberWang","type":"panelfunc","ispanel":true,"description":"Returns the minimum numeric value allowed by the number selector.","realm":"Client","rets":{"ret":{"text":"The minimum number.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetTextArea","parent":"DNumberWang","type":"panelfunc","ispanel":true,"description":{"text":"This function returns the panel it is used on.","deprecated":""},"realm":"Client","rets":{"ret":{"text":"self","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"HideWang","parent":"DNumberWang","type":"panelfunc","ispanel":true,"description":"Hides the number selector arrows.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetValue","parent":"DNumberWang","type":"panelfunc","ispanel":true,"description":"Returns the numeric value inside the number selector.","realm":"Client","rets":{"ret":{"text":"The numeric value.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetMax","parent":"DNumberWang","type":"panelfunc","ispanel":true,"description":"Returns the maximum numeric value allowed by the number selector.","realm":"Client","rets":{"ret":{"text":"The maximum value.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnValueChanged","parent":"DNumberWang","type":"panelfunc","ispanel":true,"description":"Internal function which is called when the number selector value is changed. This function is empty by default so it needs to be overridden in order to provide functionality.","realm":"Client","args":{"arg":{"text":"The new value of the number selector.","name":"val","type":"number"}}},"example":{"description":"Creates a panel with two number selectors that play a male question sound byte and a female answer sound byte based on the new value of each number selector.","code":"-- Background panel\nBGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetPos(20, 20)\nBGPanel:SetSize(100, 55)\n\n-- Statement label\nlocal lbl1 = vgui.Create(\"DLabel\", BGPanel)\nlbl1:SetPos(5, 5)\nlbl1:SetSize(100, 20)\nlbl1:SetText(\"Statement: \")\nlbl1:SetColor(Color(64, 64, 255))\n\n-- Response label\nlocal lbl2 = vgui.Create(\"DLabel\", BGPanel)\nlbl2:SetPos(5, 30)\nlbl2:SetSize(100, 20)\nlbl2:SetText(\"Response: \")\nlbl2:SetColor(Color(255, 0, 255))\n\n-- Number selector for \"questions\"\nlocal question = vgui.Create(\"DNumberWang\", BGPanel)\nquestion:SetPos(65, 5)\nquestion:SetSize(30, 20)\nquestion:SetMinMax(1, 30)\n\n-- Number selector for answers\nlocal answer = vgui.Create(\"DNumberWang\", BGPanel)\nanswer:SetPos(65, 30)\nanswer:SetSize(30, 20)\nanswer:SetMinMax(1, 40)\n\n-- This is used to prevent overlapping talking\nlocal null = Sound(\"common/null.wav\")\n\n-- Abstraction = cleaner code\nfunction TalkSound(snd)\n\tEmitSound(snd, LocalPlayer():GetPos(), LocalPlayer():EntIndex(), CHAN_VOICE, 1, 80, 0, 100)\nend\n\n-- Play a statement based on new number\nfunction question:OnValueChanged(val)\n\tTalkSound(null)\n\tTalkSound(Sound(\"vo/npc/male01/question\"..string.format(\"%02d\", val)..\".wav\"))\nend\n\n-- Play an answer based on new number\nfunction answer:OnValueChanged(val)\n\tTalkSound(null)\n\tTalkSound(Sound(\"vo/npc/female01/answer\"..string.format(\"%02d\", val)..\".wav\"))\nend"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetFloatValue","parent":"DNumberWang","type":"panelfunc","ispanel":true,"description":{"text":"Appears to do nothing.","deprecated":""},"realm":"Client","args":{"arg":{"name":"val","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetFraction","parent":"DNumberWang","type":"panelfunc","ispanel":true,"description":"Sets the value of the number selector based on the given fraction number.","realm":"Client","args":{"arg":{"text":"The fraction of the number selector's range.","name":"val","type":"number"}}},"example":{"description":"Sets and prints out the value of a quarter, half, and three-fourths of the number selector range.","code":"local numinput = vgui.Create(\"DNumberWang\")\nnuminput:SetPos(5, 5)\nnuminput:SetSize(90, 20)\n\nnuminput:SetMinMax(0, 500)\n\nnuminput:SetFraction(0.25)\nprint(numinput:GetValue())\n\nnuminput:SetFraction(0.5)\nprint(numinput:GetValue())\n\nnuminput:SetFraction(0.75)\nprint(numinput:GetValue())","output":"```\n125\n250\n375\n```"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetMax","parent":"DNumberWang","type":"panelfunc","ispanel":true,"description":"Sets the maximum numeric value allowed by the number selector.","realm":"Client","args":{"arg":{"text":"The maximum value.","name":"max","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetInterval","parent":"DNumberWang","type":"panelfunc","description":"Sets interval at which the up and down buttons change the current value.","realm":"Client","args":{"arg":{"text":"The new interval.","name":"min","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDecimals","parent":"DNumberWang","type":"panelfunc","ispanel":true,"description":"Sets the amount of decimal places allowed in the number selector.","realm":"Client","args":{"arg":{"text":"The amount of decimal places.","name":"num","type":"number"}}},"example":{"description":"Sets the number selector to 3 decimal places and sets the value to a random number between 0 and 1.","code":"local numinput = vgui.Create(\"DNumberWang\")\nnuminput:SetPos(5, 5)\nnuminput:SetSize(90, 20)\nnuminput:SetDecimals(3)\n\nnuminput:SetValue(math.random())","output":{"image":{"src":"DNumberWang_SetDecimals_example1.png"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetMin","parent":"DNumberWang","type":"panelfunc","ispanel":true,"description":"Sets the minimum numeric value allowed by the number selector.","realm":"Client","args":{"arg":{"text":"The minimum value.","name":"min","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetMinMax","parent":"DNumberWang","type":"panelfunc","ispanel":true,"description":"Sets the minimum and maximum value allowed by the number selector.","realm":"Client","args":{"arg":[{"text":"The minimum value.","name":"min","type":"number"},{"text":"The maximum value.","name":"max","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetValue","parent":"DNumberWang","type":"panelfunc","ispanel":true,"description":"Sets the value of the DNumberWang and triggers DNumberWang:OnValueChanged","realm":"Client","args":{"arg":{"text":"The value to set.","name":"val","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetDecimals","parent":"DNumSlider","type":"panelfunc","ispanel":true,"description":"Returns the amount of numbers after the decimal point.","realm":"Client","rets":{"ret":{"text":"0 for whole numbers only, 1 for one number after the decimal point, etc.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetMin","parent":"DNumSlider","type":"panelfunc","ispanel":true,"description":"Returns the minimum value of the slider","realm":"Client","rets":{"ret":{"text":"The minimum value of the slider","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetMax","parent":"DNumSlider","type":"panelfunc","ispanel":true,"description":"Returns the maximum value of the slider","realm":"Client","rets":{"ret":{"text":"The maximum value of the slider","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetRange","parent":"DNumSlider","type":"panelfunc","ispanel":true,"description":"Returns the range of the slider, basically maximum value - minimum value.","realm":"Client","rets":{"ret":{"text":"The range of the slider","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetDefaultValue","parent":"DNumSlider","type":"panelfunc","ispanel":true,"description":"Returns the default value of the slider, if one was set by DNumSlider:SetDefaultValue","realm":"Client","rets":{"ret":{"text":"The default value of the slider","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetValue","parent":"DNumSlider","type":"panelfunc","ispanel":true,"description":"Returns the value of the DNumSlider","realm":"Client","rets":{"ret":{"text":"The value of the slider.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetTextArea","parent":"DNumSlider","type":"panelfunc","ispanel":true,"description":"Returns the DTextEntry component of the slider.","realm":"Client","rets":{"ret":{"text":"The DTextEntry.","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsEditing","parent":"DNumSlider","type":"panelfunc","ispanel":true,"description":"Returns true if either the DTextEntry, the DSlider or the DNumberScratch are being edited.","realm":"Client","rets":{"ret":{"text":"Whether or not the DNumSlider is being edited by the player.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnValueChanged","parent":"DNumSlider","type":"panelfunc","ispanel":true,"description":"Called when the value of the slider is changed, through code or changing the slider.","realm":"Client","file":{"text":"lua/vgui/dnumslider.lua","line":"193-L197"},"args":{"arg":{"text":"The new value of the DNumSlider.","name":"value","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ResetToDefaultValue","parent":"DNumSlider","type":"panelfunc","ispanel":true,"description":"Resets the slider to the default value, if one was set by DNumSlider:SetDefaultValue.\n\nThis function is called by the DNumSlider when user middle mouse clicks on the draggable knob of the slider.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDark","parent":"DNumSlider","type":"panelfunc","ispanel":true,"description":"Calls DLabel:SetDark on the DLabel part of the DNumSlider.","realm":"Client","args":{"arg":{"name":"dark","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetConVar","parent":"DNumSlider","type":"panelfunc","ispanel":true,"description":"Sets the console variable to be updated when the value of the slider is changed.","realm":"Client","args":{"arg":{"text":"The name of the ConVar to be updated.","name":"cvar","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDecimals","parent":"DNumSlider","type":"panelfunc","ispanel":true,"description":{"text":"Sets the desired amount of numbers after the decimal point.","note":["This doesn't affect values passed to DNumSlider:OnValueChanged.","To get right values passed to DNumSlider:OnValueChanged use math.Round."]},"realm":"Client","args":{"arg":{"text":"0 for whole numbers only, 1 for one number after the decimal point, etc.","name":"decimals","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetMax","parent":"DNumSlider","type":"panelfunc","ispanel":true,"description":"Sets the maximum value for the slider.","realm":"Client","args":{"arg":{"text":"The value to set as maximum for the slider.","name":"max","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDefaultValue","parent":"DNumSlider","type":"panelfunc","ispanel":true,"description":"Sets the default value of the slider, to be used by DNumSlider:ResetToDefaultValue or by middle mouse clicking the draggable knob of the slider.","realm":"Client","args":{"arg":{"text":"The new default value of the slider to set","name":"default","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetMin","parent":"DNumSlider","type":"panelfunc","ispanel":true,"description":"Sets the minimum value for the slider","realm":"Client","args":{"arg":{"text":"The value to set as minimum for the slider.","name":"min","type":"number"}}},"example":{"description":"An example usage of the function","code":"--This creates the frame.\nlocal Frame = vgui.Create( \"DFrame\" )\nFrame :Center() -- or Frame:SetPos( x, y )\nFrame:SetSize( 300, 150 )\nFrame:SetTitle( \"Test\" )\nFrame:SetVisible( true )\nFrame:SetDraggable( true )\nFrame:ShowCloseButton( true )\nFrame:MakePopup()\n--Here we create the slider.\nlocal DermaSlider = vgui.Create( \"DNumSlider\", Frame )\nDermaSlider:SetPos( 25, 85 )\nDermaSlider:SetWide( 275 )\nDermaSlider:SetMin( 0 ) -- Or 3 for second image\nDermaSlider:SetMax( 5 )\nDermaSlider:SetValue( 0.5 )\nDermaSlider:SetDecimals( 2 )","output":{"image":[{"src":"DermaSlider_Test.jpeg"},{"src":"DermaSlider_min_3.jpeg"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetMinMax","parent":"DNumSlider","type":"panelfunc","ispanel":true,"description":"Sets the minimum and the maximum value of the slider.","realm":"Client","args":{"arg":[{"text":"The minimum value of the slider.","name":"min","type":"number"},{"text":"The maximum value of the slider.","name":"max","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"TranslateSliderValues","parent":"DNumSlider","type":"panelfunc","ispanel":true,"description":{"internal":""},"realm":"Client","args":{"arg":[{"name":"x","type":"number"},{"name":"y","type":"number"}]},"rets":{"ret":[{"name":"","type":"number"},{"text":"The second passed argument.","name":"","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetValue","parent":"DNumSlider","type":"panelfunc","ispanel":true,"description":"Sets the value of the DNumSlider.","realm":"Client","args":{"arg":{"text":"The value to set.","name":"val","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"UpdateNotches","parent":"DNumSlider","type":"panelfunc","ispanel":true,"description":{"internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"ValueChanged","parent":"DNumSlider","type":"panelfunc","ispanel":true,"description":{"text":"Called when the value has been changed. This will also be called when the user manually changes the value through the text panel.\n\nThis is an internal function. Override DNumSlider:OnValueChanged instead.","internal":""},"realm":"Client","args":{"arg":{"text":"The value the slider has been changed to.","name":"value","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetDisabled","parent":"DPanel","type":"panelfunc","ispanel":true,"description":"Returns whether or not the panel is disabled.","realm":"Client","rets":{"ret":{"text":"True if the panel is disabled (mouse input disabled and background alpha set to 75), false if its enabled (mouse input enabled and background alpha set to 255).","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetPaintBackground","parent":"DPanel","type":"panelfunc","ispanel":true,"description":"Returns whether or not the panel background is being drawn.","realm":"Client","rets":{"ret":{"text":"True if the panel background is drawn, false otherwise.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetDrawBackground","parent":"DPanel","type":"panelfunc","ispanel":true,"description":{"text":"Returns whether or not the panel background is being drawn. Alias of DPanel:GetPaintBackground.","deprecated":"You should use DPanel:GetPaintBackground instead."},"realm":"Client","rets":{"ret":{"text":"True if the panel background is drawn, false otherwise.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetBackgroundColor","parent":"DPanel","type":"panelfunc","ispanel":true,"description":"Sets the background color of the panel.","realm":"Client","args":{"arg":{"text":"The background color.","name":"color","type":"table"}}},"example":{"description":"Creates two empty panels with their background colors set to red and blue team colors.","code":"COLOR_TEAM_RED = Color(255, 64, 64, 255)\nCOLOR_TEAM_BLUE = Color(153, 204, 255, 255)\n\nBGPanel1 = vgui.Create(\"DPanel\")\nBGPanel1:SetPos(20, 20)\nBGPanel1:SetSize(200, 200)\nBGPanel1:SetBackgroundColor(COLOR_TEAM_RED)\n\t\t\nBGPanel2 = vgui.Create(\"DPanel\")\nBGPanel2:SetPos(220, 20)\nBGPanel2:SetSize(200, 200)\nBGPanel2:SetBackgroundColor(COLOR_TEAM_BLUE)","output":{"image":{"src":"DPanel_SetBackgroundColor_example1.png"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetBackgroundColor","parent":"DPanel","type":"panelfunc","ispanel":true,"description":{"text":"Returns the panel's background color.","note":"By default this returns **nil** even though the default background color is white"},"realm":"Client","rets":{"ret":{"text":"Color of the panel's background.","name":"","type":"table"}}},"example":{"description":"Prints out the default panel background color.","code":"BGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetPos(20, 20)\nBGPanel:SetSize(200, 200)\n\nprint(BGPanel:GetBackgroundColor())","output":"nil"},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddItem","parent":"DPanelList","type":"panelfunc","ispanel":true,"description":"Adds a existing panel to the end of DPanelList.","realm":"Client","args":{"arg":[{"text":"Panel to be used as element of list","name":"pnl","type":"Panel"},{"text":"If set to \"ownline\", the item will take its own entire line.","name":"state","type":"string","default":"nil"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetPaintBackground","parent":"DPanel","type":"panelfunc","ispanel":true,"description":"Sets whether or not to paint/draw the panel background.","realm":"Client","args":{"arg":{"text":"True to show the panel's background, false to hide it.","name":"paint","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDrawBackground","parent":"DPanel","type":"panelfunc","ispanel":true,"description":{"text":"Sets whether or not to draw the panel background. Alias of DPanel:SetPaintBackground.","deprecated":"You should use DPanel:SetPaintBackground instead."},"realm":"Client","args":{"arg":{"text":"True to show the panel's background, false to hide it.","name":"draw","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDisabled","parent":"DPanel","type":"panelfunc","ispanel":true,"description":"Sets whether or not to disable the panel.","realm":"Client","args":{"arg":{"text":"True to disable the panel (mouse input disabled and background alpha set to 75), false to enable it (mouse input enabled and background alpha set to 255).","name":"disabled","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"CleanList","parent":"DPanelList","type":"panelfunc","ispanel":true,"description":"Removes all items.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetPadding","parent":"DPanelList","type":"panelfunc","ispanel":true,"description":"Returns offset of list items from the panel borders set by DPanelList:SetPadding","realm":"Client","rets":{"ret":{"text":"Offset from panel borders","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"EnableVerticalScrollbar","parent":"DPanelList","type":"panelfunc","ispanel":true,"description":"Enables/creates the vertical scroll bar so that the panel list can be scrolled through.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetItems","parent":"DPanelList","type":"panelfunc","ispanel":true,"description":"Returns all panels has added by DPanelList:AddItem","realm":"Client","rets":{"ret":{"text":"A table of panels used as items of DPanelList.","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetSpacing","parent":"DPanelList","type":"panelfunc","ispanel":true,"description":"Returns distance between list items set by DPanelList:SetSpacing","realm":"Client","rets":{"ret":{"text":"Distance between panels","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"InsertAtTop","parent":"DPanelList","type":"panelfunc","ispanel":true,"description":"","realm":"Client","args":{"arg":[{"text":"The panel to insert","name":"insert","type":"Panel"},{"text":"If set to \"ownline\", no other panels will be placed to the left or right of the panel we are inserting","name":"strLineState","type":"string"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetSpacing","parent":"DPanelList","type":"panelfunc","ispanel":true,"description":"Sets distance between list items","realm":"Client","args":{"arg":{"text":"Distance between panels","name":"Distance","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetPadding","parent":"DPanelList","type":"panelfunc","ispanel":true,"description":"Sets the offset of the lists items from the panel borders","realm":"Client","args":{"arg":{"text":"Offset from panel borders","name":"Offset","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetColor","parent":"DPanelOverlay","type":"panelfunc","ispanel":true,"description":"Returns the border color of the DPanelOverlay set by DPanelOverlay:SetColor.","realm":"Client","rets":{"ret":{"text":"The set color. Uses the Color.","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"PaintDifferentColours","parent":"DPanelOverlay","type":"panelfunc","ispanel":true,"description":{"text":"Used internally by the panel for type 3.","internal":""},"realm":"Client","args":{"arg":[{"name":"cola","type":"table"},{"name":"colb","type":"table"},{"name":"colc","type":"table"},{"name":"cold","type":"table"},{"name":"size","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetType","parent":"DPanelOverlay","type":"panelfunc","ispanel":true,"description":"Returns the type of the DPanelOverlay set by DPanelOverlay:SetType.","realm":"Client","rets":{"ret":{"text":"The set type.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"PaintInnerCorners","parent":"DPanelOverlay","type":"panelfunc","ispanel":true,"description":{"text":"Used internally by the panel for types 1 and 2.","internal":""},"realm":"Client","args":{"arg":{"name":"size","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetColor","parent":"DPanelOverlay","type":"panelfunc","ispanel":true,"description":"Sets the border color of the DPanelOverlay.","realm":"Client","args":{"arg":{"text":"The color to set. Uses the Color.","name":"color","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetType","parent":"DPanelOverlay","type":"panelfunc","ispanel":true,"description":"Sets the type of the DPanelOverlay.","realm":"Client","args":{"arg":{"text":"The type to set.\n\nPossible value are:\n* 1 - 8px corners of given color\n* 2 - 4px corners of given type\n* 3 - 2 top? corners of hardcoded color, 2 other corners of given color","name":"type","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetFraction","parent":"DProgress","type":"panelfunc","ispanel":true,"description":"Sets the fraction of the progress bar. 0 is 0% and 1 is 100%.","realm":"Client","args":{"arg":{"text":"Fraction of the progress bar. Range is 0 to 1 (0% to 100%).","name":"fraction","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetFraction","parent":"DProgress","type":"panelfunc","ispanel":true,"description":"Returns the progress bar's fraction. 0 is 0% and 1 is 100%.","realm":"Client","rets":{"ret":{"text":"Current fraction of the progress bar.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"CreateRow","parent":"DProperties","type":"panelfunc","ispanel":true,"description":"Creates a row in the properties panel.","realm":"Client","args":{"arg":[{"text":"The category to list this row under","name":"category","type":"string"},{"text":"The label of this row","name":"name","type":"string"}]},"rets":{"ret":{"text":"An internal Row panel.","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetCanvas","parent":"DProperties","type":"panelfunc","ispanel":true,"description":"Returns the DScrollPanel all the properties panels are attached to.","realm":"Client","rets":{"ret":{"text":"A DScrollPanel canvas","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetCategory","parent":"DProperties","type":"panelfunc","ispanel":true,"description":{"text":"Returns (or creates) a category of properties.\n\nSee DProperties:CreateRow for adding actual properties.","internal":""},"realm":"Client","args":{"arg":[{"text":"Name of the category","name":"name","type":"string"},{"text":"Create a new category if it doesn't exist.","name":"create","type":"boolean"}]},"rets":{"ret":{"text":"An internal panel.","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddChoice","parent":"DProperty_Combo","type":"panelfunc","ispanel":true,"description":"Add a choice to your combo control.","realm":"Client","args":{"arg":[{"text":"Shown text.","name":"Text","type":"string"},{"text":"Stored Data.","name":"data","type":"any"},{"text":"Select this element?","name":"select","type":"boolean","default":"false"}]}},"example":{"description":"Set the \"I am selected\" option selected.","code":"local choice = DP:CreateRow( \"Choices\", \"Hello world\" )\nchoice:Setup( \"Combo\" )\nchoice:AddChoice( \"I am a choice\", {} )\nchoice:AddChoice( \"I am selected\", 8, true )\nchoice:AddChoice( \"I am not selected\", \"Hello world\" )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"Setup","parent":"DProperty_Combo","type":"panelfunc","ispanel":true,"description":"Sets up a combo control.","realm":"Client","args":{"arg":[{"text":"The name of DProperty sub control to add.","name":"prop","type":"string","default":"Combo"},{"text":"Data to use to set up the combo box control.\n\nStructure:\n* string text - The default label for this combo box\n* table values - The values to add to the combo box","name":"data","type":"table","default":"{ text = 'Select...' }"}]}},"example":{"description":"Setup a Combo control with a custom default text and two options.","code":"local Combo = DP:CreateRow( \"Catergory\", \"Hello World\" )\nCombo:Setup( \"Combo\", {\n\ttext = \"Select me!\",\n\tvalues = {\n\t\t[ \"Label 1\" ] = \"data 1\",\n\t\t[ \"Label 2\" ] = 2,\n\t}\n} )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"Setup","parent":"DProperty_VectorColor","type":"panelfunc","ispanel":true,"description":{"text":"Called by a property row to setup a color selection control.","internal":""},"realm":"Client","args":{"arg":[{"name":"prop","type":"string","default":"VectorColor"},{"text":"A table of settings. None of the values are used for this property. See Editable Entities.","name":"settings","type":"table"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetSelected","parent":"DProperty_Combo","type":"panelfunc","ispanel":true,"description":"Set the selected option.","realm":"Client","args":{"arg":{"text":"Id of the choice to be selected.","name":"Id","type":"number"}}},"example":{"description":"Set the second option selected.","code":"local choice = DP:CreateRow( \"Choices\", \"Hello world\" )\nchoice:Setup( \"Combo\" )\nchoice:AddChoice( \"Choice #1\", {} )\nchoice:AddChoice( \"Choice #2\", 8 )\nchoice:AddChoice( \"Choice #3\", \"Hello world\", true )\nchoice:SetSelected( 2 ) -- Even if \"Choice #3\" is selected by default, \"Choice #2\" will be selected."},"realms":["Client"],"type":"Function"},
{"function":{"name":"DataChanged","parent":"DProperty_Combo","type":"panelfunc","ispanel":true,"description":"Called after the user selects a new value.","realm":"Client","args":{"arg":{"text":"The new data that was selected.","name":"data","type":"any"}}},"example":{"description":"Click on the \"Table\" choice.","code":"local choice = DP:CreateRow( \"Choices\", \"Combo #2: Custom default text\" )\nchoice:Setup( \"Combo\", \"Select type...\" )\nchoice:AddChoice( \"Table\", {} )\nchoice:AddChoice( \"Function\", function() end )\nchoice:AddChoice( \"String\", \"Hello world\" )\nchoice.DataChanged = function( self, data )\n\n   print( \"You selected: \", data )\n\nend","output":"```\nYou selected:\ttable: 0x8e05f3b8\n```"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetValue","parent":"DProperty_VectorColor","type":"panelfunc","ispanel":true,"description":"Sets the color value of the property.","realm":"Client","args":{"arg":{"text":"Sets the color to use in a DProperty_VectorColor.","name":"color","type":"Vector"}}},"example":{"description":"Setup a color selection control with a custom default color.","code":"local color = DP:CreateRow( \"Category\", \"Select Color\" )\ncolor:Setup( \"VectorColor\", {} )\ncolor:SetValue( Vector( 0.39, 1, 1 ) )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"CloseTab","parent":"DPropertySheet","type":"panelfunc","ispanel":true,"description":"Removes tab and/or panel from the parent DPropertySheet.","realm":"Client","args":{"arg":[{"text":"The DTab of the sheet from DPropertySheet.\n\nSee DPropertySheet:GetItems.","name":"tab","type":"Panel"},{"text":"Set to true to remove the associated panel object as well.","name":"removePanel","type":"boolean"}]},"rets":{"ret":{"text":"The panel of the tab.","name":"","type":"Panel"}}},"example":{"description":"Example of how you'd create and use this panel and close unnecessary sheets.","code":"local MainFrame = vgui.Create( \"DFrame\" )\nMainFrame:SetSize( 500, 300 )\nMainFrame:Center()\nMainFrame:MakePopup()\n\nlocal MainSheet = vgui.Create( \"DPropertySheet\", MainFrame )\nMainSheet:Dock( FILL )\n\nlocal First_Panel = vgui.Create( \"DPanel\", MainSheet )\nFirst_Panel.Paint = function( self, w, h ) draw.RoundedBox( 4, 0, 0, w, h, Color( 255, 128, 0, self:GetAlpha() ) ) end\nMainSheet:AddSheet( \"Users Page\", First_Panel, \"icon16/user.png\" )\n\nlocal Second_Panel = vgui.Create( \"DPanel\", MainSheet )\nSecond_Panel.Paint = function( self, w, h ) draw.RoundedBox( 4, 0, 0, w, h, Color( 0, 128, 255, self:GetAlpha() ) ) end\nMainSheet:AddSheet( \"Admins Page\", Second_Panel, \"icon16/lightning.png\" )\n\nif LocalPlayer():IsAdmin() then\n\tMainSheet:CloseTab( MainSheet:GetItems()[1].Tab ) --1 is a representation of the first sheet\nelse\n\tMainSheet:CloseTab( MainSheet:GetItems()[2].Tab ) --2 is a representation of the second sheet\nend"},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddSheet","parent":"DPropertySheet","type":"panelfunc","ispanel":true,"description":"Adds a new tab.","realm":"Client","args":{"arg":[{"text":"Name of the tab","name":"name","type":"string"},{"text":"Panel to be used as contents of the tab. This normally should be a DPanel","name":"pnl","type":"Panel"},{"text":"Icon for the tab. This will ideally be a , but any material name can be used.","name":"icon","type":"string","default":"nil","page":",silkiconSilkicons"},{"text":"Should DPropertySheet try to fill itself with given panel horizontally.","name":"noStretchX","type":"boolean","default":"false"},{"text":"Should DPropertySheet try to fill itself with given panel vertically.","name":"noStretchY","type":"boolean","default":"false"},{"text":"Tooltip for the tab when user hovers over it with his cursor","name":"tooltip","type":"string","default":"nil"}]},"rets":{"ret":{"text":"A table containing the following keys:\n* Panel Tab - The created DTab.\n* string Name - Name of the created tab\n* Panel Panel - The contents panel of the tab","name":"","type":"table"}}},"example":{"code":"local frame = vgui.Create(\"DFrame\")\nframe:SetSize( ScrW() / 2, ScrH() / 2 )\nframe:SetTitle( \"Test Frame\" )\nframe:MakePopup()\nframe:Center()\n\nlocal tabs = vgui.Create( \"DPropertySheet\", frame )\ntabs:Dock( FILL )\n\nlocal tab1panel = vgui.Create( \"DPanel\" )\n\nlocal SheetItem = vgui.Create( \"DButton\", tab1panel )\nSheetItem:SetText( \"Suicide\" )\nSheetItem:SetConsoleCommand( \"kill\" )\n \ntabs:AddSheet( \"Tab 1\", tab1panel, \"icon16/user.png\", false, false, \"Description of first tab\")"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetActiveTab","parent":"DPropertySheet","type":"panelfunc","ispanel":true,"description":"Returns the active DTab of this DPropertySheet.","realm":"Client","rets":{"ret":{"text":"The DTab","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"CrossFade","parent":"DPropertySheet","type":"panelfunc","ispanel":true,"description":{"text":"Internal function that handles the cross fade animation when the player switches tabs.","internal":""},"realm":"Client","args":{"arg":[{"name":"anim","type":"table"},{"name":"delta","type":"number"},{"name":"data","type":"table"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetItems","parent":"DPropertySheet","type":"panelfunc","ispanel":true,"description":"Returns a list of all tabs of this DPropertySheet.","realm":"Client","rets":{"ret":{"text":"A table of tables.\nEach table contains 3 key-value pairs:\n\n* string Name - The name of the tab.\n* Panel Tab - The DTab associated with the tab.\n* Panel Panel - The Panel associated with the tab.","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetFadeTime","parent":"DPropertySheet","type":"panelfunc","ispanel":true,"description":"Returns the amount of time (in seconds) it takes to fade between tabs.\n\nSet by DPropertySheet:SetFadeTime","realm":"Client","rets":{"ret":{"text":"The amount of time (in seconds) it takes to fade between tabs.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetPadding","parent":"DPropertySheet","type":"panelfunc","ispanel":true,"description":"Gets the padding from the parent panel to child panels.","realm":"Client","rets":{"ret":{"text":"Padding","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetShowIcons","parent":"DPropertySheet","type":"panelfunc","ispanel":true,"description":{"text":"Returns whatever value was set by DPropertySheet:SetShowIcons.","deprecated":""},"realm":"Client","rets":{"ret":{"name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnActiveTabChanged","parent":"DPropertySheet","type":"panelfunc","ispanel":true,"description":"Called when a player switches the tabs","realm":"Client","args":{"arg":[{"text":"The previously active DTab","name":"old","type":"Panel"},{"text":"The newly active DTab","name":"new","type":"Panel"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetActiveTab","parent":"DPropertySheet","type":"panelfunc","ispanel":true,"description":"Sets the active tab of the DPropertySheet.","realm":"Client","args":{"arg":{"text":"The DTab to set active.\n\nSee DPropertySheet:GetItems","name":"tab","type":"Panel"}}},"example":{"description":"Example of how you'd create and use this panel and set active tab.","code":"local MainFrame = vgui.Create( \"DFrame\" )\nMainFrame:SetSize( 500, 300 )\nMainFrame:Center()\nMainFrame:MakePopup()\n\nlocal MainSheet = vgui.Create( \"DPropertySheet\", MainFrame )\nMainSheet:Dock( FILL )\n\nlocal First_Panel = vgui.Create( \"DPanel\", MainSheet )\nFirst_Panel.Paint = function( self, w, h ) draw.RoundedBox( 4, 0, 0, w, h, Color( 0, 128, 255, self:GetAlpha() ) ) end\nMainSheet:AddSheet( \"test\", First_Panel, \"icon16/cross.png\" )\n\nlocal Second_Panel = vgui.Create( \"DPanel\", MainSheet )\nSecond_Panel.Paint = function( self, w, h ) draw.RoundedBox( 4, 0, 0, w, h, Color( 255, 128, 0, self:GetAlpha() ) ) end\nMainSheet:AddSheet( \"test 2\", Second_Panel, \"icon16/tick.png\" )\n\nMainSheet:SetActiveTab( MainSheet:GetItems()[2].Tab ) --2 is a representation of the second sheet"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetPadding","parent":"DPropertySheet","type":"panelfunc","ispanel":true,"description":"Sets the padding from parent panel to children panel.","realm":"Client","args":{"arg":{"text":"Amount of padding","name":"padding","type":"number","default":"8"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetFadeTime","parent":"DPropertySheet","type":"panelfunc","ispanel":true,"description":"Sets the amount of time (in seconds) it takes to fade between tabs.","realm":"Client","args":{"arg":{"text":"The amount of time it takes (in seconds) to fade between tabs.","name":"time","type":"number","default":"0.1"}}},"example":[{"description":"Sets the fade time to 0.5 seconds (500 milliseconds)","code":"DPropertySheet.SetFadeTime(0.5)"},{"description":"Sets the fade time to 2 seconds (2000 milliseconds)","code":"DPropertySheet.SetFadeTime(2)"}],"realms":["Client"],"type":"Function"},
{"function":{"name":"SetShowIcons","parent":"DPropertySheet","type":"panelfunc","ispanel":true,"description":{"text":"Does nothing.","deprecated":""},"realm":"Client","args":{"arg":{"name":"show","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetupCloseButton","parent":"DPropertySheet","type":"panelfunc","ispanel":true,"description":"Creates a close button on the right side of the DPropertySheet that will run the given callback function when pressed.","realm":"Client","args":{"arg":{"text":"Callback function to be called when the close button is pressed.","name":"func","type":"function"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SizeToContentWidth","parent":"DPropertySheet","type":"panelfunc","ispanel":true,"description":"Sets the width of the DPropertySheet to fit the contents of all of the tabs.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SwitchToName","parent":"DPropertySheet","type":"panelfunc","ispanel":true,"description":"Switches the active tab to a tab with given name.","realm":"Client","args":{"arg":{"text":"Case sensitive name of the tab.","name":"name","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetRGB","parent":"DRGBPicker","type":"panelfunc","ispanel":true,"description":"Returns the color currently set on the color picker.","realm":"Client","rets":{"ret":{"text":"The color set on the color picker, see Color.","name":"","type":"table"}}},"example":{"description":"Prints out the default set color.","code":"local color_picker = vgui.Create(\"DRGBPicker\")\ncolor_picker:SetSize(25, 150)\ncolor_picker:Center()\n\nprint(color_picker:GetRGB())","output":"```\n255 255 255 255\n```"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetPosColor","parent":"DRGBPicker","type":"panelfunc","ispanel":true,"description":{"text":"Returns the color at given position on the internal texture.","internal":""},"realm":"Client","args":{"arg":[{"text":"The X coordinate on the texture to get the color from","name":"x","type":"number"},{"text":"The Y coordinate on the texture to get the color from","name":"y","type":"number"}]},"rets":{"ret":[{"text":"Color","name":"","type":"table"},{"text":"The X-coordinate clamped to the texture's width.","name":"","type":"number"},{"text":"The Y-coordinate clamped to the texture's height.","name":"","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetRGB","parent":"DRGBPicker","type":"panelfunc","ispanel":true,"description":{"text":"Sets the color stored in the color picker.","note":"This function is meant to be called internally and will not update the position of the color picker line or call DRGBPicker:OnChange"},"realm":"Client","args":{"arg":{"text":"The color to set, see Color.","name":"color","type":"table"}}},"example":{"description":"Defines a new function SetColor which will allow proper modification of the color picker directly.","code":"-- Background panel\nBGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetSize(100, 200)\nBGPanel:Center()\n\n-- Color picker\nlocal color_picker = vgui.Create(\"DRGBPicker\", BGPanel)\ncolor_picker:SetSize(30, 150)\ncolor_picker:Center()\n\n-- Custom function that sets color picker position and updates color\nfunction color_picker:SetColor(col)\n\n\t-- Get hue\n\tlocal h = ColorToHSV(col)\n\t\n\t-- Maximize saturation and vibrance\n\tcol = HSVToColor(h, 1, 1)\n\n\t-- Set color var\n\tself:SetRGB(col)\n\t\n\t-- Calculate position of color picker line\n\tlocal _, height = self:GetSize()\n\tself.LastY = height*(1-(h/360))\n\t\n\t-- Register that a change has occured\n\tself:OnChange(self:GetRGB())\n\nend\n\n-- Update background color\nfunction color_picker:OnChange(col)\n\n\tBGPanel:SetBackgroundColor(col)\n\nend\n\n-- Set to random color every second for 10 seconds\ntimer.Create(\"RandomizeColorPicker\", 1, 10, function ()\n\n\tcolor_picker:SetColor(Color(math.random(0, 255), math.random(0, 255), math.random(0, 255), 255))\n\t\nend)","output":{"image":{"src":"DRGBPicker_SetRGB_example1.gif"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnChange","parent":"DRGBPicker","type":"panelfunc","ispanel":true,"description":"Function which is called when the cursor is clicked and/or moved on the color picker. Meant to be overridden.","realm":"Client","args":{"arg":{"text":"The color that is selected on the color picker (Color form).","name":"col","type":"table"}}},"example":{"description":"Creates a color picker which controls the color of a ball image.","code":"-- Frame\nMainFrame = vgui.Create(\"DFrame\")\nMainFrame:SetSize(200, 200)\nMainFrame:Center()\nMainFrame:SetTitle(\"Pick a color\")\n\n-- Image of a ball\nlocal ball_img = vgui.Create(\"DImage\", MainFrame)\nball_img:SetPos(20, 45)\nball_img:SetSize(128, 128)\n\nball_img:SetImage(\"sprites/sent_ball\")\n\n-- Vertical color picker\nlocal color_picker = vgui.Create(\"DRGBPicker\", MainFrame)\ncolor_picker:SetPos(165, 30)\ncolor_picker:SetSize(25, 150)\n\nfunction color_picker:OnChange(col)\n\n\tball_img:SetImageColor(col)\n\t\nend","output":{"image":{"src":"DModelPanel_OnChange_example1.gif"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetCanvas","parent":"DScrollPanel","type":"panelfunc","ispanel":true,"description":"Returns the canvas ( The panel all child panels are parented to ) of the DScrollPanel.","realm":"Client","rets":{"ret":{"text":"The canvas","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddItem","parent":"DScrollPanel","type":"panelfunc","ispanel":true,"description":"Parents the passed panel to the DScrollPanel's canvas.","realm":"Client","args":{"arg":{"text":"The panel to add.","name":"pnl","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Clear","parent":"DScrollPanel","type":"panelfunc","ispanel":true,"description":"Clears the `DScrollPanel`'s canvas, removing all added items.","realm":"Client"},"example":{"description":"Recreation of this function.","code":"local panel = vgui.Create( \"DScrollPanel\" )\npanel:GetCanvas():Clear()","output":"All entries in the DScrollPanel are removed."},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetPadding","parent":"DScrollPanel","type":"panelfunc","ispanel":true,"description":"Gets the DScrollPanels padding","realm":"Client","rets":{"ret":{"text":"DScrollPanels padding","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ScrollToChild","parent":"DScrollPanel","type":"panelfunc","ispanel":true,"description":"Scrolls to the given child","realm":"Client","args":{"arg":{"text":"The panel to scroll to, must be a child of the DScrollPanel.","name":"panel","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetVBar","parent":"DScrollPanel","type":"panelfunc","ispanel":true,"description":"Returns the vertical scroll bar of the panel.","realm":"Client","rets":{"ret":{"text":"The DVScrollBar.","name":"","type":"Panel"}}},"example":{"description":"Example of styling a scrollbar","code":"local DFrame = vgui.Create(\"DFrame\")\nDFrame:SetSize(500, 500)\nDFrame:Center()\nDFrame:MakePopup()\nDFrame:SetTitle(\"Scrollbar Example\")\nfunction DFrame:Paint(w, h)\n\tdraw.RoundedBox(0, 0, 0, w, h, Color(0, 100, 100))\nend\n\nlocal DScrollPanel = vgui.Create(\"DScrollPanel\", DFrame)\nDScrollPanel:SetSize(400, 250)\nDScrollPanel:Center()\n\nlocal sbar = DScrollPanel:GetVBar()\nfunction sbar:Paint(w, h)\n\tdraw.RoundedBox(0, 0, 0, w, h, Color(0, 0, 0, 100))\nend\nfunction sbar.btnUp:Paint(w, h)\n\tdraw.RoundedBox(0, 0, 0, w, h, Color(200, 100, 0))\nend\nfunction sbar.btnDown:Paint(w, h)\n\tdraw.RoundedBox(0, 0, 0, w, h, Color(200, 100, 0))\nend\nfunction sbar.btnGrip:Paint(w, h)\n\tdraw.RoundedBox(0, 0, 0, w, h, Color(100, 200, 0))\nend\n\nlocal str = \"\"\nfor i = 1, 50 do str = str .. \"more space!\\n\" end\n\nlocal DLabel = vgui.Create(\"DLabel\", DScrollPanel)\nDLabel:SetText(str)\nDLabel:Center()\nDLabel:SizeToContents()","output":{"image":{"src":"scrollbar_style_example.png"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"InnerWidth","parent":"DScrollPanel","type":"panelfunc","ispanel":true,"description":"Return the width of the DScrollPanel's canvas.","realm":"Client","rets":{"ret":{"text":"The width of the DScrollPanel's canvas","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Rebuild","parent":"DScrollPanel","type":"panelfunc","ispanel":true,"description":"","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetPadding","parent":"DScrollPanel","type":"panelfunc","ispanel":true,"description":"Sets the DScrollPanel's padding. This function appears to be unused.","realm":"Client","args":{"arg":{"text":"The padding of the DScrollPanel.","name":"padding","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetColor","parent":"DShape","type":"panelfunc","ispanel":true,"description":"Returns the color set to display the shape with.","realm":"Client","rets":{"ret":{"text":"The Color","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetCanvas","parent":"DScrollPanel","type":"panelfunc","ispanel":true,"description":{"text":"Sets the canvas of the DScrollPanel.","internal":""},"realm":"Client","args":{"arg":{"text":"The new canvas","name":"canvas","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetBorderColor","parent":"DShape","type":"panelfunc","ispanel":true,"description":"Returns the current type of shape this panel is set to display.\n\nSee DShape:SetBorderColor.","realm":"Client","rets":{"ret":{"text":"The border color \n\nSee Color","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetType","parent":"DShape","type":"panelfunc","ispanel":true,"description":"Returns the current type of shape this panel is set to display.\n\nSee DShape:SetType.","realm":"Client","rets":{"ret":{"name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetBorderColor","parent":"DShape","type":"panelfunc","ispanel":true,"description":"Sets the border color of the shape.\n\nCurrently does nothing.","realm":"Client","args":{"arg":{"text":"The desired border color.\n\nSee Color","name":"clr","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetColor","parent":"DShape","type":"panelfunc","ispanel":true,"description":"Sets the color to display the shape with.","realm":"Client","args":{"arg":{"text":"The Color","name":"clr","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetType","parent":"DShape","type":"panelfunc","ispanel":true,"description":"Sets the shape to be drawn.","realm":"Client","args":{"arg":{"text":"The render type of the DShape. Only rectangles (`Rect`) work currently. If you don't define a type immediately, the PANEL:Paint method will generate errors until you do.","name":"type","type":"string"}}},"example":{"description":"Creates a DShape and sets the render type.|Code=\nlocal Shape = vgui.Create( \"DShape\" )\nShape:SetType( \"Rect\" )\nShape:SetSize(500,500)\nShape:SetPos(10, 10)"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetDragging","parent":"DSlider","type":"panelfunc","ispanel":true,"description":"Identical to DSlider:IsEditing","realm":"Client","rets":{"ret":{"name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetNotches","parent":"DSlider","type":"panelfunc","ispanel":true,"description":{"text":"Appears to be non functioning, however is still used by panels such as DNumSlider.","deprecated":""},"realm":"Client","rets":{"ret":{"name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetLockX","parent":"DSlider","type":"panelfunc","ispanel":true,"description":"Returns the draggable panel's lock on the X axis.\n\nSee DSlider:SetLockX for more info.","realm":"Client","rets":{"ret":{"name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetLockY","parent":"DSlider","type":"panelfunc","ispanel":true,"description":"Returns the draggable panel's lock on the Y axis.\n\nSee DSlider:SetLockY for more info.","realm":"Client","rets":{"ret":{"name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetNumSlider","parent":"DSlider","type":"panelfunc","ispanel":true,"description":{"text":"Does nothing.","deprecated":""},"realm":"Client","rets":{"ret":{"name":"","type":"any"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetSlideY","parent":"DSlider","type":"panelfunc","ispanel":true,"description":"Returns the target position of the draggable \"knob\" panel of the slider on the Y axis.\n\nSet by DSlider:SetSlideY.","realm":"Client","rets":{"ret":{"text":"The value range seems to be from 0 to 1","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetSlideX","parent":"DSlider","type":"panelfunc","ispanel":true,"description":"Returns the target position of the draggable \"knob\" panel of the slider on the X axis.\n\nSet by DSlider:SetSlideX.","realm":"Client","rets":{"ret":{"text":"The value range seems to be from 0 to 1","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetTrapInside","parent":"DSlider","type":"panelfunc","ispanel":true,"description":{"text":"Appears to be non functioning, however is still used by panels such as DNumSlider.","deprecated":""},"realm":"Client","rets":{"ret":{"name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsEditing","parent":"DSlider","type":"panelfunc","ispanel":true,"description":"Returns true if this element is being edited by the player.","realm":"Client","rets":{"ret":{"name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetBackground","parent":"DSlider","type":"panelfunc","ispanel":true,"description":"Sets the background for the slider.","realm":"Client","args":{"arg":{"text":"Path to the image.","name":"path","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDragging","parent":"DSlider","type":"panelfunc","ispanel":true,"description":{"text":"Sets whether or not the slider is being dragged.","internal":""},"realm":"Client","args":{"arg":{"name":"dragging","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetImage","parent":"DSlider","type":"panelfunc","ispanel":true,"description":{"text":"Does nothing.","deprecated":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetImageColor","parent":"DSlider","type":"panelfunc","ispanel":true,"description":{"text":"Does nothing.","deprecated":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetLockX","parent":"DSlider","type":"panelfunc","ispanel":true,"description":"Sets the lock on the X axis. \n\nFor example the value 0.5 will lock the draggable panel to half the width of the slider's panel.","realm":"Client","args":{"arg":{"text":"Set to nil to reset lock.\n\nThe value range is from 0 to 1.","name":"lockX","type":"number","default":"nil"}}},"example":{"description":"Example of a slider that can be dragged on the X and Y axis.","code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetSize( 500, 300 )\nframe:Center()\nframe:MakePopup()\n\nlocal Slider = vgui.Create( \"DSlider\", frame )\nSlider:SetPos( 50, 50 )\nSlider:SetSize( 100, 100 )\nSlider:SetLockX()\nSlider:SetLockY()"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetLockY","parent":"DSlider","type":"panelfunc","ispanel":true,"description":"Sets the lock on the Y axis. \n\nFor example the value 0.5 will lock the draggable panel to half the height of the slider's panel.","realm":"Client","args":{"arg":{"text":"Set to nil to reset lock.\n\nThe value range is from 0 to 1.","name":"lockY","type":"number","default":"nil"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetNotches","parent":"DSlider","type":"panelfunc","ispanel":true,"description":{"text":"Appears to be non functioning, however is still used by panels such as DNumSlider.","deprecated":""},"realm":"Client","args":{"arg":{"name":"notches","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetNumSlider","parent":"DSlider","type":"panelfunc","ispanel":true,"description":{"text":"Does nothing.","deprecated":""},"realm":"Client","args":{"arg":{"name":"slider","type":"any"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetSlideY","parent":"DSlider","type":"panelfunc","ispanel":true,"description":{"text":"Used to position the draggable panel of the slider on the Y axis.","internal":""},"realm":"Client","args":{"arg":{"text":"The value range seems to be from 0 to 1","name":"y","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetSlideX","parent":"DSlider","type":"panelfunc","ispanel":true,"description":{"text":"Used to position the draggable panel of the slider on the X axis.","internal":""},"realm":"Client","args":{"arg":{"text":"The value range seems to be from 0 to 1","name":"x","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetTrapInside","parent":"DSlider","type":"panelfunc","ispanel":true,"description":{"text":"Appears to be non functioning, however is still used by panels such as DNumSlider.","deprecated":""},"realm":"Client","args":{"arg":{"name":"trap","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetColor","parent":"DSprite","type":"panelfunc","ispanel":true,"description":"Gets the color the sprite is using as a modifier.","realm":"Client","rets":{"ret":{"text":"The Global.Color being used.","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"TranslateValues","parent":"DSlider","type":"panelfunc","ispanel":true,"description":"For override by child panels, such as DNumSlider.","realm":"Client","args":{"arg":[{"name":"x","type":"number"},{"name":"y","type":"number"}]},"rets":{"ret":[{"text":"x","name":"","type":"number"},{"text":"y","name":"","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetHandle","parent":"DSprite","type":"panelfunc","ispanel":true,"description":"No Description","realm":"Client","rets":{"ret":{"name":"","type":"Vector"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetMaterial","parent":"DSprite","type":"panelfunc","ispanel":true,"description":"Gets the material the sprite is using.","realm":"Client","rets":{"ret":{"text":"The material in use.","name":"","type":"IMaterial"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetRotation","parent":"DSprite","type":"panelfunc","ispanel":true,"description":"Gets the 2D rotation angle of the sprite, in the plane of the screen.","realm":"Client","rets":{"ret":{"text":"The anti-clockwise rotation in degrees.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetColor","parent":"DSprite","type":"panelfunc","ispanel":true,"description":"Sets the color modifier for the sprite.","realm":"Client","args":{"arg":{"text":"The Global.Color to use.","name":"color","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetHandle","parent":"DSprite","type":"panelfunc","ispanel":true,"description":"Seems to be an unused feature. Does nothing.","realm":"Client","args":{"arg":{"name":"vec","type":"Vector"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetMaterial","parent":"DSprite","type":"panelfunc","ispanel":true,"description":"Sets the source material for the sprite.","realm":"Client","args":{"arg":{"text":"The material to use. This will ideally be an [UnlitGeneric](https://developer.valvesoftware.com/wiki/UnlitGeneric).","name":"material","type":"IMaterial"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AllowInput","parent":"DTextEntry","type":"panelfunc","ispanel":true,"description":"Called whenever the value of the panel has been updated (whether by user input or otherwise).\n\nIt allows you to determine whether a user can modify the TextEntry's text.\n\nBy default, this only checks whether the panel disallows numeric characters, preventing it from being edited if the value contains any.\n\nThis is actually an engine hook that only works on TextEntry derived elements.","realm":"Client","file":{"text":"lua/vgui/dtextentry.lua","line":"313-L319"},"args":{"arg":{"text":"The last character entered into the panel.","name":"char","type":"string"}},"rets":{"ret":{"text":"Return `true` to prevent the value from changing, `false` to allow it.","name":"","type":"boolean"}}},"example":{"description":"Prevents the user from editing the text entirely.","code":"local TextEntry = vgui.Create( \"DTextEntry\" )\nTextEntry.AllowInput = function( self, stringValue )\n\treturn true\nend","output":"The panel does not allow any alterations."},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetRotation","parent":"DSprite","type":"panelfunc","ispanel":true,"description":"Sets the 2D rotation angle of the sprite, in the plane of the screen.","realm":"Client","args":{"arg":{"text":"The anti-clockwise rotation in degrees.","name":"ang","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"CheckNumeric","parent":"DTextEntry","type":"panelfunc","ispanel":true,"description":"Returns whether a string is numeric or not.\nAlways returns false if the DTextEntry:SetNumeric is set to false.","realm":"Client","args":{"arg":{"text":"The string to check.","name":"strValue","type":"string"}},"rets":{"ret":{"text":"Whether the string is numeric or not.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetCursorColor","parent":"DTextEntry","type":"panelfunc","ispanel":true,"description":"Returns the cursor color of a DTextEntry.","realm":"Client","rets":{"ret":{"text":"The color of the cursor as a Color.","name":"","type":"table"}}},"example":{"code":"local TextEntry = vgui.Create( \"DTextEntry\" )\nTextEntry:SetCursorColor( Color( 255, 0, 0, 255 ))\nPrintTable( TextEntry:GetCursorColor() )","output":"Prints the R, G, B and A of the cursor color."},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetAutoComplete","parent":"DTextEntry","type":"panelfunc","ispanel":true,"description":"Called by the DTextEntry when a list of autocompletion options is requested. Meant to be overridden.","realm":"Client","args":{"arg":{"text":"Player's current input.","name":"inputText","type":"string"}},"rets":{"ret":{"text":"If a table is returned, the values of the table will show up as autocomplete suggestions for the user.","name":"","type":"table"}}},"example":{"description":"Shows a list of players to choose from.","code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetSize( 300, 300 )\nframe:SetTitle( \"Autocompletion Example\" )\nframe:Center()\nframe:MakePopup()\n\nlocal label = vgui.Create( \"DLabel\", frame )\nlabel:SetText( \"Type a player...\" )\nlabel:Dock( TOP )\n\nlocal textentry = vgui.Create( \"DTextEntry\", frame )\ntextentry:Dock( TOP )\nfunction textentry:GetAutoComplete( text )\n    local suggestions = {}\n\n    for _, ply in ipairs( player.GetAll() ) do -- For every player,\n        if string.StartWith( ply:Nick(), text ) then -- if the player's name starts with it...\n            table.insert( suggestions, ply:Nick() ) -- ... insert it into the list.\n        end\n    end\n\n\treturn suggestions\nend","output":{"image":{"src":"autocomplete_example.png"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetEnterAllowed","parent":"DTextEntry","type":"panelfunc","ispanel":true,"description":"Returns whether pressing Enter can cause the panel to lose focus. Note that a multiline DTextEntry cannot be escaped using the Enter key even when this function returns true.","realm":"Client","rets":{"ret":{"text":"Whether pressing the Enter key can cause the panel to lose focus.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetFloat","parent":"DTextEntry","type":"panelfunc","ispanel":true,"description":"Returns the contents of the DTextEntry as a number.","realm":"Client","rets":{"ret":{"text":"Text of the DTextEntry as a float, or nil if it cannot be converted to a number using Global.tonumber.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetPlaceholderColor","parent":"DTextEntry","type":"panelfunc","ispanel":true,"description":"Return current color of panel placeholder","realm":"Client","rets":{"ret":{"text":"Current placeholder color","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetInt","parent":"DTextEntry","type":"panelfunc","ispanel":true,"description":"Similar to DTextEntry:GetFloat, but rounds the value to the nearest integer.","realm":"Client","rets":{"ret":{"text":"Text of the DTextEntry as a round number, or nil if it cannot be converted to a number.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetPlaceholderText","parent":"DTextEntry","type":"panelfunc","description":"Returns the placeholder text set with DTextEntry:SetPlaceholderText.","realm":"Client","rets":{"ret":{"type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetNumeric","parent":"DTextEntry","type":"panelfunc","ispanel":true,"description":"Returns whether only numeric characters (123456789.-) can be entered into the DTextEntry.","realm":"Client","rets":{"ret":{"text":"Whether the DTextEntry is numeric or not.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsMultiline","parent":"DTextEntry","type":"panelfunc","ispanel":true,"description":"Determines whether or not DTextEntry is in multi-line mode. This is set with DTextEntry:SetMultiline.","realm":"Client","rets":{"ret":{"text":"Whether the object is in multi-line mode or not.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetTextColor","parent":"DTextEntry","type":"panelfunc","ispanel":true,"description":"Returns the text color of a DTextEntry.","realm":"Client","rets":{"ret":{"text":"The color of the text as a Color.","name":"","type":"table"}}},"example":{"code":"local TextEntry = vgui.Create( \"DTextEntry\" )\nTextEntry:SetTextColor( Color( 255, 0, 0, 255 ))\nPrintTable( TextEntry:GetTextColor() )","output":"Prints the R, G, B and A of the text color."},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsEditing","parent":"DTextEntry","type":"panelfunc","ispanel":true,"description":"Returns whether this DTextEntry is being edited or not. (i.e. has focus)","realm":"Client","rets":{"ret":{"text":"Whether this DTextEntry is being edited or not","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetUpdateOnType","parent":"DTextEntry","type":"panelfunc","ispanel":true,"description":"Returns whether the DTextEntry is set to run DTextEntry:OnValueChange every time a character is typed or deleted or only when Enter is pressed.","realm":"Client","rets":{"ret":{"name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnChange","parent":"DTextEntry","type":"panelfunc","ispanel":true,"description":"Called internally by DTextEntry:OnTextChanged when the user modifies the text in the DTextEntry.\n\nYou should override this function to define custom behavior when the DTextEntry text changes.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnGetFocus","parent":"DTextEntry","type":"panelfunc","ispanel":true,"description":"Called whenever the DTextEntry gains focus.","realm":"Client"},"example":{"code":"local dTextEntry = vgui.Create(\"DTextEntry\")\ndTextEntry:SetText(\"Enter text here\")\n\n-- Make the text field clear when you click into it.\ndTextEntry.OnGetFocus = function(self)\n    self:SetValue(\"\")\nend","output":"Text entry clears when user clicks it to begin typing"},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnEnter","parent":"DTextEntry","type":"panelfunc","ispanel":true,"description":{"text":"Called whenever enter is pressed on a DTextEntry.","note":"DTextEntry:IsEditing will still return true in this callback!"},"realm":"Client","args":{"arg":{"text":"The current text of the DTextEntry","name":"value","type":"string","added":"2020.06.24"}}},"example":{"code":"local TextEntry = vgui.Create( \"DTextEntry\" )\nTextEntry:SetTextColor( Color( 255, 0, 0, 255 ) )\n\nTextEntry.OnEnter = function()\n    TextEntry:SetTextColor( Color( 0, 0, 255, 255 ) )\nend","output":"Changes the text color when enter is pressed."},"realms":["Client"],"type":"Function"},
{"title":"DTextEntry:OnLoseFocus","function":{"name":"OnLoseFocus","parent":"DTextEntry","type":"panelfunc","ispanel":true,"description":"Called whenever the DTextEntry lose focus.","realm":"Client"},"example":{"code":"local default = \"Brick with bob\"\n\nlocal textentry = vgui.Create( \"DTextEntry\" )\ntextentry:SetText( default )\ntextentry.OnLoseFocus = function( self )\n\tif self:GetValue() == \"\" then\n    \tself:SetValue( default )\n\tend\nend","output":"DTextEntry value reset to default value if the text entered is empty."},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnKeyCode","parent":"DTextEntry","type":"panelfunc","ispanel":true,"description":"Called from DTextEntry's TextEntry:OnKeyCodeTyped override whenever a valid character is typed while the text entry is focused.","realm":"Client","args":{"arg":{"text":"They key code of the key pressed, see Enums/KEY.","name":"keyCode","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnTextChanged","parent":"DTextEntry","type":"panelfunc","ispanel":true,"description":{"text":"Called internally when the text inside the DTextEntry changes.\n\nYou should not override this function. Use DTextEntry:OnValueChange instead.","internal":""},"realm":"Client","args":{"arg":{"text":"Determines whether to remove the autocomplete menu (false) or not (true).","name":"noMenuRemoval","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OpenAutoComplete","parent":"DTextEntry","type":"panelfunc","ispanel":true,"file":{"text":"lua/vgui/dtextentry.lua","line":"213-232"},"description":{"text":"Builds a DMenu for the DTextEntry based on the input table.","internal":"You really should be using DTextEntry:GetAutoComplete instead."},"realm":"Client","args":{"arg":{"text":"Table containing results from DTextEntry:GetAutoComplete.","name":"tab","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnValueChange","parent":"DTextEntry","type":"panelfunc","ispanel":true,"description":"Called internally when the text changes of the DTextEntry are applied. (And set to the attached console variable, if one is given)\n\nSee also DTextEntry:OnChange for a function that is called on every text change, even if the console variable is not updated.\n\nYou should override this function to define custom behavior when the text changes.\n\nThis method is called:\n* When Enter is pressed after typing\n* When DTextEntry:SetValue is used\n* For every key typed - only if DTextEntry:SetUpdateOnType was set to true (default is false)","realm":"Client","args":{"arg":{"text":"The DTextEntry text.","name":"value","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetCursorColor","parent":"DTextEntry","type":"panelfunc","ispanel":true,"description":"Sets the cursor's color in  DTextEntry (the blinking line).","realm":"Client","args":{"arg":{"text":"The color to set the cursor to.","name":"color","type":"table"}}},"example":{"description":"Creates a panel and a DTextEntry, and then sets the cursor color. \n(As seen on https://maurits.tv/data/garrysmod/wiki/wiki.garrysmod.com/index9051.html)","code":"local ParentPanel = vgui.Create(\"DFrame\")\n\tParentPanel:SetSize(ScrW()/7, ScrH()/12)\n\tParentPanel:Center()\n\tParentPanel:SetTitle(\"Cursor Color Test\")\n\tParentPanel:SetDeleteOnClose(true)\n\tParentPanel:MakePopup()\n \nlocal TextEntry = vgui.Create( \"DTextEntry\", ParentPanel )\n\tTextEntry:SetSize(ScrW()/9, ScrH()/30)\n\tTextEntry:SetValue(\"Cursor Color Test \")\n\tTextEntry:SetPos(ParentPanel:GetWide()/2-TextEntry:GetWide()/2,\n\tParentPanel:GetTall()/2-TextEntry:GetTall()/5)\n\tTextEntry:SetEnterAllowed(false)\n \n\t-- Uses Simple RGBA (Red, Green, Blue, Alpha) Colors. --\n\tTextEntry:SetCursorColor(Color(255,0,0,255))\n \n\tTextEntry:RequestFocus()","output":"Makes the text entry's cursor color red."},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetEditable","parent":"DTextEntry","type":"panelfunc","ispanel":true,"description":"Disables Input on a DTextEntry. This differs from DTextEntry:SetDisabled - SetEditable will not affect the appearance of the textbox.","realm":"Client","args":{"arg":{"text":"Whether the DTextEntry should be editable","name":"enabled","type":"boolean"}}},"example":{"code":"local TextEntry = vgui.Create( \"DTextEntry\", frame ) -- create the form as a child of frame\nTextEntry:SetPos( 25, 50 )\nTextEntry:SetSize( 75, 85 )\nTextEntry:SetText( \"Sample String\" )\nTextEntry:SetEditable( false )"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDisabled","parent":"DTextEntry","type":"panelfunc","ispanel":true,"description":{"text":"Disables input on a DTextEntry and greys it out visually. This differs from DTextEntry:SetEditable which doesn't visually change the textbox.","deprecated":"Use Panel:SetEnabled instead."},"realm":"Client","args":{"arg":{"text":"Whether the textbox should be disabled","name":"disabled","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetEnterAllowed","parent":"DTextEntry","type":"panelfunc","ispanel":true,"description":"Sets whether pressing the Enter key will cause the DTextEntry to lose focus or not, provided it is not multiline. This is true by default.","realm":"Client","args":{"arg":{"text":"If set to false, pressing Enter will not cause the panel to lose focus and will never call DTextEntry:OnEnter.","name":"allowEnter","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetFont","parent":"DTextEntry","type":"panelfunc","ispanel":true,"description":"Changes the font of the DTextEntry.","realm":"Client","args":{"arg":{"text":"The name of the font to be changed to.","name":"font","type":"string"}}},"example":{"description":"Restores the original font the the DTextEntry.","code":"local textentry = vgui.Create(\"DTextEntry\")\ntextentry:SetFont(\"DermaDefault\")"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetMultiline","parent":"DTextEntry","type":"panelfunc","ispanel":true,"description":"Enables or disables the multi-line functionality of DTextEntry.","realm":"Client","args":{"arg":{"text":"Whether to enable multiline or not.","name":"multiline","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetNumeric","parent":"DTextEntry","type":"panelfunc","ispanel":true,"description":"Sets whether or not to decline non-numeric characters as input.\n\nNumeric characters are 1234567890.-","realm":"Client","args":{"arg":{"text":"Whether to accept only numeric characters.","name":"numericOnly","type":"boolean"}}},"example":{"code":"local TextEntry = vgui.Create( \"DTextEntry\" )\nTextEntry:SetNumeric(true)","output":"Only allow numeric characters."},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetPlaceholderText","parent":"DTextEntry","type":"panelfunc","description":"Sets the placeholder text that will be shown while the text entry has no user text. The player will not need to delete the placeholder text if they decide to start typing.","realm":"Client","args":{"arg":{"name":"text","type":"string","default":"nil"}}},"example":{"description":"This example shows what the placeholder text looks like","code":"concommand.Add( \"test_textentry\", function(ply)\n\tlocal frame = vgui.Create( \"DFrame\" )\n\tframe:SetSize( 400, 200 )\n\tframe:Center()\n\tframe:MakePopup()\n\n\tlocal TextEntry = vgui.Create( \"DTextEntry\", frame ) -- create the form as a child of frame\n\tTextEntry:Dock( TOP )\n\tTextEntry.OnEnter = function( self )\n\t\tchat.AddText( self:GetValue() )\t-- print the form's text as server text\n\tend\n\n\tlocal TextEntryPH = vgui.Create( \"DTextEntry\", frame ) -- create the form as a child of frame\n\tTextEntryPH:Dock( TOP )\n\tTextEntryPH:DockMargin( 0, 5, 0, 0 )\n\tTextEntryPH:SetPlaceholderText( \"I am a placeholder\" )\n\tTextEntryPH.OnEnter = function( self )\n\t\tchat.AddText( self:GetValue() )\t-- print the form's text as server text\n\tend\nend )","output":{"upload":{"src":"70c/8d88bebe8e67219.png","size":"11372","name":"image.png"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetPlaceholderColor","parent":"DTextEntry","type":"panelfunc","ispanel":true,"description":"Allow you to set placeholder color.","realm":"Client","args":{"arg":{"text":"The color of the placeholder.","name":"color","type":"table","default":"Color(128, 128, 128)"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetTabbingDisabled","parent":"DTextEntry","type":"panelfunc","ispanel":true,"description":{"text":"Sets whether or not the panel accepts tab key.","note":"Disabling tab key prevents the panel from unfocusing by mouse, however, still works for focusing to other keyboard focus."},"realm":"Client","args":{"arg":{"text":"Whether the DTextEntry should ignore tab","name":"enabled","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetTextColor","parent":"DTextEntry","type":"panelfunc","ispanel":true,"description":"Sets the text color of the DTextEntry.","realm":"Client","args":{"arg":{"text":"The text color. Uses the Color.","name":"color","type":"table"}}},"example":{"description":"Changes the text color inside the DTextEntry to the color red.","code":"local Frame = vgui.Create(\"DFrame\")\nFrame:SetSize(200,200)\nFrame:Center()\nFrame:MakePopup()\n\nlocal TextEntry = vgui.Create(\"DTextEntry\", Frame)\nTextEntry:SetSize(180,20)\nTextEntry:SetPos(10,80)\nTextEntry:SetTextColor(Color(255,20,20))\nTextEntry:SetValue(\"Basic Text\")"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetValue","parent":"DTextEntry","type":"panelfunc","ispanel":true,"description":{"text":"Sets the text of the DTextEntry and calls DTextEntry:OnValueChange.","note":"The text of the DTextEntry only changes if it's not currently being typed in. If you would rather set the text regardless, use Panel:SetText."},"realm":"Client","args":{"arg":{"text":"The value to set.","name":"text","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ClearTiles","parent":"DTileLayout","type":"panelfunc","ispanel":true,"description":{"text":"Clears the panel's tile table. Used by DTileLayout:LayoutTiles.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetUpdateOnType","parent":"DTextEntry","type":"panelfunc","ispanel":true,"description":"Sets whether we should fire DTextEntry:OnValueChange every time we type or delete a character or only when Enter is pressed.","realm":"Client","args":{"arg":{"name":"updateOnType","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ConsumeTiles","parent":"DTileLayout","type":"panelfunc","ispanel":true,"description":{"text":"Called to designate a range of tiles as occupied by a panel.","internal":""},"realm":"Client","args":{"arg":[{"text":"The x coordinate of the top-left corner of the panel.","name":"x","type":"number"},{"text":"The y coordinate of the top-left corner of the panel.","name":"y","type":"number"},{"text":"The panel's width.","name":"w","type":"number"},{"text":"The panel's height.","name":"h","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"FindFreeTile","parent":"DTileLayout","type":"panelfunc","ispanel":true,"description":{"text":"Finds the coordinates of the first group of free tiles that fit the given size.","internal":""},"realm":"Client","args":{"arg":[{"text":"The x coordinate to start looking from.","name":"x","type":"number"},{"text":"The y coordinate to start looking from.","name":"y","type":"number"},{"text":"The needed width.","name":"w","type":"number"},{"text":"The needed height.","name":"h","type":"number"}]},"rets":{"ret":[{"text":"The x coordinate of the found available space.","name":"","type":"number"},{"text":"The y coordinate of the found available space.","name":"","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Copy","parent":"DTileLayout","type":"panelfunc","ispanel":true,"description":"Creates and returns an exact copy of the DTileLayout.","realm":"Client","rets":{"ret":{"text":"The created copy.","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"CopyContents","parent":"DTileLayout","type":"panelfunc","ispanel":true,"description":"Creates copies of all the children from the given panel object and parents them to this one.","realm":"Client","args":{"arg":{"text":"The source panel from which to copy all children.","name":"source","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"CopyContents","parent":"DTileLayout","type":"panelfunc","ispanel":true,"description":"Creates copies of all the children from the given panel object and parents them to this one.","realm":"Client","args":{"arg":{"text":"The source panel from which to copy all children.","name":"source","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetBaseSize","parent":"DTileLayout","type":"panelfunc","ispanel":true,"description":"Returns the size of each single tile, set with DTileLayout:SetBaseSize.","realm":"Client","rets":{"ret":{"text":"Base tile size.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetSpaceX","parent":"DTileLayout","type":"panelfunc","ispanel":true,"description":"Returns the X axis spacing between 2 elements set by DTileLayout:SetSpaceX.","realm":"Client","rets":{"ret":{"name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetBorder","parent":"DTileLayout","type":"panelfunc","ispanel":true,"description":"Returns the border spacing set by DTileLayout:SetBorder.","realm":"Client","rets":{"ret":{"name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetMinHeight","parent":"DTileLayout","type":"panelfunc","ispanel":true,"description":"Returns the minimum height the DTileLayout can resize to.","realm":"Client","rets":{"ret":{"text":"The minimum height the panel can shrink to.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetSpaceY","parent":"DTileLayout","type":"panelfunc","ispanel":true,"description":"Returns the Y axis spacing between 2 elements set by DTileLayout:SetSpaceY.","realm":"Client","rets":{"ret":{"name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetTile","parent":"DTileLayout","type":"panelfunc","ispanel":true,"description":{"text":"Gets the occupied state of a tile.","internal":""},"realm":"Client","args":{"arg":[{"text":"The x coordinate of the tile.","name":"x","type":"number"},{"text":"The y coordinate of the tile.","name":"y","type":"number"}]},"rets":{"ret":{"text":"The occupied state of the tile, normally `1` or `nil`.","name":"","type":"any"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Layout","parent":"DTileLayout","type":"panelfunc","ispanel":true,"description":"Resets the last width/height info, and invalidates the panel's layout, causing it to recalculate all child positions. It is called whenever a child is added or removed, and can be called to refresh the panel.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"LayoutTiles","parent":"DTileLayout","type":"panelfunc","ispanel":true,"description":{"text":"Called by PANEL:PerformLayout to arrange and lay out the child panels, if it has changed in size.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnModified","parent":"DTileLayout","type":"panelfunc","ispanel":true,"description":"Called when anything is dropped on or rearranged within the DTileLayout.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetBorder","parent":"DTileLayout","type":"panelfunc","ispanel":true,"description":"Sets the spacing between the border/edge of the DTileLayout and all the elements inside.","realm":"Client","args":{"arg":{"name":"border","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetMinHeight","parent":"DTileLayout","type":"panelfunc","ispanel":true,"description":"Determines the minimum height the DTileLayout will resize to. This is useful if child panels will be added/removed often.","realm":"Client","args":{"arg":{"text":"The minimum height the panel can shrink to.","name":"minH","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetSpaceX","parent":"DTileLayout","type":"panelfunc","ispanel":true,"description":"Sets the spacing between 2 elements in the DTileLayout on the X axis.","realm":"Client","args":{"arg":{"name":"spacingX","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetBaseSize","parent":"DTileLayout","type":"panelfunc","ispanel":true,"description":"Sets the size of a single tile. If a child panel is larger than this size, it will occupy several tiles.\n\nIf you are setting the size of the children properly then you probably don't need to change this.","realm":"Client","args":{"arg":{"text":"The size of each tile. It is recommended you use `2ⁿ` (`16, 32, 64...`) numbers, and those above `4`, as numbers lower than this will result in many tiles being processed and therefore slow operation.","name":"size","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetSpaceY","parent":"DTileLayout","type":"panelfunc","ispanel":true,"description":"Sets the spacing between 2 elements in the DTileLayout on the Y axis.","realm":"Client","args":{"arg":{"name":"spaceY","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetTile","parent":"DTileLayout","type":"panelfunc","ispanel":true,"description":{"text":"Called to set the occupied state of a tile.","internal":""},"realm":"Client","args":{"arg":[{"text":"The x coordinate of the tile.","name":"x","type":"number"},{"text":"The y coordinate of the tile.","name":"y","type":"number"},{"text":"The new state of the tile, normally `1` or `nil`.","name":"state","type":"any"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Close","parent":"DTooltip","type":"panelfunc","ispanel":true,"description":"Forces the tooltip to close. This will remove the panel.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"DrawArrow","parent":"DTooltip","type":"panelfunc","ispanel":true,"description":{"text":"Used to draw a triangle beneath the DTooltip","note":"Requires DTooltip:SetContents, without this it will error"},"realm":"Client","args":{"arg":[{"text":"arrow location on the x axis","name":"x","type":"number"},{"text":"arrow location on the y axis","name":"y","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"PositionTooltip","parent":"DTooltip","type":"panelfunc","ispanel":true,"description":{"text":"Positions the DTooltip so it doesn't stay in the same draw position.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"OpenForPanel","parent":"DTooltip","type":"panelfunc","ispanel":true,"description":{"text":"Sets up the tooltip for display for given panel and starts the timer.\n\nNormally you wouldn't call this and you'd use Panel:SetTooltip, Panel:SetTooltipPanel or Panel:SetTooltipPanelOverride.","internal":""},"realm":"Client","args":{"arg":{"text":"The panel to open the tooltip for.","name":"pnl","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetContents","parent":"DTooltip","type":"panelfunc","ispanel":true,"description":{"text":"What Panel you want put inside of the DTooltip","note":"You can only have one Panel at a time; use Parenting to add more"},"realm":"Client","args":{"arg":[{"text":"Contents","name":"panel","type":"Panel"},{"text":"If set to true, the panel in the first argument will be automatically removed when DTooltip is closed via DTooltip:Close.","name":"bDelete","type":"boolean","default":"false"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ChildExpanded","parent":"DTree","type":"panelfunc","ispanel":true,"description":{"text":"Calls directly to Panel:InvalidateLayout.\nCalled by DTree_Nodes when a sub element has been expanded or collapsed.\n\nUsed as a placeholder function alongside DTree:ExpandTo, DTree:SetExpanded and DTree:MoveChildTo.\n\nThe DTree acts a root node and methods with the same name in DTree_Node call to the parent.","internal":""},"realm":"Client","args":{"arg":{"name":"bExpand","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"DoClick","parent":"DTree","type":"panelfunc","ispanel":true,"description":"Called when the any node is clicked. Called by DTree_Node:DoClick.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"DoRightClick","parent":"DTree","type":"panelfunc","ispanel":true,"description":"Called when the any node is right clicked. Called by DTree_Node:DoRightClick.","realm":"Client","args":{"arg":{"text":"The right clicked node.","name":"node","type":"DTree_Node"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddNode","parent":"DTree","type":"panelfunc","ispanel":true,"description":"Add a node to the DTree","realm":"Client","args":{"arg":[{"text":"Name of the option.","name":"name","type":"string"},{"text":"The icon that will show nexto the node in the DTree.","name":"icon","type":"string","default":"icon16/folder.png"}]},"rets":{"ret":{"text":"Returns the created DTree_Node panel.","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ExpandTo","parent":"DTree","type":"panelfunc","ispanel":true,"description":{"text":"Does nothing. Used as a placeholder empty function alongside DTree:MoveChildTo, DTree:SetExpanded and DTree:ChildExpanded.\n\nThe DTree acts a root node and methods with the same name in DTree_Node call to the parent.","internal":""},"realm":"Client","args":{"arg":{"name":"bExpand","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetClickOnDragHover","parent":"DTree","type":"panelfunc","ispanel":true,"description":"Returns the status of DTree:SetClickOnDragHover. See that for more info.","realm":"Client","rets":{"ret":{"name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetIndentSize","parent":"DTree","type":"panelfunc","ispanel":true,"description":"Returns the indentation size of the DTree, the distance between each \"level\" of the tree is offset on the left from the previous level.\n\nCurrently this feature has no effect on the DTree element.","realm":"Client","rets":{"ret":{"text":"The indentation size.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetLineHeight","parent":"DTree","type":"panelfunc","ispanel":true,"description":"Returns the height of each DTree_Node in the tree.","realm":"Client","rets":{"ret":{"text":"The height of each DTree_Node in the tree.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetSelectedItem","parent":"DTree","type":"panelfunc","ispanel":true,"description":"Returns the currently selected node.","realm":"Client","rets":{"ret":{"text":"Curently selected node.","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"LayoutTree","parent":"DTree","type":"panelfunc","ispanel":true,"description":{"text":"Does nothing.","deprecated":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetShowIcons","parent":"DTree","type":"panelfunc","ispanel":true,"description":"Returns whether or not the Silkicons next to each node of the DTree will be displayed.\n\nIndividual icons can be set with DTree_Node:SetIcon or passed as the second argument in DTree:AddNode.","realm":"Client","rets":{"ret":{"text":"Whether or not the silkicons next to each node will be displayed.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnNodeSelected","parent":"DTree","type":"panelfunc","ispanel":true,"description":"This function is called when a node within a tree is selected.","realm":"Client","args":{"arg":{"text":"The node that was selected.","name":"node","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"MoveChildTo","parent":"DTree","type":"panelfunc","ispanel":true,"description":"Moves given node to the top of DTrees children. (Makes it the topmost mode)\n\nUsed as a placeholder function alongside DTree:ExpandTo, DTree:SetExpanded and DTree:ChildExpanded.\n\nThe DTree acts a root node and methods with the same name in DTree_Node call to the parent.","realm":"Client","args":{"arg":[{"text":"The node to move","name":"child","type":"Panel"},{"text":"Unused, does nothing.","name":"pos","type":"number","deprecated":""}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Root","parent":"DTree","type":"panelfunc","ispanel":true,"description":"Returns the root DTree_Node, the node that is the parent to all other nodes of the DTree.","realm":"Client","rets":{"ret":{"text":"Root node.","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetClickOnDragHover","parent":"DTree","type":"panelfunc","ispanel":true,"description":"Enables the \"click when drag-hovering\" functionality.\n\nIf enabled, when hovering over any DTree_Node of this DTree while dragging a panel, the node will be automatically clicked on (and subsequently DTree:OnNodeSelected will be called) to open any attached panels, such as spawnlists in spawnmenu.\n\nSee also: PANEL:DragHoverClick.","realm":"Client","args":{"arg":{"name":"enable","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetExpanded","parent":"DTree","type":"panelfunc","ispanel":true,"description":{"text":"Does nothing. Is not called by the DTree itself.\n\nUsed as a placeholder empty function alongside DTree:ExpandTo, DTree:MoveChildTo and DTree:ChildExpanded to prevent errors when DTree_Node:SetExpanded is incorrectly used on a DTree.","internal":""},"realm":"Client","args":{"arg":{"name":"bExpand","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetIndentSize","parent":"DTree","type":"panelfunc","ispanel":true,"description":"Sets the indentation size of the DTree, the distance between each \"level\" of the tree is offset on the left from the previous level.\n\nCurrently this feature has no effect on the DTree element.","realm":"Client","args":{"arg":{"text":"The new indentation size.","name":"size","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetLineHeight","parent":"DTree","type":"panelfunc","ispanel":true,"description":"Sets the height of each DTree_Node in the tree.\n\nThe default value is 17.","realm":"Client","args":{"arg":{"text":"The height to set.","name":"h","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetSelectedItem","parent":"DTree","type":"panelfunc","ispanel":true,"description":"Set the currently selected top-level node.","realm":"Client","args":{"arg":{"text":"DTree_Node to select.","name":"node","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetShowIcons","parent":"DTree","type":"panelfunc","ispanel":true,"description":"Sets whether or not the Silkicons next to each node of the DTree will be displayed.\n\nIndividual icons can be set with DTree_Node:SetIcon or passed as the second argument in DTree:AddNode.","realm":"Client","args":{"arg":{"text":"Whether or not to show icons.","name":"show","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ShowIcons","parent":"DTree","type":"panelfunc","ispanel":true,"description":"Returns whether or not the Silkicons next to each node of the DTree will be displayed.\n\nAlias of DTree:GetShowIcons.","realm":"Client","rets":{"ret":{"text":"Whether or not the silkicons next to each node will be displayed.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddFolder","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":"A helper function that adds a new node and calls to DTree_Node:MakeFolder on it.","realm":"Client","args":{"arg":[{"text":"The name of the new node","name":"name","type":"string"},{"text":"The folder in the filesystem to use, relative to the garrysmod/ folder.","name":"folder","type":"string"},{"text":"The path to search in. See File Search Paths","name":"path","type":"string"},{"text":"Should files be added as nodes (true) or folders only (false)","name":"showFiles","type":"boolean","default":"false"},{"text":"The wildcard to use when searching for files.","name":"wildcard","type":"string","default":"*"},{"name":"bDontForceExpandable","type":"boolean","default":"false"}]},"rets":{"ret":{"text":"The created DTree_Node","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddPanel","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":{"text":"Adds the given panel to the child nodes list, a DListLayout.","internal":""},"realm":"Client","args":{"arg":{"text":"The panel to add.","name":"pnl","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddNode","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":"Add a child node to the DTree_Node","realm":"Client","args":{"arg":[{"text":"Name of the node.","name":"name","type":"string"},{"text":"The icon that will show next to the node in the DTree.","name":"icon","type":"string","default":"icon16/folder.png"}]},"rets":{"ret":{"text":"Returns the created DTree_Node panel.","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ChildExpanded","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":{"text":"Called when a child node is expanded or collapsed to propagate this event to parent nodes to update layout.","internal":""},"realm":"Client","args":{"arg":{"name":"expanded","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AnimSlide","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":{"text":"Internal function that handles the expand/collapse animations.","internal":""},"realm":"Client","args":{"arg":[{"name":"anim","type":"table"},{"name":"delta","type":"number"},{"name":"data","type":"table"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"CleanList","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":"Cleans up the internal table of items (sub-nodes) of this node from invalid panels or sub-nodes that were moved from this node to another.\n\nAppears the be completely unused by the game on its own.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"Copy","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":"Create and returns a copy of this node, including all the sub-nodes.","realm":"Client","rets":{"ret":{"text":"The copied DTree_Node.","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"DoChildrenOrder","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":{"text":"Called automatically to update the status of DTree_Node:GetLastChild on children of this node.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"DoClick","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":"Called when the node is clicked.\n\nSee also DTree_Node:DoRightClick.","realm":"Client","rets":{"ret":{"text":"Return true to prevent DoClick from being called on parent nodes or the DTree itself.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"CreateChildNodes","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":{"text":"Creates the container DListLayout for the DTree_Nodes.\n\nThis is called automatically so you don't have to.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"DoRightClick","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":"Called when the node is right clicked.\n\nSee also DTree_Node:DoClick.","realm":"Client","rets":{"ret":{"text":"Return true to prevent DoRightClick from being called on parent nodes or the DTree itself.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ExpandRecurse","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":"Expands or collapses this node, as well as ALL child nodes of this node.\n\nWorks opposite of DTree_Node:ExpandTo.","realm":"Client","args":{"arg":{"text":"Whether to expand (true) or collapse (false)","name":"expand","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ExpandTo","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":"Collapses or expands all nodes from the topmost-level node to this one.\n\nWorks opposite of DTree_Node:ExpandRecurse.","realm":"Client","args":{"arg":{"text":"Whether to expand (true) or collapse (false)","name":"expand","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"FilePopulateCallback","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":{"text":"Called automatically from DTree_Node:FilePopulate to actually fill the node with sub-nodes based on set preferences like should files be added, etc.","internal":""},"realm":"Client","args":{"arg":[{"text":"A list of files in this folder","name":"files","type":"table"},{"text":"A list of folder in this folder.","name":"folders","type":"table"},{"text":"The folder name/path this node represents","name":"foldername","type":"string"},{"text":"The Path ID search was performed with. See File Search Paths","name":"path","type":"string"},{"text":"Inherited from the **FilePopulate** call. Does nothing","name":"bAndChildren","type":"boolean"},{"text":"The wildcard that was given","name":"wildcard","type":"string"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"FilePopulate","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":{"text":"Called automatically from DTree_Node:PopulateChildrenAndSelf and DTree_Node:PopulateChildren to populate this node with child nodes of files and folders.","internal":""},"realm":"Client","args":{"arg":[{"text":"Does nothing. Set to true if called from DTree_Node:PopulateChildren.","name":"bAndChildren","type":"boolean"},{"text":"Expand self once population process is finished.","name":"bExpand","type":"boolean"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetChildNode","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":"Returns n-th child node.\n\nBasically an alias of Panel:GetChild.","realm":"Client","args":{"arg":{"text":"The number of the child to get, starting with 0","name":"num","type":"number"}},"rets":{"ret":{"text":"The child panel, if valid ID is given","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetChildNodes","parent":"DTree_Node","type":"panelfunc","ispanel":true,"added":"2020.08.12","description":"Returns a table containing all child nodes of this node.","realm":"Client","rets":{"ret":{"text":"A list of all child nodes.","name":"","type":"table"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetDirty","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":{"text":"Returns value set by DTree_Node:SetDirty.","deprecated":""},"realm":"Client","rets":{"ret":{"name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetChildNodeCount","parent":"DTree_Node","type":"panelfunc","ispanel":true,"added":"2020.08.12","description":"Returns the number of child nodes this node has. For use with DTree_Node:GetChildNode","realm":"Client","rets":{"ret":{"text":"Number of child nodes.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetDoubleClickToOpen","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":"Returns whether the double clock to collapse/expand functionality is enabled on this node.","realm":"Client","rets":{"ret":{"name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetDraggableName","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":{"text":"Returns what is set by DTree_Node:SetDraggableName.","internal":""},"realm":"Client","rets":{"ret":{"name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetExpanded","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":"Returns whether the node is expanded or not.","realm":"Client","added":"2021.03.31","rets":{"ret":{"text":"Expanded or not.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetFileName","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":"Returns the filepath of the file attached to this node.","realm":"Client","rets":{"ret":{"name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetFolder","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":"Returns the folder path to search in, set by DTree_Node:MakeFolder.","realm":"Client","rets":{"ret":{"text":"The folder path.","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetDrawLines","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":{"text":"Returns whether or not this node is drawing lines","internal":""},"realm":"Client","rets":{"ret":{"name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetForceShowExpander","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":"Returns whether the expand/collapse button is shown on this node regardless of whether or not it has sub-nodes.\n\nSee also DTree_Node:SetForceShowExpander.","realm":"Client","rets":{"ret":{"name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetHideExpander","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":"Returns whether the expand button (little + button) should be shown or hidden.","realm":"Client","rets":{"ret":{"name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetIndentSize","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":"Returns the indentation level of the DTree this node belongs to.\n\nAlias of DTree:GetIndentSize, see it for more info.","realm":"Client","rets":{"ret":{"text":"The indentation level.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetIcon","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":"Returns the image path to the icon of this node.","realm":"Client","rets":{"ret":{"text":"The path to the image","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetLastChild","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":"Returns whether this node is the last child on this level or not.","realm":"Client","rets":{"ret":{"name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetLineHeight","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":"The height of a single DTree_Node of the DTree this node belongs to.\n\nAlias of DTree:GetLineHeight.","realm":"Client","rets":{"ret":{"text":"The height of a single DTree_Node.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetNeedsChildSearch","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":{"internal":""},"realm":"Client","rets":{"ret":{"name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetNeedsPopulating","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":{"text":"Returns whether or not the node is set to be populated from the filesystem.","internal":""},"realm":"Client","rets":{"ret":{"name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetParentNode","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":"Returns the parent DTree_Node. Note that Panel:GetParent will not be the same!","realm":"Client","rets":{"ret":{"text":"The parent node.","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetPathID","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":"Returns the path ID (File Search Paths) used in populating the DTree from the filesystem.\n\nSee DTree_Node:SetPathID and DTree_Node:MakeFolder.","realm":"Client","rets":{"ret":{"text":"The Path ID","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetShowFiles","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":"Returns whether or not nodes for files should/will be added when populating the node from filesystem.","realm":"Client","rets":{"ret":{"name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetRoot","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":"Returns the root node, the DTree this node is under.\n\nSee also DTree_Node:GetParentNode.","realm":"Client","rets":{"ret":{"text":"The root node","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetWildCard","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":"Returns the wildcard set by DTree_Node:MakeFolder.","realm":"Client","rets":{"ret":{"text":"The search wildcard","name":"","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Insert","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":"Inserts a sub-node into this node before or after the given node.","realm":"Client","args":{"arg":[{"text":"The DTree_Node to insert.","name":"node","type":"Panel"},{"text":"The node to insert the node above before or after.","name":"nodeNextTo","type":"Panel"},{"text":"true to insert before, false to insert after.","name":"before","type":"boolean"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"InsertNode","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":{"text":"Inserts an existing node as a \"child\" or a sub-node of this node.\nUsed internally by the drag'n'drop functionality.","internal":""},"realm":"Client","args":{"arg":{"text":"Has to be DTree_Node","name":"node","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"InstallDraggable","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":{"text":"Called automatically internally.\n\nMakes the target node compatible with this node's drag'n'drop.","internal":""},"realm":"Client","args":{"arg":{"text":"The DTree_Node.","name":"node","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"InternalDoClick","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":{"text":"See DTree_Node:DoClick","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"InternalDoRightClick","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":{"text":"See DTree_Node:DoRightClick.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"LeaveTree","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":"Removes given node as a sub-node of this node.\n\nIt doesn't actually remove or unparent the panel, just removes it from the internal DListView.","realm":"Client","args":{"arg":{"text":"The node to remove","name":"pnl","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"IsRootNode","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":"Returns true if DTree_Node:GetRoot is the same as DTree_Node:GetParentNode of this node.","realm":"Client","rets":{"ret":{"text":"If this is a root node.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"MakeFolder","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":"Makes this node a folder in the filesystem. This will make it automatically populated.\n\nSee also DTree_Node:AddFolder.","realm":"Client","args":{"arg":[{"text":"The folder in the filesystem to use, relative to the garrysmod/ folder.","name":"folder","type":"string"},{"text":"The path to search in. See File Search Paths","name":"path","type":"string"},{"text":"Should files be added as nodes (true) or folders only (false)","name":"showFiles","type":"boolean","default":"false"},{"text":"The wildcard to use when searching for files.","name":"wildcard","type":"string","default":"*"},{"text":"If set to true, don't show the expand buttons on empty nodes.","name":"dontForceExpandable","type":"boolean","default":"false"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"MoveChildTo","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":"Moves given panel to the top of the children of this node.\n\nDespite name of this function, it cannot move the children to any position but the topmost.","realm":"Client","args":{"arg":{"text":"The node to move.","name":"node","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnModified","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":"Called when sub-nodes of this DTree_Node were changed, such as being rearranged if that functionality is enabled.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"MoveToTop","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":"Moves this node to the top of the level.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnNodeAdded","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":"Called when a new sub-node is added this node.","realm":"Client","added":"2021.03.31","args":{"arg":{"text":"The newly added sub node.","name":"newNode","type":"DTree_Node"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnNodeSelected","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":{"text":"Called when this or a sub node is selected. Do not use this, it is not for override.\n\nUse DTree:OnNodeSelected or DTree_Node:DoClick instead.","internal":""},"realm":"Client","args":{"arg":{"name":"node","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"PerformRootNodeLayout","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":{"text":"Called automatically to perform layout on this node if this node DTree_Node:IsRootNode.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"PopulateChildren","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":{"text":"Called automatically from DTree_Node:PopulateChildrenAndSelf.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDirty","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":{"text":"Appears to have no effect on the DTree_Node.","deprecated":""},"realm":"Client","args":{"arg":{"name":"dirty","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"PopulateChildrenAndSelf","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":{"text":"Called automatically from DTree_Node:SetExpanded (or when user manually expands the node) to populate the node with sub-nodes from the filesystem if this was enabled via DTree_Node:MakeFolder.","internal":""},"realm":"Client","args":{"arg":{"text":"Expand self once population process is finished.","name":"expand","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDoubleClickToOpen","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":"Sets whether double clicking the node should expand/collapse it or not.","realm":"Client","args":{"arg":{"text":"true to enable, false to disable this functionality.","name":"enable","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDraggableName","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":{"text":"Used to store name for sub elements for a Panel:Droppable call.","internal":""},"realm":"Client","args":{"arg":{"name":"name","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDrawLines","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":{"text":"Sets whether or not this node should draw visual lines.","internal":""},"realm":"Client","args":{"arg":{"name":"draw","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetFileName","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":{"text":"Sets the file full filepath to the file attached to this node","internal":""},"realm":"Client","args":{"arg":{"name":"filename","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetExpanded","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":"Expands or collapses this node.","realm":"Client","args":{"arg":[{"text":"Whether to expand (true) or collapse (false)","name":"expand","type":"boolean"},{"text":"Whether to play animation (false) or not (true)","name":"surpressAnimation","type":"boolean","default":"false"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetFolder","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":{"text":"Sets the folder to search files and folders in.\n\nUse DTree_Node:MakeFolder instead.","internal":""},"realm":"Client","args":{"arg":{"name":"folder","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetHideExpander","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":{"text":"Sets whether the expand button (little + button) should be shown or hidden.","internal":""},"realm":"Client","args":{"arg":{"name":"hide","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetForceShowExpander","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":"Sets whether or not the expand/collapse button (+/- button) should be shown on this node regardless of whether it has sub-elements or not.","realm":"Client","args":{"arg":{"name":"forceShow","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetLastChild","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":{"text":"Called automatically to set whether this node is the last child on this level or not.","internal":""},"realm":"Client","args":{"arg":{"name":"last","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetIcon","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":"Sets the material for the icon of the DTree_Node.","realm":"Client","args":{"arg":{"text":"The path to the material to be used. Do not include \"materials/\". .pngs are supported.","name":"path","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetNeedsPopulating","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":{"text":"Sets whether or not the node needs populating from the filesystem.","internal":""},"realm":"Client","args":{"arg":{"text":"Whether or not the node needs populating","name":"needs","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetNeedsPopulating","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":{"text":"Sets whether or not the node needs populating from the filesystem.","internal":""},"realm":"Client","args":{"arg":{"text":"Whether or not the node needs populating","name":"needs","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetParentNode","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":{"text":"Sets the parent node of this node. Not the same as Panel:SetParent.\n\nThis is set automatically, you shouldn't use this.","internal":""},"realm":"Client","args":{"arg":{"text":"The panel to set as a parent node for this node","name":"parent","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetPathID","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":{"text":"Sets the path ID (File Search Paths) for populating the tree from the filesystem.\n\nUse DTree_Node:MakeFolder instead.","internal":""},"realm":"Client","args":{"arg":{"text":"The path ID to set.","name":"path","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetSelected","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":{"text":"Called automatically to update the \"selected\" status of this node.","internal":""},"realm":"Client","args":{"arg":{"text":"Whether this node is currently selected or not.","name":"selected","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetShowFiles","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":{"text":"Sets whether or not nodes for files should be added when populating the node from filesystem.","internal":""},"realm":"Client","args":{"arg":{"name":"showFiles","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetRoot","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":{"text":"Sets the root node (the DTree) of this node.\n\nThis is set automatically, you shouldn't use this.","internal":""},"realm":"Client","args":{"arg":{"text":"The panel to set as root node.","name":"root","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetupCopy","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":{"text":"Currently does nothing, not implemented.","deprecated":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetWildCard","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":{"text":"Sets the search wildcard.\n\nUse DTree_Node:MakeFolder instead","internal":""},"realm":"Client","args":{"arg":{"text":"The wildcard to set","name":"wildcard","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"ShowIcons","parent":"DTree_Node","type":"panelfunc","ispanel":true,"description":"Returns whether or not the DTree this node is in has icons enabled.\n\nSee DTree:ShowIcons for more info.","realm":"Client","rets":{"ret":{"text":"Whether the icons are shown or not","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetBottom","parent":"DVerticalDivider","type":"panelfunc","ispanel":true,"description":"Returns the bottom content panel of the DVerticalDivider.","realm":"Client","rets":{"ret":{"text":"The bottom content panel.","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetBottomMin","parent":"DVerticalDivider","type":"panelfunc","ispanel":true,"description":"Returns the minimum height of the bottom content panel.","realm":"Client","rets":{"ret":{"text":"The minimum height of the bottom content panel.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetDividerHeight","parent":"DVerticalDivider","type":"panelfunc","ispanel":true,"description":"Returns the height of the divider bar between the top and bottom content panels of the DVerticalDivider.","realm":"Client","rets":{"ret":{"text":"The height of the divider bar.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetDragging","parent":"DVerticalDivider","type":"panelfunc","ispanel":true,"description":"Returns whether the divider is being dragged or not.","realm":"Client","rets":{"ret":{"text":"If true, mouse movement will alter the size of the divider.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetHoldPos","parent":"DVerticalDivider","type":"panelfunc","ispanel":true,"description":{"text":"Returns the local Y position of where the user starts dragging the divider.","internal":""},"realm":"Client","rets":{"ret":{"text":"The local Y position where divider dragging has started.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetMiddle","parent":"DVerticalDivider","type":"panelfunc","ispanel":true,"description":"Returns the middle content panel of the DVerticalDivider.","realm":"Client","rets":{"ret":{"text":"The middle content panel.","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetTop","parent":"DVerticalDivider","type":"panelfunc","ispanel":true,"description":"Returns the top content panel of the DVerticalDivider.","realm":"Client","rets":{"ret":{"text":"The top content panel.","name":"","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetTopHeight","parent":"DVerticalDivider","type":"panelfunc","ispanel":true,"description":"Returns the current height of the top content panel set by DVerticalDivider:SetTopHeight or by the user.","realm":"Client","rets":{"ret":{"text":"The current height of the DVerticalDivider.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetTopMin","parent":"DVerticalDivider","type":"panelfunc","ispanel":true,"description":"Returns the minimum height of the top content panel.","realm":"Client","rets":{"ret":{"text":"The minimum height of the top content panel.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetBottom","parent":"DVerticalDivider","type":"panelfunc","ispanel":true,"description":"Sets the passed panel as the bottom content of the DVerticalDivider.","realm":"Client","args":{"arg":{"text":"The panel to set as the bottom content.","name":"pnl","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetTopMax","parent":"DVerticalDivider","type":"panelfunc","ispanel":true,"description":"Returns the maximum height of the top content panel. See DVerticalDivider:SetTopMax for more information.","realm":"Client","rets":{"ret":{"text":"The maximum height of the top content panel.","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetBottomMin","parent":"DVerticalDivider","type":"panelfunc","ispanel":true,"description":"Sets the minimum height of the bottom content panel.","realm":"Client","args":{"arg":{"text":"The minimum height of the bottom content panel. Default is 50.","name":"height","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDividerHeight","parent":"DVerticalDivider","type":"panelfunc","ispanel":true,"description":"Sets the height of the divider bar between the top and bottom content panels of the DVerticalDivider.","realm":"Client","args":{"arg":{"text":"The height of the divider bar.","name":"height","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDragging","parent":"DVerticalDivider","type":"panelfunc","ispanel":true,"description":{"text":"Sets whether the divider is being dragged or not.","internal":""},"realm":"Client","args":{"arg":{"text":"Setting this to true causes cursor movement to alter the position of the divider.","name":"isDragging","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetMiddle","parent":"DVerticalDivider","type":"panelfunc","ispanel":true,"description":"Places the passed panel in between the top and bottom content panels of the DVerticalDivider.","realm":"Client","args":{"arg":{"text":"The panel to set as the middle content.","name":"pnl","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetHoldPos","parent":"DVerticalDivider","type":"panelfunc","ispanel":true,"description":{"text":"Sets the local Y position of where the user starts dragging the divider.","internal":""},"realm":"Client","args":{"arg":{"text":"The local Y position where divider dragging has started.","name":"y","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetTop","parent":"DVerticalDivider","type":"panelfunc","ispanel":true,"description":"Sets the passed panel as the top content of the DVerticalDivider.","realm":"Client","args":{"arg":{"text":"The panel to set as the top content.","name":"pnl","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetTopMin","parent":"DVerticalDivider","type":"panelfunc","ispanel":true,"description":"Sets the minimum height of the top content panel.","realm":"Client","args":{"arg":{"text":"The minimum height of the top content panel. Default is 50.","name":"height","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetTopHeight","parent":"DVerticalDivider","type":"panelfunc","ispanel":true,"description":"Sets the height of the top content panel.\n\nThe height of the bottom content panel is automatically calculated by taking the total height of the DVerticalDivider and subtracting it with the height of the top content panel and the divider bar.","realm":"Client","args":{"arg":{"text":"The height of the top content panel.","name":"height","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetTopMax","parent":"DVerticalDivider","type":"panelfunc","ispanel":true,"description":"Sets the maximum height of the top content panel. This is ignored if the panel would exceed the minimum bottom content panel height set from DVerticalDivider:SetBottomMin.","realm":"Client","args":{"arg":{"text":"The maximum height of the top content panel. Default is 4096.","name":"height","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"StartGrab","parent":"DVerticalDivider","type":"panelfunc","ispanel":true,"description":{"text":"Causes the user to start dragging the divider.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"AnimateTo","parent":"DVScrollBar","type":"panelfunc","ispanel":true,"description":"Smoothly scrolls to given level.","realm":"Client","args":{"arg":[{"text":"The scroll level to animate to. In pixels from the top ( from 0 )","name":"scroll","type":"number"},{"text":"Length of the animation in seconds","name":"length","type":"number"},{"text":"Delay of the animation in seconds","name":"delay","type":"number","default":"0"},{"text":"See Panel:NewAnimation for explanation.","name":"ease","type":"number","default":"-1"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"BarScale","parent":"DVScrollBar","type":"panelfunc","ispanel":true,"description":"No Description","realm":"Client","rets":{"ret":{"name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AddScroll","parent":"DVScrollBar","type":"panelfunc","ispanel":true,"description":"Adds specified amount of scroll in pixels.","realm":"Client","args":{"arg":{"text":"How much to scroll downwards. Can be negative for upwards scroll","name":"add","type":"number"}},"rets":{"ret":{"text":"True if the scroll level was changed (i.e. if we did or did not scroll)","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetHideButtons","parent":"DVScrollBar","type":"panelfunc","ispanel":true,"description":"Returns whether or not the manual up/down scroll buttons are visible or not. Set by DVScrollBar:SetHideButtons.","realm":"Client","rets":{"ret":{"text":"Whether or not the manual up/down scroll buttons are visible or not.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetOffset","parent":"DVScrollBar","type":"panelfunc","ispanel":true,"description":"Returns the negative of DVScrollBar:GetScroll.","realm":"Client","rets":{"ret":{"name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Grip","parent":"DVScrollBar","type":"panelfunc","ispanel":true,"description":{"text":"Called from within DScrollBarGrip","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetScroll","parent":"DVScrollBar","type":"panelfunc","ispanel":true,"description":"Returns the amount of scroll level from the top in pixels","realm":"Client","rets":{"ret":{"text":"The amount of scroll level from the top","name":"","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetHideButtons","parent":"DVScrollBar","type":"panelfunc","ispanel":true,"description":"Allows hiding the up and down buttons for better visual stylisation.","realm":"Client","args":{"arg":{"text":"True to hide","name":"hide","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetScroll","parent":"DVScrollBar","type":"panelfunc","ispanel":true,"description":"Sets the scroll level in pixels.","realm":"Client","args":{"arg":{"name":"scroll","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetUp","parent":"DVScrollBar","type":"panelfunc","ispanel":true,"description":"Sets up the scrollbar for use.\n\nThe scrollbar will automatically disable itself if the total height of the canvas is lower than the height of the panel that holds the canvas during this function call.","realm":"Client","args":{"arg":[{"text":"The size of the panel that holds the canvas, basically size of \"1 page\".","name":"barSize","type":"number"},{"text":"The total size of the canvas, this typically is the bigger number.","name":"canvasSize","type":"number"}]}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Value","parent":"DVScrollBar","type":"panelfunc","ispanel":true,"description":{"text":"Should return nil in all cases. See DVScrollBar:GetScroll.","deprecated":""},"realm":"Client","rets":{"ret":{"name":"","type":"any"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"AboveLayout","parent":"IconEditor","type":"panelfunc","description":"Applies the top-down view camera settings for the model in the DAdjustableModelPanel.\n\nCalled when a user clicks the `Above` (third) button (See IconEditor).","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"BestGuessLayout","parent":"IconEditor","type":"panelfunc","ispanel":true,"description":"Applies the best camera settings for the model in the DAdjustableModelPanel, using the values returned by Global.PositionSpawnIcon.\n\nCalled when a user clicks the `wand` button (See the ) and when IconEditor:Refresh is called.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"FillAnimations","parent":"IconEditor","type":"panelfunc","ispanel":true,"description":{"text":"Fills the DListView on the left of the editor with the model entity's animation list. Called by IconEditor:Refresh.","internal":""},"realm":"Client","args":{"arg":{"text":"The entity being rendered within the model panel.","name":"ent","type":"Entity"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OriginLayout","parent":"IconEditor","type":"panelfunc","ispanel":true,"description":"Places the camera at the origin (0,0,0), relative to the entity, in the DAdjustableModelPanel.\n\nCalled when a user clicks the `Center` (fifth) button (See the ).","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"Refresh","parent":"IconEditor","type":"panelfunc","ispanel":true,"description":"Updates the internal DAdjustableModelPanel and SpawnIcon. \n\nThis should be called immediately after setting the SpawnIcon with IconEditor:SetIcon.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"RenderIcon","parent":"IconEditor","type":"panelfunc","ispanel":true,"description":"Re-renders the SpawnIcon.\n\nCalled when a user clicks the `RENDER` button, this retrieves the render data from the internal DAdjustableModelPanel and passes it as a table to Panel:RebuildSpawnIconEx.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"FullFrontalLayout","parent":"IconEditor","type":"panelfunc","ispanel":true,"description":"Applies the front view camera settings for the model in the DAdjustableModelPanel.\n\nCalled when a user clicks the `Front` (second) button (See the ).","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"RightLayout","parent":"IconEditor","type":"panelfunc","ispanel":true,"description":"Applies the right side view camera settings for the model in the DAdjustableModelPanel.\n\nCalled when a user clicks the `Right` (fourth) button (See the ). (Note: The icon for this points left.)","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetDefaultLighting","parent":"IconEditor","type":"panelfunc","ispanel":true,"description":{"text":"Sets up the default ambient and directional lighting for the DAdjustableModelPanel. Called by IconEditor:Refresh.","internal":""},"realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetFromEntity","parent":"IconEditor","type":"panelfunc","ispanel":true,"description":"Sets the editor's model and icon from an entity. Alternative to IconEditor:SetIcon, with uses a SpawnIcon.\n\nYou do not need to call IconEditor:Refresh after this.","realm":"Client","args":{"arg":{"text":"The entity to retrieve the model and skin from.","name":"ent","type":"Entity"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetIcon","parent":"IconEditor","type":"panelfunc","ispanel":true,"description":"Sets the SpawnIcon to modify. You should call Panel:Refresh immediately after this, as the user will not be able to make changes to the icon beforehand.","realm":"Client","args":{"arg":{"text":"The SpawnIcon object to be modified.","name":"icon","type":"Panel"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"UpdateEntity","parent":"IconEditor","type":"panelfunc","ispanel":true,"description":{"text":"Updates the entity being rendered in the internal DAdjustableModelPanel. Called by the model panel's DModelPanel:LayoutEntity method.","internal":""},"realm":"Client","args":{"arg":{"text":"The entity being rendered within the model panel.","name":"ent","type":"Entity"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetChecked","parent":"ImageCheckBox","type":"panelfunc","ispanel":true,"description":"Returns the checked state of the ImageCheckBox","realm":"Client","rets":{"ret":{"text":"true for checked, false otherwise","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"Set","parent":"ImageCheckBox","type":"panelfunc","ispanel":true,"description":"Sets the checked state of the checkbox.\n\nChecked state can be obtained by ImageCheckBox.State.","file":{"text":"lua/vgui/imagecheckbox.lua","line":"18"},"realm":"Client","args":{"arg":{"text":"true for checked, false otherwise","name":"OnOff","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetMaterial","parent":"ImageCheckBox","type":"panelfunc","ispanel":true,"description":{"text":"Sets the material that will be visible when the ImageCheckBox is checked.\n\nInternally calls Material:SetMaterial.","note":"Will error if no material was set."},"file":{"text":"lua/vgui/imagecheckbox.lua","line":"4"},"realm":"Client","args":{"arg":{"text":"The file path of the material to set (relative to \"garrysmod/materials/\").","name":"mat","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetChecked","parent":"ImageCheckBox","type":"panelfunc","ispanel":true,"description":"Sets the checked state of the checkbox.\n\nChecked state can be obtained via ImageCheckBox:GetChecked","realm":"Client","args":{"arg":{"text":"true for checked, false otherwise","name":"bOn","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetAlpha","parent":"Material","type":"panelfunc","ispanel":true,"description":"Sets the alpha value of the Material panel.","realm":"Client","args":{"arg":{"text":"The alpha value, from 0 to 255.","name":"alpha","type":"number"}}},"example":{"description":"Creates a transparent SWEP icon in the middle of the screen.","code":"local mat = vgui.Create(\"Material\")\nmat:SetSize(200, 200)\nmat:Center()\nmat:SetMaterial(\"weapons/swep\")\n\t\nmat:SetAlpha(128)","output":{"image":{"src":"Material_SetAlpha_example1.jpg"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetBodyGroup","parent":"SpawnIcon","type":"panelfunc","description":"Returns the currently set body groups of the spawn icon. This is set by SpawnIcon:SetBodyGroup.","realm":"Client","rets":{"ret":{"text":"The bodygroups of the spawnicon","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OpenURL","parent":"Panel","type":"panelfunc","description":"Instructs a HTML control to download and parse a HTML script using the passed URL.\n\nThis function can also be used on [HTML](https://wiki.facepunch.com/gmod/HTML).","realm":"Client","args":{"arg":{"text":"URL to open. It has to start or be one of the following:\n* `http://`\n* `https://`\n* `asset://`\n* `about:blank`\n* `chrome://credits/`","name":"URL","type":"string"}}},"example":[{"description":"Displays the Garry's Mod wiki page.","code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetTitle( \"HTML Example\" )\nframe:SetSize( ScrW() * 0.75, ScrH() * 0.75 )\nframe:Center()\nframe:MakePopup()\n\nlocal html = vgui.Create( \"DHTML\", frame )\nhtml:Dock( FILL )\nhtml:OpenURL( \"wiki.facepunch.com/gmod\" )"},{"description":"Displays the default loading screen from the HTML folder.","code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetTitle( \"HTML Example\" )\nframe:SetSize( ScrW() * 0.75, ScrH() * 0.75 )\nframe:Center()\nframe:MakePopup()\n\nlocal html = vgui.Create( \"HTML\", frame )\nhtml:Dock( FILL )\nhtml:OpenURL( \"asset://garrysmod/html/loading.html\" )","output":{"image":{"src":"html_openurl_example.png","alt":"800px"}}}],"realms":["Client"],"type":"Function"},
{"function":{"name":"SetMaterial","parent":"Material","type":"panelfunc","ispanel":true,"description":{"text":"Sets the material used by the panel.","note":"If the material is not showing up as the correct size, try setting the Material panel's `AutoSize` variable to **false**"},"realm":"Client","args":{"arg":{"text":"The file path of the material to set (relative to \"garrysmod/materials/\").","name":"matname","type":"string"}}},"example":{"description":"Creates a Material panel and sets the material to a screen space effect.","code":"-- Black background panel\nBGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetSize(200, 200)\nBGPanel:Center()\nBGPanel:SetBackgroundColor(Color(0, 0, 0, 255))\n\t\t\nlocal mat = vgui.Create(\"Material\", BGPanel)\nmat:SetPos(5, 5)\nmat:SetSize(190, 190)\n\n-- It's not really good to use a models material for VGUI drawing\n-- But it looks good enough for a quick demo\nmat:SetMaterial(\"models/screenspace\")\n\n-- Stretch to fit\nmat.AutoSize = false","output":{"image":{"src":"Material_SetMaterial_example1.jpg"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetModelName","parent":"SpawnIcon","type":"panelfunc","description":"Returns the currently set model name. This is set by SpawnIcon:SetModelName.","realm":"Client","rets":{"ret":{"text":"The model name","type":"string"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetModelName","parent":"SpawnIcon","type":"panelfunc","description":{"text":"Sets the model name, so it can be retrieved with SpawnIcon:GetModelName. Use Panel:SetModel instead.","internal":"This is done automatically by SpawnIcon. You do not need to call this. Doing so may cause unforeseen consequences."},"realm":"Client","args":{"arg":{"text":"The model name to set","type":"string","name":"mdl"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"GetSkinID","parent":"SpawnIcon","type":"panelfunc","description":"Returns the currently set skin of the spawnicon. This is set by SpawnIcon:SetSkinID.","realm":"Client","rets":{"ret":{"text":"Current skin ID","type":"number"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"SetBodyGroup","parent":"SpawnIcon","type":"panelfunc","description":{"text":"Sets the bodygroups, so it can be retrieved with SpawnIcon:GetBodyGroup. Use Panel:SetModel instead.","internal":"This is done automatically by SpawnIcon. You do not need to call this. Doing so may cause unforeseen consequences."},"realm":"Client","args":{"arg":{"text":"Body groups to set. It must be 9 character long string of 0-9 characters.","type":"string","name":"bodygroup"}}},"realms":["Client"],"type":"Function"},
{"function":{"name":"OpenMenu","parent":"SpawnIcon","type":"panelfunc","description":"Called when right clicked on the SpawnIcon. It will not be called if there is a selection (Panel:GetSelectionCanvas), in which case SANDBOX:SpawnlistOpenGenericMenu is called.","realm":"Client"},"realms":["Client"],"type":"Function"},
{"function":{"name":"OnKeyCodeTyped","parent":"TextEntry","type":"panelfunc","ispanel":true,"description":"Called from engine whenever a valid character is typed while the text entry is focused.\n\nUsed internally for functionality of DTextEntry","realm":"Client","args":{"arg":{"text":"They key code of the key pressed, see Enums/KEY.","name":"keyCode","type":"number"}},"rets":{"ret":{"text":"Whether you've handled the key press. Returning true prevents the default text entry behavior from occurring.","name":"","type":"boolean"}}},"realms":["Client"],"type":"Function"},
{"enum":{"realm":"Shared","description":"Enumerations used by Entity:SetUseType. Affects when ENTITY:Use is triggered.\n\nNot to be confused with Enums/USE used for ENTITY:Use and others.","items":{"item":[{"text":"Fire a  signal every tick as long as the player holds their use key and aims at the target.","key":"CONTINUOUS_USE","value":"0","page":",USE_ONEnums/USE"},{"text":"Fires a  signal when starting to use an entity, and a  signal when letting go.","key":"ONOFF_USE","value":"1","page":[",USE_ONEnums/USE",",USE_OFFEnums/USE"],"warning":"There is no guarantee to receive both ON and OFF signals. A signal will only be sent when pushing or letting go of the use key while actually aiming at the entity, so an ON signal might not be followed by an OFF signal if the player is aiming somewhere else when releasing the key, and similarly, an OFF signal may not be preceded by an ON signal if the player started aiming at the entity only after pressing the key.\n\nTherefore, this method of input is unreliable and should not be used."},{"text":"Like a wheel turning.","key":"DIRECTIONAL_USE","value":"2"},{"text":"Fire a  signal only once when player presses their use key while aiming at the target.","key":"SIMPLE_USE","value":"3","page":",USE_ONEnums/USE"}]}},"realms":["Server","Client"],"type":"Enum"},
{"function":{"name":"SetSkinID","parent":"SpawnIcon","type":"panelfunc","description":{"text":"Sets the skin id of the spawn icon, so it can be retrieved with SpawnIcon:GetSkinID. Use Panel:SetModel instead.","internal":"This is done automatically by SpawnIcon. You do not need to call this. Doing so may cause unforeseen consequences."},"realm":"Client","args":{"arg":{"text":"Skin ID to set","type":"number","name":"skin"}}},"realms":["Client"],"type":"Function"},
{"enum":{"realm":"Shared","description":{"text":"Used by game.AddAmmoType's input structure - the Structures/AmmoData.","warning":"These enumerations do not exist in game and are listed here only for reference"},"items":{"item":[{"text":"Forces player to drop the object they are carrying if the object was hit by this ammo type.","key":"AMMO_FORCE_DROP_IF_CARRIED","value":"1"},{"text":"Uses .plydmg of the ammo type as the damage to deal to shot players instead of .Damage.","key":"AMMO_INTERPRET_PLRDAMAGE_AS_DAMAGE_TO_PLAYER","value":"2","page":[",AmmoDataStructures/AmmoData",",BulletStructures/Bullet"]}]}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Server","added":"2021.03.31","description":"Used by NPC:MoveClimbExec, NPC:MoveJumpExec and NPC:MoveJumpStop.","items":{"item":[{"text":"Move is illegal for some reason.","key":"AIMR_ILLEGAL","value":"-4"},{"text":"Move was blocked by an NPC.","key":"AIMR_BLOCKED_NPC","value":"-3"},{"text":"Move was blocked by the world.","key":"AIMR_BLOCKED_WORLD","value":"-2"},{"text":"Move was blocked by an entity.","key":"AIMR_BLOCKED_ENTITY","value":"-1"},{"text":"Move op was ok.","key":"AIMR_OK","value":"0"},{"text":"Locomotion method has changed.","key":"AIMR_CHANGE_TYPE","value":"1"}]}},"realms":["Server"],"type":"Enum"},
{"enum":{"realm":"Shared","description":{"text":"Enumerations used by functions like Weapon:SendWeaponAnim & Entity:SelectWeightedSequence.","bug":{"text":"Some activity enums are unlisted since they do not exist as variables in-game, but still link to existing player animations.","issue":"3075"}},"items":{"item":[{"key":"ACT_INVALID","value":"-1"},{"key":"ACT_RESET","value":"0"},{"key":"ACT_IDLE","value":"1"},{"key":"ACT_TRANSITION","value":"2"},{"key":"ACT_COVER","value":"3"},{"key":"ACT_COVER_MED","value":"4"},{"key":"ACT_COVER_LOW","value":"5"},{"key":"ACT_WALK","value":"6"},{"key":"ACT_WALK_AIM","value":"7"},{"key":"ACT_WALK_CROUCH","value":"8"},{"key":"ACT_WALK_CROUCH_AIM","value":"9"},{"key":"ACT_RUN","value":"10"},{"key":"ACT_RUN_AIM","value":"11"},{"key":"ACT_RUN_CROUCH","value":"12"},{"key":"ACT_RUN_CROUCH_AIM","value":"13"},{"key":"ACT_RUN_PROTECTED","value":"14"},{"key":"ACT_SCRIPT_CUSTOM_MOVE","value":"15"},{"key":"ACT_RANGE_ATTACK1","value":"16"},{"key":"ACT_RANGE_ATTACK2","value":"17"},{"key":"ACT_RANGE_ATTACK1_LOW","value":"18"},{"key":"ACT_RANGE_ATTACK2_LOW","value":"19"},{"key":"ACT_DIESIMPLE","value":"20"},{"key":"ACT_DIEBACKWARD","value":"21"},{"key":"ACT_DIEFORWARD","value":"22"},{"key":"ACT_DIEVIOLENT","value":"23"},{"key":"ACT_DIERAGDOLL","value":"24"},{"key":"ACT_FLY","value":"25"},{"key":"ACT_HOVER","value":"26"},{"key":"ACT_GLIDE","value":"27"},{"key":"ACT_SWIM","value":"28"},{"key":"ACT_SWIM_IDLE","value":"29"},{"key":"ACT_JUMP","value":"30"},{"key":"ACT_HOP","value":"31"},{"key":"ACT_LEAP","value":"32"},{"key":"ACT_LAND","value":"33"},{"key":"ACT_CLIMB_UP","value":"34"},{"key":"ACT_CLIMB_DOWN","value":"35"},{"key":"ACT_CLIMB_DISMOUNT","value":"36"},{"key":"ACT_SHIPLADDER_UP","value":"37"},{"key":"ACT_SHIPLADDER_DOWN","value":"38"},{"key":"ACT_STRAFE_LEFT","value":"39"},{"key":"ACT_STRAFE_RIGHT","value":"40"},{"key":"ACT_ROLL_LEFT","value":"41"},{"key":"ACT_ROLL_RIGHT","value":"42"},{"key":"ACT_TURN_LEFT","value":"43"},{"key":"ACT_TURN_RIGHT","value":"44"},{"key":"ACT_CROUCH","value":"45"},{"key":"ACT_CROUCHIDLE","value":"46"},{"key":"ACT_STAND","value":"47"},{"key":"ACT_USE","value":"48"},{"key":"ACT_SIGNAL1","value":"49"},{"key":"ACT_SIGNAL2","value":"50"},{"key":"ACT_SIGNAL3","value":"51"},{"key":"ACT_SIGNAL_ADVANCE","value":"52"},{"key":"ACT_SIGNAL_FORWARD","value":"53"},{"key":"ACT_SIGNAL_GROUP","value":"54"},{"key":"ACT_SIGNAL_HALT","value":"55"},{"key":"ACT_SIGNAL_LEFT","value":"56"},{"key":"ACT_SIGNAL_RIGHT","value":"57"},{"key":"ACT_SIGNAL_TAKECOVER","value":"58"},{"key":"ACT_LOOKBACK_RIGHT","value":"59"},{"key":"ACT_LOOKBACK_LEFT","value":"60"},{"key":"ACT_COWER","value":"61"},{"key":"ACT_SMALL_FLINCH","value":"62"},{"key":"ACT_BIG_FLINCH","value":"63"},{"key":"ACT_MELEE_ATTACK1","value":"64"},{"key":"ACT_MELEE_ATTACK2","value":"65"},{"key":"ACT_RELOAD","value":"66"},{"key":"ACT_RELOAD_START","value":"67"},{"key":"ACT_RELOAD_FINISH","value":"68"},{"key":"ACT_RELOAD_LOW","value":"69"},{"key":"ACT_ARM","value":"70"},{"key":"ACT_DISARM","value":"71"},{"key":"ACT_DROP_WEAPON","value":"72"},{"key":"ACT_DROP_WEAPON_SHOTGUN","value":"73"},{"key":"ACT_PICKUP_GROUND","value":"74"},{"key":"ACT_PICKUP_RACK","value":"75"},{"key":"ACT_IDLE_ANGRY","value":"76"},{"key":"ACT_IDLE_RELAXED","value":"77"},{"key":"ACT_IDLE_STIMULATED","value":"78"},{"key":"ACT_IDLE_AGITATED","value":"79"},{"key":"ACT_IDLE_STEALTH","value":"80"},{"key":"ACT_IDLE_HURT","value":"81"},{"key":"ACT_WALK_RELAXED","value":"82"},{"key":"ACT_WALK_STIMULATED","value":"83"},{"key":"ACT_WALK_AGITATED","value":"84"},{"key":"ACT_WALK_STEALTH","value":"85"},{"key":"ACT_RUN_RELAXED","value":"86"},{"key":"ACT_RUN_STIMULATED","value":"87"},{"key":"ACT_RUN_AGITATED","value":"88"},{"key":"ACT_RUN_STEALTH","value":"89"},{"key":"ACT_IDLE_AIM_RELAXED","value":"90"},{"key":"ACT_IDLE_AIM_STIMULATED","value":"91"},{"key":"ACT_IDLE_AIM_AGITATED","value":"92"},{"key":"ACT_IDLE_AIM_STEALTH","value":"93"},{"key":"ACT_WALK_AIM_RELAXED","value":"94"},{"key":"ACT_WALK_AIM_STIMULATED","value":"95"},{"key":"ACT_WALK_AIM_AGITATED","value":"96"},{"key":"ACT_WALK_AIM_STEALTH","value":"97"},{"key":"ACT_RUN_AIM_RELAXED","value":"98"},{"key":"ACT_RUN_AIM_STIMULATED","value":"99"},{"key":"ACT_RUN_AIM_AGITATED","value":"100"},{"key":"ACT_RUN_AIM_STEALTH","value":"101"},{"key":"ACT_CROUCHIDLE_STIMULATED","value":"102"},{"key":"ACT_CROUCHIDLE_AIM_STIMULATED","value":"103"},{"key":"ACT_CROUCHIDLE_AGITATED","value":"104"},{"key":"ACT_WALK_HURT","value":"105"},{"key":"ACT_RUN_HURT","value":"106"},{"key":"ACT_SPECIAL_ATTACK1","value":"107"},{"key":"ACT_SPECIAL_ATTACK2","value":"108"},{"key":"ACT_COMBAT_IDLE","value":"109"},{"key":"ACT_WALK_SCARED","value":"110"},{"key":"ACT_RUN_SCARED","value":"111"},{"key":"ACT_VICTORY_DANCE","value":"112"},{"key":"ACT_DIE_HEADSHOT","value":"113"},{"key":"ACT_DIE_CHESTSHOT","value":"114"},{"key":"ACT_DIE_GUTSHOT","value":"115"},{"key":"ACT_DIE_BACKSHOT","value":"116"},{"key":"ACT_FLINCH_HEAD","value":"117"},{"key":"ACT_FLINCH_CHEST","value":"118"},{"key":"ACT_FLINCH_STOMACH","value":"119"},{"key":"ACT_FLINCH_LEFTARM","value":"120"},{"key":"ACT_FLINCH_RIGHTARM","value":"121"},{"key":"ACT_FLINCH_LEFTLEG","value":"122"},{"key":"ACT_FLINCH_RIGHTLEG","value":"123"},{"key":"ACT_FLINCH_PHYSICS","value":"124"},{"key":"ACT_IDLE_ON_FIRE","value":"125"},{"key":"ACT_WALK_ON_FIRE","value":"126"},{"key":"ACT_RUN_ON_FIRE","value":"127"},{"key":"ACT_RAPPEL_LOOP","value":"128"},{"key":"ACT_180_LEFT","value":"129"},{"key":"ACT_180_RIGHT","value":"130"},{"key":"ACT_90_LEFT","value":"131"},{"key":"ACT_90_RIGHT","value":"132"},{"key":"ACT_STEP_LEFT","value":"133"},{"key":"ACT_STEP_RIGHT","value":"134"},{"key":"ACT_STEP_BACK","value":"135"},{"key":"ACT_STEP_FORE","value":"136"},{"key":"ACT_GESTURE_RANGE_ATTACK1","value":"137"},{"key":"ACT_GESTURE_RANGE_ATTACK2","value":"138"},{"key":"ACT_GESTURE_MELEE_ATTACK1","value":"139"},{"key":"ACT_GESTURE_MELEE_ATTACK2","value":"140"},{"key":"ACT_GESTURE_RANGE_ATTACK1_LOW","value":"141"},{"key":"ACT_GESTURE_RANGE_ATTACK2_LOW","value":"142"},{"key":"ACT_MELEE_ATTACK_SWING_GESTURE","value":"143"},{"key":"ACT_GESTURE_SMALL_FLINCH","value":"144"},{"key":"ACT_GESTURE_BIG_FLINCH","value":"145"},{"key":"ACT_GESTURE_FLINCH_BLAST","value":"146"},{"key":"ACT_GESTURE_FLINCH_BLAST_SHOTGUN","value":"147"},{"key":"ACT_GESTURE_FLINCH_BLAST_DAMAGED","value":"148"},{"key":"ACT_GESTURE_FLINCH_BLAST_DAMAGED_SHOTGUN","value":"149"},{"key":"ACT_GESTURE_FLINCH_HEAD","value":"150"},{"key":"ACT_GESTURE_FLINCH_CHEST","value":"151"},{"key":"ACT_GESTURE_FLINCH_STOMACH","value":"152"},{"key":"ACT_GESTURE_FLINCH_LEFTARM","value":"153"},{"key":"ACT_GESTURE_FLINCH_RIGHTARM","value":"154"},{"key":"ACT_GESTURE_FLINCH_LEFTLEG","value":"155"},{"key":"ACT_GESTURE_FLINCH_RIGHTLEG","value":"156"},{"key":"ACT_GESTURE_TURN_LEFT","value":"157"},{"key":"ACT_GESTURE_TURN_RIGHT","value":"158"},{"key":"ACT_GESTURE_TURN_LEFT45","value":"159"},{"key":"ACT_GESTURE_TURN_RIGHT45","value":"160"},{"key":"ACT_GESTURE_TURN_LEFT90","value":"161"},{"key":"ACT_GESTURE_TURN_RIGHT90","value":"162"},{"key":"ACT_GESTURE_TURN_LEFT45_FLAT","value":"163"},{"key":"ACT_GESTURE_TURN_RIGHT45_FLAT","value":"164"},{"key":"ACT_GESTURE_TURN_LEFT90_FLAT","value":"165"},{"key":"ACT_GESTURE_TURN_RIGHT90_FLAT","value":"166"},{"key":"ACT_BARNACLE_HIT","value":"167"},{"key":"ACT_BARNACLE_PULL","value":"168"},{"key":"ACT_BARNACLE_CHOMP","value":"169"},{"key":"ACT_BARNACLE_CHEW","value":"170"},{"key":"ACT_DO_NOT_DISTURB","value":"171"},{"key":"ACT_VM_DRAW","value":"172"},{"key":"ACT_VM_HOLSTER","value":"173"},{"key":"ACT_VM_IDLE","value":"174"},{"key":"ACT_VM_FIDGET","value":"175"},{"key":"ACT_VM_PULLBACK","value":"176"},{"key":"ACT_VM_PULLBACK_HIGH","value":"177"},{"key":"ACT_VM_PULLBACK_LOW","value":"178"},{"key":"ACT_VM_THROW","value":"179"},{"key":"ACT_VM_PULLPIN","value":"180"},{"key":"ACT_VM_PRIMARYATTACK","value":"181"},{"key":"ACT_VM_SECONDARYATTACK","value":"182"},{"key":"ACT_VM_RELOAD","value":"183"},{"key":"ACT_VM_DRYFIRE","value":"186"},{"key":"ACT_VM_HITLEFT","value":"187"},{"key":"ACT_VM_HITLEFT2","value":"188"},{"key":"ACT_VM_HITRIGHT","value":"189"},{"key":"ACT_VM_HITRIGHT2","value":"190"},{"key":"ACT_VM_HITCENTER","value":"191"},{"key":"ACT_VM_HITCENTER2","value":"192"},{"key":"ACT_VM_MISSLEFT","value":"193"},{"key":"ACT_VM_MISSLEFT2","value":"194"},{"key":"ACT_VM_MISSRIGHT","value":"195"},{"key":"ACT_VM_MISSRIGHT2","value":"196"},{"key":"ACT_VM_MISSCENTER","value":"197"},{"key":"ACT_VM_MISSCENTER2","value":"198"},{"key":"ACT_VM_HAULBACK","value":"199"},{"key":"ACT_VM_SWINGHARD","value":"200"},{"key":"ACT_VM_SWINGMISS","value":"201"},{"key":"ACT_VM_SWINGHIT","value":"202"},{"key":"ACT_VM_IDLE_TO_LOWERED","value":"203"},{"key":"ACT_VM_IDLE_LOWERED","value":"204"},{"key":"ACT_VM_LOWERED_TO_IDLE","value":"205"},{"key":"ACT_VM_RECOIL1","value":"206"},{"key":"ACT_VM_RECOIL2","value":"207"},{"key":"ACT_VM_RECOIL3","value":"208"},{"key":"ACT_VM_PICKUP","value":"209"},{"key":"ACT_VM_RELEASE","value":"210"},{"key":"ACT_VM_ATTACH_SILENCER","value":"211"},{"key":"ACT_VM_DETACH_SILENCER","value":"212"},{"key":"ACT_SLAM_STICKWALL_IDLE","value":"229"},{"key":"ACT_SLAM_STICKWALL_ND_IDLE","value":"230"},{"key":"ACT_SLAM_STICKWALL_ATTACH","value":"231"},{"key":"ACT_SLAM_STICKWALL_ATTACH2","value":"232"},{"key":"ACT_SLAM_STICKWALL_ND_ATTACH","value":"233"},{"key":"ACT_SLAM_STICKWALL_ND_ATTACH2","value":"234"},{"key":"ACT_SLAM_STICKWALL_DETONATE","value":"235"},{"key":"ACT_SLAM_STICKWALL_DETONATOR_HOLSTER","value":"236"},{"key":"ACT_SLAM_STICKWALL_DRAW","value":"237"},{"key":"ACT_SLAM_STICKWALL_ND_DRAW","value":"238"},{"key":"ACT_SLAM_STICKWALL_TO_THROW","value":"239"},{"key":"ACT_SLAM_STICKWALL_TO_THROW_ND","value":"240"},{"key":"ACT_SLAM_STICKWALL_TO_TRIPMINE_ND","value":"241"},{"key":"ACT_SLAM_THROW_IDLE","value":"242"},{"key":"ACT_SLAM_THROW_ND_IDLE","value":"243"},{"key":"ACT_SLAM_THROW_THROW","value":"244"},{"key":"ACT_SLAM_THROW_THROW2","value":"245"},{"key":"ACT_SLAM_THROW_THROW_ND","value":"246"},{"key":"ACT_SLAM_THROW_THROW_ND2","value":"247"},{"key":"ACT_SLAM_THROW_DRAW","value":"248"},{"key":"ACT_SLAM_THROW_ND_DRAW","value":"249"},{"key":"ACT_SLAM_THROW_TO_STICKWALL","value":"250"},{"key":"ACT_SLAM_THROW_TO_STICKWALL_ND","value":"251"},{"key":"ACT_SLAM_THROW_DETONATE","value":"252"},{"key":"ACT_SLAM_THROW_DETONATOR_HOLSTER","value":"253"},{"key":"ACT_SLAM_THROW_TO_TRIPMINE_ND","value":"254"},{"key":"ACT_SLAM_TRIPMINE_IDLE","value":"255"},{"key":"ACT_SLAM_TRIPMINE_DRAW","value":"256"},{"key":"ACT_SLAM_TRIPMINE_ATTACH","value":"257"},{"key":"ACT_SLAM_TRIPMINE_ATTACH2","value":"258"},{"key":"ACT_SLAM_TRIPMINE_TO_STICKWALL_ND","value":"259"},{"key":"ACT_SLAM_TRIPMINE_TO_THROW_ND","value":"260"},{"key":"ACT_SLAM_DETONATOR_IDLE","value":"261"},{"key":"ACT_SLAM_DETONATOR_DRAW","value":"262"},{"key":"ACT_SLAM_DETONATOR_DETONATE","value":"263"},{"key":"ACT_SLAM_DETONATOR_HOLSTER","value":"264"},{"key":"ACT_SLAM_DETONATOR_STICKWALL_DRAW","value":"265"},{"key":"ACT_SLAM_DETONATOR_THROW_DRAW","value":"266"},{"key":"ACT_SHOTGUN_RELOAD_START","value":"267"},{"key":"ACT_SHOTGUN_RELOAD_FINISH","value":"268"},{"key":"ACT_SHOTGUN_PUMP","value":"269"},{"key":"ACT_SMG2_IDLE2","value":"270"},{"key":"ACT_SMG2_FIRE2","value":"271"},{"key":"ACT_SMG2_DRAW2","value":"272"},{"key":"ACT_SMG2_RELOAD2","value":"273"},{"key":"ACT_SMG2_DRYFIRE2","value":"274"},{"key":"ACT_SMG2_TOAUTO","value":"275"},{"key":"ACT_SMG2_TOBURST","value":"276"},{"key":"ACT_PHYSCANNON_UPGRADE","value":"277"},{"key":"ACT_RANGE_ATTACK_AR1","value":"278"},{"key":"ACT_RANGE_ATTACK_AR2","value":"279"},{"key":"ACT_RANGE_ATTACK_AR2_LOW","value":"280"},{"key":"ACT_RANGE_ATTACK_AR2_GRENADE","value":"281"},{"key":"ACT_RANGE_ATTACK_HMG1","value":"282"},{"key":"ACT_RANGE_ATTACK_ML","value":"283"},{"key":"ACT_RANGE_ATTACK_SMG1","value":"284"},{"key":"ACT_RANGE_ATTACK_SMG1_LOW","value":"285"},{"key":"ACT_RANGE_ATTACK_SMG2","value":"286"},{"key":"ACT_RANGE_ATTACK_SHOTGUN","value":"287"},{"key":"ACT_RANGE_ATTACK_SHOTGUN_LOW","value":"288"},{"key":"ACT_RANGE_ATTACK_PISTOL","value":"289"},{"key":"ACT_RANGE_ATTACK_PISTOL_LOW","value":"290"},{"key":"ACT_RANGE_ATTACK_SLAM","value":"291"},{"key":"ACT_RANGE_ATTACK_TRIPWIRE","value":"292"},{"key":"ACT_RANGE_ATTACK_THROW","value":"293"},{"key":"ACT_RANGE_ATTACK_SNIPER_RIFLE","value":"294"},{"key":"ACT_RANGE_ATTACK_RPG","value":"295"},{"key":"ACT_MELEE_ATTACK_SWING","value":"296"},{"key":"ACT_RANGE_AIM_LOW","value":"297"},{"key":"ACT_RANGE_AIM_SMG1_LOW","value":"298"},{"key":"ACT_RANGE_AIM_PISTOL_LOW","value":"299"},{"key":"ACT_RANGE_AIM_AR2_LOW","value":"300"},{"key":"ACT_COVER_PISTOL_LOW","value":"301"},{"key":"ACT_COVER_SMG1_LOW","value":"302"},{"key":"ACT_GESTURE_RANGE_ATTACK_AR1","value":"303"},{"key":"ACT_GESTURE_RANGE_ATTACK_AR2","value":"304"},{"key":"ACT_GESTURE_RANGE_ATTACK_AR2_GRENADE","value":"305"},{"key":"ACT_GESTURE_RANGE_ATTACK_HMG1","value":"306"},{"key":"ACT_GESTURE_RANGE_ATTACK_ML","value":"307"},{"key":"ACT_GESTURE_RANGE_ATTACK_SMG1","value":"308"},{"key":"ACT_GESTURE_RANGE_ATTACK_SMG1_LOW","value":"309"},{"key":"ACT_GESTURE_RANGE_ATTACK_SMG2","value":"310"},{"key":"ACT_GESTURE_RANGE_ATTACK_SHOTGUN","value":"311"},{"key":"ACT_GESTURE_RANGE_ATTACK_PISTOL","value":"312"},{"key":"ACT_GESTURE_RANGE_ATTACK_PISTOL_LOW","value":"313"},{"key":"ACT_GESTURE_RANGE_ATTACK_SLAM","value":"314"},{"key":"ACT_GESTURE_RANGE_ATTACK_TRIPWIRE","value":"315"},{"key":"ACT_GESTURE_RANGE_ATTACK_THROW","value":"316"},{"key":"ACT_GESTURE_RANGE_ATTACK_SNIPER_RIFLE","value":"317"},{"key":"ACT_GESTURE_MELEE_ATTACK_SWING","value":"318"},{"key":"ACT_IDLE_RIFLE","value":"319"},{"key":"ACT_IDLE_SMG1","value":"320"},{"key":"ACT_IDLE_ANGRY_SMG1","value":"321"},{"key":"ACT_IDLE_PISTOL","value":"322"},{"key":"ACT_IDLE_ANGRY_PISTOL","value":"323"},{"key":"ACT_IDLE_ANGRY_SHOTGUN","value":"324"},{"key":"ACT_IDLE_STEALTH_PISTOL","value":"325"},{"key":"ACT_IDLE_PACKAGE","value":"326"},{"key":"ACT_WALK_PACKAGE","value":"327"},{"key":"ACT_IDLE_SUITCASE","value":"328"},{"key":"ACT_WALK_SUITCASE","value":"329"},{"key":"ACT_IDLE_SMG1_RELAXED","value":"330"},{"key":"ACT_IDLE_SMG1_STIMULATED","value":"331"},{"key":"ACT_WALK_RIFLE_RELAXED","value":"332"},{"key":"ACT_RUN_RIFLE_RELAXED","value":"333"},{"key":"ACT_WALK_RIFLE_STIMULATED","value":"334"},{"key":"ACT_RUN_RIFLE_STIMULATED","value":"335"},{"key":"ACT_IDLE_AIM_RIFLE_STIMULATED","value":"336"},{"key":"ACT_WALK_AIM_RIFLE_STIMULATED","value":"337"},{"key":"ACT_RUN_AIM_RIFLE_STIMULATED","value":"338"},{"key":"ACT_IDLE_SHOTGUN_RELAXED","value":"339"},{"key":"ACT_IDLE_SHOTGUN_STIMULATED","value":"340"},{"key":"ACT_IDLE_SHOTGUN_AGITATED","value":"341"},{"key":"ACT_WALK_ANGRY","value":"342"},{"key":"ACT_POLICE_HARASS1","value":"343"},{"key":"ACT_POLICE_HARASS2","value":"344"},{"key":"ACT_IDLE_MANNEDGUN","value":"345"},{"key":"ACT_IDLE_MELEE","value":"346"},{"key":"ACT_IDLE_ANGRY_MELEE","value":"347"},{"key":"ACT_IDLE_RPG_RELAXED","value":"348"},{"key":"ACT_IDLE_RPG","value":"349"},{"key":"ACT_IDLE_ANGRY_RPG","value":"350"},{"key":"ACT_COVER_LOW_RPG","value":"351"},{"key":"ACT_WALK_RPG","value":"352"},{"key":"ACT_RUN_RPG","value":"353"},{"key":"ACT_WALK_CROUCH_RPG","value":"354"},{"key":"ACT_RUN_CROUCH_RPG","value":"355"},{"key":"ACT_WALK_RPG_RELAXED","value":"356"},{"key":"ACT_RUN_RPG_RELAXED","value":"357"},{"key":"ACT_WALK_RIFLE","value":"358"},{"key":"ACT_WALK_AIM_RIFLE","value":"359"},{"key":"ACT_WALK_CROUCH_RIFLE","value":"360"},{"key":"ACT_WALK_CROUCH_AIM_RIFLE","value":"361"},{"key":"ACT_RUN_RIFLE","value":"362"},{"key":"ACT_RUN_AIM_RIFLE","value":"363"},{"key":"ACT_RUN_CROUCH_RIFLE","value":"364"},{"key":"ACT_RUN_CROUCH_AIM_RIFLE","value":"365"},{"key":"ACT_RUN_STEALTH_PISTOL","value":"366"},{"key":"ACT_WALK_AIM_SHOTGUN","value":"367"},{"key":"ACT_RUN_AIM_SHOTGUN","value":"368"},{"key":"ACT_WALK_PISTOL","value":"369"},{"key":"ACT_RUN_PISTOL","value":"370"},{"key":"ACT_WALK_AIM_PISTOL","value":"371"},{"key":"ACT_RUN_AIM_PISTOL","value":"372"},{"key":"ACT_WALK_STEALTH_PISTOL","value":"373"},{"key":"ACT_WALK_AIM_STEALTH_PISTOL","value":"374"},{"key":"ACT_RUN_AIM_STEALTH_PISTOL","value":"375"},{"key":"ACT_RELOAD_PISTOL","value":"376"},{"key":"ACT_RELOAD_PISTOL_LOW","value":"377"},{"key":"ACT_RELOAD_SMG1","value":"378"},{"key":"ACT_RELOAD_SMG1_LOW","value":"379"},{"key":"ACT_RELOAD_SHOTGUN","value":"380"},{"key":"ACT_RELOAD_SHOTGUN_LOW","value":"381"},{"key":"ACT_GESTURE_RELOAD","value":"382"},{"key":"ACT_GESTURE_RELOAD_PISTOL","value":"383"},{"key":"ACT_GESTURE_RELOAD_SMG1","value":"384"},{"key":"ACT_GESTURE_RELOAD_SHOTGUN","value":"385"},{"key":"ACT_BUSY_LEAN_LEFT","value":"386"},{"key":"ACT_BUSY_LEAN_LEFT_ENTRY","value":"387"},{"key":"ACT_BUSY_LEAN_LEFT_EXIT","value":"388"},{"key":"ACT_BUSY_LEAN_BACK","value":"389"},{"key":"ACT_BUSY_LEAN_BACK_ENTRY","value":"390"},{"key":"ACT_BUSY_LEAN_BACK_EXIT","value":"391"},{"key":"ACT_BUSY_SIT_GROUND","value":"392"},{"key":"ACT_BUSY_SIT_GROUND_ENTRY","value":"393"},{"key":"ACT_BUSY_SIT_GROUND_EXIT","value":"394"},{"key":"ACT_BUSY_SIT_CHAIR","value":"395"},{"key":"ACT_BUSY_SIT_CHAIR_ENTRY","value":"396"},{"key":"ACT_BUSY_SIT_CHAIR_EXIT","value":"397"},{"key":"ACT_BUSY_STAND","value":"398"},{"key":"ACT_BUSY_QUEUE","value":"399"},{"key":"ACT_DUCK_DODGE","value":"400"},{"key":"ACT_DIE_BARNACLE_SWALLOW","value":"401"},{"key":"ACT_GESTURE_BARNACLE_STRANGLE","value":"402"},{"key":"ACT_PHYSCANNON_DETACH","value":"403"},{"key":"ACT_PHYSCANNON_ANIMATE","value":"404"},{"key":"ACT_PHYSCANNON_ANIMATE_PRE","value":"405"},{"key":"ACT_PHYSCANNON_ANIMATE_POST","value":"406"},{"key":"ACT_DIE_FRONTSIDE","value":"407"},{"key":"ACT_DIE_RIGHTSIDE","value":"408"},{"key":"ACT_DIE_BACKSIDE","value":"409"},{"key":"ACT_DIE_LEFTSIDE","value":"410"},{"key":"ACT_OPEN_DOOR","value":"411"},{"key":"ACT_DI_ALYX_ZOMBIE_MELEE","value":"412"},{"key":"ACT_DI_ALYX_ZOMBIE_TORSO_MELEE","value":"413"},{"key":"ACT_DI_ALYX_HEADCRAB_MELEE","value":"414"},{"key":"ACT_DI_ALYX_ANTLION","value":"415"},{"key":"ACT_DI_ALYX_ZOMBIE_SHOTGUN64","value":"416"},{"key":"ACT_DI_ALYX_ZOMBIE_SHOTGUN26","value":"417"},{"key":"ACT_READINESS_RELAXED_TO_STIMULATED","value":"418"},{"key":"ACT_READINESS_RELAXED_TO_STIMULATED_WALK","value":"419"},{"key":"ACT_READINESS_AGITATED_TO_STIMULATED","value":"420"},{"key":"ACT_READINESS_STIMULATED_TO_RELAXED","value":"421"},{"key":"ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED","value":"422"},{"key":"ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED_WALK","value":"423"},{"key":"ACT_READINESS_PISTOL_AGITATED_TO_STIMULATED","value":"424"},{"key":"ACT_READINESS_PISTOL_STIMULATED_TO_RELAXED","value":"425"},{"key":"ACT_IDLE_CARRY","value":"426"},{"key":"ACT_WALK_CARRY","value":"427"},{"key":"ACT_STARTDYING","value":"428"},{"key":"ACT_DYINGLOOP","value":"429"},{"key":"ACT_DYINGTODEAD","value":"430"},{"key":"ACT_RIDE_MANNED_GUN","value":"431"},{"key":"ACT_VM_SPRINT_ENTER","value":"432"},{"key":"ACT_VM_SPRINT_IDLE","value":"433"},{"key":"ACT_VM_SPRINT_LEAVE","value":"434"},{"key":"ACT_FIRE_START","value":"435"},{"key":"ACT_FIRE_LOOP","value":"436"},{"key":"ACT_FIRE_END","value":"437"},{"key":"ACT_CROUCHING_GRENADEIDLE","value":"438"},{"key":"ACT_CROUCHING_GRENADEREADY","value":"439"},{"key":"ACT_CROUCHING_PRIMARYATTACK","value":"440"},{"key":"ACT_OVERLAY_GRENADEIDLE","value":"441"},{"key":"ACT_OVERLAY_GRENADEREADY","value":"442"},{"key":"ACT_OVERLAY_PRIMARYATTACK","value":"443"},{"key":"ACT_OVERLAY_SHIELD_UP","value":"444"},{"key":"ACT_OVERLAY_SHIELD_DOWN","value":"445"},{"key":"ACT_OVERLAY_SHIELD_UP_IDLE","value":"446"},{"key":"ACT_OVERLAY_SHIELD_ATTACK","value":"447"},{"key":"ACT_OVERLAY_SHIELD_KNOCKBACK","value":"448"},{"key":"ACT_SHIELD_UP","value":"449"},{"key":"ACT_SHIELD_DOWN","value":"450"},{"key":"ACT_SHIELD_UP_IDLE","value":"451"},{"key":"ACT_SHIELD_ATTACK","value":"452"},{"key":"ACT_SHIELD_KNOCKBACK","value":"453"},{"key":"ACT_CROUCHING_SHIELD_UP","value":"454"},{"key":"ACT_CROUCHING_SHIELD_DOWN","value":"455"},{"key":"ACT_CROUCHING_SHIELD_UP_IDLE","value":"456"},{"key":"ACT_CROUCHING_SHIELD_ATTACK","value":"457"},{"key":"ACT_CROUCHING_SHIELD_KNOCKBACK","value":"458"},{"key":"ACT_TURNRIGHT45","value":"459"},{"key":"ACT_TURNLEFT45","value":"460"},{"key":"ACT_TURN","value":"461"},{"key":"ACT_OBJ_ASSEMBLING","value":"462"},{"key":"ACT_OBJ_DISMANTLING","value":"463"},{"key":"ACT_OBJ_STARTUP","value":"464"},{"key":"ACT_OBJ_RUNNING","value":"465"},{"key":"ACT_OBJ_IDLE","value":"466"},{"key":"ACT_OBJ_PLACING","value":"467"},{"key":"ACT_OBJ_DETERIORATING","value":"468"},{"key":"ACT_OBJ_UPGRADING","value":"469"},{"key":"ACT_DEPLOY","value":"470"},{"key":"ACT_DEPLOY_IDLE","value":"471"},{"key":"ACT_UNDEPLOY","value":"472"},{"key":"ACT_GRENADE_ROLL","value":"473"},{"key":"ACT_GRENADE_TOSS","value":"474"},{"key":"ACT_HANDGRENADE_THROW1","value":"475"},{"key":"ACT_HANDGRENADE_THROW2","value":"476"},{"key":"ACT_HANDGRENADE_THROW3","value":"477"},{"key":"ACT_SHOTGUN_IDLE_DEEP","value":"478"},{"key":"ACT_SHOTGUN_IDLE4","value":"479"},{"key":"ACT_GLOCK_SHOOTEMPTY","value":"480"},{"key":"ACT_GLOCK_SHOOT_RELOAD","value":"481"},{"key":"ACT_RPG_DRAW_UNLOADED","value":"482"},{"key":"ACT_RPG_HOLSTER_UNLOADED","value":"483"},{"key":"ACT_RPG_IDLE_UNLOADED","value":"484"},{"key":"ACT_RPG_FIDGET_UNLOADED","value":"485"},{"key":"ACT_CROSSBOW_DRAW_UNLOADED","value":"486"},{"key":"ACT_CROSSBOW_IDLE_UNLOADED","value":"487"},{"key":"ACT_CROSSBOW_FIDGET_UNLOADED","value":"488"},{"key":"ACT_GAUSS_SPINUP","value":"489"},{"key":"ACT_GAUSS_SPINCYCLE","value":"490"},{"key":"ACT_TRIPMINE_GROUND","value":"491"},{"key":"ACT_TRIPMINE_WORLD","value":"492"},{"key":"ACT_VM_PRIMARYATTACK_SILENCED","value":"493"},{"key":"ACT_VM_RELOAD_SILENCED","value":"494"},{"key":"ACT_VM_DRYFIRE_SILENCED","value":"495"},{"key":"ACT_VM_IDLE_SILENCED","value":"496"},{"key":"ACT_VM_DRAW_SILENCED","value":"497"},{"key":"ACT_VM_IDLE_EMPTY_LEFT","value":"498"},{"key":"ACT_VM_DRYFIRE_LEFT","value":"499"},{"key":"ACT_PLAYER_IDLE_FIRE","value":"500"},{"key":"ACT_PLAYER_CROUCH_FIRE","value":"501"},{"key":"ACT_PLAYER_CROUCH_WALK_FIRE","value":"502"},{"key":"ACT_PLAYER_WALK_FIRE","value":"503"},{"key":"ACT_PLAYER_RUN_FIRE","value":"504"},{"key":"ACT_IDLETORUN","value":"505"},{"key":"ACT_RUNTOIDLE","value":"506"},{"key":"ACT_SPRINT","value":"507"},{"key":"ACT_GET_DOWN_STAND","value":"508"},{"key":"ACT_GET_UP_STAND","value":"509"},{"key":"ACT_GET_DOWN_CROUCH","value":"510"},{"key":"ACT_GET_UP_CROUCH","value":"511"},{"key":"ACT_PRONE_FORWARD","value":"512"},{"key":"ACT_PRONE_IDLE","value":"513"},{"key":"ACT_DEEPIDLE1","value":"514"},{"key":"ACT_DEEPIDLE2","value":"515"},{"key":"ACT_DEEPIDLE3","value":"516"},{"key":"ACT_DEEPIDLE4","value":"517"},{"key":"ACT_VM_RELOAD_DEPLOYED","value":"518"},{"key":"ACT_VM_RELOAD_IDLE","value":"519"},{"key":"ACT_VM_DRAW_DEPLOYED","value":"520"},{"key":"ACT_VM_DRAW_EMPTY","value":"521"},{"key":"ACT_VM_PRIMARYATTACK_EMPTY","value":"522"},{"key":"ACT_VM_RELOAD_EMPTY","value":"523"},{"key":"ACT_VM_IDLE_EMPTY","value":"524"},{"key":"ACT_VM_IDLE_DEPLOYED_EMPTY","value":"525"},{"key":"ACT_VM_IDLE_8","value":"526"},{"key":"ACT_VM_IDLE_7","value":"527"},{"key":"ACT_VM_IDLE_6","value":"528"},{"key":"ACT_VM_IDLE_5","value":"529"},{"key":"ACT_VM_IDLE_4","value":"530"},{"key":"ACT_VM_IDLE_3","value":"531"},{"key":"ACT_VM_IDLE_2","value":"532"},{"key":"ACT_VM_IDLE_1","value":"533"},{"key":"ACT_VM_IDLE_DEPLOYED","value":"534"},{"key":"ACT_VM_IDLE_DEPLOYED_8","value":"535"},{"key":"ACT_VM_IDLE_DEPLOYED_7","value":"536"},{"key":"ACT_VM_IDLE_DEPLOYED_6","value":"537"},{"key":"ACT_VM_IDLE_DEPLOYED_5","value":"538"},{"key":"ACT_VM_IDLE_DEPLOYED_4","value":"539"},{"key":"ACT_VM_IDLE_DEPLOYED_3","value":"540"},{"key":"ACT_VM_IDLE_DEPLOYED_2","value":"541"},{"key":"ACT_VM_IDLE_DEPLOYED_1","value":"542"},{"key":"ACT_VM_UNDEPLOY","value":"543"},{"key":"ACT_VM_UNDEPLOY_8","value":"544"},{"key":"ACT_VM_UNDEPLOY_7","value":"545"},{"key":"ACT_VM_UNDEPLOY_6","value":"546"},{"key":"ACT_VM_UNDEPLOY_5","value":"547"},{"key":"ACT_VM_UNDEPLOY_4","value":"548"},{"key":"ACT_VM_UNDEPLOY_3","value":"549"},{"key":"ACT_VM_UNDEPLOY_2","value":"550"},{"key":"ACT_VM_UNDEPLOY_1","value":"551"},{"key":"ACT_VM_UNDEPLOY_EMPTY","value":"552"},{"key":"ACT_VM_DEPLOY","value":"553"},{"key":"ACT_VM_DEPLOY_8","value":"554"},{"key":"ACT_VM_DEPLOY_7","value":"555"},{"key":"ACT_VM_DEPLOY_6","value":"556"},{"key":"ACT_VM_DEPLOY_5","value":"557"},{"key":"ACT_VM_DEPLOY_4","value":"558"},{"key":"ACT_VM_DEPLOY_3","value":"559"},{"key":"ACT_VM_DEPLOY_2","value":"560"},{"key":"ACT_VM_DEPLOY_1","value":"561"},{"key":"ACT_VM_DEPLOY_EMPTY","value":"562"},{"key":"ACT_VM_PRIMARYATTACK_8","value":"563"},{"key":"ACT_VM_PRIMARYATTACK_7","value":"564"},{"key":"ACT_VM_PRIMARYATTACK_6","value":"565"},{"key":"ACT_VM_PRIMARYATTACK_5","value":"566"},{"key":"ACT_VM_PRIMARYATTACK_4","value":"567"},{"key":"ACT_VM_PRIMARYATTACK_3","value":"568"},{"key":"ACT_VM_PRIMARYATTACK_2","value":"569"},{"key":"ACT_VM_PRIMARYATTACK_1","value":"570"},{"key":"ACT_VM_PRIMARYATTACK_DEPLOYED","value":"571"},{"key":"ACT_VM_PRIMARYATTACK_DEPLOYED_8","value":"572"},{"key":"ACT_VM_PRIMARYATTACK_DEPLOYED_7","value":"573"},{"key":"ACT_VM_PRIMARYATTACK_DEPLOYED_6","value":"574"},{"key":"ACT_VM_PRIMARYATTACK_DEPLOYED_5","value":"575"},{"key":"ACT_VM_PRIMARYATTACK_DEPLOYED_4","value":"576"},{"key":"ACT_VM_PRIMARYATTACK_DEPLOYED_3","value":"577"},{"key":"ACT_VM_PRIMARYATTACK_DEPLOYED_2","value":"578"},{"key":"ACT_VM_PRIMARYATTACK_DEPLOYED_1","value":"579"},{"key":"ACT_VM_PRIMARYATTACK_DEPLOYED_EMPTY","value":"580"},{"key":"ACT_DOD_DEPLOYED","value":"581"},{"key":"ACT_DOD_PRONE_DEPLOYED","value":"582"},{"key":"ACT_DOD_IDLE_ZOOMED","value":"583"},{"key":"ACT_DOD_WALK_ZOOMED","value":"584"},{"key":"ACT_DOD_CROUCH_ZOOMED","value":"585"},{"key":"ACT_DOD_CROUCHWALK_ZOOMED","value":"586"},{"key":"ACT_DOD_PRONE_ZOOMED","value":"587"},{"key":"ACT_DOD_PRONE_FORWARD_ZOOMED","value":"588"},{"key":"ACT_DOD_PRIMARYATTACK_DEPLOYED","value":"589"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_DEPLOYED","value":"590"},{"key":"ACT_DOD_RELOAD_DEPLOYED","value":"591"},{"key":"ACT_DOD_RELOAD_PRONE_DEPLOYED","value":"592"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE","value":"593"},{"key":"ACT_DOD_SECONDARYATTACK_PRONE","value":"594"},{"key":"ACT_DOD_RELOAD_CROUCH","value":"595"},{"key":"ACT_DOD_RELOAD_PRONE","value":"596"},{"key":"ACT_DOD_STAND_IDLE","value":"597"},{"key":"ACT_DOD_STAND_AIM","value":"598"},{"key":"ACT_DOD_CROUCH_IDLE","value":"599"},{"key":"ACT_DOD_CROUCH_AIM","value":"600"},{"key":"ACT_DOD_CROUCHWALK_IDLE","value":"601"},{"key":"ACT_DOD_CROUCHWALK_AIM","value":"602"},{"key":"ACT_DOD_WALK_IDLE","value":"603"},{"key":"ACT_DOD_WALK_AIM","value":"604"},{"key":"ACT_DOD_RUN_IDLE","value":"605"},{"key":"ACT_DOD_RUN_AIM","value":"606"},{"key":"ACT_DOD_STAND_AIM_PISTOL","value":"607"},{"key":"ACT_DOD_CROUCH_AIM_PISTOL","value":"608"},{"key":"ACT_DOD_CROUCHWALK_AIM_PISTOL","value":"609"},{"key":"ACT_DOD_WALK_AIM_PISTOL","value":"610"},{"key":"ACT_DOD_RUN_AIM_PISTOL","value":"611"},{"key":"ACT_DOD_PRONE_AIM_PISTOL","value":"612"},{"key":"ACT_DOD_STAND_IDLE_PISTOL","value":"613"},{"key":"ACT_DOD_CROUCH_IDLE_PISTOL","value":"614"},{"key":"ACT_DOD_CROUCHWALK_IDLE_PISTOL","value":"615"},{"key":"ACT_DOD_WALK_IDLE_PISTOL","value":"616"},{"key":"ACT_DOD_RUN_IDLE_PISTOL","value":"617"},{"key":"ACT_DOD_SPRINT_IDLE_PISTOL","value":"618"},{"key":"ACT_DOD_PRONEWALK_IDLE_PISTOL","value":"619"},{"key":"ACT_DOD_STAND_AIM_C96","value":"620"},{"key":"ACT_DOD_CROUCH_AIM_C96","value":"621"},{"key":"ACT_DOD_CROUCHWALK_AIM_C96","value":"622"},{"key":"ACT_DOD_WALK_AIM_C96","value":"623"},{"key":"ACT_DOD_RUN_AIM_C96","value":"624"},{"key":"ACT_DOD_PRONE_AIM_C96","value":"625"},{"key":"ACT_DOD_STAND_IDLE_C96","value":"626"},{"key":"ACT_DOD_CROUCH_IDLE_C96","value":"627"},{"key":"ACT_DOD_CROUCHWALK_IDLE_C96","value":"628"},{"key":"ACT_DOD_WALK_IDLE_C96","value":"629"},{"key":"ACT_DOD_RUN_IDLE_C96","value":"630"},{"key":"ACT_DOD_SPRINT_IDLE_C96","value":"631"},{"key":"ACT_DOD_PRONEWALK_IDLE_C96","value":"632"},{"key":"ACT_DOD_STAND_AIM_RIFLE","value":"633"},{"key":"ACT_DOD_CROUCH_AIM_RIFLE","value":"634"},{"key":"ACT_DOD_CROUCHWALK_AIM_RIFLE","value":"635"},{"key":"ACT_DOD_WALK_AIM_RIFLE","value":"636"},{"key":"ACT_DOD_RUN_AIM_RIFLE","value":"637"},{"key":"ACT_DOD_PRONE_AIM_RIFLE","value":"638"},{"key":"ACT_DOD_STAND_IDLE_RIFLE","value":"639"},{"key":"ACT_DOD_CROUCH_IDLE_RIFLE","value":"640"},{"key":"ACT_DOD_CROUCHWALK_IDLE_RIFLE","value":"641"},{"key":"ACT_DOD_WALK_IDLE_RIFLE","value":"642"},{"key":"ACT_DOD_RUN_IDLE_RIFLE","value":"643"},{"key":"ACT_DOD_SPRINT_IDLE_RIFLE","value":"644"},{"key":"ACT_DOD_PRONEWALK_IDLE_RIFLE","value":"645"},{"key":"ACT_DOD_STAND_AIM_BOLT","value":"646"},{"key":"ACT_DOD_CROUCH_AIM_BOLT","value":"647"},{"key":"ACT_DOD_CROUCHWALK_AIM_BOLT","value":"648"},{"key":"ACT_DOD_WALK_AIM_BOLT","value":"649"},{"key":"ACT_DOD_RUN_AIM_BOLT","value":"650"},{"key":"ACT_DOD_PRONE_AIM_BOLT","value":"651"},{"key":"ACT_DOD_STAND_IDLE_BOLT","value":"652"},{"key":"ACT_DOD_CROUCH_IDLE_BOLT","value":"653"},{"key":"ACT_DOD_CROUCHWALK_IDLE_BOLT","value":"654"},{"key":"ACT_DOD_WALK_IDLE_BOLT","value":"655"},{"key":"ACT_DOD_RUN_IDLE_BOLT","value":"656"},{"key":"ACT_DOD_SPRINT_IDLE_BOLT","value":"657"},{"key":"ACT_DOD_PRONEWALK_IDLE_BOLT","value":"658"},{"key":"ACT_DOD_STAND_AIM_TOMMY","value":"659"},{"key":"ACT_DOD_CROUCH_AIM_TOMMY","value":"660"},{"key":"ACT_DOD_CROUCHWALK_AIM_TOMMY","value":"661"},{"key":"ACT_DOD_WALK_AIM_TOMMY","value":"662"},{"key":"ACT_DOD_RUN_AIM_TOMMY","value":"663"},{"key":"ACT_DOD_PRONE_AIM_TOMMY","value":"664"},{"key":"ACT_DOD_STAND_IDLE_TOMMY","value":"665"},{"key":"ACT_DOD_CROUCH_IDLE_TOMMY","value":"666"},{"key":"ACT_DOD_CROUCHWALK_IDLE_TOMMY","value":"667"},{"key":"ACT_DOD_WALK_IDLE_TOMMY","value":"668"},{"key":"ACT_DOD_RUN_IDLE_TOMMY","value":"669"},{"key":"ACT_DOD_SPRINT_IDLE_TOMMY","value":"670"},{"key":"ACT_DOD_PRONEWALK_IDLE_TOMMY","value":"671"},{"key":"ACT_DOD_STAND_AIM_MP40","value":"672"},{"key":"ACT_DOD_CROUCH_AIM_MP40","value":"673"},{"key":"ACT_DOD_CROUCHWALK_AIM_MP40","value":"674"},{"key":"ACT_DOD_WALK_AIM_MP40","value":"675"},{"key":"ACT_DOD_RUN_AIM_MP40","value":"676"},{"key":"ACT_DOD_PRONE_AIM_MP40","value":"677"},{"key":"ACT_DOD_STAND_IDLE_MP40","value":"678"},{"key":"ACT_DOD_CROUCH_IDLE_MP40","value":"679"},{"key":"ACT_DOD_CROUCHWALK_IDLE_MP40","value":"680"},{"key":"ACT_DOD_WALK_IDLE_MP40","value":"681"},{"key":"ACT_DOD_RUN_IDLE_MP40","value":"682"},{"key":"ACT_DOD_SPRINT_IDLE_MP40","value":"683"},{"key":"ACT_DOD_PRONEWALK_IDLE_MP40","value":"684"},{"key":"ACT_DOD_STAND_AIM_MP44","value":"685"},{"key":"ACT_DOD_CROUCH_AIM_MP44","value":"686"},{"key":"ACT_DOD_CROUCHWALK_AIM_MP44","value":"687"},{"key":"ACT_DOD_WALK_AIM_MP44","value":"688"},{"key":"ACT_DOD_RUN_AIM_MP44","value":"689"},{"key":"ACT_DOD_PRONE_AIM_MP44","value":"690"},{"key":"ACT_DOD_STAND_IDLE_MP44","value":"691"},{"key":"ACT_DOD_CROUCH_IDLE_MP44","value":"692"},{"key":"ACT_DOD_CROUCHWALK_IDLE_MP44","value":"693"},{"key":"ACT_DOD_WALK_IDLE_MP44","value":"694"},{"key":"ACT_DOD_RUN_IDLE_MP44","value":"695"},{"key":"ACT_DOD_SPRINT_IDLE_MP44","value":"696"},{"key":"ACT_DOD_PRONEWALK_IDLE_MP44","value":"697"},{"key":"ACT_DOD_STAND_AIM_GREASE","value":"698"},{"key":"ACT_DOD_CROUCH_AIM_GREASE","value":"699"},{"key":"ACT_DOD_CROUCHWALK_AIM_GREASE","value":"700"},{"key":"ACT_DOD_WALK_AIM_GREASE","value":"701"},{"key":"ACT_DOD_RUN_AIM_GREASE","value":"702"},{"key":"ACT_DOD_PRONE_AIM_GREASE","value":"703"},{"key":"ACT_DOD_STAND_IDLE_GREASE","value":"704"},{"key":"ACT_DOD_CROUCH_IDLE_GREASE","value":"705"},{"key":"ACT_DOD_CROUCHWALK_IDLE_GREASE","value":"706"},{"key":"ACT_DOD_WALK_IDLE_GREASE","value":"707"},{"key":"ACT_DOD_RUN_IDLE_GREASE","value":"708"},{"key":"ACT_DOD_SPRINT_IDLE_GREASE","value":"709"},{"key":"ACT_DOD_PRONEWALK_IDLE_GREASE","value":"710"},{"key":"ACT_DOD_STAND_AIM_MG","value":"711"},{"key":"ACT_DOD_CROUCH_AIM_MG","value":"712"},{"key":"ACT_DOD_CROUCHWALK_AIM_MG","value":"713"},{"key":"ACT_DOD_WALK_AIM_MG","value":"714"},{"key":"ACT_DOD_RUN_AIM_MG","value":"715"},{"key":"ACT_DOD_PRONE_AIM_MG","value":"716"},{"key":"ACT_DOD_STAND_IDLE_MG","value":"717"},{"key":"ACT_DOD_CROUCH_IDLE_MG","value":"718"},{"key":"ACT_DOD_CROUCHWALK_IDLE_MG","value":"719"},{"key":"ACT_DOD_WALK_IDLE_MG","value":"720"},{"key":"ACT_DOD_RUN_IDLE_MG","value":"721"},{"key":"ACT_DOD_SPRINT_IDLE_MG","value":"722"},{"key":"ACT_DOD_PRONEWALK_IDLE_MG","value":"723"},{"key":"ACT_DOD_STAND_AIM_30CAL","value":"724"},{"key":"ACT_DOD_CROUCH_AIM_30CAL","value":"725"},{"key":"ACT_DOD_CROUCHWALK_AIM_30CAL","value":"726"},{"key":"ACT_DOD_WALK_AIM_30CAL","value":"727"},{"key":"ACT_DOD_RUN_AIM_30CAL","value":"728"},{"key":"ACT_DOD_PRONE_AIM_30CAL","value":"729"},{"key":"ACT_DOD_STAND_IDLE_30CAL","value":"730"},{"key":"ACT_DOD_CROUCH_IDLE_30CAL","value":"731"},{"key":"ACT_DOD_CROUCHWALK_IDLE_30CAL","value":"732"},{"key":"ACT_DOD_WALK_IDLE_30CAL","value":"733"},{"key":"ACT_DOD_RUN_IDLE_30CAL","value":"734"},{"key":"ACT_DOD_SPRINT_IDLE_30CAL","value":"735"},{"key":"ACT_DOD_PRONEWALK_IDLE_30CAL","value":"736"},{"key":"ACT_DOD_STAND_AIM_GREN_FRAG","value":"737"},{"key":"ACT_DOD_CROUCH_AIM_GREN_FRAG","value":"738"},{"key":"ACT_DOD_CROUCHWALK_AIM_GREN_FRAG","value":"739"},{"key":"ACT_DOD_WALK_AIM_GREN_FRAG","value":"740"},{"key":"ACT_DOD_RUN_AIM_GREN_FRAG","value":"741"},{"key":"ACT_DOD_PRONE_AIM_GREN_FRAG","value":"742"},{"key":"ACT_DOD_SPRINT_AIM_GREN_FRAG","value":"743"},{"key":"ACT_DOD_PRONEWALK_AIM_GREN_FRAG","value":"744"},{"key":"ACT_DOD_STAND_AIM_GREN_STICK","value":"745"},{"key":"ACT_DOD_CROUCH_AIM_GREN_STICK","value":"746"},{"key":"ACT_DOD_CROUCHWALK_AIM_GREN_STICK","value":"747"},{"key":"ACT_DOD_WALK_AIM_GREN_STICK","value":"748"},{"key":"ACT_DOD_RUN_AIM_GREN_STICK","value":"749"},{"key":"ACT_DOD_PRONE_AIM_GREN_STICK","value":"750"},{"key":"ACT_DOD_SPRINT_AIM_GREN_STICK","value":"751"},{"key":"ACT_DOD_PRONEWALK_AIM_GREN_STICK","value":"752"},{"key":"ACT_DOD_STAND_AIM_KNIFE","value":"753"},{"key":"ACT_DOD_CROUCH_AIM_KNIFE","value":"754"},{"key":"ACT_DOD_CROUCHWALK_AIM_KNIFE","value":"755"},{"key":"ACT_DOD_WALK_AIM_KNIFE","value":"756"},{"key":"ACT_DOD_RUN_AIM_KNIFE","value":"757"},{"key":"ACT_DOD_PRONE_AIM_KNIFE","value":"758"},{"key":"ACT_DOD_SPRINT_AIM_KNIFE","value":"759"},{"key":"ACT_DOD_PRONEWALK_AIM_KNIFE","value":"760"},{"key":"ACT_DOD_STAND_AIM_SPADE","value":"761"},{"key":"ACT_DOD_CROUCH_AIM_SPADE","value":"762"},{"key":"ACT_DOD_CROUCHWALK_AIM_SPADE","value":"763"},{"key":"ACT_DOD_WALK_AIM_SPADE","value":"764"},{"key":"ACT_DOD_RUN_AIM_SPADE","value":"765"},{"key":"ACT_DOD_PRONE_AIM_SPADE","value":"766"},{"key":"ACT_DOD_SPRINT_AIM_SPADE","value":"767"},{"key":"ACT_DOD_PRONEWALK_AIM_SPADE","value":"768"},{"key":"ACT_DOD_STAND_AIM_BAZOOKA","value":"769"},{"key":"ACT_DOD_CROUCH_AIM_BAZOOKA","value":"770"},{"key":"ACT_DOD_CROUCHWALK_AIM_BAZOOKA","value":"771"},{"key":"ACT_DOD_WALK_AIM_BAZOOKA","value":"772"},{"key":"ACT_DOD_RUN_AIM_BAZOOKA","value":"773"},{"key":"ACT_DOD_PRONE_AIM_BAZOOKA","value":"774"},{"key":"ACT_DOD_STAND_IDLE_BAZOOKA","value":"775"},{"key":"ACT_DOD_CROUCH_IDLE_BAZOOKA","value":"776"},{"key":"ACT_DOD_CROUCHWALK_IDLE_BAZOOKA","value":"777"},{"key":"ACT_DOD_WALK_IDLE_BAZOOKA","value":"778"},{"key":"ACT_DOD_RUN_IDLE_BAZOOKA","value":"779"},{"key":"ACT_DOD_SPRINT_IDLE_BAZOOKA","value":"780"},{"key":"ACT_DOD_PRONEWALK_IDLE_BAZOOKA","value":"781"},{"key":"ACT_DOD_STAND_AIM_PSCHRECK","value":"782"},{"key":"ACT_DOD_CROUCH_AIM_PSCHRECK","value":"783"},{"key":"ACT_DOD_CROUCHWALK_AIM_PSCHRECK","value":"784"},{"key":"ACT_DOD_WALK_AIM_PSCHRECK","value":"785"},{"key":"ACT_DOD_RUN_AIM_PSCHRECK","value":"786"},{"key":"ACT_DOD_PRONE_AIM_PSCHRECK","value":"787"},{"key":"ACT_DOD_STAND_IDLE_PSCHRECK","value":"788"},{"key":"ACT_DOD_CROUCH_IDLE_PSCHRECK","value":"789"},{"key":"ACT_DOD_CROUCHWALK_IDLE_PSCHRECK","value":"790"},{"key":"ACT_DOD_WALK_IDLE_PSCHRECK","value":"791"},{"key":"ACT_DOD_RUN_IDLE_PSCHRECK","value":"792"},{"key":"ACT_DOD_SPRINT_IDLE_PSCHRECK","value":"793"},{"key":"ACT_DOD_PRONEWALK_IDLE_PSCHRECK","value":"794"},{"key":"ACT_DOD_STAND_AIM_BAR","value":"795"},{"key":"ACT_DOD_CROUCH_AIM_BAR","value":"796"},{"key":"ACT_DOD_CROUCHWALK_AIM_BAR","value":"797"},{"key":"ACT_DOD_WALK_AIM_BAR","value":"798"},{"key":"ACT_DOD_RUN_AIM_BAR","value":"799"},{"key":"ACT_DOD_PRONE_AIM_BAR","value":"800"},{"key":"ACT_DOD_STAND_IDLE_BAR","value":"801"},{"key":"ACT_DOD_CROUCH_IDLE_BAR","value":"802"},{"key":"ACT_DOD_CROUCHWALK_IDLE_BAR","value":"803"},{"key":"ACT_DOD_WALK_IDLE_BAR","value":"804"},{"key":"ACT_DOD_RUN_IDLE_BAR","value":"805"},{"key":"ACT_DOD_SPRINT_IDLE_BAR","value":"806"},{"key":"ACT_DOD_PRONEWALK_IDLE_BAR","value":"807"},{"key":"ACT_DOD_STAND_ZOOM_RIFLE","value":"808"},{"key":"ACT_DOD_CROUCH_ZOOM_RIFLE","value":"809"},{"key":"ACT_DOD_CROUCHWALK_ZOOM_RIFLE","value":"810"},{"key":"ACT_DOD_WALK_ZOOM_RIFLE","value":"811"},{"key":"ACT_DOD_RUN_ZOOM_RIFLE","value":"812"},{"key":"ACT_DOD_PRONE_ZOOM_RIFLE","value":"813"},{"key":"ACT_DOD_STAND_ZOOM_BOLT","value":"814"},{"key":"ACT_DOD_CROUCH_ZOOM_BOLT","value":"815"},{"key":"ACT_DOD_CROUCHWALK_ZOOM_BOLT","value":"816"},{"key":"ACT_DOD_WALK_ZOOM_BOLT","value":"817"},{"key":"ACT_DOD_RUN_ZOOM_BOLT","value":"818"},{"key":"ACT_DOD_PRONE_ZOOM_BOLT","value":"819"},{"key":"ACT_DOD_STAND_ZOOM_BAZOOKA","value":"820"},{"key":"ACT_DOD_CROUCH_ZOOM_BAZOOKA","value":"821"},{"key":"ACT_DOD_CROUCHWALK_ZOOM_BAZOOKA","value":"822"},{"key":"ACT_DOD_WALK_ZOOM_BAZOOKA","value":"823"},{"key":"ACT_DOD_RUN_ZOOM_BAZOOKA","value":"824"},{"key":"ACT_DOD_PRONE_ZOOM_BAZOOKA","value":"825"},{"key":"ACT_DOD_STAND_ZOOM_PSCHRECK","value":"826"},{"key":"ACT_DOD_CROUCH_ZOOM_PSCHRECK","value":"827"},{"key":"ACT_DOD_CROUCHWALK_ZOOM_PSCHRECK","value":"828"},{"key":"ACT_DOD_WALK_ZOOM_PSCHRECK","value":"829"},{"key":"ACT_DOD_RUN_ZOOM_PSCHRECK","value":"830"},{"key":"ACT_DOD_PRONE_ZOOM_PSCHRECK","value":"831"},{"key":"ACT_DOD_DEPLOY_RIFLE","value":"832"},{"key":"ACT_DOD_DEPLOY_TOMMY","value":"833"},{"key":"ACT_DOD_DEPLOY_MG","value":"834"},{"key":"ACT_DOD_DEPLOY_30CAL","value":"835"},{"key":"ACT_DOD_PRONE_DEPLOY_RIFLE","value":"836"},{"key":"ACT_DOD_PRONE_DEPLOY_TOMMY","value":"837"},{"key":"ACT_DOD_PRONE_DEPLOY_MG","value":"838"},{"key":"ACT_DOD_PRONE_DEPLOY_30CAL","value":"839"},{"key":"ACT_DOD_PRIMARYATTACK_RIFLE","value":"840"},{"key":"ACT_DOD_SECONDARYATTACK_RIFLE","value":"841"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_RIFLE","value":"842"},{"key":"ACT_DOD_SECONDARYATTACK_PRONE_RIFLE","value":"843"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_DEPLOYED_RIFLE","value":"844"},{"key":"ACT_DOD_PRIMARYATTACK_DEPLOYED_RIFLE","value":"845"},{"key":"ACT_DOD_PRIMARYATTACK_BOLT","value":"846"},{"key":"ACT_DOD_SECONDARYATTACK_BOLT","value":"847"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_BOLT","value":"848"},{"key":"ACT_DOD_SECONDARYATTACK_PRONE_BOLT","value":"849"},{"key":"ACT_DOD_PRIMARYATTACK_TOMMY","value":"850"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_TOMMY","value":"851"},{"key":"ACT_DOD_SECONDARYATTACK_TOMMY","value":"852"},{"key":"ACT_DOD_SECONDARYATTACK_PRONE_TOMMY","value":"853"},{"key":"ACT_DOD_PRIMARYATTACK_MP40","value":"854"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_MP40","value":"855"},{"key":"ACT_DOD_SECONDARYATTACK_MP40","value":"856"},{"key":"ACT_DOD_SECONDARYATTACK_PRONE_MP40","value":"857"},{"key":"ACT_DOD_PRIMARYATTACK_MP44","value":"858"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_MP44","value":"859"},{"key":"ACT_DOD_PRIMARYATTACK_GREASE","value":"860"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_GREASE","value":"861"},{"key":"ACT_DOD_PRIMARYATTACK_PISTOL","value":"862"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_PISTOL","value":"863"},{"key":"ACT_DOD_PRIMARYATTACK_C96","value":"864"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_C96","value":"865"},{"key":"ACT_DOD_PRIMARYATTACK_MG","value":"866"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_MG","value":"867"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_DEPLOYED_MG","value":"868"},{"key":"ACT_DOD_PRIMARYATTACK_DEPLOYED_MG","value":"869"},{"key":"ACT_DOD_PRIMARYATTACK_30CAL","value":"870"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_30CAL","value":"871"},{"key":"ACT_DOD_PRIMARYATTACK_DEPLOYED_30CAL","value":"872"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_DEPLOYED_30CAL","value":"873"},{"key":"ACT_DOD_PRIMARYATTACK_GREN_FRAG","value":"874"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_GREN_FRAG","value":"875"},{"key":"ACT_DOD_PRIMARYATTACK_GREN_STICK","value":"876"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_GREN_STICK","value":"877"},{"key":"ACT_DOD_PRIMARYATTACK_KNIFE","value":"878"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_KNIFE","value":"879"},{"key":"ACT_DOD_PRIMARYATTACK_SPADE","value":"880"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_SPADE","value":"881"},{"key":"ACT_DOD_PRIMARYATTACK_BAZOOKA","value":"882"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_BAZOOKA","value":"883"},{"key":"ACT_DOD_PRIMARYATTACK_PSCHRECK","value":"884"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_PSCHRECK","value":"885"},{"key":"ACT_DOD_PRIMARYATTACK_BAR","value":"886"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_BAR","value":"887"},{"key":"ACT_DOD_RELOAD_GARAND","value":"888"},{"key":"ACT_DOD_RELOAD_K43","value":"889"},{"key":"ACT_DOD_RELOAD_BAR","value":"890"},{"key":"ACT_DOD_RELOAD_MP40","value":"891"},{"key":"ACT_DOD_RELOAD_MP44","value":"892"},{"key":"ACT_DOD_RELOAD_BOLT","value":"893"},{"key":"ACT_DOD_RELOAD_M1CARBINE","value":"894"},{"key":"ACT_DOD_RELOAD_TOMMY","value":"895"},{"key":"ACT_DOD_RELOAD_GREASEGUN","value":"896"},{"key":"ACT_DOD_RELOAD_PISTOL","value":"897"},{"key":"ACT_DOD_RELOAD_FG42","value":"898"},{"key":"ACT_DOD_RELOAD_RIFLE","value":"899"},{"key":"ACT_DOD_RELOAD_RIFLEGRENADE","value":"900"},{"key":"ACT_DOD_RELOAD_C96","value":"901"},{"key":"ACT_DOD_RELOAD_CROUCH_BAR","value":"902"},{"key":"ACT_DOD_RELOAD_CROUCH_RIFLE","value":"903"},{"key":"ACT_DOD_RELOAD_CROUCH_RIFLEGRENADE","value":"904"},{"key":"ACT_DOD_RELOAD_CROUCH_BOLT","value":"905"},{"key":"ACT_DOD_RELOAD_CROUCH_MP44","value":"906"},{"key":"ACT_DOD_RELOAD_CROUCH_MP40","value":"907"},{"key":"ACT_DOD_RELOAD_CROUCH_TOMMY","value":"908"}],"it":{"wrapper":"wrapper","enum":{"realm":"Client","added":"2021.01.27","description":"The analog axis to get the value of via input.GetAnalogValue.","items":{"item":[{"key":"ANALOG_MOUSE_X","value":"0"},{"key":"ANALOG_MOUSE_Y","value":"1"},{"key":"ANALOG_MOUSE_WHEEL","value":"3"},{"key":"ANALOG_JOY_X","value":"4"},{"key":"ANALOG_JOY_Y","value":"5"},{"key":"ANALOG_JOY_Z","value":"6"},{"key":"ANALOG_JOY_R","value":"7"},{"key":"ANALOG_JOY_U","value":"8"},{"key":"ANALOG_JOY_V","value":"9"}]}}}}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Shared","description":{"text":"Enumerations used by functions like Weapon:SendWeaponAnim & Entity:SelectWeightedSequence.","bug":{"text":"Some activity enums are unlisted since they do not exist as variables in-game, but still link to existing player animations.","issue":"3075"}},"items":{"item":[{"key":"ACT_INVALID","value":"-1"},{"key":"ACT_RESET","value":"0"},{"key":"ACT_IDLE","value":"1"},{"key":"ACT_TRANSITION","value":"2"},{"key":"ACT_COVER","value":"3"},{"key":"ACT_COVER_MED","value":"4"},{"key":"ACT_COVER_LOW","value":"5"},{"key":"ACT_WALK","value":"6"},{"key":"ACT_WALK_AIM","value":"7"},{"key":"ACT_WALK_CROUCH","value":"8"},{"key":"ACT_WALK_CROUCH_AIM","value":"9"},{"key":"ACT_RUN","value":"10"},{"key":"ACT_RUN_AIM","value":"11"},{"key":"ACT_RUN_CROUCH","value":"12"},{"key":"ACT_RUN_CROUCH_AIM","value":"13"},{"key":"ACT_RUN_PROTECTED","value":"14"},{"key":"ACT_SCRIPT_CUSTOM_MOVE","value":"15"},{"key":"ACT_RANGE_ATTACK1","value":"16"},{"key":"ACT_RANGE_ATTACK2","value":"17"},{"key":"ACT_RANGE_ATTACK1_LOW","value":"18"},{"key":"ACT_RANGE_ATTACK2_LOW","value":"19"},{"key":"ACT_DIESIMPLE","value":"20"},{"key":"ACT_DIEBACKWARD","value":"21"},{"key":"ACT_DIEFORWARD","value":"22"},{"key":"ACT_DIEVIOLENT","value":"23"},{"key":"ACT_DIERAGDOLL","value":"24"},{"key":"ACT_FLY","value":"25"},{"key":"ACT_HOVER","value":"26"},{"key":"ACT_GLIDE","value":"27"},{"key":"ACT_SWIM","value":"28"},{"key":"ACT_SWIM_IDLE","value":"29"},{"key":"ACT_JUMP","value":"30"},{"key":"ACT_HOP","value":"31"},{"key":"ACT_LEAP","value":"32"},{"key":"ACT_LAND","value":"33"},{"key":"ACT_CLIMB_UP","value":"34"},{"key":"ACT_CLIMB_DOWN","value":"35"},{"key":"ACT_CLIMB_DISMOUNT","value":"36"},{"key":"ACT_SHIPLADDER_UP","value":"37"},{"key":"ACT_SHIPLADDER_DOWN","value":"38"},{"key":"ACT_STRAFE_LEFT","value":"39"},{"key":"ACT_STRAFE_RIGHT","value":"40"},{"key":"ACT_ROLL_LEFT","value":"41"},{"key":"ACT_ROLL_RIGHT","value":"42"},{"key":"ACT_TURN_LEFT","value":"43"},{"key":"ACT_TURN_RIGHT","value":"44"},{"key":"ACT_CROUCH","value":"45"},{"key":"ACT_CROUCHIDLE","value":"46"},{"key":"ACT_STAND","value":"47"},{"key":"ACT_USE","value":"48"},{"key":"ACT_SIGNAL1","value":"49"},{"key":"ACT_SIGNAL2","value":"50"},{"key":"ACT_SIGNAL3","value":"51"},{"key":"ACT_SIGNAL_ADVANCE","value":"52"},{"key":"ACT_SIGNAL_FORWARD","value":"53"},{"key":"ACT_SIGNAL_GROUP","value":"54"},{"key":"ACT_SIGNAL_HALT","value":"55"},{"key":"ACT_SIGNAL_LEFT","value":"56"},{"key":"ACT_SIGNAL_RIGHT","value":"57"},{"key":"ACT_SIGNAL_TAKECOVER","value":"58"},{"key":"ACT_LOOKBACK_RIGHT","value":"59"},{"key":"ACT_LOOKBACK_LEFT","value":"60"},{"key":"ACT_COWER","value":"61"},{"key":"ACT_SMALL_FLINCH","value":"62"},{"key":"ACT_BIG_FLINCH","value":"63"},{"key":"ACT_MELEE_ATTACK1","value":"64"},{"key":"ACT_MELEE_ATTACK2","value":"65"},{"key":"ACT_RELOAD","value":"66"},{"key":"ACT_RELOAD_START","value":"67"},{"key":"ACT_RELOAD_FINISH","value":"68"},{"key":"ACT_RELOAD_LOW","value":"69"},{"key":"ACT_ARM","value":"70"},{"key":"ACT_DISARM","value":"71"},{"key":"ACT_DROP_WEAPON","value":"72"},{"key":"ACT_DROP_WEAPON_SHOTGUN","value":"73"},{"key":"ACT_PICKUP_GROUND","value":"74"},{"key":"ACT_PICKUP_RACK","value":"75"},{"key":"ACT_IDLE_ANGRY","value":"76"},{"key":"ACT_IDLE_RELAXED","value":"77"},{"key":"ACT_IDLE_STIMULATED","value":"78"},{"key":"ACT_IDLE_AGITATED","value":"79"},{"key":"ACT_IDLE_STEALTH","value":"80"},{"key":"ACT_IDLE_HURT","value":"81"},{"key":"ACT_WALK_RELAXED","value":"82"},{"key":"ACT_WALK_STIMULATED","value":"83"},{"key":"ACT_WALK_AGITATED","value":"84"},{"key":"ACT_WALK_STEALTH","value":"85"},{"key":"ACT_RUN_RELAXED","value":"86"},{"key":"ACT_RUN_STIMULATED","value":"87"},{"key":"ACT_RUN_AGITATED","value":"88"},{"key":"ACT_RUN_STEALTH","value":"89"},{"key":"ACT_IDLE_AIM_RELAXED","value":"90"},{"key":"ACT_IDLE_AIM_STIMULATED","value":"91"},{"key":"ACT_IDLE_AIM_AGITATED","value":"92"},{"key":"ACT_IDLE_AIM_STEALTH","value":"93"},{"key":"ACT_WALK_AIM_RELAXED","value":"94"},{"key":"ACT_WALK_AIM_STIMULATED","value":"95"},{"key":"ACT_WALK_AIM_AGITATED","value":"96"},{"key":"ACT_WALK_AIM_STEALTH","value":"97"},{"key":"ACT_RUN_AIM_RELAXED","value":"98"},{"key":"ACT_RUN_AIM_STIMULATED","value":"99"},{"key":"ACT_RUN_AIM_AGITATED","value":"100"},{"key":"ACT_RUN_AIM_STEALTH","value":"101"},{"key":"ACT_CROUCHIDLE_STIMULATED","value":"102"},{"key":"ACT_CROUCHIDLE_AIM_STIMULATED","value":"103"},{"key":"ACT_CROUCHIDLE_AGITATED","value":"104"},{"key":"ACT_WALK_HURT","value":"105"},{"key":"ACT_RUN_HURT","value":"106"},{"key":"ACT_SPECIAL_ATTACK1","value":"107"},{"key":"ACT_SPECIAL_ATTACK2","value":"108"},{"key":"ACT_COMBAT_IDLE","value":"109"},{"key":"ACT_WALK_SCARED","value":"110"},{"key":"ACT_RUN_SCARED","value":"111"},{"key":"ACT_VICTORY_DANCE","value":"112"},{"key":"ACT_DIE_HEADSHOT","value":"113"},{"key":"ACT_DIE_CHESTSHOT","value":"114"},{"key":"ACT_DIE_GUTSHOT","value":"115"},{"key":"ACT_DIE_BACKSHOT","value":"116"},{"key":"ACT_FLINCH_HEAD","value":"117"},{"key":"ACT_FLINCH_CHEST","value":"118"},{"key":"ACT_FLINCH_STOMACH","value":"119"},{"key":"ACT_FLINCH_LEFTARM","value":"120"},{"key":"ACT_FLINCH_RIGHTARM","value":"121"},{"key":"ACT_FLINCH_LEFTLEG","value":"122"},{"key":"ACT_FLINCH_RIGHTLEG","value":"123"},{"key":"ACT_FLINCH_PHYSICS","value":"124"},{"key":"ACT_IDLE_ON_FIRE","value":"125"},{"key":"ACT_WALK_ON_FIRE","value":"126"},{"key":"ACT_RUN_ON_FIRE","value":"127"},{"key":"ACT_RAPPEL_LOOP","value":"128"},{"key":"ACT_180_LEFT","value":"129"},{"key":"ACT_180_RIGHT","value":"130"},{"key":"ACT_90_LEFT","value":"131"},{"key":"ACT_90_RIGHT","value":"132"},{"key":"ACT_STEP_LEFT","value":"133"},{"key":"ACT_STEP_RIGHT","value":"134"},{"key":"ACT_STEP_BACK","value":"135"},{"key":"ACT_STEP_FORE","value":"136"},{"key":"ACT_GESTURE_RANGE_ATTACK1","value":"137"},{"key":"ACT_GESTURE_RANGE_ATTACK2","value":"138"},{"key":"ACT_GESTURE_MELEE_ATTACK1","value":"139"},{"key":"ACT_GESTURE_MELEE_ATTACK2","value":"140"},{"key":"ACT_GESTURE_RANGE_ATTACK1_LOW","value":"141"},{"key":"ACT_GESTURE_RANGE_ATTACK2_LOW","value":"142"},{"key":"ACT_MELEE_ATTACK_SWING_GESTURE","value":"143"},{"key":"ACT_GESTURE_SMALL_FLINCH","value":"144"},{"key":"ACT_GESTURE_BIG_FLINCH","value":"145"},{"key":"ACT_GESTURE_FLINCH_BLAST","value":"146"},{"key":"ACT_GESTURE_FLINCH_BLAST_SHOTGUN","value":"147"},{"key":"ACT_GESTURE_FLINCH_BLAST_DAMAGED","value":"148"},{"key":"ACT_GESTURE_FLINCH_BLAST_DAMAGED_SHOTGUN","value":"149"},{"key":"ACT_GESTURE_FLINCH_HEAD","value":"150"},{"key":"ACT_GESTURE_FLINCH_CHEST","value":"151"},{"key":"ACT_GESTURE_FLINCH_STOMACH","value":"152"},{"key":"ACT_GESTURE_FLINCH_LEFTARM","value":"153"},{"key":"ACT_GESTURE_FLINCH_RIGHTARM","value":"154"},{"key":"ACT_GESTURE_FLINCH_LEFTLEG","value":"155"},{"key":"ACT_GESTURE_FLINCH_RIGHTLEG","value":"156"},{"key":"ACT_GESTURE_TURN_LEFT","value":"157"},{"key":"ACT_GESTURE_TURN_RIGHT","value":"158"},{"key":"ACT_GESTURE_TURN_LEFT45","value":"159"},{"key":"ACT_GESTURE_TURN_RIGHT45","value":"160"},{"key":"ACT_GESTURE_TURN_LEFT90","value":"161"},{"key":"ACT_GESTURE_TURN_RIGHT90","value":"162"},{"key":"ACT_GESTURE_TURN_LEFT45_FLAT","value":"163"},{"key":"ACT_GESTURE_TURN_RIGHT45_FLAT","value":"164"},{"key":"ACT_GESTURE_TURN_LEFT90_FLAT","value":"165"},{"key":"ACT_GESTURE_TURN_RIGHT90_FLAT","value":"166"},{"key":"ACT_BARNACLE_HIT","value":"167"},{"key":"ACT_BARNACLE_PULL","value":"168"},{"key":"ACT_BARNACLE_CHOMP","value":"169"},{"key":"ACT_BARNACLE_CHEW","value":"170"},{"key":"ACT_DO_NOT_DISTURB","value":"171"},{"key":"ACT_VM_DRAW","value":"172"},{"key":"ACT_VM_HOLSTER","value":"173"},{"key":"ACT_VM_IDLE","value":"174"},{"key":"ACT_VM_FIDGET","value":"175"},{"key":"ACT_VM_PULLBACK","value":"176"},{"key":"ACT_VM_PULLBACK_HIGH","value":"177"},{"key":"ACT_VM_PULLBACK_LOW","value":"178"},{"key":"ACT_VM_THROW","value":"179"},{"key":"ACT_VM_PULLPIN","value":"180"},{"key":"ACT_VM_PRIMARYATTACK","value":"181"},{"key":"ACT_VM_SECONDARYATTACK","value":"182"},{"key":"ACT_VM_RELOAD","value":"183"},{"key":"ACT_VM_DRYFIRE","value":"186"},{"key":"ACT_VM_HITLEFT","value":"187"},{"key":"ACT_VM_HITLEFT2","value":"188"},{"key":"ACT_VM_HITRIGHT","value":"189"},{"key":"ACT_VM_HITRIGHT2","value":"190"},{"key":"ACT_VM_HITCENTER","value":"191"},{"key":"ACT_VM_HITCENTER2","value":"192"},{"key":"ACT_VM_MISSLEFT","value":"193"},{"key":"ACT_VM_MISSLEFT2","value":"194"},{"key":"ACT_VM_MISSRIGHT","value":"195"},{"key":"ACT_VM_MISSRIGHT2","value":"196"},{"key":"ACT_VM_MISSCENTER","value":"197"},{"key":"ACT_VM_MISSCENTER2","value":"198"},{"key":"ACT_VM_HAULBACK","value":"199"},{"key":"ACT_VM_SWINGHARD","value":"200"},{"key":"ACT_VM_SWINGMISS","value":"201"},{"key":"ACT_VM_SWINGHIT","value":"202"},{"key":"ACT_VM_IDLE_TO_LOWERED","value":"203"},{"key":"ACT_VM_IDLE_LOWERED","value":"204"},{"key":"ACT_VM_LOWERED_TO_IDLE","value":"205"},{"key":"ACT_VM_RECOIL1","value":"206"},{"key":"ACT_VM_RECOIL2","value":"207"},{"key":"ACT_VM_RECOIL3","value":"208"},{"key":"ACT_VM_PICKUP","value":"209"},{"key":"ACT_VM_RELEASE","value":"210"},{"key":"ACT_VM_ATTACH_SILENCER","value":"211"},{"key":"ACT_VM_DETACH_SILENCER","value":"212"},{"key":"ACT_SLAM_STICKWALL_IDLE","value":"229"},{"key":"ACT_SLAM_STICKWALL_ND_IDLE","value":"230"},{"key":"ACT_SLAM_STICKWALL_ATTACH","value":"231"},{"key":"ACT_SLAM_STICKWALL_ATTACH2","value":"232"},{"key":"ACT_SLAM_STICKWALL_ND_ATTACH","value":"233"},{"key":"ACT_SLAM_STICKWALL_ND_ATTACH2","value":"234"},{"key":"ACT_SLAM_STICKWALL_DETONATE","value":"235"},{"key":"ACT_SLAM_STICKWALL_DETONATOR_HOLSTER","value":"236"},{"key":"ACT_SLAM_STICKWALL_DRAW","value":"237"},{"key":"ACT_SLAM_STICKWALL_ND_DRAW","value":"238"},{"key":"ACT_SLAM_STICKWALL_TO_THROW","value":"239"},{"key":"ACT_SLAM_STICKWALL_TO_THROW_ND","value":"240"},{"key":"ACT_SLAM_STICKWALL_TO_TRIPMINE_ND","value":"241"},{"key":"ACT_SLAM_THROW_IDLE","value":"242"},{"key":"ACT_SLAM_THROW_ND_IDLE","value":"243"},{"key":"ACT_SLAM_THROW_THROW","value":"244"},{"key":"ACT_SLAM_THROW_THROW2","value":"245"},{"key":"ACT_SLAM_THROW_THROW_ND","value":"246"},{"key":"ACT_SLAM_THROW_THROW_ND2","value":"247"},{"key":"ACT_SLAM_THROW_DRAW","value":"248"},{"key":"ACT_SLAM_THROW_ND_DRAW","value":"249"},{"key":"ACT_SLAM_THROW_TO_STICKWALL","value":"250"},{"key":"ACT_SLAM_THROW_TO_STICKWALL_ND","value":"251"},{"key":"ACT_SLAM_THROW_DETONATE","value":"252"},{"key":"ACT_SLAM_THROW_DETONATOR_HOLSTER","value":"253"},{"key":"ACT_SLAM_THROW_TO_TRIPMINE_ND","value":"254"},{"key":"ACT_SLAM_TRIPMINE_IDLE","value":"255"},{"key":"ACT_SLAM_TRIPMINE_DRAW","value":"256"},{"key":"ACT_SLAM_TRIPMINE_ATTACH","value":"257"},{"key":"ACT_SLAM_TRIPMINE_ATTACH2","value":"258"},{"key":"ACT_SLAM_TRIPMINE_TO_STICKWALL_ND","value":"259"},{"key":"ACT_SLAM_TRIPMINE_TO_THROW_ND","value":"260"},{"key":"ACT_SLAM_DETONATOR_IDLE","value":"261"},{"key":"ACT_SLAM_DETONATOR_DRAW","value":"262"},{"key":"ACT_SLAM_DETONATOR_DETONATE","value":"263"},{"key":"ACT_SLAM_DETONATOR_HOLSTER","value":"264"},{"key":"ACT_SLAM_DETONATOR_STICKWALL_DRAW","value":"265"},{"key":"ACT_SLAM_DETONATOR_THROW_DRAW","value":"266"},{"key":"ACT_SHOTGUN_RELOAD_START","value":"267"},{"key":"ACT_SHOTGUN_RELOAD_FINISH","value":"268"},{"key":"ACT_SHOTGUN_PUMP","value":"269"},{"key":"ACT_SMG2_IDLE2","value":"270"},{"key":"ACT_SMG2_FIRE2","value":"271"},{"key":"ACT_SMG2_DRAW2","value":"272"},{"key":"ACT_SMG2_RELOAD2","value":"273"},{"key":"ACT_SMG2_DRYFIRE2","value":"274"},{"key":"ACT_SMG2_TOAUTO","value":"275"},{"key":"ACT_SMG2_TOBURST","value":"276"},{"key":"ACT_PHYSCANNON_UPGRADE","value":"277"},{"key":"ACT_RANGE_ATTACK_AR1","value":"278"},{"key":"ACT_RANGE_ATTACK_AR2","value":"279"},{"key":"ACT_RANGE_ATTACK_AR2_LOW","value":"280"},{"key":"ACT_RANGE_ATTACK_AR2_GRENADE","value":"281"},{"key":"ACT_RANGE_ATTACK_HMG1","value":"282"},{"key":"ACT_RANGE_ATTACK_ML","value":"283"},{"key":"ACT_RANGE_ATTACK_SMG1","value":"284"},{"key":"ACT_RANGE_ATTACK_SMG1_LOW","value":"285"},{"key":"ACT_RANGE_ATTACK_SMG2","value":"286"},{"key":"ACT_RANGE_ATTACK_SHOTGUN","value":"287"},{"key":"ACT_RANGE_ATTACK_SHOTGUN_LOW","value":"288"},{"key":"ACT_RANGE_ATTACK_PISTOL","value":"289"},{"key":"ACT_RANGE_ATTACK_PISTOL_LOW","value":"290"},{"key":"ACT_RANGE_ATTACK_SLAM","value":"291"},{"key":"ACT_RANGE_ATTACK_TRIPWIRE","value":"292"},{"key":"ACT_RANGE_ATTACK_THROW","value":"293"},{"key":"ACT_RANGE_ATTACK_SNIPER_RIFLE","value":"294"},{"key":"ACT_RANGE_ATTACK_RPG","value":"295"},{"key":"ACT_MELEE_ATTACK_SWING","value":"296"},{"key":"ACT_RANGE_AIM_LOW","value":"297"},{"key":"ACT_RANGE_AIM_SMG1_LOW","value":"298"},{"key":"ACT_RANGE_AIM_PISTOL_LOW","value":"299"},{"key":"ACT_RANGE_AIM_AR2_LOW","value":"300"},{"key":"ACT_COVER_PISTOL_LOW","value":"301"},{"key":"ACT_COVER_SMG1_LOW","value":"302"},{"key":"ACT_GESTURE_RANGE_ATTACK_AR1","value":"303"},{"key":"ACT_GESTURE_RANGE_ATTACK_AR2","value":"304"},{"key":"ACT_GESTURE_RANGE_ATTACK_AR2_GRENADE","value":"305"},{"key":"ACT_GESTURE_RANGE_ATTACK_HMG1","value":"306"},{"key":"ACT_GESTURE_RANGE_ATTACK_ML","value":"307"},{"key":"ACT_GESTURE_RANGE_ATTACK_SMG1","value":"308"},{"key":"ACT_GESTURE_RANGE_ATTACK_SMG1_LOW","value":"309"},{"key":"ACT_GESTURE_RANGE_ATTACK_SMG2","value":"310"},{"key":"ACT_GESTURE_RANGE_ATTACK_SHOTGUN","value":"311"},{"key":"ACT_GESTURE_RANGE_ATTACK_PISTOL","value":"312"},{"key":"ACT_GESTURE_RANGE_ATTACK_PISTOL_LOW","value":"313"},{"key":"ACT_GESTURE_RANGE_ATTACK_SLAM","value":"314"},{"key":"ACT_GESTURE_RANGE_ATTACK_TRIPWIRE","value":"315"},{"key":"ACT_GESTURE_RANGE_ATTACK_THROW","value":"316"},{"key":"ACT_GESTURE_RANGE_ATTACK_SNIPER_RIFLE","value":"317"},{"key":"ACT_GESTURE_MELEE_ATTACK_SWING","value":"318"},{"key":"ACT_IDLE_RIFLE","value":"319"},{"key":"ACT_IDLE_SMG1","value":"320"},{"key":"ACT_IDLE_ANGRY_SMG1","value":"321"},{"key":"ACT_IDLE_PISTOL","value":"322"},{"key":"ACT_IDLE_ANGRY_PISTOL","value":"323"},{"key":"ACT_IDLE_ANGRY_SHOTGUN","value":"324"},{"key":"ACT_IDLE_STEALTH_PISTOL","value":"325"},{"key":"ACT_IDLE_PACKAGE","value":"326"},{"key":"ACT_WALK_PACKAGE","value":"327"},{"key":"ACT_IDLE_SUITCASE","value":"328"},{"key":"ACT_WALK_SUITCASE","value":"329"},{"key":"ACT_IDLE_SMG1_RELAXED","value":"330"},{"key":"ACT_IDLE_SMG1_STIMULATED","value":"331"},{"key":"ACT_WALK_RIFLE_RELAXED","value":"332"},{"key":"ACT_RUN_RIFLE_RELAXED","value":"333"},{"key":"ACT_WALK_RIFLE_STIMULATED","value":"334"},{"key":"ACT_RUN_RIFLE_STIMULATED","value":"335"},{"key":"ACT_IDLE_AIM_RIFLE_STIMULATED","value":"336"},{"key":"ACT_WALK_AIM_RIFLE_STIMULATED","value":"337"},{"key":"ACT_RUN_AIM_RIFLE_STIMULATED","value":"338"},{"key":"ACT_IDLE_SHOTGUN_RELAXED","value":"339"},{"key":"ACT_IDLE_SHOTGUN_STIMULATED","value":"340"},{"key":"ACT_IDLE_SHOTGUN_AGITATED","value":"341"},{"key":"ACT_WALK_ANGRY","value":"342"},{"key":"ACT_POLICE_HARASS1","value":"343"},{"key":"ACT_POLICE_HARASS2","value":"344"},{"key":"ACT_IDLE_MANNEDGUN","value":"345"},{"key":"ACT_IDLE_MELEE","value":"346"},{"key":"ACT_IDLE_ANGRY_MELEE","value":"347"},{"key":"ACT_IDLE_RPG_RELAXED","value":"348"},{"key":"ACT_IDLE_RPG","value":"349"},{"key":"ACT_IDLE_ANGRY_RPG","value":"350"},{"key":"ACT_COVER_LOW_RPG","value":"351"},{"key":"ACT_WALK_RPG","value":"352"},{"key":"ACT_RUN_RPG","value":"353"},{"key":"ACT_WALK_CROUCH_RPG","value":"354"},{"key":"ACT_RUN_CROUCH_RPG","value":"355"},{"key":"ACT_WALK_RPG_RELAXED","value":"356"},{"key":"ACT_RUN_RPG_RELAXED","value":"357"},{"key":"ACT_WALK_RIFLE","value":"358"},{"key":"ACT_WALK_AIM_RIFLE","value":"359"},{"key":"ACT_WALK_CROUCH_RIFLE","value":"360"},{"key":"ACT_WALK_CROUCH_AIM_RIFLE","value":"361"},{"key":"ACT_RUN_RIFLE","value":"362"},{"key":"ACT_RUN_AIM_RIFLE","value":"363"},{"key":"ACT_RUN_CROUCH_RIFLE","value":"364"},{"key":"ACT_RUN_CROUCH_AIM_RIFLE","value":"365"},{"key":"ACT_RUN_STEALTH_PISTOL","value":"366"},{"key":"ACT_WALK_AIM_SHOTGUN","value":"367"},{"key":"ACT_RUN_AIM_SHOTGUN","value":"368"},{"key":"ACT_WALK_PISTOL","value":"369"},{"key":"ACT_RUN_PISTOL","value":"370"},{"key":"ACT_WALK_AIM_PISTOL","value":"371"},{"key":"ACT_RUN_AIM_PISTOL","value":"372"},{"key":"ACT_WALK_STEALTH_PISTOL","value":"373"},{"key":"ACT_WALK_AIM_STEALTH_PISTOL","value":"374"},{"key":"ACT_RUN_AIM_STEALTH_PISTOL","value":"375"},{"key":"ACT_RELOAD_PISTOL","value":"376"},{"key":"ACT_RELOAD_PISTOL_LOW","value":"377"},{"key":"ACT_RELOAD_SMG1","value":"378"},{"key":"ACT_RELOAD_SMG1_LOW","value":"379"},{"key":"ACT_RELOAD_SHOTGUN","value":"380"},{"key":"ACT_RELOAD_SHOTGUN_LOW","value":"381"},{"key":"ACT_GESTURE_RELOAD","value":"382"},{"key":"ACT_GESTURE_RELOAD_PISTOL","value":"383"},{"key":"ACT_GESTURE_RELOAD_SMG1","value":"384"},{"key":"ACT_GESTURE_RELOAD_SHOTGUN","value":"385"},{"key":"ACT_BUSY_LEAN_LEFT","value":"386"},{"key":"ACT_BUSY_LEAN_LEFT_ENTRY","value":"387"},{"key":"ACT_BUSY_LEAN_LEFT_EXIT","value":"388"},{"key":"ACT_BUSY_LEAN_BACK","value":"389"},{"key":"ACT_BUSY_LEAN_BACK_ENTRY","value":"390"},{"key":"ACT_BUSY_LEAN_BACK_EXIT","value":"391"},{"key":"ACT_BUSY_SIT_GROUND","value":"392"},{"key":"ACT_BUSY_SIT_GROUND_ENTRY","value":"393"},{"key":"ACT_BUSY_SIT_GROUND_EXIT","value":"394"},{"key":"ACT_BUSY_SIT_CHAIR","value":"395"},{"key":"ACT_BUSY_SIT_CHAIR_ENTRY","value":"396"},{"key":"ACT_BUSY_SIT_CHAIR_EXIT","value":"397"},{"key":"ACT_BUSY_STAND","value":"398"},{"key":"ACT_BUSY_QUEUE","value":"399"},{"key":"ACT_DUCK_DODGE","value":"400"},{"key":"ACT_DIE_BARNACLE_SWALLOW","value":"401"},{"key":"ACT_GESTURE_BARNACLE_STRANGLE","value":"402"},{"key":"ACT_PHYSCANNON_DETACH","value":"403"},{"key":"ACT_PHYSCANNON_ANIMATE","value":"404"},{"key":"ACT_PHYSCANNON_ANIMATE_PRE","value":"405"},{"key":"ACT_PHYSCANNON_ANIMATE_POST","value":"406"},{"key":"ACT_DIE_FRONTSIDE","value":"407"},{"key":"ACT_DIE_RIGHTSIDE","value":"408"},{"key":"ACT_DIE_BACKSIDE","value":"409"},{"key":"ACT_DIE_LEFTSIDE","value":"410"},{"key":"ACT_OPEN_DOOR","value":"411"},{"key":"ACT_DI_ALYX_ZOMBIE_MELEE","value":"412"},{"key":"ACT_DI_ALYX_ZOMBIE_TORSO_MELEE","value":"413"},{"key":"ACT_DI_ALYX_HEADCRAB_MELEE","value":"414"},{"key":"ACT_DI_ALYX_ANTLION","value":"415"},{"key":"ACT_DI_ALYX_ZOMBIE_SHOTGUN64","value":"416"},{"key":"ACT_DI_ALYX_ZOMBIE_SHOTGUN26","value":"417"},{"key":"ACT_READINESS_RELAXED_TO_STIMULATED","value":"418"},{"key":"ACT_READINESS_RELAXED_TO_STIMULATED_WALK","value":"419"},{"key":"ACT_READINESS_AGITATED_TO_STIMULATED","value":"420"},{"key":"ACT_READINESS_STIMULATED_TO_RELAXED","value":"421"},{"key":"ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED","value":"422"},{"key":"ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED_WALK","value":"423"},{"key":"ACT_READINESS_PISTOL_AGITATED_TO_STIMULATED","value":"424"},{"key":"ACT_READINESS_PISTOL_STIMULATED_TO_RELAXED","value":"425"},{"key":"ACT_IDLE_CARRY","value":"426"},{"key":"ACT_WALK_CARRY","value":"427"},{"key":"ACT_STARTDYING","value":"428"},{"key":"ACT_DYINGLOOP","value":"429"},{"key":"ACT_DYINGTODEAD","value":"430"},{"key":"ACT_RIDE_MANNED_GUN","value":"431"},{"key":"ACT_VM_SPRINT_ENTER","value":"432"},{"key":"ACT_VM_SPRINT_IDLE","value":"433"},{"key":"ACT_VM_SPRINT_LEAVE","value":"434"},{"key":"ACT_FIRE_START","value":"435"},{"key":"ACT_FIRE_LOOP","value":"436"},{"key":"ACT_FIRE_END","value":"437"},{"key":"ACT_CROUCHING_GRENADEIDLE","value":"438"},{"key":"ACT_CROUCHING_GRENADEREADY","value":"439"},{"key":"ACT_CROUCHING_PRIMARYATTACK","value":"440"},{"key":"ACT_OVERLAY_GRENADEIDLE","value":"441"},{"key":"ACT_OVERLAY_GRENADEREADY","value":"442"},{"key":"ACT_OVERLAY_PRIMARYATTACK","value":"443"},{"key":"ACT_OVERLAY_SHIELD_UP","value":"444"},{"key":"ACT_OVERLAY_SHIELD_DOWN","value":"445"},{"key":"ACT_OVERLAY_SHIELD_UP_IDLE","value":"446"},{"key":"ACT_OVERLAY_SHIELD_ATTACK","value":"447"},{"key":"ACT_OVERLAY_SHIELD_KNOCKBACK","value":"448"},{"key":"ACT_SHIELD_UP","value":"449"},{"key":"ACT_SHIELD_DOWN","value":"450"},{"key":"ACT_SHIELD_UP_IDLE","value":"451"},{"key":"ACT_SHIELD_ATTACK","value":"452"},{"key":"ACT_SHIELD_KNOCKBACK","value":"453"},{"key":"ACT_CROUCHING_SHIELD_UP","value":"454"},{"key":"ACT_CROUCHING_SHIELD_DOWN","value":"455"},{"key":"ACT_CROUCHING_SHIELD_UP_IDLE","value":"456"},{"key":"ACT_CROUCHING_SHIELD_ATTACK","value":"457"},{"key":"ACT_CROUCHING_SHIELD_KNOCKBACK","value":"458"},{"key":"ACT_TURNRIGHT45","value":"459"},{"key":"ACT_TURNLEFT45","value":"460"},{"key":"ACT_TURN","value":"461"},{"key":"ACT_OBJ_ASSEMBLING","value":"462"},{"key":"ACT_OBJ_DISMANTLING","value":"463"},{"key":"ACT_OBJ_STARTUP","value":"464"},{"key":"ACT_OBJ_RUNNING","value":"465"},{"key":"ACT_OBJ_IDLE","value":"466"},{"key":"ACT_OBJ_PLACING","value":"467"},{"key":"ACT_OBJ_DETERIORATING","value":"468"},{"key":"ACT_OBJ_UPGRADING","value":"469"},{"key":"ACT_DEPLOY","value":"470"},{"key":"ACT_DEPLOY_IDLE","value":"471"},{"key":"ACT_UNDEPLOY","value":"472"},{"key":"ACT_GRENADE_ROLL","value":"473"},{"key":"ACT_GRENADE_TOSS","value":"474"},{"key":"ACT_HANDGRENADE_THROW1","value":"475"},{"key":"ACT_HANDGRENADE_THROW2","value":"476"},{"key":"ACT_HANDGRENADE_THROW3","value":"477"},{"key":"ACT_SHOTGUN_IDLE_DEEP","value":"478"},{"key":"ACT_SHOTGUN_IDLE4","value":"479"},{"key":"ACT_GLOCK_SHOOTEMPTY","value":"480"},{"key":"ACT_GLOCK_SHOOT_RELOAD","value":"481"},{"key":"ACT_RPG_DRAW_UNLOADED","value":"482"},{"key":"ACT_RPG_HOLSTER_UNLOADED","value":"483"},{"key":"ACT_RPG_IDLE_UNLOADED","value":"484"},{"key":"ACT_RPG_FIDGET_UNLOADED","value":"485"},{"key":"ACT_CROSSBOW_DRAW_UNLOADED","value":"486"},{"key":"ACT_CROSSBOW_IDLE_UNLOADED","value":"487"},{"key":"ACT_CROSSBOW_FIDGET_UNLOADED","value":"488"},{"key":"ACT_GAUSS_SPINUP","value":"489"},{"key":"ACT_GAUSS_SPINCYCLE","value":"490"},{"key":"ACT_TRIPMINE_GROUND","value":"491"},{"key":"ACT_TRIPMINE_WORLD","value":"492"},{"key":"ACT_VM_PRIMARYATTACK_SILENCED","value":"493"},{"key":"ACT_VM_RELOAD_SILENCED","value":"494"},{"key":"ACT_VM_DRYFIRE_SILENCED","value":"495"},{"key":"ACT_VM_IDLE_SILENCED","value":"496"},{"key":"ACT_VM_DRAW_SILENCED","value":"497"},{"key":"ACT_VM_IDLE_EMPTY_LEFT","value":"498"},{"key":"ACT_VM_DRYFIRE_LEFT","value":"499"},{"key":"ACT_PLAYER_IDLE_FIRE","value":"500"},{"key":"ACT_PLAYER_CROUCH_FIRE","value":"501"},{"key":"ACT_PLAYER_CROUCH_WALK_FIRE","value":"502"},{"key":"ACT_PLAYER_WALK_FIRE","value":"503"},{"key":"ACT_PLAYER_RUN_FIRE","value":"504"},{"key":"ACT_IDLETORUN","value":"505"},{"key":"ACT_RUNTOIDLE","value":"506"},{"key":"ACT_SPRINT","value":"507"},{"key":"ACT_GET_DOWN_STAND","value":"508"},{"key":"ACT_GET_UP_STAND","value":"509"},{"key":"ACT_GET_DOWN_CROUCH","value":"510"},{"key":"ACT_GET_UP_CROUCH","value":"511"},{"key":"ACT_PRONE_FORWARD","value":"512"},{"key":"ACT_PRONE_IDLE","value":"513"},{"key":"ACT_DEEPIDLE1","value":"514"},{"key":"ACT_DEEPIDLE2","value":"515"},{"key":"ACT_DEEPIDLE3","value":"516"},{"key":"ACT_DEEPIDLE4","value":"517"},{"key":"ACT_VM_RELOAD_DEPLOYED","value":"518"},{"key":"ACT_VM_RELOAD_IDLE","value":"519"},{"key":"ACT_VM_DRAW_DEPLOYED","value":"520"},{"key":"ACT_VM_DRAW_EMPTY","value":"521"},{"key":"ACT_VM_PRIMARYATTACK_EMPTY","value":"522"},{"key":"ACT_VM_RELOAD_EMPTY","value":"523"},{"key":"ACT_VM_IDLE_EMPTY","value":"524"},{"key":"ACT_VM_IDLE_DEPLOYED_EMPTY","value":"525"},{"key":"ACT_VM_IDLE_8","value":"526"},{"key":"ACT_VM_IDLE_7","value":"527"},{"key":"ACT_VM_IDLE_6","value":"528"},{"key":"ACT_VM_IDLE_5","value":"529"},{"key":"ACT_VM_IDLE_4","value":"530"},{"key":"ACT_VM_IDLE_3","value":"531"},{"key":"ACT_VM_IDLE_2","value":"532"},{"key":"ACT_VM_IDLE_1","value":"533"},{"key":"ACT_VM_IDLE_DEPLOYED","value":"534"},{"key":"ACT_VM_IDLE_DEPLOYED_8","value":"535"},{"key":"ACT_VM_IDLE_DEPLOYED_7","value":"536"},{"key":"ACT_VM_IDLE_DEPLOYED_6","value":"537"},{"key":"ACT_VM_IDLE_DEPLOYED_5","value":"538"},{"key":"ACT_VM_IDLE_DEPLOYED_4","value":"539"},{"key":"ACT_VM_IDLE_DEPLOYED_3","value":"540"},{"key":"ACT_VM_IDLE_DEPLOYED_2","value":"541"},{"key":"ACT_VM_IDLE_DEPLOYED_1","value":"542"},{"key":"ACT_VM_UNDEPLOY","value":"543"},{"key":"ACT_VM_UNDEPLOY_8","value":"544"},{"key":"ACT_VM_UNDEPLOY_7","value":"545"},{"key":"ACT_VM_UNDEPLOY_6","value":"546"},{"key":"ACT_VM_UNDEPLOY_5","value":"547"},{"key":"ACT_VM_UNDEPLOY_4","value":"548"},{"key":"ACT_VM_UNDEPLOY_3","value":"549"},{"key":"ACT_VM_UNDEPLOY_2","value":"550"},{"key":"ACT_VM_UNDEPLOY_1","value":"551"},{"key":"ACT_VM_UNDEPLOY_EMPTY","value":"552"},{"key":"ACT_VM_DEPLOY","value":"553"},{"key":"ACT_VM_DEPLOY_8","value":"554"},{"key":"ACT_VM_DEPLOY_7","value":"555"},{"key":"ACT_VM_DEPLOY_6","value":"556"},{"key":"ACT_VM_DEPLOY_5","value":"557"},{"key":"ACT_VM_DEPLOY_4","value":"558"},{"key":"ACT_VM_DEPLOY_3","value":"559"},{"key":"ACT_VM_DEPLOY_2","value":"560"},{"key":"ACT_VM_DEPLOY_1","value":"561"},{"key":"ACT_VM_DEPLOY_EMPTY","value":"562"},{"key":"ACT_VM_PRIMARYATTACK_8","value":"563"},{"key":"ACT_VM_PRIMARYATTACK_7","value":"564"},{"key":"ACT_VM_PRIMARYATTACK_6","value":"565"},{"key":"ACT_VM_PRIMARYATTACK_5","value":"566"},{"key":"ACT_VM_PRIMARYATTACK_4","value":"567"},{"key":"ACT_VM_PRIMARYATTACK_3","value":"568"},{"key":"ACT_VM_PRIMARYATTACK_2","value":"569"},{"key":"ACT_VM_PRIMARYATTACK_1","value":"570"},{"key":"ACT_VM_PRIMARYATTACK_DEPLOYED","value":"571"},{"key":"ACT_VM_PRIMARYATTACK_DEPLOYED_8","value":"572"},{"key":"ACT_VM_PRIMARYATTACK_DEPLOYED_7","value":"573"},{"key":"ACT_VM_PRIMARYATTACK_DEPLOYED_6","value":"574"},{"key":"ACT_VM_PRIMARYATTACK_DEPLOYED_5","value":"575"},{"key":"ACT_VM_PRIMARYATTACK_DEPLOYED_4","value":"576"},{"key":"ACT_VM_PRIMARYATTACK_DEPLOYED_3","value":"577"},{"key":"ACT_VM_PRIMARYATTACK_DEPLOYED_2","value":"578"},{"key":"ACT_VM_PRIMARYATTACK_DEPLOYED_1","value":"579"},{"key":"ACT_VM_PRIMARYATTACK_DEPLOYED_EMPTY","value":"580"},{"key":"ACT_DOD_DEPLOYED","value":"581"},{"key":"ACT_DOD_PRONE_DEPLOYED","value":"582"},{"key":"ACT_DOD_IDLE_ZOOMED","value":"583"},{"key":"ACT_DOD_WALK_ZOOMED","value":"584"},{"key":"ACT_DOD_CROUCH_ZOOMED","value":"585"},{"key":"ACT_DOD_CROUCHWALK_ZOOMED","value":"586"},{"key":"ACT_DOD_PRONE_ZOOMED","value":"587"},{"key":"ACT_DOD_PRONE_FORWARD_ZOOMED","value":"588"},{"key":"ACT_DOD_PRIMARYATTACK_DEPLOYED","value":"589"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_DEPLOYED","value":"590"},{"key":"ACT_DOD_RELOAD_DEPLOYED","value":"591"},{"key":"ACT_DOD_RELOAD_PRONE_DEPLOYED","value":"592"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE","value":"593"},{"key":"ACT_DOD_SECONDARYATTACK_PRONE","value":"594"},{"key":"ACT_DOD_RELOAD_CROUCH","value":"595"},{"key":"ACT_DOD_RELOAD_PRONE","value":"596"},{"key":"ACT_DOD_STAND_IDLE","value":"597"},{"key":"ACT_DOD_STAND_AIM","value":"598"},{"key":"ACT_DOD_CROUCH_IDLE","value":"599"},{"key":"ACT_DOD_CROUCH_AIM","value":"600"},{"key":"ACT_DOD_CROUCHWALK_IDLE","value":"601"},{"key":"ACT_DOD_CROUCHWALK_AIM","value":"602"},{"key":"ACT_DOD_WALK_IDLE","value":"603"},{"key":"ACT_DOD_WALK_AIM","value":"604"},{"key":"ACT_DOD_RUN_IDLE","value":"605"},{"key":"ACT_DOD_RUN_AIM","value":"606"},{"key":"ACT_DOD_STAND_AIM_PISTOL","value":"607"},{"key":"ACT_DOD_CROUCH_AIM_PISTOL","value":"608"},{"key":"ACT_DOD_CROUCHWALK_AIM_PISTOL","value":"609"},{"key":"ACT_DOD_WALK_AIM_PISTOL","value":"610"},{"key":"ACT_DOD_RUN_AIM_PISTOL","value":"611"},{"key":"ACT_DOD_PRONE_AIM_PISTOL","value":"612"},{"key":"ACT_DOD_STAND_IDLE_PISTOL","value":"613"},{"key":"ACT_DOD_CROUCH_IDLE_PISTOL","value":"614"},{"key":"ACT_DOD_CROUCHWALK_IDLE_PISTOL","value":"615"},{"key":"ACT_DOD_WALK_IDLE_PISTOL","value":"616"},{"key":"ACT_DOD_RUN_IDLE_PISTOL","value":"617"},{"key":"ACT_DOD_SPRINT_IDLE_PISTOL","value":"618"},{"key":"ACT_DOD_PRONEWALK_IDLE_PISTOL","value":"619"},{"key":"ACT_DOD_STAND_AIM_C96","value":"620"},{"key":"ACT_DOD_CROUCH_AIM_C96","value":"621"},{"key":"ACT_DOD_CROUCHWALK_AIM_C96","value":"622"},{"key":"ACT_DOD_WALK_AIM_C96","value":"623"},{"key":"ACT_DOD_RUN_AIM_C96","value":"624"},{"key":"ACT_DOD_PRONE_AIM_C96","value":"625"},{"key":"ACT_DOD_STAND_IDLE_C96","value":"626"},{"key":"ACT_DOD_CROUCH_IDLE_C96","value":"627"},{"key":"ACT_DOD_CROUCHWALK_IDLE_C96","value":"628"},{"key":"ACT_DOD_WALK_IDLE_C96","value":"629"},{"key":"ACT_DOD_RUN_IDLE_C96","value":"630"},{"key":"ACT_DOD_SPRINT_IDLE_C96","value":"631"},{"key":"ACT_DOD_PRONEWALK_IDLE_C96","value":"632"},{"key":"ACT_DOD_STAND_AIM_RIFLE","value":"633"},{"key":"ACT_DOD_CROUCH_AIM_RIFLE","value":"634"},{"key":"ACT_DOD_CROUCHWALK_AIM_RIFLE","value":"635"},{"key":"ACT_DOD_WALK_AIM_RIFLE","value":"636"},{"key":"ACT_DOD_RUN_AIM_RIFLE","value":"637"},{"key":"ACT_DOD_PRONE_AIM_RIFLE","value":"638"},{"key":"ACT_DOD_STAND_IDLE_RIFLE","value":"639"},{"key":"ACT_DOD_CROUCH_IDLE_RIFLE","value":"640"},{"key":"ACT_DOD_CROUCHWALK_IDLE_RIFLE","value":"641"},{"key":"ACT_DOD_WALK_IDLE_RIFLE","value":"642"},{"key":"ACT_DOD_RUN_IDLE_RIFLE","value":"643"},{"key":"ACT_DOD_SPRINT_IDLE_RIFLE","value":"644"},{"key":"ACT_DOD_PRONEWALK_IDLE_RIFLE","value":"645"},{"key":"ACT_DOD_STAND_AIM_BOLT","value":"646"},{"key":"ACT_DOD_CROUCH_AIM_BOLT","value":"647"},{"key":"ACT_DOD_CROUCHWALK_AIM_BOLT","value":"648"},{"key":"ACT_DOD_WALK_AIM_BOLT","value":"649"},{"key":"ACT_DOD_RUN_AIM_BOLT","value":"650"},{"key":"ACT_DOD_PRONE_AIM_BOLT","value":"651"},{"key":"ACT_DOD_STAND_IDLE_BOLT","value":"652"},{"key":"ACT_DOD_CROUCH_IDLE_BOLT","value":"653"},{"key":"ACT_DOD_CROUCHWALK_IDLE_BOLT","value":"654"},{"key":"ACT_DOD_WALK_IDLE_BOLT","value":"655"},{"key":"ACT_DOD_RUN_IDLE_BOLT","value":"656"},{"key":"ACT_DOD_SPRINT_IDLE_BOLT","value":"657"},{"key":"ACT_DOD_PRONEWALK_IDLE_BOLT","value":"658"},{"key":"ACT_DOD_STAND_AIM_TOMMY","value":"659"},{"key":"ACT_DOD_CROUCH_AIM_TOMMY","value":"660"},{"key":"ACT_DOD_CROUCHWALK_AIM_TOMMY","value":"661"},{"key":"ACT_DOD_WALK_AIM_TOMMY","value":"662"},{"key":"ACT_DOD_RUN_AIM_TOMMY","value":"663"},{"key":"ACT_DOD_PRONE_AIM_TOMMY","value":"664"},{"key":"ACT_DOD_STAND_IDLE_TOMMY","value":"665"},{"key":"ACT_DOD_CROUCH_IDLE_TOMMY","value":"666"},{"key":"ACT_DOD_CROUCHWALK_IDLE_TOMMY","value":"667"},{"key":"ACT_DOD_WALK_IDLE_TOMMY","value":"668"},{"key":"ACT_DOD_RUN_IDLE_TOMMY","value":"669"},{"key":"ACT_DOD_SPRINT_IDLE_TOMMY","value":"670"},{"key":"ACT_DOD_PRONEWALK_IDLE_TOMMY","value":"671"},{"key":"ACT_DOD_STAND_AIM_MP40","value":"672"},{"key":"ACT_DOD_CROUCH_AIM_MP40","value":"673"},{"key":"ACT_DOD_CROUCHWALK_AIM_MP40","value":"674"},{"key":"ACT_DOD_WALK_AIM_MP40","value":"675"},{"key":"ACT_DOD_RUN_AIM_MP40","value":"676"},{"key":"ACT_DOD_PRONE_AIM_MP40","value":"677"},{"key":"ACT_DOD_STAND_IDLE_MP40","value":"678"},{"key":"ACT_DOD_CROUCH_IDLE_MP40","value":"679"},{"key":"ACT_DOD_CROUCHWALK_IDLE_MP40","value":"680"},{"key":"ACT_DOD_WALK_IDLE_MP40","value":"681"},{"key":"ACT_DOD_RUN_IDLE_MP40","value":"682"},{"key":"ACT_DOD_SPRINT_IDLE_MP40","value":"683"},{"key":"ACT_DOD_PRONEWALK_IDLE_MP40","value":"684"},{"key":"ACT_DOD_STAND_AIM_MP44","value":"685"},{"key":"ACT_DOD_CROUCH_AIM_MP44","value":"686"},{"key":"ACT_DOD_CROUCHWALK_AIM_MP44","value":"687"},{"key":"ACT_DOD_WALK_AIM_MP44","value":"688"},{"key":"ACT_DOD_RUN_AIM_MP44","value":"689"},{"key":"ACT_DOD_PRONE_AIM_MP44","value":"690"},{"key":"ACT_DOD_STAND_IDLE_MP44","value":"691"},{"key":"ACT_DOD_CROUCH_IDLE_MP44","value":"692"},{"key":"ACT_DOD_CROUCHWALK_IDLE_MP44","value":"693"},{"key":"ACT_DOD_WALK_IDLE_MP44","value":"694"},{"key":"ACT_DOD_RUN_IDLE_MP44","value":"695"},{"key":"ACT_DOD_SPRINT_IDLE_MP44","value":"696"},{"key":"ACT_DOD_PRONEWALK_IDLE_MP44","value":"697"},{"key":"ACT_DOD_STAND_AIM_GREASE","value":"698"},{"key":"ACT_DOD_CROUCH_AIM_GREASE","value":"699"},{"key":"ACT_DOD_CROUCHWALK_AIM_GREASE","value":"700"},{"key":"ACT_DOD_WALK_AIM_GREASE","value":"701"},{"key":"ACT_DOD_RUN_AIM_GREASE","value":"702"},{"key":"ACT_DOD_PRONE_AIM_GREASE","value":"703"},{"key":"ACT_DOD_STAND_IDLE_GREASE","value":"704"},{"key":"ACT_DOD_CROUCH_IDLE_GREASE","value":"705"},{"key":"ACT_DOD_CROUCHWALK_IDLE_GREASE","value":"706"},{"key":"ACT_DOD_WALK_IDLE_GREASE","value":"707"},{"key":"ACT_DOD_RUN_IDLE_GREASE","value":"708"},{"key":"ACT_DOD_SPRINT_IDLE_GREASE","value":"709"},{"key":"ACT_DOD_PRONEWALK_IDLE_GREASE","value":"710"},{"key":"ACT_DOD_STAND_AIM_MG","value":"711"},{"key":"ACT_DOD_CROUCH_AIM_MG","value":"712"},{"key":"ACT_DOD_CROUCHWALK_AIM_MG","value":"713"},{"key":"ACT_DOD_WALK_AIM_MG","value":"714"},{"key":"ACT_DOD_RUN_AIM_MG","value":"715"},{"key":"ACT_DOD_PRONE_AIM_MG","value":"716"},{"key":"ACT_DOD_STAND_IDLE_MG","value":"717"},{"key":"ACT_DOD_CROUCH_IDLE_MG","value":"718"},{"key":"ACT_DOD_CROUCHWALK_IDLE_MG","value":"719"},{"key":"ACT_DOD_WALK_IDLE_MG","value":"720"},{"key":"ACT_DOD_RUN_IDLE_MG","value":"721"},{"key":"ACT_DOD_SPRINT_IDLE_MG","value":"722"},{"key":"ACT_DOD_PRONEWALK_IDLE_MG","value":"723"},{"key":"ACT_DOD_STAND_AIM_30CAL","value":"724"},{"key":"ACT_DOD_CROUCH_AIM_30CAL","value":"725"},{"key":"ACT_DOD_CROUCHWALK_AIM_30CAL","value":"726"},{"key":"ACT_DOD_WALK_AIM_30CAL","value":"727"},{"key":"ACT_DOD_RUN_AIM_30CAL","value":"728"},{"key":"ACT_DOD_PRONE_AIM_30CAL","value":"729"},{"key":"ACT_DOD_STAND_IDLE_30CAL","value":"730"},{"key":"ACT_DOD_CROUCH_IDLE_30CAL","value":"731"},{"key":"ACT_DOD_CROUCHWALK_IDLE_30CAL","value":"732"},{"key":"ACT_DOD_WALK_IDLE_30CAL","value":"733"},{"key":"ACT_DOD_RUN_IDLE_30CAL","value":"734"},{"key":"ACT_DOD_SPRINT_IDLE_30CAL","value":"735"},{"key":"ACT_DOD_PRONEWALK_IDLE_30CAL","value":"736"},{"key":"ACT_DOD_STAND_AIM_GREN_FRAG","value":"737"},{"key":"ACT_DOD_CROUCH_AIM_GREN_FRAG","value":"738"},{"key":"ACT_DOD_CROUCHWALK_AIM_GREN_FRAG","value":"739"},{"key":"ACT_DOD_WALK_AIM_GREN_FRAG","value":"740"},{"key":"ACT_DOD_RUN_AIM_GREN_FRAG","value":"741"},{"key":"ACT_DOD_PRONE_AIM_GREN_FRAG","value":"742"},{"key":"ACT_DOD_SPRINT_AIM_GREN_FRAG","value":"743"},{"key":"ACT_DOD_PRONEWALK_AIM_GREN_FRAG","value":"744"},{"key":"ACT_DOD_STAND_AIM_GREN_STICK","value":"745"},{"key":"ACT_DOD_CROUCH_AIM_GREN_STICK","value":"746"},{"key":"ACT_DOD_CROUCHWALK_AIM_GREN_STICK","value":"747"},{"key":"ACT_DOD_WALK_AIM_GREN_STICK","value":"748"},{"key":"ACT_DOD_RUN_AIM_GREN_STICK","value":"749"},{"key":"ACT_DOD_PRONE_AIM_GREN_STICK","value":"750"},{"key":"ACT_DOD_SPRINT_AIM_GREN_STICK","value":"751"},{"key":"ACT_DOD_PRONEWALK_AIM_GREN_STICK","value":"752"},{"key":"ACT_DOD_STAND_AIM_KNIFE","value":"753"},{"key":"ACT_DOD_CROUCH_AIM_KNIFE","value":"754"},{"key":"ACT_DOD_CROUCHWALK_AIM_KNIFE","value":"755"},{"key":"ACT_DOD_WALK_AIM_KNIFE","value":"756"},{"key":"ACT_DOD_RUN_AIM_KNIFE","value":"757"},{"key":"ACT_DOD_PRONE_AIM_KNIFE","value":"758"},{"key":"ACT_DOD_SPRINT_AIM_KNIFE","value":"759"},{"key":"ACT_DOD_PRONEWALK_AIM_KNIFE","value":"760"},{"key":"ACT_DOD_STAND_AIM_SPADE","value":"761"},{"key":"ACT_DOD_CROUCH_AIM_SPADE","value":"762"},{"key":"ACT_DOD_CROUCHWALK_AIM_SPADE","value":"763"},{"key":"ACT_DOD_WALK_AIM_SPADE","value":"764"},{"key":"ACT_DOD_RUN_AIM_SPADE","value":"765"},{"key":"ACT_DOD_PRONE_AIM_SPADE","value":"766"},{"key":"ACT_DOD_SPRINT_AIM_SPADE","value":"767"},{"key":"ACT_DOD_PRONEWALK_AIM_SPADE","value":"768"},{"key":"ACT_DOD_STAND_AIM_BAZOOKA","value":"769"},{"key":"ACT_DOD_CROUCH_AIM_BAZOOKA","value":"770"},{"key":"ACT_DOD_CROUCHWALK_AIM_BAZOOKA","value":"771"},{"key":"ACT_DOD_WALK_AIM_BAZOOKA","value":"772"},{"key":"ACT_DOD_RUN_AIM_BAZOOKA","value":"773"},{"key":"ACT_DOD_PRONE_AIM_BAZOOKA","value":"774"},{"key":"ACT_DOD_STAND_IDLE_BAZOOKA","value":"775"},{"key":"ACT_DOD_CROUCH_IDLE_BAZOOKA","value":"776"},{"key":"ACT_DOD_CROUCHWALK_IDLE_BAZOOKA","value":"777"},{"key":"ACT_DOD_WALK_IDLE_BAZOOKA","value":"778"},{"key":"ACT_DOD_RUN_IDLE_BAZOOKA","value":"779"},{"key":"ACT_DOD_SPRINT_IDLE_BAZOOKA","value":"780"},{"key":"ACT_DOD_PRONEWALK_IDLE_BAZOOKA","value":"781"},{"key":"ACT_DOD_STAND_AIM_PSCHRECK","value":"782"},{"key":"ACT_DOD_CROUCH_AIM_PSCHRECK","value":"783"},{"key":"ACT_DOD_CROUCHWALK_AIM_PSCHRECK","value":"784"},{"key":"ACT_DOD_WALK_AIM_PSCHRECK","value":"785"},{"key":"ACT_DOD_RUN_AIM_PSCHRECK","value":"786"},{"key":"ACT_DOD_PRONE_AIM_PSCHRECK","value":"787"},{"key":"ACT_DOD_STAND_IDLE_PSCHRECK","value":"788"},{"key":"ACT_DOD_CROUCH_IDLE_PSCHRECK","value":"789"},{"key":"ACT_DOD_CROUCHWALK_IDLE_PSCHRECK","value":"790"},{"key":"ACT_DOD_WALK_IDLE_PSCHRECK","value":"791"},{"key":"ACT_DOD_RUN_IDLE_PSCHRECK","value":"792"},{"key":"ACT_DOD_SPRINT_IDLE_PSCHRECK","value":"793"},{"key":"ACT_DOD_PRONEWALK_IDLE_PSCHRECK","value":"794"},{"key":"ACT_DOD_STAND_AIM_BAR","value":"795"},{"key":"ACT_DOD_CROUCH_AIM_BAR","value":"796"},{"key":"ACT_DOD_CROUCHWALK_AIM_BAR","value":"797"},{"key":"ACT_DOD_WALK_AIM_BAR","value":"798"},{"key":"ACT_DOD_RUN_AIM_BAR","value":"799"},{"key":"ACT_DOD_PRONE_AIM_BAR","value":"800"},{"key":"ACT_DOD_STAND_IDLE_BAR","value":"801"},{"key":"ACT_DOD_CROUCH_IDLE_BAR","value":"802"},{"key":"ACT_DOD_CROUCHWALK_IDLE_BAR","value":"803"},{"key":"ACT_DOD_WALK_IDLE_BAR","value":"804"},{"key":"ACT_DOD_RUN_IDLE_BAR","value":"805"},{"key":"ACT_DOD_SPRINT_IDLE_BAR","value":"806"},{"key":"ACT_DOD_PRONEWALK_IDLE_BAR","value":"807"},{"key":"ACT_DOD_STAND_ZOOM_RIFLE","value":"808"},{"key":"ACT_DOD_CROUCH_ZOOM_RIFLE","value":"809"},{"key":"ACT_DOD_CROUCHWALK_ZOOM_RIFLE","value":"810"},{"key":"ACT_DOD_WALK_ZOOM_RIFLE","value":"811"},{"key":"ACT_DOD_RUN_ZOOM_RIFLE","value":"812"},{"key":"ACT_DOD_PRONE_ZOOM_RIFLE","value":"813"},{"key":"ACT_DOD_STAND_ZOOM_BOLT","value":"814"},{"key":"ACT_DOD_CROUCH_ZOOM_BOLT","value":"815"},{"key":"ACT_DOD_CROUCHWALK_ZOOM_BOLT","value":"816"},{"key":"ACT_DOD_WALK_ZOOM_BOLT","value":"817"},{"key":"ACT_DOD_RUN_ZOOM_BOLT","value":"818"},{"key":"ACT_DOD_PRONE_ZOOM_BOLT","value":"819"},{"key":"ACT_DOD_STAND_ZOOM_BAZOOKA","value":"820"},{"key":"ACT_DOD_CROUCH_ZOOM_BAZOOKA","value":"821"},{"key":"ACT_DOD_CROUCHWALK_ZOOM_BAZOOKA","value":"822"},{"key":"ACT_DOD_WALK_ZOOM_BAZOOKA","value":"823"},{"key":"ACT_DOD_RUN_ZOOM_BAZOOKA","value":"824"},{"key":"ACT_DOD_PRONE_ZOOM_BAZOOKA","value":"825"},{"key":"ACT_DOD_STAND_ZOOM_PSCHRECK","value":"826"},{"key":"ACT_DOD_CROUCH_ZOOM_PSCHRECK","value":"827"},{"key":"ACT_DOD_CROUCHWALK_ZOOM_PSCHRECK","value":"828"},{"key":"ACT_DOD_WALK_ZOOM_PSCHRECK","value":"829"},{"key":"ACT_DOD_RUN_ZOOM_PSCHRECK","value":"830"},{"key":"ACT_DOD_PRONE_ZOOM_PSCHRECK","value":"831"},{"key":"ACT_DOD_DEPLOY_RIFLE","value":"832"},{"key":"ACT_DOD_DEPLOY_TOMMY","value":"833"},{"key":"ACT_DOD_DEPLOY_MG","value":"834"},{"key":"ACT_DOD_DEPLOY_30CAL","value":"835"},{"key":"ACT_DOD_PRONE_DEPLOY_RIFLE","value":"836"},{"key":"ACT_DOD_PRONE_DEPLOY_TOMMY","value":"837"},{"key":"ACT_DOD_PRONE_DEPLOY_MG","value":"838"},{"key":"ACT_DOD_PRONE_DEPLOY_30CAL","value":"839"},{"key":"ACT_DOD_PRIMARYATTACK_RIFLE","value":"840"},{"key":"ACT_DOD_SECONDARYATTACK_RIFLE","value":"841"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_RIFLE","value":"842"},{"key":"ACT_DOD_SECONDARYATTACK_PRONE_RIFLE","value":"843"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_DEPLOYED_RIFLE","value":"844"},{"key":"ACT_DOD_PRIMARYATTACK_DEPLOYED_RIFLE","value":"845"},{"key":"ACT_DOD_PRIMARYATTACK_BOLT","value":"846"},{"key":"ACT_DOD_SECONDARYATTACK_BOLT","value":"847"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_BOLT","value":"848"},{"key":"ACT_DOD_SECONDARYATTACK_PRONE_BOLT","value":"849"},{"key":"ACT_DOD_PRIMARYATTACK_TOMMY","value":"850"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_TOMMY","value":"851"},{"key":"ACT_DOD_SECONDARYATTACK_TOMMY","value":"852"},{"key":"ACT_DOD_SECONDARYATTACK_PRONE_TOMMY","value":"853"},{"key":"ACT_DOD_PRIMARYATTACK_MP40","value":"854"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_MP40","value":"855"},{"key":"ACT_DOD_SECONDARYATTACK_MP40","value":"856"},{"key":"ACT_DOD_SECONDARYATTACK_PRONE_MP40","value":"857"},{"key":"ACT_DOD_PRIMARYATTACK_MP44","value":"858"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_MP44","value":"859"},{"key":"ACT_DOD_PRIMARYATTACK_GREASE","value":"860"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_GREASE","value":"861"},{"key":"ACT_DOD_PRIMARYATTACK_PISTOL","value":"862"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_PISTOL","value":"863"},{"key":"ACT_DOD_PRIMARYATTACK_C96","value":"864"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_C96","value":"865"},{"key":"ACT_DOD_PRIMARYATTACK_MG","value":"866"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_MG","value":"867"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_DEPLOYED_MG","value":"868"},{"key":"ACT_DOD_PRIMARYATTACK_DEPLOYED_MG","value":"869"},{"key":"ACT_DOD_PRIMARYATTACK_30CAL","value":"870"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_30CAL","value":"871"},{"key":"ACT_DOD_PRIMARYATTACK_DEPLOYED_30CAL","value":"872"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_DEPLOYED_30CAL","value":"873"},{"key":"ACT_DOD_PRIMARYATTACK_GREN_FRAG","value":"874"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_GREN_FRAG","value":"875"},{"key":"ACT_DOD_PRIMARYATTACK_GREN_STICK","value":"876"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_GREN_STICK","value":"877"},{"key":"ACT_DOD_PRIMARYATTACK_KNIFE","value":"878"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_KNIFE","value":"879"},{"key":"ACT_DOD_PRIMARYATTACK_SPADE","value":"880"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_SPADE","value":"881"},{"key":"ACT_DOD_PRIMARYATTACK_BAZOOKA","value":"882"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_BAZOOKA","value":"883"},{"key":"ACT_DOD_PRIMARYATTACK_PSCHRECK","value":"884"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_PSCHRECK","value":"885"},{"key":"ACT_DOD_PRIMARYATTACK_BAR","value":"886"},{"key":"ACT_DOD_PRIMARYATTACK_PRONE_BAR","value":"887"},{"key":"ACT_DOD_RELOAD_GARAND","value":"888"},{"key":"ACT_DOD_RELOAD_K43","value":"889"},{"key":"ACT_DOD_RELOAD_BAR","value":"890"},{"key":"ACT_DOD_RELOAD_MP40","value":"891"},{"key":"ACT_DOD_RELOAD_MP44","value":"892"},{"key":"ACT_DOD_RELOAD_BOLT","value":"893"},{"key":"ACT_DOD_RELOAD_M1CARBINE","value":"894"},{"key":"ACT_DOD_RELOAD_TOMMY","value":"895"},{"key":"ACT_DOD_RELOAD_GREASEGUN","value":"896"},{"key":"ACT_DOD_RELOAD_PISTOL","value":"897"},{"key":"ACT_DOD_RELOAD_FG42","value":"898"},{"key":"ACT_DOD_RELOAD_RIFLE","value":"899"},{"key":"ACT_DOD_RELOAD_RIFLEGRENADE","value":"900"},{"key":"ACT_DOD_RELOAD_C96","value":"901"},{"key":"ACT_DOD_RELOAD_CROUCH_BAR","value":"902"},{"key":"ACT_DOD_RELOAD_CROUCH_RIFLE","value":"903"},{"key":"ACT_DOD_RELOAD_CROUCH_RIFLEGRENADE","value":"904"},{"key":"ACT_DOD_RELOAD_CROUCH_BOLT","value":"905"},{"key":"ACT_DOD_RELOAD_CROUCH_MP44","value":"906"},{"key":"ACT_DOD_RELOAD_CROUCH_MP40","value":"907"},{"key":"ACT_DOD_RELOAD_CROUCH_TOMMY","value":"908"}],"it":{"wrapper":"wrapper","enum":{"realm":"Client","added":"2021.01.27","description":"The analog axis to get the value of via input.GetAnalogValue.","items":{"item":[{"key":"ANALOG_MOUSE_X","value":"0"},{"key":"ANALOG_MOUSE_Y","value":"1"},{"key":"ANALOG_MOUSE_WHEEL","value":"3"},{"key":"ANALOG_JOY_X","value":"4"},{"key":"ANALOG_JOY_Y","value":"5"},{"key":"ANALOG_JOY_Z","value":"6"},{"key":"ANALOG_JOY_R","value":"7"},{"key":"ANALOG_JOY_U","value":"8"},{"key":"ANALOG_JOY_V","value":"9"}]}}}}},"realms":["Client"],"type":"Enum"},
{"enum":{"realm":"Shared and Menu","description":"Used by render.OverrideBlend.","items":{"item":[{"key":"BLENDFUNC_ADD","value":"0"},{"key":"BLENDFUNC_SUBTRACT","value":"1"},{"key":"BLENDFUNC_REVERSE_SUBTRACT","value":"2"},{"key":"BLENDFUNC_MIN","value":"3"},{"key":"BLENDFUNC_MAX","value":"4"}]}},"realms":["Server","Client","Menu"],"type":"Enum"},
{"enum":{"realm":"Client","description":"Used by render.OverrideBlend to determine how texture RGBA information should be interpreted when rendered. \n\nFor more information refer to OpenGL's glBlendFunc page here: https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glBlendFunc.xhtml  \n\nClientside only.","items":{"item":[{"key":"BLEND_ZERO","value":"0"},{"key":"BLEND_ONE","value":"1"},{"key":"BLEND_DST_COLOR","value":"2"},{"key":"BLEND_ONE_MINUS_DST_COLOR","value":"3"},{"key":"BLEND_SRC_ALPHA","value":"4"},{"key":"BLEND_ONE_MINUS_SRC_ALPHA","value":"5"},{"key":"BLEND_DST_ALPHA","value":"6"},{"key":"BLEND_ONE_MINUS_DST_ALPHA","value":"7"},{"key":"BLEND_SRC_ALPHA_SATURATE","value":"8"},{"key":"BLEND_SRC_COLOR","value":"9"},{"key":"BLEND_ONE_MINUS_SRC_COLOR","value":"10"}]}},"realms":["Client"],"type":"Enum"},
{"enum":{"realm":"Shared","description":"Enumerations used by Entity:GetBloodColor and Entity:SetBloodColor.","items":{"item":[{"text":"No blood","key":"DONT_BLEED","value":"-1"},{"text":"Normal red blood","key":"BLOOD_COLOR_RED","value":"0"},{"text":"Yellow blood","key":"BLOOD_COLOR_YELLOW","value":"1"},{"text":"Green-red blood","key":"BLOOD_COLOR_GREEN","value":"2"},{"text":"Sparks","key":"BLOOD_COLOR_MECH","value":"3"},{"text":"Yellow blood","key":"BLOOD_COLOR_ANTLION","value":"4"},{"text":"Green-red blood","key":"BLOOD_COLOR_ZOMBIE","value":"5"},{"text":"Bright green blood","key":"BLOOD_COLOR_ANTLION_WORKER","value":"6"}]}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Shared and Menu","description":"Encompasses the range of Enums/KEY, Enums/MOUSE and Enums/JOYSTICK, all of which can be used by:\n* input.IsButtonDown\n* input.LookupKeyBinding\n* input.GetKeyName\n* input.GetKeyCode\n* GM:PlayerButtonDown\n* GM:PlayerButtonUp","items":{"item":[{"key":"BUTTON_CODE_INVALID","value":"-1"},{"key":"BUTTON_CODE_NONE","value":"0"},{"key":"BUTTON_CODE_LAST","value":"171"},{"key":"BUTTON_CODE_COUNT","value":"172"}]},"appendedenums":"KEY |  \n MOUSE |  \n JOYSTICK |"},"realms":["Server","Client","Menu"],"type":"Enum"},
{"enum":{"realm":"Shared","description":"Used by Entity:BoneHasFlag.","items":{"item":[{"key":"BONE_PHYSICALLY_SIMULATED","value":"1"},{"key":"BONE_PHYSICS_PROCEDURAL","value":"2"},{"key":"BONE_ALWAYS_PROCEDURAL","value":"4"},{"key":"BONE_SCREEN_ALIGN_SPHERE","value":"8"},{"key":"BONE_SCREEN_ALIGN_CYLINDER","value":"16"},{"key":"BONE_CALCULATE_MASK","value":"31"},{"text":"A hitbox is attached to this bone","key":"BONE_USED_BY_HITBOX","value":"256"},{"text":"An attachment is attached to this bone","key":"BONE_USED_BY_ATTACHMENT","value":"512"},{"key":"BONE_USED_BY_VERTEX_LOD0","value":"1024"},{"key":"BONE_USED_BY_VERTEX_LOD1","value":"2048"},{"key":"BONE_USED_BY_VERTEX_LOD2","value":"4096"},{"key":"BONE_USED_BY_VERTEX_LOD3","value":"8192"},{"key":"BONE_USED_BY_VERTEX_LOD4","value":"16384"},{"key":"BONE_USED_BY_VERTEX_LOD5","value":"32768"},{"key":"BONE_USED_BY_VERTEX_LOD6","value":"65536"},{"key":"BONE_USED_BY_VERTEX_LOD7","value":"131072"},{"key":"BONE_USED_BY_VERTEX_MASK","value":"261120"},{"key":"BONE_USED_BY_BONE_MERGE","value":"262144"},{"text":"Is this bone used by anything?\n\n( If any BONE_USED_BY_* flags are true )","key":"BONE_USED_BY_ANYTHING","value":"524032"},{"key":"BONE_USED_MASK","value":"524032"}]}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Shared and Menu","description":"Enumerations used by render.SetModelLighting.","items":{"item":[{"text":"Place the light from the front","key":"BOX_FRONT","value":"0"},{"text":"Place the light behind","key":"BOX_BACK","value":"1"},{"text":"Place the light to the right","key":"BOX_RIGHT","value":"2"},{"text":"Place the light to the left","key":"BOX_LEFT","value":"3"},{"text":"Place the light to the top","key":"BOX_TOP","value":"4"},{"text":"Place the light to the bottom","key":"BOX_BOTTOM","value":"5"}]}},"realms":["Server","Client","Menu"],"type":"Enum"},
{"enum":{"realm":"Server","description":"Enumerations used by NPC:CapabilitiesAdd, WEAPON:GetCapabilities and NPC:CapabilitiesGet. Serverside only.","items":{"item":[{"text":"When hit by an explosion, we'll simply block it instead of spilling it to entities behind us, the sv_robust_explosions cvar can also enable this globally when set to 0","key":"CAP_SIMPLE_RADIUS_DAMAGE","value":"-2147483648"},{"text":"Walk/Run","key":"CAP_MOVE_GROUND","value":"1"},{"text":"Jump/Leap","key":"CAP_MOVE_JUMP","value":"2"},{"text":"Can fly  move all around","key":"CAP_MOVE_FLY","value":"4"},{"text":"climb ladders","key":"CAP_MOVE_CLIMB","value":"8"},{"key":"CAP_MOVE_SWIM","value":"16"},{"key":"CAP_MOVE_CRAWL","value":"32"},{"text":"Tries to shoot weapon while moving","key":"CAP_MOVE_SHOOT","value":"64"},{"key":"CAP_SKIP_NAV_GROUND_CHECK","value":"128"},{"text":"Open doors/push buttons/pull levers","key":"CAP_USE","value":"256"},{"text":"Can trigger auto doors","key":"CAP_AUTO_DOORS","value":"1024"},{"text":"Can open manual doors","key":"CAP_OPEN_DOORS","value":"2048"},{"text":"Can turn head  always bone controller 0","key":"CAP_TURN_HEAD","value":"4096"},{"key":"CAP_WEAPON_RANGE_ATTACK1","value":"8192"},{"key":"CAP_WEAPON_RANGE_ATTACK2","value":"16384"},{"key":"CAP_WEAPON_MELEE_ATTACK1","value":"32768"},{"key":"CAP_WEAPON_MELEE_ATTACK2","value":"65536"},{"key":"CAP_INNATE_RANGE_ATTACK1","value":"131072"},{"key":"CAP_INNATE_RANGE_ATTACK2","value":"262144"},{"key":"CAP_INNATE_MELEE_ATTACK1","value":"524288"},{"key":"CAP_INNATE_MELEE_ATTACK2","value":"1048576"},{"key":"CAP_USE_WEAPONS","value":"2097152"},{"key":"CAP_USE_SHOT_REGULATOR","value":"16777216"},{"text":"Has animated eyes/face","key":"CAP_ANIMATEDFACE","value":"8388608"},{"text":"Don't take damage from npc's that are D_LI","key":"CAP_FRIENDLY_DMG_IMMUNE","value":"33554432"},{"text":"Can form squads","key":"CAP_SQUAD","value":"67108864"},{"text":"Cover and Reload ducking","key":"CAP_DUCK","value":"134217728"},{"text":"Don't hit players","key":"CAP_NO_HIT_PLAYER","value":"268435456"},{"text":"Use arms to aim gun, not just body","key":"CAP_AIM_GUN","value":"536870912"},{"key":"CAP_NO_HIT_SQUADMATES","value":"1073741824"}]}},"realms":["Server"],"type":"Enum"},
{"enum":{"realm":"Shared","description":"Enumerations used by Global.EmitSound and sound.Add.","items":{"item":[{"text":"Used when playing sounds through console commands.","key":"CHAN_REPLACE","value":"-1"},{"text":"Automatic channel","key":"CHAN_AUTO","value":"0"},{"text":"Channel for weapon sounds","key":"CHAN_WEAPON","value":"1"},{"text":"Channel for NPC voices","key":"CHAN_VOICE","value":"2"},{"text":"Channel for items ( Health kits, etc )","key":"CHAN_ITEM","value":"3"},{"text":"Clothing, ragdoll impacts, footsteps, knocking/pounding/punching etc.","key":"CHAN_BODY","value":"4"},{"text":"Stream channel from the static or dynamic area","key":"CHAN_STREAM","value":"5"},{"text":"A constant/background sound that doesn't require any reaction.\n**This channel allows same sounds files to play multiple times without cutting out.**","key":"CHAN_STATIC","value":"6","br":["",""]},{"text":"TF2s Announcer dialogue channel","key":"CHAN_VOICE2","value":"7"},{"text":"Channels 8-135 (128 channels) are allocated for player voice chat\n**This channel allows same sounds files to play multiple times without cutting out.**","key":"CHAN_VOICE_BASE","value":"8","br":["",""]},{"text":"Channels from this and onwards are allocated to game code","key":"CHAN_USER_BASE","value":"136"}]}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Server","description":"Enumerations used by NPC:Classify.","items":{"item":[{"text":"None - default class for entities.","key":"CLASS_NONE","value":"0"},{"text":"Players.","key":"CLASS_PLAYER","value":"1"},{"text":"HL2 player allies - monster_barney, npc_citizen, hacked npc_manhack, and friendly npc_turret_floor.","key":"CLASS_PLAYER_ALLY","value":"2"},{"text":"HL2 vital player allies - npc_magnusson, npc_gman, npc_fisherman, npc_eli, npc_barney, npc_kleiner, npc_mossman, npc_alyx, npc_monk, npc_dog, and npc_vortigaunt at the end of EP2 (controlled by \"MakeGameEndAlly\" input).","key":"CLASS_PLAYER_ALLY_VITAL","value":"3"},{"text":"HL2 antlions - npc_antlion, npc_antlionguard, and npc_ichthyosaur.","key":"CLASS_ANTLION","value":"4"},{"text":"HL2 barnacles - npc_barnacle.","key":"CLASS_BARNACLE","value":"5"},{"text":"HL2 bullseyes - npc_bullseye.","key":"CLASS_BULLSEYE","value":"6"},{"text":"HL2 passive/non-rebel citizens - npc_citizen in the beginning of HL2.","key":"CLASS_CITIZEN_PASSIVE","value":"7"},{"text":"HL2 unused.","key":"CLASS_CITIZEN_REBEL","value":"8"},{"text":"HL2 combine troops - npc_combine, npc_advisor, apc_missile, npc_apcdriver, hostile npc_turret_floor, hostile npc_rollermine, npc_turret_ground when active, npc_turret_ceiling when active, and npc_strider when active (not being carried by the gunship).","key":"CLASS_COMBINE","value":"9"},{"text":"HL2 combine aircrafts - npc_combinegunship, npc_combinedropship, and npc_helicopter.","key":"CLASS_COMBINE_GUNSHIP","value":"10"},{"text":"HL2 unused.","key":"CLASS_CONSCRIPT","value":"11"},{"text":"HL2 headcrabs - visible npc_headcrab.","key":"CLASS_HEADCRAB","value":"12"},{"text":"HL2 manhacks - hostile npc_manhack not held by the gravity gun.","key":"CLASS_MANHACK","value":"13"},{"text":"HL2 metro police - npc_metropolice and npc_vehicledriver.","key":"CLASS_METROPOLICE","value":"14"},{"text":"HL2 combine military objects - func_guntarget, npc_spotlight, and active npc_combine_camera.","key":"CLASS_MILITARY","value":"15"},{"text":"HL2 combine scanners - npc_cscanner and npc_clawscanner.","key":"CLASS_SCANNER","value":"16"},{"text":"HL2 stalkers - npc_stalker.","key":"CLASS_STALKER","value":"17"},{"text":"HL2 vortigaunts - npc_vortigaunt before the end of EP2 (controlled by \"MakeGameEndAlly\" input).","key":"CLASS_VORTIGAUNT","value":"18"},{"text":"HL2 zombies - unslumped npc_zombie, npc_poisonzombie, npc_fastzombie, npc_fastzombie_torso, and npc_zombine.","key":"CLASS_ZOMBIE","value":"19"},{"text":"HL2 snipers - npc_sniper and proto_sniper.","key":"CLASS_PROTOSNIPER","value":"20"},{"text":"HL2 missiles - rpg_missile, apc_missile, and grenade_pathfollower.","key":"CLASS_MISSILE","value":"21"},{"text":"HL2 flares - env_flare.","key":"CLASS_FLARE","value":"22"},{"text":"HL2 animals - npc_crow, npc_seagull, and npc_pigeon.","key":"CLASS_EARTH_FAUNA","value":"23"},{"text":"HL2 friendly rollermines - hacked npc_rollermine.","key":"CLASS_HACKED_ROLLERMINE","value":"24"},{"text":"HL2 hunters - npc_hunter.","key":"CLASS_COMBINE_HUNTER","value":"25"},{"text":"HL:S turrets - monster_turret, monster_miniturret, monster_sentry.","key":"CLASS_MACHINE","value":"26"},{"text":"HL:S friendly humans - monster_scientist.","key":"CLASS_HUMAN_PASSIVE","value":"27"},{"text":"HL:S human military - monster_human_grunt and monster_apache.","key":"CLASS_HUMAN_MILITARY","value":"28"},{"text":"HL:S alien military - monster_alien_controller, monster_vortigaunt, monster_alien_grunt, monster_nihilanth, and monster_snark if it has an enemy of class CLASS_PLAYER, CLASS_HUMAN_PASSIVE, or CLASS_HUMAN_MILITARY.","key":"CLASS_ALIEN_MILITARY","value":"29"},{"text":"HL:S monsters - monster_tentacle, monster_barnacle, monster_zombie, monster_gargantua, monster_houndeye, monster_ichthyosaur, and monster_bigmomma.","key":"CLASS_ALIEN_MONSTER","value":"30"},{"text":"HL:S headcrabs - monster_headcrab.","key":"CLASS_ALIEN_PREY","value":"31"},{"text":"HL:S alien predators - monster_bullsquid, xen_tree, and xen_hull.","key":"CLASS_ALIEN_PREDATOR","value":"32"},{"text":"HL:S insects - montser_roach and monster_leech.","key":"CLASS_INSECT","value":"33"},{"text":"HL:S player bioweapons - hornet fired by a player.","key":"CLASS_PLAYER_BIOWEAPON","value":"34"},{"text":"HL:S enemy bioweapons - hornet fired by anyone but a player, or monster_snark with no enemy or an enemy without the class CLASS_PLAYER, CLASS_HUMAN_PASSIVE, or CLASS_HUMAN_MILITARY.","key":"CLASS_ALIEN_BIOWEAPON","value":"35"}]}},"realms":["Server"],"type":"Enum"},
{"enum":{"realm":"Shared","description":"Enumerations used by Entity:SetCollisionGroup and Entity:GetCollisionGroup.","items":{"item":[{"text":"Normal","key":"COLLISION_GROUP_NONE","value":"0"},{"text":"Collides with nothing but world and static stuff","key":"COLLISION_GROUP_DEBRIS","value":"1"},{"text":"Same as debris, but hits triggers. Useful for an item that can be shot, but doesn't collide.","key":"COLLISION_GROUP_DEBRIS_TRIGGER","value":"2"},{"text":"Collides with everything except other interactive debris or debris","key":"COLLISION_GROUP_INTERACTIVE_DEBRIS","value":"3"},{"text":"Collides with everything except interactive debris or debris","key":"COLLISION_GROUP_INTERACTIVE","value":"4"},{"key":"COLLISION_GROUP_PLAYER","value":"5"},{"text":"NPCs can see straight through an Entity with this applied.","key":"COLLISION_GROUP_BREAKABLE_GLASS","value":"6"},{"key":"COLLISION_GROUP_VEHICLE","value":"7"},{"text":"For HL2, same as Collision_Group_Player, for TF2, this filters out other players and CBaseObjects","key":"COLLISION_GROUP_PLAYER_MOVEMENT","value":"8"},{"key":"COLLISION_GROUP_NPC","value":"9"},{"text":"Doesn't collide with anything, no traces","key":"COLLISION_GROUP_IN_VEHICLE","value":"10"},{"text":"Doesn't collide with players and vehicles","key":"COLLISION_GROUP_WEAPON","value":"11"},{"text":"Only collides with vehicles","key":"COLLISION_GROUP_VEHICLE_CLIP","value":"12"},{"key":"COLLISION_GROUP_PROJECTILE","value":"13"},{"text":"Blocks entities not permitted to get near moving doors","key":"COLLISION_GROUP_DOOR_BLOCKER","value":"14"},{"text":"Lets the Player through, nothing else.","key":"COLLISION_GROUP_PASSABLE_DOOR","value":"15"},{"text":"Things that are dissolving are in this group","key":"COLLISION_GROUP_DISSOLVING","value":"16"},{"text":"Nonsolid on client and server, pushaway in player code","key":"COLLISION_GROUP_PUSHAWAY","value":"17"},{"key":"COLLISION_GROUP_NPC_ACTOR","value":"18"},{"key":"COLLISION_GROUP_NPC_SCRIPTED","value":"19"},{"text":"Doesn't collide with players/props","key":"COLLISION_GROUP_WORLD","value":"20"},{"text":"Amount of COLLISION_GROUP_ enumerations","key":"LAST_SHARED_COLLISION_GROUP","value":"21"}]}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Server","description":{"text":"Enumerations for NPC conditions, used by NPC:SetCondition. Serverside only.","note":"There are more conditions than listed here after **COND_NO_CUSTOM_INTERRUPTS**(70) but the name depends on what's returned by NPC:ConditionName","warning":"These enumerations do not exist in game and are listed here only for reference"},"items":{"item":[{"key":"COND_BEHIND_ENEMY","value":"29"},{"key":"COND_BETTER_WEAPON_AVAILABLE","value":"46"},{"key":"COND_CAN_MELEE_ATTACK1","value":"23"},{"key":"COND_CAN_MELEE_ATTACK2","value":"24"},{"key":"COND_CAN_RANGE_ATTACK1","value":"21"},{"key":"COND_CAN_RANGE_ATTACK2","value":"22"},{"key":"COND_ENEMY_DEAD","value":"30"},{"key":"COND_ENEMY_FACING_ME","value":"28"},{"key":"COND_ENEMY_OCCLUDED","value":"13"},{"key":"COND_ENEMY_TOO_FAR","value":"27"},{"key":"COND_ENEMY_UNREACHABLE","value":"31"},{"key":"COND_ENEMY_WENT_NULL","value":"12"},{"key":"COND_FLOATING_OFF_GROUND","value":"61"},{"key":"COND_GIVE_WAY","value":"48"},{"key":"COND_HAVE_ENEMY_LOS","value":"15"},{"key":"COND_HAVE_TARGET_LOS","value":"16"},{"key":"COND_HEALTH_ITEM_AVAILABLE","value":"47"},{"key":"COND_HEAR_BUGBAIT","value":"52"},{"key":"COND_HEAR_BULLET_IMPACT","value":"56"},{"key":"COND_HEAR_COMBAT","value":"53"},{"key":"COND_HEAR_DANGER","value":"50"},{"key":"COND_HEAR_MOVE_AWAY","value":"58"},{"key":"COND_HEAR_PHYSICS_DANGER","value":"57"},{"key":"COND_HEAR_PLAYER","value":"55"},{"key":"COND_HEAR_SPOOKY","value":"59"},{"key":"COND_HEAR_THUMPER","value":"51"},{"key":"COND_HEAR_WORLD","value":"54"},{"key":"COND_HEAVY_DAMAGE","value":"18"},{"key":"COND_IDLE_INTERRUPT","value":"2"},{"key":"COND_IN_PVS","value":"1"},{"key":"COND_LIGHT_DAMAGE","value":"17"},{"key":"COND_LOST_ENEMY","value":"11"},{"key":"COND_LOST_PLAYER","value":"33"},{"key":"COND_LOW_PRIMARY_AMMO","value":"3"},{"key":"COND_MOBBED_BY_ENEMIES","value":"62"},{"key":"COND_NEW_ENEMY","value":"26"},{"key":"COND_NO_CUSTOM_INTERRUPTS","value":"70"},{"key":"COND_NO_HEAR_DANGER","value":"60"},{"key":"COND_NO_PRIMARY_AMMO","value":"4"},{"key":"COND_NO_SECONDARY_AMMO","value":"5"},{"key":"COND_NO_WEAPON","value":"6"},{"text":"No additional conditions are being played","key":"COND_NONE","value":"0"},{"key":"COND_NOT_FACING_ATTACK","value":"40"},{"text":"Freezes NPC movement","key":"COND_NPC_FREEZE","value":"67"},{"text":"Unfreezes NPC movement","key":"COND_NPC_UNFREEZE","value":"68"},{"key":"COND_PHYSICS_DAMAGE","value":"19"},{"key":"COND_PLAYER_ADDED_TO_SQUAD","value":"64"},{"key":"COND_PLAYER_PUSHING","value":"66"},{"key":"COND_PLAYER_REMOVED_FROM_SQUAD","value":"65"},{"key":"COND_PROVOKED","value":"25"},{"key":"COND_RECEIVED_ORDERS","value":"63"},{"key":"COND_REPEATED_DAMAGE","value":"20"},{"key":"COND_SCHEDULE_DONE","value":"36"},{"key":"COND_SEE_DISLIKE","value":"9"},{"key":"COND_SEE_ENEMY","value":"10"},{"key":"COND_SEE_FEAR","value":"8"},{"key":"COND_SEE_HATE","value":"7"},{"key":"COND_SEE_NEMESIS","value":"34"},{"key":"COND_SEE_PLAYER","value":"32"},{"key":"COND_SMELL","value":"37"},{"key":"COND_TALKER_RESPOND_TO_QUESTION","value":"69"},{"key":"COND_TARGET_OCCLUDED","value":"14"},{"key":"COND_TASK_FAILED","value":"35"},{"key":"COND_TOO_CLOSE_TO_ATTACK","value":"38"},{"key":"COND_TOO_FAR_TO_ATTACK","value":"39"},{"key":"COND_WAY_CLEAR","value":"49"},{"key":"COND_WEAPON_BLOCKED_BY_FRIEND","value":"42"},{"key":"COND_WEAPON_HAS_LOS","value":"41"},{"key":"COND_WEAPON_PLAYER_IN_SPREAD","value":"43"},{"key":"COND_WEAPON_PLAYER_NEAR_TARGET","value":"44"},{"key":"COND_WEAPON_SIGHT_OCCLUDED","value":"45"}]}},"realms":["Server"],"type":"Enum"},
{"enum":{"realm":"Shared","description":"Enumerations used by util.PointContents and as tracer masks.","items":{"item":[{"text":"Things that are not solid","key":"CONTENTS_EMPTY","value":"0"},{"text":"Things that are solid","key":"CONTENTS_SOLID","value":"1"},{"text":"Glass","key":"CONTENTS_WINDOW","value":"2"},{"key":"CONTENTS_AUX","value":"4"},{"text":"Bullets go through, solids don't","key":"CONTENTS_GRATE","value":"8"},{"key":"CONTENTS_SLIME","value":"16"},{"text":"Hits world but not skybox","key":"CONTENTS_WATER","value":"32"},{"text":"Things that block line of sight","key":"CONTENTS_BLOCKLOS","value":"64"},{"text":"Things that block light","key":"CONTENTS_OPAQUE","value":"128"},{"key":"CONTENTS_TESTFOGVOLUME","value":"256"},{"key":"CONTENTS_TEAM4","value":"512"},{"key":"CONTENTS_TEAM3","value":"1024"},{"key":"CONTENTS_TEAM1","value":"2048"},{"key":"CONTENTS_TEAM2","value":"4096"},{"key":"CONTENTS_IGNORE_NODRAW_OPAQUE","value":"8192"},{"key":"CONTENTS_MOVEABLE","value":"16384"},{"key":"CONTENTS_AREAPORTAL","value":"32768"},{"key":"CONTENTS_PLAYERCLIP","value":"65536"},{"key":"CONTENTS_MONSTERCLIP","value":"131072"},{"key":"CONTENTS_CURRENT_0","value":"262144"},{"key":"CONTENTS_CURRENT_180","value":"1048576"},{"key":"CONTENTS_CURRENT_270","value":"2097152"},{"key":"CONTENTS_CURRENT_90","value":"524288"},{"key":"CONTENTS_CURRENT_DOWN","value":"8388608"},{"key":"CONTENTS_CURRENT_UP","value":"4194304"},{"key":"CONTENTS_DEBRIS","value":"67108864"},{"key":"CONTENTS_DETAIL","value":"134217728"},{"text":"Hitbox","key":"CONTENTS_HITBOX","value":"1073741824"},{"text":"Ladder","key":"CONTENTS_LADDER","value":"536870912"},{"text":"NPCs","key":"CONTENTS_MONSTER","value":"33554432"},{"key":"CONTENTS_ORIGIN","value":"16777216"},{"text":"Hits world but not skybox","key":"CONTENTS_TRANSLUCENT","value":"268435456"},{"text":"Last visible contents enumeration","key":"LAST_VISIBLE_CONTENTS","value":"128"},{"text":"Sum of all the visible contents enumerations","key":"ALL_VISIBLE_CONTENTS","value":"255"}]}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Server","description":"Citizen type, a KeyValue for npc_citizen( citizentype ), serverside only.","items":{"item":[{"text":"Default citizen","key":"CT_DEFAULT","value":"0"},{"key":"CT_DOWNTRODDEN","value":"1"},{"text":"Refugee","key":"CT_REFUGEE","value":"2"},{"text":"Rebel","key":"CT_REBEL","value":"3"},{"text":"Odessa?","key":"CT_UNIQUE","value":"4"}]}},"realms":["Server"],"type":"Enum"},
{"enum":{"realm":"Client","description":"Enumerations used by Global.GetRenderTargetEx. Clientside only.","items":{"item":[{"text":"Makes this render target an HDR render target if the current system supports HDR.","key":"CREATERENDERTARGETFLAGS_HDR","value":"1"},{"text":"Does nothing.","key":"CREATERENDERTARGETFLAGS_AUTOMIPMAP","value":"2"},{"text":"Does nothing","key":"CREATERENDERTARGETFLAGS_UNFILTERABLE_OK","value":"4"}]}},"realms":["Client"],"type":"Enum"},
{"enum":{"realm":"Server","description":"Enumerations used by NPC:Disposition and ENTITY:GetRelationship.","items":{"item":[{"text":"Error","key":"D_ER","value":"0"},{"text":"Hate","key":"D_HT","value":"1"},{"text":"Frightened / Fear","key":"D_FR","value":"2"},{"text":"Like","key":"D_LI","value":"3"},{"text":"Neutral","key":"D_NU","value":"4"}]}},"realms":["Server"],"type":"Enum"},
{"enum":{"realm":"Shared","description":"Displacement surface flags, used by the Structures/TraceResult.","items":{"item":[{"key":"DISPSURF_SURFACE","value":"1"},{"key":"DISPSURF_WALKABLE","value":"2"},{"key":"DISPSURF_BUILDABLE","value":"4"},{"key":"DISPSURF_SURFPROP1","value":"8"},{"key":"DISPSURF_SURFPROP2","value":"16"}]}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Client and Menu","description":{"text":"Enumerations used by Panel:Dock.","note":"These enumerations doesn't have DOCK_ prefix, this is an exception from all other enumerations."},"items":{"item":[{"text":"Don't dock","key":"NODOCK","value":"0"},{"text":"Fill parent","key":"FILL","value":"1"},{"text":"Dock to the left","key":"LEFT","value":"2"},{"text":"Dock to the right","key":"RIGHT","value":"3"},{"text":"Dock to the top","key":"TOP","value":"4"},{"text":"Dock to the bottom","key":"BOTTOM","value":"5"}]}},"realms":["Client","Menu"],"type":"Enum"},
{"enum":{"realm":"Shared","description":"Enumerations used by CTakeDamageInfo:GetDamageType, CTakeDamageInfo:SetDamageType and CTakeDamageInfo:IsDamageType","items":{"item":[{"text":"Generic damage (used by weapon_fists)","key":"DMG_GENERIC","value":"0"},{"text":"Caused by physics interaction and ignored by airboat drivers. This is used by the Rollermine and an unused animation attack called 'Fireattack' by the Antlion Guard [ACT_RANGE_ATTACK1](https://wiki.facepunch.com/gmod/Enums/ACT)\n* 4202501 is the same DMG type as 1 but has a different value and its only used by the Barnacle when it kills an NPC\n\n* 8197 is the same DMG type as 1 but has a different value and its only used by the Barnacle when its hurting a player","key":"DMG_CRUSH","value":"1"},{"text":"Bullet damage from Ceiling Turrets, the Strider, Turrets and most guns \n* 4098 is the same DMG type as 2 but has a different value and its only used by the Helicopter & Gunship","key":"DMG_BULLET","value":"2"},{"text":"Used by the Stunstick, Manhacks, Antlions, Antlion Guards, Headcrabs, Fast Headcrabs, all Zombies types, Hunter, and potentially other NPCs attacks","key":"DMG_SLASH","value":"4"},{"text":"Damage from fire","key":"DMG_BURN","value":"8"},{"text":"Hit by a vehicle (This will need to be set for passengers of some vehicle to receive damage)","key":"DMG_VEHICLE","value":"16"},{"text":"Fall damage","key":"DMG_FALL","value":"32"},{"text":"Explosion damage like grenades, helicopter bombs, combine mines, Will be ignored by most vehicle passengers\n* 134217792 is the same as 64 but has a different value and its used by the Explosive Oil Drum","key":"DMG_BLAST","value":"64"},{"text":"Blunt attacks such as from the Crowbar, Antlion Guard & Hunter","key":"DMG_CLUB","value":"128"},{"text":"Electrical damage, shows smoke at the damage position and its used by Stalkers & Vortigaunts","key":"DMG_SHOCK","value":"256"},{"text":"Sonic damage, used by the Gargantua and Houndeye NPCs","key":"DMG_SONIC","value":"512"},{"text":"Laser damage","key":"DMG_ENERGYBEAM","value":"1024"},{"text":"Prevent a physics force\n* 4196352 is the same as 2048 but has a different value and its only used by the Hunter when it kills a player via the flechettes","key":"DMG_PREVENT_PHYSICS_FORCE","value":"2048"},{"text":"Crossbow damage, never creates gibs\n* 67112960 is the same as 4096 but has a different value and its used by the Hunter's flechettes when initial contact is made to the entity","key":"DMG_NEVERGIB","value":"4096"},{"text":"Always create gibs","key":"DMG_ALWAYSGIB","value":"8192"},{"text":"Drown damage","key":"DMG_DROWN","value":"16384"},{"text":"Same as DMG_POISON","key":"DMG_PARALYZE","value":"32768"},{"text":"Neurotoxin damage","key":"DMG_NERVEGAS","value":"65536"},{"text":"Poison damage used by Antlion Workers & Poison Headcrabs\n* 134348800 is the same as 131072 but has a different value and its only used by the Antlion Worker's death damage","key":"DMG_POISON","value":"131072"},{"text":"Radiation damage & it will be ignored by most vehicle passengers","key":"DMG_RADIATION","value":"262144"},{"text":"Damage applied to the player to restore health after drowning","key":"DMG_DROWNRECOVER","value":"524288"},{"text":"Toxic chemical or acid burn damage used by the Antlion Workers","key":"DMG_ACID","value":"1048576"},{"text":"In an oven","key":"DMG_SLOWBURN","value":"2097152"},{"text":"Don't create a ragdoll on death","key":"DMG_REMOVENORAGDOLL","value":"4194304"},{"text":"Damage done by the gravity gun\n* 8388609 is the same as 8388608 but has a different value and its damage done by the gravity gun to NPCs","key":"DMG_PHYSGUN","value":"8388608"},{"text":"Plasma damage","key":"DMG_PLASMA","value":"16777216"},{"text":"Airboat gun damage","key":"DMG_AIRBOAT","value":"33554432"},{"text":"Forces the entity to dissolve on death. This is what the combine ball uses when it hits a target\n* 67108865 is the same as 67108864 but has a different value and its when an npc dies to a combine ball\n\n* 67110912 is the same as 67108864 but has a different value and its used by the Hunter's flechettes when they explode","key":"DMG_DISSOLVE","value":"67108864"},{"text":"This won't hurt the player underwater","key":"DMG_BLAST_SURFACE","value":"134217728"},{"text":"Direct damage to the entity that does not go through any damage value modifications","key":"DMG_DIRECT","value":"268435456"},{"text":"The pellets fired from a shotgun","key":"DMG_BUCKSHOT","value":"536870912"},{"text":"Damage from SniperRound/SniperPenetratedRound ammo types","key":"DMG_SNIPER","value":"1073741824"},{"text":"Damage from npc_missiledefense, npc_combinegunship, or monster_mortar","key":"DMG_MISSILEDEFENSE","value":"2147483648"}]}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Client","description":"Internal globals for SimpleDoF.","items":{"item":[{"key":"DOF_OFFSET","value":"256"},{"key":"DOF_SPACING","value":"512"}]}},"realms":["Client"],"type":"Enum"},
{"enum":{"realm":"Shared","description":"Enumerations used by Entity:AddEFlags, Entity:RemoveEFlags and Entity:IsEFlagSet.","items":{"item":[{"text":"This is set on bots that are frozen","key":"EFL_BOT_FROZEN","value":"256"},{"key":"EFL_CHECK_UNTOUCH","value":"16777216"},{"text":"Some dirty bits with respect to abs computations","key":"EFL_DIRTY_ABSANGVELOCITY","value":"8192"},{"key":"EFL_DIRTY_ABSTRANSFORM","value":"2048"},{"key":"EFL_DIRTY_ABSVELOCITY","value":"4096"},{"text":"(Client only) need shadow manager to update the shadow","key":"EFL_DIRTY_SHADOWUPDATE","value":"32"},{"key":"EFL_DIRTY_SPATIAL_PARTITION","value":"32768"},{"key":"EFL_DIRTY_SURROUNDING_COLLISION_BOUNDS","value":"16384"},{"text":"Entity shouldn't block NPC line-of-sight","key":"EFL_DONTBLOCKLOS","value":"33554432"},{"text":"NPCs should not walk on this entity","key":"EFL_DONTWALKON","value":"67108864"},{"text":"Entity is dormant, no updates to client","key":"EFL_DORMANT","value":"2"},{"text":"The default behavior in ShouldTransmit is to not send an entity if it doesn't have a model. Certain entities want to be sent anyway because all the drawing logic is in the client DLL. They can set this flag and the engine will transmit them even if they don't have model","key":"EFL_FORCE_CHECK_TRANSMIT","value":"128"},{"text":"One of the child entities is a player","key":"EFL_HAS_PLAYER_CHILD","value":"16"},{"text":"This is set if the entity detects that it's in the skybox. This forces it to pass the \"in PVS\" for transmission","key":"EFL_IN_SKYBOX","value":"131072"},{"key":"EFL_IS_BEING_LIFTED_BY_BARNACLE","value":"1048576"},{"text":"This is a special entity that should not be deleted when we restart entities only","key":"EFL_KEEP_ON_RECREATE_ENTITIES","value":"16"},{"text":"This entity is marked for death -- This allows the game to actually delete ents at a safe time.","key":"EFL_KILLME","value":"1","warning":"You should never set this flag manually."},{"text":"Lets us know when the noclip command is active","key":"EFL_NOCLIP_ACTIVE","value":"4"},{"text":"Another entity is watching events on this entity (used by teleport)","key":"EFL_NOTIFY","value":"64"},{"text":"Don't attach the edict","key":"EFL_NO_AUTO_EDICT_ATTACH","value":"1024"},{"text":"Doesn't accept forces from physics damage","key":"EFL_NO_DAMAGE_FORCES","value":"-2147483648"},{"text":"Entitiy shouldn't dissolve","key":"EFL_NO_DISSOLVE","value":"134217728"},{"key":"EFL_NO_GAME_PHYSICS_SIMULATION","value":"8388608"},{"text":"Mega physcannon can't ragdoll these guys","key":"EFL_NO_MEGAPHYSCANNON_RAGDOLL","value":"268435456"},{"text":"Physcannon can't pick these up or punt them","key":"EFL_NO_PHYSCANNON_INTERACTION","value":"1073741824"},{"key":"EFL_NO_ROTORWASH_PUSH","value":"2097152"},{"text":"Avoid executing the entity's Think","key":"EFL_NO_THINK_FUNCTION","value":"4194304"},{"text":"Don't adjust this entity's velocity when transitioning into water","key":"EFL_NO_WATER_VELOCITY_CHANGE","value":"536870912"},{"text":"Non-networked entity","key":"EFL_SERVER_ONLY","value":"512"},{"text":"Set while a model is setting up its bones","key":"EFL_SETTING_UP_BONES","value":"8"},{"text":"Used to determine if an entity is floating","key":"EFL_TOUCHING_FLUID","value":"524288"},{"text":"Entities with this flag set show up in the partition even when not solid","key":"EFL_USE_PARTITION_WHEN_NOT_SOLID","value":"262144"}]}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Client","description":"Enumerations used by IGModAudioChannel:FFT. Clientside only.","items":{"item":[{"text":"128 levels","key":"FFT_256","value":"0"},{"text":"256 levels","key":"FFT_512","value":"1"},{"text":"512 levels","key":"FFT_1024","value":"2"},{"text":"1024 levels","key":"FFT_2048","value":"3"},{"text":"2048 levels","key":"FFT_4096","value":"4"},{"text":"4096 levels","key":"FFT_8192","value":"5"},{"text":"8192 levels","key":"FFT_16384","value":"6"},{"text":"16384 levels","key":"FFT_32768","value":"7"}]}},"realms":["Client"],"type":"Enum"},
{"enum":{"realm":"Shared and Menu","description":"Enumerations used by Entity:AddEffects,  Entity:RemoveEffects and  Entity:IsEffectActive.","items":{"item":[{"text":"Performs bone merge on client side","key":"EF_BONEMERGE","value":"1"},{"text":"For use with EF_BONEMERGE. If this is set, then it places this ents origin at its parent and uses the parent's bbox + the max extents of the aiment. Otherwise, it sets up the parent's bones every frame to figure out where to place the aiment, which is inefficient because it'll setup the parent's bones even if the parent is not in the PVS.","key":"EF_BONEMERGE_FASTCULL","value":"128"},{"text":"DLIGHT centered at entity origin","key":"EF_BRIGHTLIGHT","value":"2"},{"text":"Player flashlight","key":"EF_DIMLIGHT","value":"4"},{"text":"Don't interpolate the next frame","key":"EF_NOINTERP","value":"8"},{"text":"Disables shadow","key":"EF_NOSHADOW","value":"16"},{"text":"Prevents the entity from drawing and networking.","key":"EF_NODRAW","value":"32"},{"text":"Don't receive shadows","key":"EF_NORECEIVESHADOW","value":"64"},{"text":"Makes the entity blink","key":"EF_ITEM_BLINK","value":"256"},{"text":"Always assume that the parent entity is animating","key":"EF_PARENT_ANIMATES","value":"512"},{"text":"Internal flag that is set by Entity:FollowBone","key":"EF_FOLLOWBONE","value":"1024"}]}},"realms":["Server","Client","Menu"],"type":"Enum"},
{"enum":{"realm":"Shared and Menu","description":"Enumerations used by concommand.Add, Global.CreateClientConVar and Global.CreateConVar.","items":{"item":[{"text":"Save the ConVar value into config.vdf\n\nReported as \"a\" by `cvarlist`, except Lua ConVars","key":"FCVAR_ARCHIVE","value":"128"},{"text":"Save the ConVar value into config.vdf on XBox","key":"FCVAR_ARCHIVE_XBOX","value":"16777216"},{"text":"Requires sv_cheats to be enabled to change the ConVar or run the command\n\nReported as \"cheat\" by `cvarlist`","key":"FCVAR_CHEAT","value":"16384"},{"text":"IVEngineClient::ClientCmd is allowed to execute this command\n\nReported as \"clientcmd_can_execute\" by `cvarlist`","key":"FCVAR_CLIENTCMD_CAN_EXECUTE","value":"1073741824"},{"text":"ConVar is defined by the client DLL.\n\nThis flag is set automatically\n\nReported as \"cl\" by `cvarlist`","key":"FCVAR_CLIENTDLL","value":"8"},{"text":"Force the ConVar to be recorded by demo recordings.\n\nReported as \"demo\" by `cvarlist`","key":"FCVAR_DEMO","value":"65536"},{"text":"Opposite of FCVAR_DEMO, ensures the ConVar is not recorded in demos\n\nReported as \"norecord\" by `cvarlist`","key":"FCVAR_DONTRECORD","value":"131072"},{"text":"ConVar is defined by the game DLL.\n\nThis flag is set automatically\n\nReported as \"sv\" by `cvarlist`","key":"FCVAR_GAMEDLL","value":"4"},{"text":"Set automatically on all ConVars and console commands created by the client Lua state.\n\nReported as \"lua_client\" by `cvarlist`","key":"FCVAR_LUA_CLIENT","value":"262144"},{"text":"Set automatically on all ConVars and console commands created by the server Lua state.\n\nReported as \"lua_server\" by `cvarlist`","key":"FCVAR_LUA_SERVER","value":"524288"},{"text":"Tells the engine to never print this variable as a string. This is used for variables which may contain control characters.\n\nReported as \"numeric\" by `cvarlist`","key":"FCVAR_NEVER_AS_STRING","value":"4096"},{"text":"No flags","key":"FCVAR_NONE","value":"0"},{"text":"For serverside ConVars, notifies all players with blue chat text when the value gets changed\n\nReported as \"nf\" by `cvarlist`","key":"FCVAR_NOTIFY","value":"256"},{"text":"Makes the ConVar not changeable while connected to a server or in singleplayer","key":"FCVAR_NOT_CONNECTED","value":"4194304"},{"text":"Forces the ConVar to only have printable characters ( No control characters )\n\nReported as \"print\" by `cvarlist`","key":"FCVAR_PRINTABLEONLY","value":"1024"},{"text":"Makes the ConVar value hidden from all clients ( For example sv_password )\n\nReported as \"prot\" by `cvarlist`","key":"FCVAR_PROTECTED","value":"32"},{"text":"For serverside ConVars, it will send its value to all clients. The ConVar with the same name must also exist on the client!\n\nReported as \"rep\" by `cvarlist`","key":"FCVAR_REPLICATED","value":"8192"},{"text":"Prevents the server from querying value of this ConVar","key":"FCVAR_SERVER_CANNOT_QUERY","value":"536870912"},{"text":"The server is allowed to execute this command on clients.\n\nReported as \"server_can_execute\" by `cvarlist`","key":"FCVAR_SERVER_CAN_EXECUTE","value":"268435456"},{"text":"Executing the command or changing the ConVar is only allowed in singleplayer\n\nReported as \"sp\" by `cvarlist`","key":"FCVAR_SPONLY","value":"64"},{"text":"Don't log the ConVar changes to console/log files/users\n\nReported as \"log\" by `cvarlist`","key":"FCVAR_UNLOGGED","value":"2048"},{"text":"If this is set, the convar will become anonymous and won't show up in the 'find' results.","key":"FCVAR_UNREGISTERED","value":"1"},{"text":"For clientside commands, sends the value to the server\n\nReported as \"user\" by `cvarlist`","key":"FCVAR_USERINFO","value":"512"}]}},"realms":["Server","Client","Menu"],"type":"Enum"},
{"enum":{"realm":"Shared","description":"Enumerations used by Entity:SetSolidFlags and Entity:GetSolidFlags.","items":{"item":[{"text":"Ignore solid type + always call into the entity for ray tests","key":"FSOLID_CUSTOMRAYTEST","value":"1"},{"text":"Ignore solid type + always call into the entity for swept box tests","key":"FSOLID_CUSTOMBOXTEST","value":"2"},{"text":"The object is currently not solid","key":"FSOLID_NOT_SOLID","value":"4"},{"text":"This is something may be collideable but fires touch functions even when it's not collideable (when the FSOLID_NOT_SOLID flag is set)","key":"FSOLID_TRIGGER","value":"8"},{"text":"The player can't stand on this","key":"FSOLID_NOT_STANDABLE","value":"16"},{"text":"Contains volumetric contents (like water)","key":"FSOLID_VOLUME_CONTENTS","value":"32"},{"text":"Forces the collision representation to be world-aligned even if it's SOLID_BSP or SOLID_VPHYSICS","key":"FSOLID_FORCE_WORLD_ALIGNED","value":"64"},{"text":"Uses a special trigger bounds separate from the normal OBB","key":"FSOLID_USE_TRIGGER_BOUNDS","value":"128"},{"text":"Collisions are defined in root parent's local coordinate space","key":"FSOLID_ROOT_PARENT_ALIGNED","value":"256"},{"text":"This trigger will touch debris objects","key":"FSOLID_TRIGGER_TOUCH_DEBRIS","value":"512"},{"text":"The amount of bits needed to store the all the flags in a variable/sent over network.","key":"FSOLID_MAX_BITS","value":"10"}]}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Shared and Menu","description":"Enumerations used by Global.AccessorFunc.","items":{"item":[{"text":"Forces the function to take strings only","key":"FORCE_STRING","value":"1"},{"text":"Forces the function to take numbers only","key":"FORCE_NUMBER","value":"2"},{"text":"Forces the function to take booleans only","key":"FORCE_BOOL","value":"3"}]}},"realms":["Server","Client","Menu"],"type":"Enum"},
{"enum":{"realm":"Shared","description":"Enumerations used by Entity:AddFlags, Entity:RemoveFlags and Entity:IsFlagSet.","items":{"item":[{"text":"Is the entity on ground or not","key":"FL_ONGROUND","value":"1"},{"text":"Is player ducking or not","key":"FL_DUCKING","value":"2"},{"text":"Is the player in the process of ducking or standing up","key":"FL_ANIMDUCKING","value":"4"},{"text":"The player is jumping out of water","key":"FL_WATERJUMP","value":"8"},{"text":"This player is controlling a func_train","key":"FL_ONTRAIN","value":"16"},{"text":"Indicates the entity is standing in rain","key":"FL_INRAIN","value":"32"},{"text":"Completely freezes the player","key":"FL_FROZEN","value":"64","bug":"Bots will still be able to look around."},{"text":"This player is controlling something UI related in the world, this prevents his movement, but doesn't freeze mouse movement, jumping, etc.","key":"FL_ATCONTROLS","value":"128"},{"text":"Is this entity a player or not","key":"FL_CLIENT","value":"256"},{"text":"Bots have this flag","key":"FL_FAKECLIENT","value":"512"},{"text":"Is the player in water or not","key":"FL_INWATER","value":"1024"},{"text":"This entity can fly","key":"FL_FLY","value":"2048"},{"text":"This entity can swim","key":"FL_SWIM","value":"4096"},{"text":"This entity is a func_conveyor","key":"FL_CONVEYOR","value":"8192"},{"text":"NPCs have this flag (NPC: Ignore player push)","key":"FL_NPC","value":"16384"},{"text":"Whether the player has god mode enabled","key":"FL_GODMODE","value":"32768"},{"text":"Makes the entity invisible to AI","key":"FL_NOTARGET","value":"65536"},{"text":"This entity can be aimed at","key":"FL_AIMTARGET","value":"131072"},{"text":"Not all corners are valid","key":"FL_PARTIALGROUND","value":"262144"},{"text":"It's a static prop","key":"FL_STATICPROP","value":"524288"},{"text":"worldgraph has this ent listed as something that blocks a connection","key":"FL_GRAPHED","value":"1048576"},{"text":"This entity is a grenade, unused","key":"FL_GRENADE","value":"2097152"},{"text":"Changes the SV_Movestep() behavior to not do any processing","key":"FL_STEPMOVEMENT","value":"4194304"},{"text":"Doesn't generate touch functions, calls ENTITY:EndTouch when this flag gets set during a touch callback","key":"FL_DONTTOUCH","value":"8388608"},{"text":"Base velocity has been applied this frame (used to convert base velocity into momentum)","key":"FL_BASEVELOCITY","value":"16777216"},{"text":"This entity is a brush and part of the world","key":"FL_WORLDBRUSH","value":"33554432"},{"text":"This entity can be seen by NPCs","key":"FL_OBJECT","value":"67108864"},{"text":"This entity is about to get removed","key":"FL_KILLME","value":"134217728"},{"text":"This entity is on fire","key":"FL_ONFIRE","value":"268435456"},{"text":"The entity is currently dissolving","key":"FL_DISSOLVING","value":"536870912"},{"text":"This entity is about to become a ragdoll","key":"FL_TRANSRAGDOLL","value":"1073741824"},{"text":"This moving door can't be blocked by the player","key":"FL_UNBLOCKABLE_BY_PLAYER","value":"-2147483648"}]}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Shared","description":"Enumerations used by PhysObj:AddGameFlag, PhysObj:HasGameFlag and PhysObj:ClearGameFlag.","items":{"item":[{"text":"Won't receive physics forces from collisions and won't collide with other PhysObj with the same flag set.","key":"FVPHYSICS_CONSTRAINT_STATIC","value":"2"},{"text":"Colliding with entities will cause 1000 damage with DMG_DISSOLVE as the damage type, but only if EFL_NO_DISSOLVE is not set.","key":"FVPHYSICS_DMG_DISSOLVE","value":"512"},{"text":"Does slice damage, not just blunt damage.","key":"FVPHYSICS_DMG_SLICE","value":"1"},{"text":"Will deal high physics damage even with a small mass.","key":"FVPHYSICS_HEAVY_OBJECT","value":"32"},{"text":"This PhysObj is part of an entity with multiple PhysObj , such as a ragdoll or a vehicle , and will be considered during collision damage events.","key":"FVPHYSICS_MULTIOBJECT_ENTITY","value":"16"},{"text":"Colliding with entities won't cause physics damage.","key":"FVPHYSICS_NO_IMPACT_DMG","value":"1024"},{"text":"Like FVPHYSICS_NO_NPC_IMPACT_DMG, but only checks for NPCs. Usually set on Combine Balls fired by Combine Soldiers.","key":"FVPHYSICS_NO_NPC_IMPACT_DMG","value":"2048"},{"text":"Doesn't allow the player to pick this PhysObj with the Gravity Gun or +use pickup.","key":"FVPHYSICS_NO_PLAYER_PICKUP","value":"128"},{"text":"We won't collide with other PhysObj associated to the same entity, only used for vehicles and ragdolls held by the Super Gravity Gun.","key":"FVPHYSICS_NO_SELF_COLLISIONS","value":"32768"},{"text":"This PhysObj is part of a ragdoll.","key":"FVPHYSICS_PART_OF_RAGDOLL","value":"8"},{"text":"Set by the physics engine when two PhysObj are penetrating each other. This is only automatically updated for non-static physics objects.","key":"FVPHYSICS_PENETRATING","value":"64"},{"text":"Set when the player is holding this PhysObj with the Physics Gun, Gravity Gun or +use pickup.","key":"FVPHYSICS_PLAYER_HELD","value":"4"},{"text":"This object was thrown by the Gravity Gun , stuns Antlion guards, Hunters, and squashes Antlion grubs.","key":"FVPHYSICS_WAS_THROWN","value":"256"}]}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Shared","description":"Enumerations used by Player:AnimResetGestureSlot and Player:AnimRestartGesture.","items":{"item":[{"text":"Slot for weapon gestures","key":"GESTURE_SLOT_ATTACK_AND_RELOAD","value":"0"},{"key":"GESTURE_SLOT_GRENADE","value":"1"},{"text":"Slot for jump gestures","key":"GESTURE_SLOT_JUMP","value":"2"},{"text":"Slot for swimming gestures","key":"GESTURE_SLOT_SWIM","value":"3"},{"text":"Slot for flinching gestures","key":"GESTURE_SLOT_FLINCH","value":"4"},{"key":"GESTURE_SLOT_VCD","value":"5"},{"text":"Slot for custom gestures","key":"GESTURE_SLOT_CUSTOM","value":"6"}]}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Shared","description":"Enumerations used by GM:ScalePlayerDamage and GM:ScaleNPCDamage and returned by Player:LastHitGroup.","items":{"item":[{"text":"1:1 damage. Melee weapons and fall damage typically hit this hitgroup.\nThis hitgroup is not present on default player models.\n\nIt is unknown how this is generated in GM:ScalePlayerDamage, but it occurs when shot by NPCs ( npc_combine_s ) for example.","key":"HITGROUP_GENERIC","value":"0"},{"text":"Head","key":"HITGROUP_HEAD","value":"1"},{"text":"Chest","key":"HITGROUP_CHEST","value":"2"},{"text":"Stomach","key":"HITGROUP_STOMACH","value":"3"},{"text":"Left arm","key":"HITGROUP_LEFTARM","value":"4"},{"text":"Right arm","key":"HITGROUP_RIGHTARM","value":"5"},{"text":"Left leg","key":"HITGROUP_LEFTLEG","value":"6"},{"text":"Right leg","key":"HITGROUP_RIGHTLEG","value":"7"},{"text":"Gear. Supposed to be belt area.\n\nThis hitgroup is not present on default player models.\n\nAlerts NPC, but doesn't do damage or bleed (1/100th damage)","key":"HITGROUP_GEAR","value":"10"}]}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Client","description":"Enumerations used by IGModAudioChannel:GetState. Clientside only.","items":{"item":[{"text":"The channel is stopped","key":"GMOD_CHANNEL_STOPPED","value":"0"},{"text":"The channel is playing","key":"GMOD_CHANNEL_PLAYING","value":"1"},{"text":"The channel is paused","key":"GMOD_CHANNEL_PAUSED","value":"2"},{"text":"The channel is buffering","key":"GMOD_CHANNEL_STALLED","value":"3"}]}},"realms":["Client"],"type":"Enum"},
{"enum":{"realm":"Client","description":"Enumerations used by Global.GetRenderTargetEx. Clientside only.","items":{"item":[{"key":"IMAGE_FORMAT_DEFAULT","value":"-1"},{"key":"IMAGE_FORMAT_RGBA8888","value":"0"},{"key":"IMAGE_FORMAT_ABGR8888","value":"1"},{"key":"IMAGE_FORMAT_RGB888","value":"2"},{"key":"IMAGE_FORMAT_BGR888","value":"3"},{"key":"IMAGE_FORMAT_RGB565","value":"4"},{"key":"IMAGE_FORMAT_ARGB8888","value":"11"},{"key":"IMAGE_FORMAT_BGRA8888","value":"12"},{"key":"IMAGE_FORMAT_RGBA16161616","value":"25"},{"key":"IMAGE_FORMAT_RGBA16161616F","value":"24"}]}},"realms":["Client"],"type":"Enum"},
{"enum":{"realm":"Shared","description":"Enumerations used by Player:PrintMessage and Global.PrintMessage.","items":{"item":[{"text":"No longer works; now same as HUD_PRINTCONSOLE","key":"HUD_PRINTNOTIFY","value":"1"},{"text":"Console","key":"HUD_PRINTCONSOLE","value":"2"},{"text":"Chat, also prints to console","key":"HUD_PRINTTALK","value":"3"},{"text":"Center of the screen, nothing on client","key":"HUD_PRINTCENTER","value":"4"}]}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Server","description":"Enumerations used by game.SetGlobalState and game.GetGlobalState.\n\nServerside only.","items":{"item":[{"text":"Initial state, the global state is off.","key":"GLOBAL_OFF","value":"0"},{"text":"The global state is enabled.","key":"GLOBAL_ON","value":"1"},{"text":"The global state is dead and is no longer active. It will be cleared.","key":"GLOBAL_DEAD","value":"2"}]}},"realms":["Server"],"type":"Enum"},
{"enum":{"realm":"Server","description":"Enumerations used by NPC:SetHullType and  NPC:GetHullType. Serverside only.","items":{"item":[{"text":"Hull of a Citizen","key":"HULL_HUMAN","value":"0"},{"key":"HULL_SMALL_CENTERED","value":"1"},{"key":"HULL_WIDE_HUMAN","value":"2"},{"key":"HULL_TINY","value":"3"},{"key":"HULL_WIDE_SHORT","value":"4"},{"key":"HULL_MEDIUM","value":"5"},{"key":"HULL_TINY_CENTERED","value":"6"},{"key":"HULL_LARGE","value":"7"},{"key":"HULL_LARGE_CENTERED","value":"8"},{"key":"HULL_MEDIUM_TALL","value":"9"}]}},"realms":["Server"],"type":"Enum"},
{"enum":{"realm":"Shared and Menu","description":"Enumerations used by input.IsButtonDown.\n\nIt's also part of the Enums/BUTTON_CODE.","items":{"item":[{"key":"JOYSTICK_FIRST","value":"114"},{"text":"Joystick buttons are in this range, but don't have individual enum names.","key":"JOYSTICK_FIRST_BUTTON","value":"114"},{"key":"JOYSTICK_LAST_BUTTON","value":"145"},{"text":"Joystick POV buttons are in this range, but don't have individual enum names.","key":"JOYSTICK_FIRST_POV_BUTTON","value":"146"},{"key":"JOYSTICK_LAST_POV_BUTTON","value":"149"},{"text":"Joystick axis buttons are in this range, but don't have individual enum names.","key":"JOYSTICK_FIRST_AXIS_BUTTON","value":"150"},{"key":"JOYSTICK_LAST_AXIS_BUTTON","value":"161"},{"key":"JOYSTICK_LAST","value":"161"}]},"fieldsonly":""},"realms":["Server","Client","Menu"],"type":"Enum"},
{"enum":{"realm":"Shared and Menu","description":"Enumerations used by:\n* input.IsKeyDown\n* input.WasKeyPressed\n* input.WasKeyReleased\n* input.WasKeyTyped\n* input.IsKeyTrapping\n* input.GetKeyName\n* input.LookupBinding\n* PANEL:OnKeyCodePressed\n* PANEL:OnKeyCodeReleased\n\nIt's also part of the Enums/BUTTON_CODE.","items":{"item":[{"key":"KEY_FIRST","value":"0"},{"key":"KEY_NONE","value":"0"},{"text":"Normal number 0 key","key":"KEY_0","value":"1"},{"text":"Normal number 1 key","key":"KEY_1","value":"2"},{"text":"Normal number 2 key","key":"KEY_2","value":"3"},{"text":"Normal number 3 key","key":"KEY_3","value":"4"},{"text":"Normal number 4 key","key":"KEY_4","value":"5"},{"text":"Normal number 5 key","key":"KEY_5","value":"6"},{"text":"Normal number 6 key","key":"KEY_6","value":"7"},{"text":"Normal number 7 key","key":"KEY_7","value":"8"},{"text":"Normal number 8 key","key":"KEY_8","value":"9"},{"text":"Normal number 9 key","key":"KEY_9","value":"10"},{"key":"KEY_A","value":"11"},{"key":"KEY_B","value":"12"},{"key":"KEY_C","value":"13"},{"key":"KEY_D","value":"14"},{"key":"KEY_E","value":"15"},{"key":"KEY_F","value":"16"},{"key":"KEY_G","value":"17"},{"key":"KEY_H","value":"18"},{"key":"KEY_I","value":"19"},{"key":"KEY_J","value":"20"},{"key":"KEY_K","value":"21"},{"key":"KEY_L","value":"22"},{"key":"KEY_M","value":"23"},{"key":"KEY_N","value":"24"},{"key":"KEY_O","value":"25"},{"key":"KEY_P","value":"26"},{"key":"KEY_Q","value":"27"},{"key":"KEY_R","value":"28"},{"key":"KEY_S","value":"29"},{"key":"KEY_T","value":"30"},{"key":"KEY_U","value":"31"},{"key":"KEY_V","value":"32"},{"key":"KEY_W","value":"33"},{"key":"KEY_X","value":"34"},{"key":"KEY_Y","value":"35"},{"key":"KEY_Z","value":"36"},{"text":"Keypad number 0 key","key":"KEY_PAD_0","value":"37"},{"text":"Keypad number 1 key","key":"KEY_PAD_1","value":"38"},{"text":"Keypad number 2 key","key":"KEY_PAD_2","value":"39"},{"text":"Keypad number 3 key","key":"KEY_PAD_3","value":"40"},{"text":"Keypad number 4 key","key":"KEY_PAD_4","value":"41"},{"text":"Keypad number 5 key","key":"KEY_PAD_5","value":"42"},{"text":"Keypad number 6 key","key":"KEY_PAD_6","value":"43"},{"text":"Keypad number 7 key","key":"KEY_PAD_7","value":"44"},{"text":"Keypad number 8 key","key":"KEY_PAD_8","value":"45"},{"text":"Keypad number 9 key","key":"KEY_PAD_9","value":"46"},{"text":"Keypad division/slash key (/)","key":"KEY_PAD_DIVIDE","value":"47"},{"text":"Keypad asterisk key (*)","key":"KEY_PAD_MULTIPLY","value":"48"},{"text":"Keypad minus key","key":"KEY_PAD_MINUS","value":"49"},{"text":"Keypad plus key","key":"KEY_PAD_PLUS","value":"50"},{"text":"Keypad enter key","key":"KEY_PAD_ENTER","value":"51"},{"text":"Keypad dot key (.)","key":"KEY_PAD_DECIMAL","value":"52"},{"key":"KEY_LBRACKET","value":"53"},{"key":"KEY_RBRACKET","value":"54"},{"key":"KEY_SEMICOLON","value":"55"},{"key":"KEY_APOSTROPHE","value":"56"},{"key":"KEY_BACKQUOTE","value":"57"},{"key":"KEY_COMMA","value":"58"},{"key":"KEY_PERIOD","value":"59"},{"key":"KEY_SLASH","value":"60"},{"key":"KEY_BACKSLASH","value":"61"},{"key":"KEY_MINUS","value":"62"},{"key":"KEY_EQUAL","value":"63"},{"key":"KEY_ENTER","value":"64"},{"key":"KEY_SPACE","value":"65"},{"key":"KEY_BACKSPACE","value":"66"},{"key":"KEY_TAB","value":"67"},{"key":"KEY_CAPSLOCK","value":"68"},{"key":"KEY_NUMLOCK","value":"69"},{"key":"KEY_ESCAPE","value":"70"},{"key":"KEY_SCROLLLOCK","value":"71"},{"key":"KEY_INSERT","value":"72"},{"key":"KEY_DELETE","value":"73"},{"key":"KEY_HOME","value":"74"},{"key":"KEY_END","value":"75"},{"key":"KEY_PAGEUP","value":"76"},{"key":"KEY_PAGEDOWN","value":"77"},{"key":"KEY_BREAK","value":"78"},{"text":"The left Shift key, has been seen to be triggered by Right Shift in PANEL:OnKeyCodePressed","key":"KEY_LSHIFT","value":"79"},{"key":"KEY_RSHIFT","value":"80"},{"key":"KEY_LALT","value":"81"},{"key":"KEY_RALT","value":"82"},{"key":"KEY_LCONTROL","value":"83"},{"key":"KEY_RCONTROL","value":"84"},{"text":"The left Windows key or the Command key on Mac OSX","key":"KEY_LWIN","value":"85"},{"text":"The right Windows key or the Command key on Mac OSX","key":"KEY_RWIN","value":"86"},{"key":"KEY_APP","value":"87"},{"key":"KEY_UP","value":"88"},{"key":"KEY_LEFT","value":"89"},{"key":"KEY_DOWN","value":"90"},{"key":"KEY_RIGHT","value":"91"},{"key":"KEY_F1","value":"92"},{"key":"KEY_F2","value":"93"},{"key":"KEY_F3","value":"94"},{"key":"KEY_F4","value":"95"},{"key":"KEY_F5","value":"96"},{"key":"KEY_F6","value":"97"},{"key":"KEY_F7","value":"98"},{"key":"KEY_F8","value":"99"},{"key":"KEY_F9","value":"100"},{"key":"KEY_F10","value":"101"},{"key":"KEY_F11","value":"102"},{"key":"KEY_F12","value":"103"},{"key":"KEY_CAPSLOCKTOGGLE","value":"104"},{"key":"KEY_NUMLOCKTOGGLE","value":"105"},{"key":"KEY_LAST","value":"106"},{"key":"KEY_SCROLLLOCKTOGGLE","value":"106"},{"key":"KEY_COUNT","value":"107"},{"key":"KEY_XBUTTON_A","value":"114"},{"key":"KEY_XBUTTON_B","value":"115"},{"key":"KEY_XBUTTON_X","value":"116"},{"key":"KEY_XBUTTON_Y","value":"117"},{"key":"KEY_XBUTTON_LEFT_SHOULDER","value":"118"},{"key":"KEY_XBUTTON_RIGHT_SHOULDER","value":"119"},{"key":"KEY_XBUTTON_BACK","value":"120"},{"key":"KEY_XBUTTON_START","value":"121"},{"key":"KEY_XBUTTON_STICK1","value":"122"},{"key":"KEY_XBUTTON_STICK2","value":"123"},{"key":"KEY_XBUTTON_UP","value":"146"},{"key":"KEY_XBUTTON_RIGHT","value":"147"},{"key":"KEY_XBUTTON_DOWN","value":"148"},{"key":"KEY_XBUTTON_LEFT","value":"149"},{"key":"KEY_XSTICK1_RIGHT","value":"150"},{"key":"KEY_XSTICK1_LEFT","value":"151"},{"key":"KEY_XSTICK1_DOWN","value":"152"},{"key":"KEY_XSTICK1_UP","value":"153"},{"key":"KEY_XBUTTON_LTRIGGER","value":"154"},{"key":"KEY_XBUTTON_RTRIGGER","value":"155"},{"key":"KEY_XSTICK2_RIGHT","value":"156"},{"key":"KEY_XSTICK2_LEFT","value":"157"},{"key":"KEY_XSTICK2_DOWN","value":"158"},{"key":"KEY_XSTICK2_UP","value":"159"}]},"fieldsonly":""},"realms":["Server","Client","Menu"],"type":"Enum"},
{"enum":{"realm":"Shared","description":"Unlike Enums/BUTTON_CODE, these enums are abstracted to allow the user to bind actions to any key they might prefer.\n\nKeybinds using these actions work with two console commands, one starting with a plus and one with a minus symbol. A key press or release will call either the plus or minus command, adding or removing the corresponding enum in the current CUserCmd.\n\nEnumerations used by:\n* Player:KeyDown\n* Player:KeyDownLast\n* Player:KeyPressed\n* Player:KeyReleased\n* CMoveData:AddKey\n* CMoveData:GetButtons\n* CMoveData:GetOldButtons\n* CMoveData:KeyDown\n* CMoveData:KeyPressed\n* CMoveData:KeyReleased\n* CMoveData:KeyWasDown\n* CMoveData:SetButtons\n* CMoveData:SetOldButtons\n* CUserCmd:GetButtons\n* CUserCmd:KeyDown\n* CUserCmd:RemoveKey\n* CUserCmd:SetButtons\n* GM:KeyPress\n* GM:KeyRelease","items":{"item":[{"text":"+attack bound key ( Default: Left Mouse Button )","key":"IN_ATTACK","value":"1"},{"text":"+jump bound key ( Default: Space )","key":"IN_JUMP","value":"2"},{"text":"+duck bound key ( Default: CTRL )","key":"IN_DUCK","value":"4"},{"text":"+forward bound key ( Default: W )","key":"IN_FORWARD","value":"8"},{"text":"+back bound key ( Default: S )","key":"IN_BACK","value":"16"},{"text":"+use bound key ( Default: E )","key":"IN_USE","value":"32"},{"key":"IN_CANCEL","value":"64"},{"text":"+left bound key ( Look left )","key":"IN_LEFT","value":"128"},{"text":"+right bound key ( Look right )","key":"IN_RIGHT","value":"256"},{"text":"+moveleft bound key ( Default: A )","key":"IN_MOVELEFT","value":"512"},{"text":"+moveright bound key ( Default: D )","key":"IN_MOVERIGHT","value":"1024"},{"text":"+attack2 bound key ( Default: Right Mouse Button )","key":"IN_ATTACK2","value":"2048"},{"key":"IN_RUN","value":"4096"},{"text":"+reload bound key ( Default: R )","key":"IN_RELOAD","value":"8192"},{"text":"+alt1 bound key","key":"IN_ALT1","value":"16384"},{"text":"+alt2 bound key","key":"IN_ALT2","value":"32768"},{"text":"+showscores bound key ( Default: Tab )","key":"IN_SCORE","value":"65536"},{"text":"+speed bound key ( Default: Shift )","key":"IN_SPEED","value":"131072"},{"text":"+walk bound key ( Slow walk )","key":"IN_WALK","value":"262144"},{"text":"+zoom bound key ( Suit Zoom )","key":"IN_ZOOM","value":"524288"},{"text":"For use in weapons. Set in the physgun when scrolling an object away from you.","key":"IN_WEAPON1","value":"1048576"},{"text":"For use in weapons. Set in the physgun when scrolling an object towards you.","key":"IN_WEAPON2","value":"2097152"},{"key":"IN_BULLRUSH","value":"4194304"},{"text":"+grenade1 bound key","key":"IN_GRENADE1","value":"8388608"},{"text":"+grenade2 bound key","key":"IN_GRENADE2","value":"16777216"}]}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Shared","description":"Used by Entity:SetRenderFX and returned by Entity:GetRenderFX.\n\nMost of these require alpha value of entitys color to be less than 255 to have any visible effect.","items":{"item":[{"text":"None. No change.","key":"kRenderFxNone","value":"0"},{"text":"Slowly pulses the entitys transparency, +-15 to the current alpha.","key":"kRenderFxPulseSlow","value":"1"},{"text":"Quickly pulses the entitys transparency, +-15 to the current alpha.","key":"kRenderFxPulseFast","value":"2"},{"text":"Slowly pulses the entitys transparency, +-60 to the current alpha.","key":"kRenderFxPulseSlowWide","value":"3"},{"text":"Quickly pulses the entitys transparency, +-60 to the current alpha.","key":"kRenderFxPulseFastWide","value":"4"},{"text":"Slowly fades away the entity, making it completely invisible.\n\nStarts from whatever alpha the entity currently has set.","key":"kRenderFxFadeSlow","value":"5"},{"text":"Quickly fades away the entity, making it completely invisible.\n\nStarts from whatever alpha the entity currently has set.","key":"kRenderFxFadeFast","value":"6"},{"text":"Slowly solidifies the entity, making it fully opaque.\n\nStarts from whatever alpha the entity currently has set.","key":"kRenderFxSolidSlow","value":"7"},{"text":"Quickly solidifies the entity, making it fully opaque.\n\nStarts from whatever alpha the entity currently has set.","key":"kRenderFxSolidFast","value":"8"},{"text":"Slowly switches the entitys transparency between its alpha and 0.","key":"kRenderFxStrobeSlow","value":"9"},{"text":"Quickly switches the entitys transparency between its alpha and 0.","key":"kRenderFxStrobeFast","value":"10"},{"text":"Very quickly switches the entitys transparency between its alpha and 0.","key":"kRenderFxStrobeFaster","value":"11"},{"text":"Same as Strobe Slow, but the interval is more randomized.","key":"kRenderFxFlickerSlow","value":"12"},{"text":"Same as Strobe Fast, but the interval is more randomized.","key":"kRenderFxFlickerFast","value":"13"},{"key":"kRenderFxNoDissipation","value":"14"},{"text":"Flickers ( randomizes ) the entitys transparency","key":"kRenderFxDistort","value":"15"},{"text":"Same as Distort, but fades the entity away the farther you are from it.","key":"kRenderFxHologram","value":"16"},{"key":"kRenderFxExplode","value":"17"},{"key":"kRenderFxGlowShell","value":"18"},{"key":"kRenderFxClampMinScale","value":"19"},{"key":"kRenderFxEnvRain","value":"20"},{"key":"kRenderFxEnvSnow","value":"21"},{"key":"kRenderFxSpotlight","value":"22"},{"key":"kRenderFxRagdoll","value":"23"},{"text":"Quickly pulses the entitys transparency, from 0 to 255.","key":"kRenderFxPulseFastWider","value":"24"}]}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Client","description":"Enumerations used by mesh.Begin. Clientside only.","items":{"item":[{"key":"MATERIAL_LINES","value":"1"},{"key":"MATERIAL_LINE_LOOP","value":"5"},{"key":"MATERIAL_LINE_STRIP","value":"4"},{"key":"MATERIAL_POINTS","value":"0"},{"key":"MATERIAL_POLYGON","value":"6"},{"key":"MATERIAL_QUADS","value":"7"},{"key":"MATERIAL_TRIANGLES","value":"2"},{"key":"MATERIAL_TRIANGLE_STRIP","value":"3"}]}},"realms":["Client"],"type":"Enum"},
{"enum":{"realm":"Shared","description":"Enumerations used as trace masks in Structures/Trace and Structures/HullTrace. These enumerations are simply combinations of Enums/CONTENTS.","items":{"item":[{"text":"Anything that is not empty space","key":"MASK_ALL","value":"4294967295"},{"text":"Anything that blocks line of sight for AI","key":"MASK_BLOCKLOS","value":"16449"},{"text":"Anything that blocks line of sight for AI or NPCs","key":"MASK_BLOCKLOS_AND_NPCS","value":"33570881"},{"text":"Water that is moving (may not work)","key":"MASK_CURRENT","value":"16515072"},{"text":"Anything that blocks corpse movement","key":"MASK_DEADSOLID","value":"65547"},{"text":"Anything that blocks NPC movement","key":"MASK_NPCSOLID","value":"33701899"},{"text":"Anything that blocks NPC movement, except other NPCs","key":"MASK_NPCSOLID_BRUSHONLY","value":"147467"},{"text":"The world entity","key":"MASK_NPCWORLDSTATIC","value":"131083"},{"text":"Anything that blocks lighting","key":"MASK_OPAQUE","value":"16513"},{"text":"Anything that blocks lighting, including NPCs","key":"MASK_OPAQUE_AND_NPCS","value":"33570945"},{"text":"Anything that blocks player movement","key":"MASK_PLAYERSOLID","value":"33636363"},{"text":"World + Brushes + Player Clips","key":"MASK_PLAYERSOLID_BRUSHONLY","value":"81931"},{"text":"Anything that stops a bullet (including hitboxes)","key":"MASK_SHOT","value":"1174421507"},{"text":"Anything that stops a bullet (excluding hitboxes)","key":"MASK_SHOT_HULL","value":"100679691"},{"text":"Solids except for grates","key":"MASK_SHOT_PORTAL","value":"33570819"},{"text":"Anything that is (normally) solid","key":"MASK_SOLID","value":"33570827"},{"text":"World + Brushes","key":"MASK_SOLID_BRUSHONLY","value":"16395"},{"text":"Things that split area portals","key":"MASK_SPLITAREAPORTAL","value":"48"},{"text":"Anything that blocks line of sight for players","key":"MASK_VISIBLE","value":"24705"},{"text":"Anything that blocks line of sight for players, including NPCs","key":"MASK_VISIBLE_AND_NPCS","value":"33579137"},{"text":"Anything that has water-like physics","key":"MASK_WATER","value":"16432"}]}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Shared","description":"Enumerations used in Structures/TraceResult and by Entity:GetMaterialType.","items":{"item":[{"text":"Antlions","key":"MAT_ANTLION","value":"65"},{"text":"Similar to MAT_FLESH, only used by \"bloodyflesh\" surface property, has different impact sound","key":"MAT_BLOODYFLESH","value":"66"},{"text":"Concrete","key":"MAT_CONCRETE","value":"67"},{"text":"Dirt","key":"MAT_DIRT","value":"68"},{"text":"The egg sacs in the antlion tunnels in HL2: EP2","key":"MAT_EGGSHELL","value":"69"},{"text":"Flesh","key":"MAT_FLESH","value":"70"},{"text":"Grates, chainlink fences","key":"MAT_GRATE","value":"71"},{"text":"Alien flesh - headcrabs and vortigaunts","key":"MAT_ALIENFLESH","value":"72"},{"text":"Unused","key":"MAT_CLIP","value":"73"},{"text":"Snow","key":"MAT_SNOW","value":"74"},{"text":"Plastic","key":"MAT_PLASTIC","value":"76"},{"text":"Metal","key":"MAT_METAL","value":"77"},{"text":"Sand","key":"MAT_SAND","value":"78"},{"text":"Plants, only used by the \"foliage\" surface property","key":"MAT_FOLIAGE","value":"79"},{"text":"Electronics, only used by \"computer\" surface property","key":"MAT_COMPUTER","value":"80"},{"text":"Water, slime","key":"MAT_SLOSH","value":"83"},{"text":"Floor tiles","key":"MAT_TILE","value":"84"},{"text":"Grass","key":"MAT_GRASS","value":"85"},{"text":"Metallic vents","key":"MAT_VENT","value":"86"},{"text":"Wood","key":"MAT_WOOD","value":"87"},{"text":"Skybox or nodraw texture","key":"MAT_DEFAULT","value":"88"},{"text":"Glass","key":"MAT_GLASS","value":"89"},{"text":"\"wierd-looking jello effect for advisor shield.\"","key":"MAT_WARPSHIELD","value":"90"}]}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Client","description":"Enumerations used by render.CullMode. Clientside only.","items":{"item":[{"text":"Counter clock wise cull mode","key":"MATERIAL_CULLMODE_CCW","value":"0"},{"text":"Clock wise cull mode","key":"MATERIAL_CULLMODE_CW","value":"1"}]}},"realms":["Client"],"type":"Enum"},
{"enum":{"realm":"Shared and Menu","description":"Enumerations used by:\n* input.IsMouseDown\n* input.WasMousePressed\n* input.WasMouseDoublePressed\n\nIt's also part of the Enums/BUTTON_CODE.\n# Catch mouse wheel\nYou can catch the mouse wheel's value by:\n```\nlocal testVal = 0\nhook.Add(\"InputMouseApply\", \"testMouseWheel\", function(cmd, x, y, ang)\n    testVal = testVal + cmd:GetMouseWheel() * 2 --any scale number you want to use\n    print(testVal)\nend)\n```","items":{"item":[{"text":"First mouse button","key":"MOUSE_FIRST","value":"107"},{"text":"Left mouse button","key":"MOUSE_LEFT","value":"107"},{"text":"Right mouse button","key":"MOUSE_RIGHT","value":"108"},{"text":"Middle mouse button, aka the wheel press","key":"MOUSE_MIDDLE","value":"109"},{"text":"Mouse 4 button ( Sometimes, mouse wheel tilt left )","key":"MOUSE_4","value":"110"},{"text":"Mouse 5 button ( Sometimes, mouse wheel tilt right )","key":"MOUSE_5","value":"111"},{"text":"Mouse wheel scroll up","key":"MOUSE_WHEEL_UP","value":"112"},{"text":"Mouse wheel scroll down","key":"MOUSE_WHEEL_DOWN","value":"113"},{"text":"Last mouse button","key":"MOUSE_LAST","value":"113"},{"text":"Mouse button count","key":"MOUSE_COUNT","value":"7"}]},"fieldsonly":""},"realms":["Server","Client","Menu"],"type":"Enum"},
{"enum":{"realm":"Client","description":"Enumerations used by render.GetFogMode and render.FogMode. Clientside only.","items":{"item":[{"text":"No fog","key":"MATERIAL_FOG_NONE","value":"0"},{"text":"Linear fog","key":"MATERIAL_FOG_LINEAR","value":"1"},{"text":"For use in conjunction with render.SetFogZ. Does not work if start distance is bigger than end distance. Ignores density setting. Seems to be broken? Used for underwater fog by the engine.","key":"MATERIAL_FOG_LINEAR_BELOW_FOG_Z","value":"2"}]}},"realms":["Client"],"type":"Enum"},
{"enum":{"realm":"Client","description":"Enumerations used by render.SetLocalModelLights. Clientside only.","items":{"item":[{"text":"No light","key":"MATERIAL_LIGHT_DISABLE","value":"0"},{"text":"Point light","key":"MATERIAL_LIGHT_POINT","value":"1"},{"text":"Directional light","key":"MATERIAL_LIGHT_DIRECTIONAL","value":"2"},{"text":"Spot light","key":"MATERIAL_LIGHT_SPOT","value":"3"}]}},"realms":["Client"],"type":"Enum"},
{"enum":{"realm":"Client","description":"Enumerations used by Global.GetRenderTargetEx. Clientside only.","items":{"item":[{"text":"Do not create a depth-stencil buffer.Use the default depth-stencil buffer if used as render target 0.","key":"MATERIAL_RT_DEPTH_SHARED","value":"0","br":""},{"text":"Create a depth-stencil buffer.Use the created depth-stencil buffer if used as render target 0.","key":"MATERIAL_RT_DEPTH_SEPARATE","value":"1","br":""},{"text":"Do not create a depth-stencil buffer.Disable depth and stencil buffer usage if used as render target 0.","key":"MATERIAL_RT_DEPTH_NONE","value":"2","br":""},{"text":"Create a depth-stencil buffer.Use the created depth-stencil buffer if used as render target 0.\n\nCreates a color texture despite the name.\nSeems to behave the same as MATERIAL_RT_DEPTH_SEPARATE.","key":"MATERIAL_RT_DEPTH_ONLY","value":"3","br":["",""]}]}},"realms":["Client"],"type":"Enum"},
{"enum":{"realm":"Shared","description":"Enumerations used by Entity:SetMoveCollide and Entity:GetMoveCollide.","items":{"item":[{"text":"Default behavior","key":"MOVECOLLIDE_DEFAULT","value":"0"},{"text":"Entity bounces, reflects, based on elasticity of surface and object - applies friction (adjust velocity)","key":"MOVECOLLIDE_FLY_BOUNCE","value":"1"},{"text":"ENTITY:Touch will modify the velocity however it likes","key":"MOVECOLLIDE_FLY_CUSTOM","value":"2"},{"text":"Entity slides along surfaces (no bounce) - applies friciton (adjusts velocity)","key":"MOVECOLLIDE_FLY_SLIDE","value":"3"},{"text":"Number of different movecollides","key":"MOVECOLLIDE_COUNT","value":"4"}]}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Server","description":"Enumerations used by CNavArea:GetAttributes and CNavArea:HasAttributes.","items":{"item":[{"text":"The nav area is invalid.","key":"NAV_MESH_INVALID","value":"0"},{"text":"Must crouch to use this node/area","key":"NAV_MESH_CROUCH","value":"1"},{"text":"Must jump to traverse this area (only used during generation)","key":"NAV_MESH_JUMP","value":"2"},{"text":"Do not adjust for obstacles, just move along area","key":"NAV_MESH_PRECISE","value":"4"},{"text":"Inhibit discontinuity jumping","key":"NAV_MESH_NO_JUMP","value":"8"},{"text":"Must stop when entering this area","key":"NAV_MESH_STOP","value":"16"},{"text":"Must run to traverse this area","key":"NAV_MESH_RUN","value":"32"},{"text":"Must walk to traverse this area","key":"NAV_MESH_WALK","value":"64"},{"text":"Avoid this area unless alternatives are too dangerous","key":"NAV_MESH_AVOID","value":"128"},{"text":"Area may become blocked, and should be periodically checked","key":"NAV_MESH_TRANSIENT","value":"256"},{"text":"Area should not be considered for hiding spot generation","key":"NAV_MESH_DONT_HIDE","value":"512"},{"text":"Bots hiding in this area should stand","key":"NAV_MESH_STAND","value":"1024"},{"text":"Hostages shouldn't use this area","key":"NAV_MESH_NO_HOSTAGES","value":"2048"},{"text":"This area represents stairs, do not attempt to climb or jump them - just walk up","key":"NAV_MESH_STAIRS","value":"4096"},{"text":"Don't merge this area with adjacent areas","key":"NAV_MESH_NO_MERGE","value":"8192"},{"text":"This nav area is the climb point on the tip of an obstacle","key":"NAV_MESH_OBSTACLE_TOP","value":"16384"},{"text":"This nav area is adjacent to a drop of at least CliffHeight","key":"NAV_MESH_CLIFF","value":"32768"},{"text":"Area has designer specified cost controlled by func_nav_cost entities","key":"NAV_MESH_FUNC_COST","value":"536870912"},{"text":"Area is in an elevator's path","key":"NAV_MESH_HAS_ELEVATOR","value":"1073741824"},{"key":"NAV_MESH_NAV_BLOCKER","value":"-2147483648"}]}},"realms":["Server"],"type":"Enum"},
{"enum":{"realm":"Shared","description":"Enumerations used by Entity:SetMoveType and Entity:GetMoveType.","items":{"item":[{"text":"Don't move","key":"MOVETYPE_NONE","value":"0"},{"text":"For players, in TF2 commander view, etc","key":"MOVETYPE_ISOMETRIC","value":"1"},{"text":"Player only, moving on the ground","key":"MOVETYPE_WALK","value":"2"},{"text":"Monster/NPC movement","key":"MOVETYPE_STEP","value":"3"},{"text":"Fly, no gravity","key":"MOVETYPE_FLY","value":"4"},{"text":"Fly, with gravity","key":"MOVETYPE_FLYGRAVITY","value":"5"},{"text":"Physics movetype","key":"MOVETYPE_VPHYSICS","value":"6"},{"text":"No clip to world, but pushes and crushes things. Need ent:SetSaveValue(\"m_flMoveDoneTime\", somenumberbiggerthancurtime) or the entity won't move.","key":"MOVETYPE_PUSH","value":"7"},{"text":"Noclip","key":"MOVETYPE_NOCLIP","value":"8"},{"text":"For players, when moving on a ladder","key":"MOVETYPE_LADDER","value":"9"},{"text":"Spectator movetype. DO **NOT** use this to make player spectate","key":"MOVETYPE_OBSERVER","value":"10"},{"text":"Custom movetype, can be applied to the player to prevent the default movement code from running, while still calling the related hooks","key":"MOVETYPE_CUSTOM","value":"11"}]}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Server","added":"2021.03.31","description":"Used by NPC:SetNavType and NPC:GetNavType.","items":{"item":[{"text":"Error condition.","key":"NAV_NONE","value":"-1"},{"text":"walk/run","key":"NAV_GROUND","value":"0"},{"text":"jump/leap","key":"NAV_JUMP","value":"1"},{"text":"can fly, move all around","key":"NAV_FLY","value":"2"},{"text":"climb ladders","key":"NAV_CLIMB","value":"3"}]}},"realms":["Server"],"type":"Enum"},
{"enum":{"realm":"Server","description":{"text":"Enumerations used by CNavArea methods.\nThese Enums correspond to each side of a CNavArea","warning":"These enumerations do not exist in game and are listed here only for reference"},"items":{"item":[{"text":"North from given CNavArea","key":"NORTH","value":"0"},{"text":"East from given CNavArea","key":"EAST","value":"1"},{"text":"South from given CNavArea","key":"SOUTH","value":"2"},{"text":"West from given CNavArea","key":"WEST","value":"3"}]}},"realms":["Server"],"type":"Enum"},
{"enum":{"realm":"Server","description":{"text":"Enumerations used by CNavArea methods.\nThese Enums correspond to each corner of a CNavArea","warning":"These enumerations do not exist in game and are listed here only for reference"},"items":{"item":[{"text":"North West Corner","key":"NORTH_WEST","value":"0"},{"text":"North East Corner","key":"NORTH_EAST","value":"1"},{"text":"South East Corner","key":"SOUTH_EAST","value":"2"},{"text":"South West Corner","key":"SOUTH_WEST","value":"3"},{"text":"Represents all corners, only applicable to certain functions, such as CNavArea:PlaceOnGround.","key":"NUM_CORNERS","value":"4"}]}},"realms":["Server"],"type":"Enum"},
{"enum":{"realm":"Server","description":{"text":"Enumerations used by CNavArea:GetParentHow.","warning":"These enumerations do not exist in game and are listed here only for reference"},"items":{"item":[{"key":"GO_NORTH","value":"0"},{"key":"GO_EAST","value":"1"},{"key":"GO_SOUTH","value":"2"},{"key":"GO_WEST","value":"3"},{"key":"GO_LADDER_UP","value":"4"},{"key":"GO_LADDER_DOWN","value":"5"},{"key":"GO_JUMP","value":"6"},{"key":"GO_ELEVATOR_UP","value":"7"},{"key":"GO_ELEVATOR_DOWN","value":"8"}]}},"realms":["Server"],"type":"Enum"},
{"enum":{"realm":"Client and Menu","description":"Enumerations used by notification.AddLegacy. Clientside & Menu only.","items":{"item":[{"text":"Generic notification","key":"NOTIFY_GENERIC","value":"0","image":{"src":"NOTIFY_GENERIC_PREVIEW.png","alt":"middle"}},{"text":"Error notification","key":"NOTIFY_ERROR","value":"1","image":{"src":"NOTIFY_ERROR_PREVIEW.png","alt":"middle"}},{"text":"Undo notification","key":"NOTIFY_UNDO","value":"2","image":{"src":"NOTIFY_UNDO_PREVIEW.png","alt":"middle"}},{"text":"Hint notification","key":"NOTIFY_HINT","value":"3","image":{"src":"NOTIFY_HINT_PREVIEW.png","alt":"middle"}},{"text":"Cleanup notification","key":"NOTIFY_CLEANUP","value":"4","image":{"src":"NOTIFY_CLEANUP_PREVIEW.png","alt":"middle"}}]}},"realms":["Client","Menu"],"type":"Enum"},
{"enum":{"realm":"Server","description":"Enumerations used by NPC:SetNPCState. Serverside only.","items":{"item":[{"text":"Invalid state","key":"NPC_STATE_INVALID","value":"-1"},{"text":"NPC default state","key":"NPC_STATE_NONE","value":"0"},{"text":"NPC is idle","key":"NPC_STATE_IDLE","value":"1"},{"text":"NPC is alert and searching for enemies","key":"NPC_STATE_ALERT","value":"2"},{"text":"NPC is in combat","key":"NPC_STATE_COMBAT","value":"3"},{"text":"NPC is executing scripted sequence","key":"NPC_STATE_SCRIPT","value":"4"},{"text":"NPC is playing dead (used for expressions)","key":"NPC_STATE_PLAYDEAD","value":"5"},{"text":"NPC is prone to death","key":"NPC_STATE_PRONE","value":"6"},{"text":"NPC is dead","key":"NPC_STATE_DEAD","value":"7"}]}},"realms":["Server"],"type":"Enum"},
{"enum":{"realm":"Server","description":"Various count enums.","items":{"item":[{"text":"Amount of Enums/CLASS. Used by Global.Add_NPC_Class.","key":"NUM_AI_CLASSES","value":"36"},{"text":"Amount of Enums/HULL.","key":"NUM_HULLS","value":"10"}]}},"realms":["Server"],"type":"Enum"},
{"enum":{"realm":"Shared","description":"Used by GM:DoAnimationEvent and Player:DoCustomAnimEvent.","items":{"item":[{"text":"Primary attack","key":"PLAYERANIMEVENT_ATTACK_PRIMARY","value":"0"},{"text":"Secondary attack","key":"PLAYERANIMEVENT_ATTACK_SECONDARY","value":"1"},{"text":"Grenade throw","key":"PLAYERANIMEVENT_ATTACK_GRENADE","value":"2"},{"text":"Reload","key":"PLAYERANIMEVENT_RELOAD","value":"3"},{"text":"Looping reload (single-reload shotguns)","key":"PLAYERANIMEVENT_RELOAD_LOOP","value":"4"},{"text":"Looping reload end","key":"PLAYERANIMEVENT_RELOAD_END","value":"5"},{"text":"Jump","key":"PLAYERANIMEVENT_JUMP","value":"6"},{"text":"Swim","key":"PLAYERANIMEVENT_SWIM","value":"7"},{"text":"Die","key":"PLAYERANIMEVENT_DIE","value":"8"},{"key":"PLAYERANIMEVENT_FLINCH_CHEST","value":"9"},{"key":"PLAYERANIMEVENT_FLINCH_HEAD","value":"10"},{"key":"PLAYERANIMEVENT_FLINCH_LEFTARM","value":"11"},{"key":"PLAYERANIMEVENT_FLINCH_RIGHTARM","value":"12"},{"key":"PLAYERANIMEVENT_FLINCH_LEFTLEG","value":"13"},{"key":"PLAYERANIMEVENT_FLINCH_RIGHTLEG","value":"14"},{"key":"PLAYERANIMEVENT_DOUBLEJUMP","value":"15"},{"key":"PLAYERANIMEVENT_CANCEL","value":"16"},{"text":"Spawn","key":"PLAYERANIMEVENT_SPAWN","value":"17"},{"key":"PLAYERANIMEVENT_SNAP_YAW","value":"18"},{"text":"Custom activity","key":"PLAYERANIMEVENT_CUSTOM","value":"19"},{"text":"Play activity in gesture slot","key":"PLAYERANIMEVENT_CUSTOM_GESTURE","value":"20"},{"text":"Play sequence","key":"PLAYERANIMEVENT_CUSTOM_SEQUENCE","value":"21"},{"text":"Play sequence in gesture slot","key":"PLAYERANIMEVENT_CUSTOM_GESTURE_SEQUENCE","value":"22"},{"text":"Cancel reload animation","key":"PLAYERANIMEVENT_CANCEL_RELOAD","value":"23"}]}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Shared","description":"Enumerations used by Entity:SetAnimation","items":{"item":[{"key":"PLAYER_IDLE","value":"0"},{"key":"PLAYER_WALK","value":"1"},{"key":"PLAYER_JUMP","value":"2"},{"key":"PLAYER_SUPERJUMP","value":"3"},{"key":"PLAYER_DIE","value":"4"},{"text":"Player attack according to current hold type, used in SWEPs","key":"PLAYER_ATTACK1","value":"5"},{"key":"PLAYER_IN_VEHICLE","value":"6"},{"text":"Player reload according to current hold type, used in SWEPs","key":"PLAYER_RELOAD","value":"7"},{"key":"PLAYER_START_AIMING","value":"8"},{"key":"PLAYER_LEAVE_AIMING","value":"9"}]}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Shared","description":"Enumerations used by Player:SetObserverMode, Player:GetObserverMode and Player:Spectate.","items":{"item":[{"text":"Not spectating","key":"OBS_MODE_NONE","value":"0"},{"key":"OBS_MODE_DEATHCAM","value":"1"},{"text":"TF2-like freezecam","key":"OBS_MODE_FREEZECAM","value":"2"},{"text":"Same as OBS_MODE_CHASE, but you can't rotate the view","key":"OBS_MODE_FIXED","value":"3"},{"text":"First person cam","key":"OBS_MODE_IN_EYE","value":"4"},{"text":"Chase cam, 3rd person cam, free rotation around the spectated target","key":"OBS_MODE_CHASE","value":"5"},{"text":"Free roam/noclip-alike. Does not work from GM:PlayerDeath","key":"OBS_MODE_ROAMING","value":"6"}]}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Shared","description":"Enumerations used by Global.ParticleEffectAttach.","items":{"item":[{"text":"Particle spawns in entity's origin and does not follow it","key":"PATTACH_ABSORIGIN","value":"0"},{"text":"Particle attaches to entity's origin and follows the entity","key":"PATTACH_ABSORIGIN_FOLLOW","value":"1"},{"text":"Create at a custom origin, but don't follow","key":"PATTACH_CUSTOMORIGIN","value":"2"},{"text":"Particle attaches to passed to Global.ParticleEffectAttach attachment id, but does not follow the entity","key":"PATTACH_POINT","value":"3"},{"text":"Particle attaches to passed to Global.ParticleEffectAttach attachment id and follows the entity","key":"PATTACH_POINT_FOLLOW","value":"4"},{"text":"Particle spawns in the beginning of coordinates ( Vector( 0, 0, 0 ) ), used for control points that don't attach to an entity","key":"PATTACH_WORLDORIGIN","value":"5"}]}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Client","description":"Enumerations used by Global.GetRenderTargetEx. Clientside only.","items":{"item":[{"text":"Only allowed for render targets that don't want a depth buffer (because if they have a depth buffer, the render target must be less than or equal to the size of the framebuffer).","key":"RT_SIZE_NO_CHANGE","value":"0"},{"text":"Don't play with the specified width and height other than making sure it fits in the framebuffer.","key":"RT_SIZE_DEFAULT","value":"1"},{"text":"Apply picmip to the render target's width and height.","key":"RT_SIZE_PICMIP","value":"2"},{"text":"frame_buffer_width / 4","key":"RT_SIZE_HDR","value":"3"},{"text":"Same size as frame buffer, or next lower power of 2 if we can't do that.","key":"RT_SIZE_FULL_FRAME_BUFFER","value":"4"},{"text":"Target of specified size, don't mess with dimensions","key":"RT_SIZE_OFFSCREEN","value":"5"},{"text":"Same size as the frame buffer, rounded up if necessary for systems that can't do non-power of two textures.","key":"RT_SIZE_FULL_FRAME_BUFFER_ROUNDED_UP","value":"6"},{"text":"Rounded down to power of 2, essentially","key":"RT_SIZE_REPLAY_SCREENSHOT","value":"7"},{"text":"Use the size passed in. Don't clamp it to the frame buffer size. Really.","key":"RT_SIZE_LITERAL","value":"8"},{"key":"RT_SIZE_LITERAL_PICMIP","value":"9"}]}},"realms":["Client"],"type":"Enum"},
{"enum":{"realm":"Shared","description":"Enumerations used by Entity:SetRenderMode and Entity:GetRenderMode.","items":{"item":[{"text":"Default render mode. Transparently has no effect.","key":"RENDERMODE_NORMAL","value":"0"},{"text":"Supports transparency.\n\nUse this to make alpha of Global.Color work for your entity. For players, it must be set for their active weapon aswell.","key":"RENDERMODE_TRANSCOLOR","value":"1"},{"key":"RENDERMODE_TRANSTEXTURE","value":"2"},{"text":"Intended for glowing sprites. Allows transparency, and forces the sprite or model to be rendered unlit.\n\nThe size of a sprite rendered with Glow is consistent with the screen size (unlike the alternative World Space Glow), making it appear larger at a distance, in comparison to the world.\n\nThe GlowProxySize keyvalue affects this Render Mode on sprites.","key":"RENDERMODE_GLOW","value":"3"},{"text":"Enables Alphatesting. Legacy port from Goldsource. Obsolete in Source due to Alphatesting being handled in materials. Does not allow transparency.","key":"RENDERMODE_TRANSALPHA","value":"4"},{"text":"Add the material's color values to the existing image, instead of performing a multiplication. Sprites will appear through world geometry and the sprite/model will always brighten the world. Allows transparency.","key":"RENDERMODE_TRANSADD","value":"5"},{"text":"Causes the material to be not be drawn at all, similarly to Don't Render.","key":"RENDERMODE_ENVIROMENTAL","value":"6"},{"text":"Functions like Additive, but also blends between animation frames. Requires the material to have a functioning animating texture. Allows transparency.","key":"RENDERMODE_TRANSADDFRAMEBLEND","value":"7"},{"text":"Functions similarly to Additive, except that the alpha channel controls the opacity of the sprite. An example of use is for dark sprites, with an example material being sprites/strider_blackball.vmt.","key":"RENDERMODE_TRANSALPHADD","value":"8"},{"text":"Functions similarly to Glow, with the exception that the size of the sprite is relative to the world rather than the screen.\n\nThe GlowProxySize keyvalue affects this Render Mode on sprites.","key":"RENDERMODE_WORLDGLOW","value":"9"},{"text":"The entity is still being drawn and networked albeit invisible, therefore not making this Render Mode ideal for performance reasons.\n\nTo completely avoid drawing and networking an entity, see EF_NODRAW.","key":"RENDERMODE_NONE","value":"10"}]}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Shared","description":"Enumerations used by Global.ClientsideModel, ENT.RenderGroup in Structures/ENT and Entity:GetRenderGroup.","items":{"item":[{"text":"Huge static prop, possibly leftover from goldsrc","key":"RENDERGROUP_STATIC_HUGE","value":"0"},{"text":"Huge opaque entity, possibly leftover from goldsrc","key":"RENDERGROUP_OPAQUE_HUGE","value":"1"},{"text":"Static props?","key":"RENDERGROUP_STATIC","value":"6"},{"text":"For non transparent/solid entities.\n\n\nFor scripted entities, this will have ENTITY:Draw called","key":"RENDERGROUP_OPAQUE","value":"7"},{"text":"For translucent/transparent entities\n\n\nFor scripted entities, this will have ENTITY:DrawTranslucent called","key":"RENDERGROUP_TRANSLUCENT","value":"8"},{"text":"For both translucent/transparent and opaque/solid anim entities\n\n\nFor scripted entities, this will have both, ENTITY:Draw and ENTITY:DrawTranslucent called","key":"RENDERGROUP_BOTH","value":"9"},{"text":"Solid weapon view models","key":"RENDERGROUP_VIEWMODEL","value":"10"},{"text":"Transparent overlays etc","key":"RENDERGROUP_VIEWMODEL_TRANSLUCENT","value":"11"},{"text":"For brush entities","key":"RENDERGROUP_OPAQUE_BRUSH","value":"12"},{"text":"Unclassfied. Won't get drawn.","key":"RENDERGROUP_OTHER","value":"13"}]}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Server","description":"Enumerations for NPC schedules, used by ENTITY:StartEngineSchedule and NPC:SetSchedule. Serverside only.","items":{"item":[{"text":"The schedule enum limit","key":"LAST_SHARED_SCHEDULE","value":"88"},{"text":"Begins AI script based on NPC's `m_hCine` save value.","key":"SCHED_AISCRIPT","value":"56"},{"text":"Idle stance and face ideal yaw angles.","key":"SCHED_ALERT_FACE","value":"5"},{"key":"SCHED_ALERT_FACE_BESTSOUND","value":"6"},{"key":"SCHED_ALERT_REACT_TO_COMBAT_SOUND","value":"7"},{"text":"Rotate 180 degrees and back to check for enemies.","key":"SCHED_ALERT_SCAN","value":"8"},{"text":"Remain idle until an enemy is heard or found.","key":"SCHED_ALERT_STAND","value":"9"},{"text":"Walk until an enemy is heard or found.","key":"SCHED_ALERT_WALK","value":"10"},{"text":"Remain idle until provoked or an enemy is found.","key":"SCHED_AMBUSH","value":"52"},{"text":"Performs ACT_ARM.","key":"SCHED_ARM_WEAPON","value":"48"},{"text":"Back away from enemy. If not possible to back away then go behind enemy.","key":"SCHED_BACK_AWAY_FROM_ENEMY","value":"24"},{"key":"SCHED_BACK_AWAY_FROM_SAVE_POSITION","value":"26"},{"text":"Heavy damage was taken for the first time in a while.","key":"SCHED_BIG_FLINCH","value":"23"},{"text":"Begin chasing an enemy.","key":"SCHED_CHASE_ENEMY","value":"17"},{"text":"Failed to chase enemy.","key":"SCHED_CHASE_ENEMY_FAILED","value":"18"},{"text":"Face current enemy.","key":"SCHED_COMBAT_FACE","value":"12"},{"text":"Will walk around patrolling an area until an enemy is found.","key":"SCHED_COMBAT_PATROL","value":"75"},{"key":"SCHED_COMBAT_STAND","value":"15"},{"key":"SCHED_COMBAT_SWEEP","value":"13"},{"key":"SCHED_COMBAT_WALK","value":"16"},{"text":"When not moving, will perform ACT_COWER.","key":"SCHED_COWER","value":"40"},{"text":"Regular NPC death.","key":"SCHED_DIE","value":"53"},{"text":"Plays NPC death sound (doesn't kill NPC).","key":"SCHED_DIE_RAGDOLL","value":"54"},{"text":"Holsters active weapon. (Only works with NPC's that can holster weapons)","key":"SCHED_DISARM_WEAPON","value":"49"},{"key":"SCHED_DROPSHIP_DUSTOFF","value":"79"},{"text":"Preform Ducking animation. (Only works with npc_alyx)","key":"SCHED_DUCK_DODGE","value":"84"},{"text":"Search for a place to shoot current enemy.","key":"SCHED_ESTABLISH_LINE_OF_FIRE","value":"35"},{"text":"Fallback from an established line of fire.","key":"SCHED_ESTABLISH_LINE_OF_FIRE_FALLBACK","value":"36"},{"text":"Failed doing current schedule.","key":"SCHED_FAIL","value":"81"},{"text":"Failed to establish a line of fire.","key":"SCHED_FAIL_ESTABLISH_LINE_OF_FIRE","value":"38"},{"key":"SCHED_FAIL_NOSTOP","value":"82"},{"text":"Failed to take cover.","key":"SCHED_FAIL_TAKE_COVER","value":"31"},{"text":"Fall to ground when in the air.","key":"SCHED_FALL_TO_GROUND","value":"78"},{"text":"Will express fear face. (Only works on NPCs with expressions)","key":"SCHED_FEAR_FACE","value":"14"},{"key":"SCHED_FLEE_FROM_BEST_SOUND","value":"29"},{"text":"Plays ACT_FLINCH_PHYSICS.","key":"SCHED_FLINCH_PHYSICS","value":"80"},{"text":"Force walk to position (debug).","key":"SCHED_FORCED_GO","value":"71"},{"text":"Force run to position (debug).","key":"SCHED_FORCED_GO_RUN","value":"72"},{"text":"Pick up item if within a radius of 5 units.","key":"SCHED_GET_HEALTHKIT","value":"66"},{"text":"Take cover and reload weapon.","key":"SCHED_HIDE_AND_RELOAD","value":"50"},{"text":"Idle stance","key":"SCHED_IDLE_STAND","value":"1"},{"text":"Walk to position.","key":"SCHED_IDLE_WALK","value":"2"},{"text":"Walk to random position within a radius of 200 units.","key":"SCHED_IDLE_WANDER","value":"3"},{"key":"SCHED_INTERACTION_MOVE_TO_PARTNER","value":"85"},{"key":"SCHED_INTERACTION_WAIT_FOR_PARTNER","value":"86"},{"key":"SCHED_INVESTIGATE_SOUND","value":"11"},{"key":"SCHED_MELEE_ATTACK1","value":"41"},{"key":"SCHED_MELEE_ATTACK2","value":"42"},{"text":"Move away from player.","key":"SCHED_MOVE_AWAY","value":"68"},{"text":"Stop moving and continue enemy scan.","key":"SCHED_MOVE_AWAY_END","value":"70"},{"text":"Failed to move away; stop moving.","key":"SCHED_MOVE_AWAY_FAIL","value":"69"},{"text":"Move away from enemy while facing it and checking for new enemies.","key":"SCHED_MOVE_AWAY_FROM_ENEMY","value":"25"},{"text":"Move to the range the weapon is preferably used at.","key":"SCHED_MOVE_TO_WEAPON_RANGE","value":"34"},{"text":"Pick up a new weapon if within a radius of 5 units.","key":"SCHED_NEW_WEAPON","value":"63"},{"text":"Fail safe: Create the weapon that the NPC went to pick up if it was removed during pick up schedule.","key":"SCHED_NEW_WEAPON_CHEAT","value":"64"},{"text":"No schedule is being performed.","key":"SCHED_NONE","value":"0"},{"text":"Prevents movement until COND_NPC_UNFREEZE(68) is set.","key":"SCHED_NPC_FREEZE","value":"73"},{"text":"Run to random position and stop if enemy is heard or found.","key":"SCHED_PATROL_RUN","value":"76"},{"text":"Walk to random position and stop if enemy is heard or found.","key":"SCHED_PATROL_WALK","value":"74"},{"key":"SCHED_PRE_FAIL_ESTABLISH_LINE_OF_FIRE","value":"37"},{"key":"SCHED_RANGE_ATTACK1","value":"43"},{"key":"SCHED_RANGE_ATTACK2","value":"44"},{"text":"Stop moving and reload until danger is heard.","key":"SCHED_RELOAD","value":"51"},{"text":"Retreat from the established enemy.","key":"SCHED_RUN_FROM_ENEMY","value":"32"},{"key":"SCHED_RUN_FROM_ENEMY_FALLBACK","value":"33"},{"key":"SCHED_RUN_FROM_ENEMY_MOB","value":"83"},{"text":"Run to random position within a radius of 500 units.","key":"SCHED_RUN_RANDOM","value":"77"},{"key":"SCHED_SCENE_GENERIC","value":"62"},{"key":"SCHED_SCRIPTED_CUSTOM_MOVE","value":"59"},{"key":"SCHED_SCRIPTED_FACE","value":"61"},{"key":"SCHED_SCRIPTED_RUN","value":"58"},{"key":"SCHED_SCRIPTED_WAIT","value":"60"},{"key":"SCHED_SCRIPTED_WALK","value":"57"},{"text":"Shoot cover that the enemy is behind.","key":"SCHED_SHOOT_ENEMY_COVER","value":"39"},{"text":"Sets the NPC to a sleep-like state.","key":"SCHED_SLEEP","value":"87"},{"key":"SCHED_SMALL_FLINCH","value":"22"},{"key":"SCHED_SPECIAL_ATTACK1","value":"45"},{"key":"SCHED_SPECIAL_ATTACK2","value":"46"},{"key":"SCHED_STANDOFF","value":"47"},{"key":"SCHED_SWITCH_TO_PENDING_WEAPON","value":"65"},{"key":"SCHED_TAKE_COVER_FROM_BEST_SOUND","value":"28"},{"text":"Take cover from current enemy.","key":"SCHED_TAKE_COVER_FROM_ENEMY","value":"27"},{"key":"SCHED_TAKE_COVER_FROM_ORIGIN","value":"30"},{"text":"Chase set NPC target.","key":"SCHED_TARGET_CHASE","value":"21"},{"text":"Face NPC target.","key":"SCHED_TARGET_FACE","value":"20"},{"text":"Human victory dance.","key":"SCHED_VICTORY_DANCE","value":"19"},{"key":"SCHED_WAIT_FOR_SCRIPT","value":"55"},{"key":"SCHED_WAIT_FOR_SPEAK_FINISH","value":"67"},{"text":"Spot an enemy and go from an idle state to combat state.","key":"SCHED_WAKE_ANGRY","value":"4"}]}},"realms":["Server"],"type":"Enum"},
{"enum":{"realm":"Shared","description":"Enumerations used by Player:ScreenFade.","items":{"item":[{"text":"Fade out after the hold time has passed","key":"SCREENFADE.IN","value":"1"},{"text":"Fade in, hold time passes, disappear","key":"SCREENFADE.OUT","value":"2"},{"text":"With white color, turns the screen black","key":"SCREENFADE.MODULATE","value":"4"},{"text":"No effects, never disappear","key":"SCREENFADE.STAYOUT","value":"8"},{"text":"Appear, Disappear, no effects","key":"SCREENFADE.PURGE","value":"16"}]}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Server","description":{"text":"Enumerations describing certain spawnflags. Everything except for SF_PHYS* and SF_WEAPON* is serverside only.\n\nSpawnflags are set using Entity:SetKeyValue with **\"spawnflags\"** as the key.\n\n* SF_CITIZEN_* spawnflags represent spawnflags only usable on [npc_citizen](https://developer.valvesoftware.com/wiki/Npc_citizen).\n* SF_NPC_* - Usable on all NPCs\n* SF_PHYSBOX_* - Usable on [func_physbox](https://developer.valvesoftware.com/wiki/Func_physbox)\n* SF_PHYSPROP_* - Usable on [prop_physics](https://developer.valvesoftware.com/wiki/Prop_physics) entities\n* SF_WEAPON_* - Usable on","page":",WeaponsWeapon","note":"This is not a full list of available spawnflags, there are `a lot` more, each unique to each entity, you can find out more on the [Valve Developer Community](https://developer.valvesoftware.com/wiki/Main_Page) website for the entities in question."},"items":{"item":[{"text":"Citizen that resupplies ammo","key":"SF_CITIZEN_AMMORESUPPLIER","value":"524288"},{"text":"\"Follow the player as soon as I spawn\"","key":"SF_CITIZEN_FOLLOW","value":"65536"},{"text":"\"Work outside the speech semaphore system\"","key":"SF_CITIZEN_IGNORE_SEMAPHORE","value":"2097152"},{"text":"Makes the citizen a medic","key":"SF_CITIZEN_MEDIC","value":"131072"},{"text":"Citizen cannot join players squad, and will not able to be commanded by the Half-Life 2 command system for Citizens","key":"SF_CITIZEN_NOT_COMMANDABLE","value":"1048576"},{"text":"Gives the citizen a random head","key":"SF_CITIZEN_RANDOM_HEAD","value":"262144"},{"text":"Gives the citizen a random female head","key":"SF_CITIZEN_RANDOM_HEAD_FEMALE","value":"8388608"},{"text":"Gives the citizen a random male head","key":"SF_CITIZEN_RANDOM_HEAD_MALE","value":"4194304"},{"text":"\"Use render bounds instead of human hull for guys sitting in chairs, etc\". Must be set before Spawn() is called to take effect","key":"SF_CITIZEN_USE_RENDER_BOUNDS","value":"16777216"},{"text":"Makes the floor turret friendly","key":"SF_FLOOR_TURRET_CITIZEN","value":"512"},{"text":"Do Alternate collision for this NPC (player avoidance)","key":"SF_NPC_ALTCOLLISION","value":"4096"},{"text":"[Think outside PVS](https://developer.valvesoftware.com/wiki/NPC_Sensing)","key":"SF_NPC_ALWAYSTHINK","value":"1024"},{"text":"NPC Drops health kit when it dies","key":"SF_NPC_DROP_HEALTHKIT","value":"8"},{"text":"Fade Corpse","key":"SF_NPC_FADE_CORPSE","value":"512"},{"text":"If not set, means *teleport* to ground","key":"SF_NPC_FALL_TO_GROUND","value":"4"},{"text":"No IDLE sounds until angry","key":"SF_NPC_GAG","value":"2"},{"text":"Long Visibility/Shoot","key":"SF_NPC_LONG_RANGE","value":"256"},{"text":"Ignore player push - Don't give way to player","key":"SF_NPC_NO_PLAYER_PUSHAWAY","value":"16384"},{"text":"NPC Doesn't drop weapon on death","key":"SF_NPC_NO_WEAPON_DROP","value":"8192"},{"text":"Don't acquire enemies or avoid obstacles","key":"SF_NPC_START_EFFICIENT","value":"16"},{"text":"This entity is a template for the [npc_template_maker](https://developer.valvesoftware.com/wiki/Npc_template_maker). It will not spawn automatically and cannot be used with [point_template](https://developer.valvesoftware.com/wiki/Point_template).","key":"SF_NPC_TEMPLATE","value":"2048"},{"text":"Wait for script","key":"SF_NPC_WAIT_FOR_SCRIPT","value":"128"},{"text":"Wait till seen","key":"SF_NPC_WAIT_TILL_SEEN","value":"1"},{"text":"If set, calls PhysObj:EnableMotion( false ) on the func_physbox when the physics are created","key":"SF_PHYSBOX_MOTIONDISABLED","value":"32768"},{"text":"Gravity gun is ALWAYS allowed to pick this up.","key":"SF_PHYSBOX_ALWAYS_PICK_UP","value":"1048576"},{"text":"Gravity gun is NOT allowed to pick this up.","key":"SF_PHYSBOX_NEVER_PICK_UP","value":"2097152"},{"text":"Gravity gun is NOT allowed to punt this entity.","key":"SF_PHYSBOX_NEVER_PUNT","value":"4194304"},{"text":"If set, calls PhysObj:EnableMotion( false ) on the func_physbox when the physics are created. See [Physics optimization](https://developer.valvesoftware.com/wiki/Physics_optimization).","key":"SF_PHYSPROP_MOTIONDISABLED","value":"8"},{"text":"Prevent that physbox from being picked up.","key":"SF_PHYSPROP_PREVENT_PICKUP","value":"512"},{"text":"This flag is set if the entity is gib.","key":"SF_PHYSPROP_IS_GIB","value":"4194304"},{"text":"Makes the rollermine friendly.","key":"SF_ROLLERMINE_FRIENDLY","value":"65536"},{"text":"If set before Entity:Spawn, the weapon will be constrained and will not simply fall to the ground.","key":"SF_WEAPON_START_CONSTRAINED","value":"1"},{"text":"Player is NOT allowed to pick this up.","key":"SF_WEAPON_NO_PLAYER_PICKUP","value":"2"},{"text":"Physgun is NOT allowed to pick this up.","key":"SF_WEAPON_NO_PHYSCANNON_PUNT","value":"4"}]}},"realms":["Server"],"type":"Enum"},
{"enum":{"realm":"Shared","description":"Enumerations used by Kinect SDK bindings.","items":{"item":[{"key":"SENSORBONE.SHOULDER_RIGHT","value":"8"},{"key":"SENSORBONE.SHOULDER_LEFT","value":"4"},{"key":"SENSORBONE.HIP","value":"0"},{"key":"SENSORBONE.ELBOW_RIGHT","value":"9"},{"key":"SENSORBONE.KNEE_RIGHT","value":"17"},{"key":"SENSORBONE.WRIST_RIGHT","value":"10"},{"key":"SENSORBONE.ANKLE_LEFT","value":"14"},{"key":"SENSORBONE.FOOT_LEFT","value":"15"},{"key":"SENSORBONE.WRIST_LEFT","value":"6"},{"key":"SENSORBONE.FOOT_RIGHT","value":"19"},{"key":"SENSORBONE.HAND_RIGHT","value":"11"},{"key":"SENSORBONE.SHOULDER","value":"2"},{"key":"SENSORBONE.HIP_LEFT","value":"12"},{"key":"SENSORBONE.HIP_RIGHT","value":"16"},{"key":"SENSORBONE.HAND_LEFT","value":"7"},{"key":"SENSORBONE.ANKLE_RIGHT","value":"18"},{"key":"SENSORBONE.SPINE","value":"1"},{"key":"SENSORBONE.ELBOW_LEFT","value":"5"},{"key":"SENSORBONE.KNEE_LEFT","value":"13"},{"key":"SENSORBONE.HEAD","value":"3"}]}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Shared","description":"Used by GM:ClientSignOnStateChanged.","items":{"item":[{"key":"SIGNONSTATE_NONE","value":"0"},{"key":"SIGNONSTATE_CHALLENGE","value":"1"},{"key":"SIGNONSTATE_CONNECTED","value":"2"},{"key":"SIGNONSTATE_NEW","value":"3"},{"key":"SIGNONSTATE_PRESPAWN","value":"4"},{"key":"SIGNONSTATE_SPAWN","value":"5"},{"key":"SIGNONSTATE_FULL","value":"6"},{"key":"SIGNONSTATE_CHANGELEVEL","value":"7"}]}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Shared","description":{"text":"The sound's attenuation; how fast it drops away, enumerations used by Global.EmitSound and Entity:EmitSound.\n\n\n\nThe engine starts running into trouble below 60dB.","warning":"These enumerations do not exist in game and are listed here only for reference"},"items":{"item":[{"text":"Sound plays everywhere","key":"SNDLVL_NONE","value":"0"},{"text":"Rustling leaves","key":"SNDLVL_20dB","value":"20"},{"text":"Whispering","key":"SNDLVL_25dB","value":"25"},{"text":"Library","key":"SNDLVL_30dB","value":"30"},{"key":"SNDLVL_35dB","value":"35"},{"key":"SNDLVL_40dB","value":"40"},{"text":"Refrigerator","key":"SNDLVL_45dB","value":"45"},{"text":"Average home","key":"SNDLVL_50dB","value":"50"},{"key":"SNDLVL_55dB","value":"55"},{"text":"Normal conversation, clothes dryer","key":"SNDLVL_60dB or SNDLVL_IDLE","value":"60"},{"text":"Washing machine, dishwasher","key":"SNDLVL_65dB","value":"65"},{"key":"SNDLVL_STATIC","value":"66"},{"text":"Car, vacuum cleaner, mixer, electric sewing machine","key":"SNDLVL_70dB","value":"70"},{"text":"Busy traffic","key":"SNDLVL_75dB or SNDLVL_NORM","value":"75"},{"text":"Mini-bike, alarm clock, noisy restaurant, office tabulator, outboard motor, passing snowmobile","key":"SNDLVL_80dB or SNDLVL_TALKING","value":"80"},{"text":"Average factory, electric shaver","key":"SNDLVL_85dB","value":"85"},{"text":"Screaming child, passing motorcycle, convertible ride on freeway","key":"SNDLVL_90dB","value":"90"},{"key":"SNDLVL_95dB","value":"95"},{"text":"Subway train, diesel truck, woodworking shop, pneumatic drill, boiler shop, jackhammer","key":"SNDLVL_100dB","value":"100"},{"text":"Helicopter, power mower","key":"SNDLVL_105dB","value":"105"},{"text":"Snowmobile (drivers seat), inboard motorboat, sandblasting","key":"SNDLVL_110dB","value":"110"},{"text":"Car horn, propeller aircraft","key":"SNDLVL_120dB","value":"120"},{"text":"Air raid siren","key":"SNDLVL_130dB","value":"130"},{"text":"Threshold of pain, gunshot, jet engine","key":"SNDLVL_140dB or SNDLVL_GUNFIRE","value":"140"},{"key":"SNDLVL_150dB","value":"150"},{"text":"Rocket launching","key":"SNDLVL_180dB","value":"180"}]}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Shared","description":"Sound flags used by Global.EmitSound and Entity:EmitSound.","items":{"item":[{"text":"To keep the compiler happy","key":"SND_NOFLAGS","value":"0"},{"text":"Change sound vol","key":"SND_CHANGE_VOL","value":"1"},{"text":"Change sound pitch","key":"SND_CHANGE_PITCH","value":"2"},{"text":"Stop the sound","key":"SND_STOP","value":"4"},{"text":"We're spawning, used in some cases for ambients. Not sent over net, only a param between dll and server.","key":"SND_SPAWNING","value":"8"},{"text":"Sound has an initial delay","key":"SND_DELAY","value":"16"},{"text":"Stop all looping sounds on the entity.","key":"SND_STOP_LOOPING","value":"32"},{"text":"This sound should be paused if the game is paused","key":"SND_SHOULDPAUSE","value":"128"},{"key":"SND_IGNORE_PHONEMES","value":"256"},{"text":"Used to change all sounds emitted by an entity, regardless of scriptname","key":"SND_IGNORE_NAME","value":"512"},{"key":"SND_DO_NOT_OVERWRITE_EXISTING_ON_CHANNEL","value":"1024"}]}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Shared","description":"Enumerations used by ENTITY:PhysicsSimulate.","items":{"item":[{"text":"Don't simulate physics","key":"SIM_NOTHING","value":"0"},{"text":"Vectors in local coordinate system","key":"SIM_LOCAL_ACCELERATION","value":"1"},{"text":"Vectors in local coordinate system","key":"SIM_LOCAL_FORCE","value":"2"},{"text":"Vectors in world coordinate system","key":"SIM_GLOBAL_ACCELERATION","value":"3"},{"text":"Vectors in world coordinate system","key":"SIM_GLOBAL_FORCE","value":"4"}]}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Shared","description":"For use with Entity:PhysicsInit, Entity:SetSolid and Entity:GetSolid.","items":{"item":[{"text":"Does not collide with anything.","key":"SOLID_NONE","value":"0","note":"No physics object will be created when using this with Entity:PhysicsInit."},{"text":"The entity has a brush model defined by the map. Does not collide with other SOLID_BSP entities.","key":"SOLID_BSP","value":"1"},{"text":"Uses the entity's axis-aligned bounding box for collisions.","key":"SOLID_BBOX","value":"2"},{"text":"Uses the entity's object-aligned bounding box for collisions.","key":"SOLID_OBB","value":"3"},{"text":"Same as SOLID_OBB but restricts orientation to the Z-axis.","key":"SOLID_OBB_YAW","value":"4","note":"Seems to be broken."},{"text":"Always call the entity's `ICollideable::TestCollision` method for traces regardless of the presence of `FSOLID_CUSTOMRAYTEST` or `FSOLID_CUSTOMBOXTEST`. This will only be called back to Lua as ENTITY:TestCollision for `\"anim\"` type SENTs.","key":"SOLID_CUSTOM","value":"5"},{"text":"Uses the PhysObjects of the entity.","key":"SOLID_VPHYSICS","value":"6"}]}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Server","description":"Enumerations used by sound.EmitHint.","items":{"item":[{"key":"SOUND_NONE","value":"0"},{"key":"SOUND_COMBAT","value":"1"},{"key":"SOUND_WORLD","value":"2"},{"key":"SOUND_PLAYER","value":"4"},{"key":"SOUND_DANGER","value":"8"},{"key":"SOUND_BULLET_IMPACT","value":"16"},{"text":"Considered a scent.","key":"SOUND_CARCASS","value":"32"},{"text":"Considered a scent.","key":"SOUND_MEAT","value":"64"},{"text":"Considered a scent.","key":"SOUND_GARBAGE","value":"128"},{"text":"Keeps certain creatures at bay, such as Antlions.","key":"SOUND_THUMPER","value":"256"},{"text":"Gets the antlion's attention.","key":"SOUND_BUGBAIT","value":"512"},{"key":"SOUND_PHYSICS_DANGER","value":"1024"},{"text":"Only scares the sniper NPC.","key":"SOUND_DANGER_SNIPERONLY","value":"2048"},{"key":"SOUND_MOVE_AWAY","value":"4096"},{"key":"SOUND_PLAYER_VEHICLE","value":"8192"},{"text":"Changes listener's readiness (Player Companion only)","key":"SOUND_READINESS_LOW","value":"16384"},{"key":"SOUND_READINESS_MEDIUM","value":"32768"},{"key":"SOUND_READINESS_HIGH","value":"65536"},{"text":"Additional context for SOUND_DANGER","key":"SOUND_CONTEXT_FROM_SNIPER","value":"1048576"},{"text":"Added to SOUND_COMBAT","key":"SOUND_CONTEXT_GUNFIRE","value":"2097152"},{"text":"Explosion going to happen here.","key":"SOUND_CONTEXT_MORTAR","value":"4194304"},{"text":"Only combine can hear sounds marked this way.","key":"SOUND_CONTEXT_COMBINE_ONLY","value":"8388608"},{"text":"React to sound source's origin, not sound's location","key":"SOUND_CONTEXT_REACT_TO_SOURCE","value":"16777216"},{"text":"Context added to SOUND_COMBAT, usually.","key":"SOUND_CONTEXT_EXPLOSION","value":"33554432"},{"text":"Combine do NOT hear this","key":"SOUND_CONTEXT_EXCLUDE_COMBINE","value":"67108864"},{"text":"Treat as a normal danger sound if you see the source, otherwise turn to face source.","key":"SOUND_CONTEXT_DANGER_APPROACH","value":"134217728"},{"text":"Only player allies can hear this sound.","key":"SOUND_CONTEXT_ALLIES_ONLY","value":"268435456"},{"text":"HACK: need this because we're not treating the SOUND_xxx values as true bit values! See switch in OnListened.","key":"SOUND_CONTEXT_PLAYER_VEHICLE","value":"536870912"}]}},"realms":["Server"],"type":"Enum"},
{"enum":[{"realm":"Client","description":"Enumerations for use with render.SetStencilCompareFunction.\n\nThe comparison is between the reference value set by render.SetStencilReferenceValue, and the value of each pixel in the stencil buffer.\n\nThese enumerations are mirrors of Enums/STENCILCOMPARISONFUNCTION.\n\nAlso see this corresponding MSDN entry: https://msdn.microsoft.com/en-us/library/windows/desktop/ff476101%28v=vs.85%29.aspx.","items":{"item":[{"text":"Never passes.","key":"STENCIL_NEVER","value":"1"},{"text":"Passes where the reference value is less than the stencil value.","key":"STENCIL_LESS","value":"2"},{"text":"Passes where the reference value is equal to the stencil value.","key":"STENCIL_EQUAL","value":"3"},{"text":"Passes where the reference value is less than or equal to the stencil value.","key":"STENCIL_LESSEQUAL","value":"4"},{"text":"Passes where the reference value is greater than the stencil value.","key":"STENCIL_GREATER","value":"5"},{"text":"Passes where the reference value is not equal to the stencil value.","key":"STENCIL_NOTEQUAL","value":"6"},{"text":"Passes where the reference value is greater than or equal to the stencil value.","key":"STENCIL_GREATEREQUAL","value":"7"},{"text":"Always passes.","key":"STENCIL_ALWAYS","value":"8"}]}},{"realm":"Client","description":"Enumerations for use with render.SetStencilPassOperation, render.SetStencilFailOperation and render.SetStencilZFailOperation.\n\nThese enumerations are mirrors of Enums/STENCILOPERATION.","items":{"item":[{"text":"Preserves the existing stencil buffer value.","key":"STENCIL_KEEP","value":"1"},{"text":"Sets the value in the stencil buffer to 0.","key":"STENCIL_ZERO","value":"2"},{"text":"Sets the value in the stencil buffer to the reference value, set using render.SetStencilReferenceValue.","key":"STENCIL_REPLACE","value":"3"},{"text":"Increments the value in the stencil buffer by 1, clamping the result.","key":"STENCIL_INCRSAT","value":"4"},{"text":"Decrements the value in the stencil buffer by 1, clamping the result.","key":"STENCIL_DECRSAT","value":"5"},{"text":"Inverts the value in the stencil buffer.","key":"STENCIL_INVERT","value":"6"},{"text":"Increments the value in the stencil buffer by 1, wrapping around on overflow.","key":"STENCIL_INCR","value":"7"},{"text":"Decrements the value in the stencil buffer by 1, wrapping around on overflow.","key":"STENCIL_DECR","value":"8"}]}}],"realms":["Client"],"type":"Enum"},
{"enum":{"realm":"Client","description":{"text":"Enumerations for use with render.SetStencilCompareFunction.\n\nThe comparison is between the reference value set by render.SetStencilReferenceValue, and the value of each pixel in the stencil buffer.\n\nClientside only.\n\n\nAlso see this corresponding MSDN entry: http://msdn.microsoft.com/en-us/library/windows/desktop/ff476101%28v=vs.85%29.aspx.","note":"These enumerations are also mirrored as Enums/STENCIL."},"items":{"item":[{"text":"Never passes.","key":"STENCILCOMPARISONFUNCTION_NEVER","value":"1"},{"text":"Passes where the reference value is less than the stencil value.","key":"STENCILCOMPARISONFUNCTION_LESS","value":"2"},{"text":"Passes where the reference value is equal to the stencil value.","key":"STENCILCOMPARISONFUNCTION_EQUAL","value":"3"},{"text":"Passes where the reference value is less than or equal to the stencil value.","key":"STENCILCOMPARISONFUNCTION_LESSEQUAL","value":"4"},{"text":"Passes where the reference value is greater than the stencil value.","key":"STENCILCOMPARISONFUNCTION_GREATER","value":"5"},{"text":"Passes where the reference value is not equal to the stencil value.","key":"STENCILCOMPARISONFUNCTION_NOTEQUAL","value":"6"},{"text":"Passes where the reference value is greater than or equal to the stencil value.","key":"STENCILCOMPARISONFUNCTION_GREATEREQUAL","value":"7"},{"text":"Always passes.","key":"STENCILCOMPARISONFUNCTION_ALWAYS","value":"8"}]}},"realms":["Client"],"type":"Enum"},
{"enum":{"realm":"Shared","description":"Enumerations used in GM:PlayerStepSoundTime hook.","items":{"item":[{"text":"Normal step","key":"STEPSOUNDTIME_NORMAL","value":"0"},{"text":"Step on ladder","key":"STEPSOUNDTIME_ON_LADDER","value":"1"},{"text":"Step in water, with water reaching knee","key":"STEPSOUNDTIME_WATER_KNEE","value":"2"},{"text":"Step in water, with water reaching foot","key":"STEPSOUNDTIME_WATER_FOOT","value":"3"}]}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Shared","description":"Surface flags, used by the Structures/TraceResult.","items":{"item":[{"text":"Value will hold the light strength","key":"SURF_LIGHT","value":"1"},{"text":"The surface is a 2D skybox","key":"SURF_SKY2D","value":"2"},{"text":"This surface is a skybox, equivalent to HitSky in Structures/TraceResult","key":"SURF_SKY","value":"4"},{"text":"This surface is animated water","key":"SURF_WARP","value":"8"},{"text":"This surface is translucent","key":"SURF_TRANS","value":"16"},{"text":"This surface cannot have portals placed on, used by Portal's gun","key":"SURF_NOPORTAL","value":"32"},{"text":"This surface is a trigger","key":"SURF_TRIGGER","value":"64"},{"text":"This surface is an invisible entity, equivalent to HitNoDraw in Structures/TraceResult","key":"SURF_NODRAW","value":"128"},{"text":"Make a primary bsp splitter","key":"SURF_HINT","value":"256"},{"text":"This surface can be ignored by impact effects","key":"SURF_SKIP","value":"512"},{"text":"This surface has no lights calculated","key":"SURF_NOLIGHT","value":"1024"},{"text":"Calculate three lightmaps for the surface for bumpmapping","key":"SURF_BUMPLIGHT","value":"2048"},{"text":"No shadows are cast on this surface","key":"SURF_NOSHADOWS","value":"4096"},{"text":"No decals are applied to this surface","key":"SURF_NODECALS","value":"8192"},{"text":"Don't subdivide patches on this surface","key":"SURF_NOCHOP","value":"16384"},{"text":"This surface is part of an entity's hitbox","key":"SURF_HITBOX","value":"32768"}]}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Client","description":"Used by ENTITY:Draw and ENTITY:DrawTranslucent.","items":{"item":[{"text":"The current render is for opaque renderables only","key":"STUDIO_RENDER","value":"1"},{"key":"STUDIO_VIEWXFORMATTACHMENTS","value":"2"},{"text":"The current render is for translucent renderables only","key":"STUDIO_DRAWTRANSLUCENTSUBMODELS","value":"4"},{"text":"The current render is for both opaque and translucent renderables","key":"STUDIO_TWOPASS","value":"8"},{"key":"STUDIO_STATIC_LIGHTING","value":"16"},{"key":"STUDIO_WIREFRAME","value":"32"},{"key":"STUDIO_ITEM_BLINK","value":"64"},{"key":"STUDIO_NOSHADOWS","value":"128"},{"key":"STUDIO_WIREFRAME_VCOLLIDE","value":"256"},{"text":"Not a studio flag, but used to flag when we want studio stats","key":"STUDIO_GENERATE_STATS","value":"16777216"},{"text":"Not a studio flag, but used to flag model as using shadow depth material override","key":"STUDIO_SSAODEPTHTEXTURE","value":"134217728"},{"text":"Not a studio flag, but used to flag model as using shadow depth material override","key":"STUDIO_SHADOWDEPTHTEXTURE","value":"1073741824"},{"text":"Not a studio flag, but used to flag model as a non-sorting brush model","key":"STUDIO_TRANSPARENCY","value":"2147483648"}]}},"realms":["Client"],"type":"Enum"},
{"enum":{"realm":"Client","description":{"text":"Enumerations for use with render.SetStencilPassOperation, render.SetStencilFailOperation and render.SetStencilZFailOperation. Clientside only.\n\n\nAlso see this corresponding MSDN entry: http://msdn.microsoft.com/en-us/library/windows/desktop/ff476219%28v=vs.85%29.aspx.","note":"These enumerations are also mirrored as Enums/STENCIL."},"items":{"item":[{"text":"Preserves the existing stencil buffer value.","key":"STENCILOPERATION_KEEP","value":"1"},{"text":"Sets the value in the stencil buffer to 0.","key":"STENCILOPERATION_ZERO","value":"2"},{"text":"Sets the value in the stencil buffer to the reference value, set using render.SetStencilReferenceValue.","key":"STENCILOPERATION_REPLACE","value":"3"},{"text":"Increments the value in the stencil buffer by 1, clamping the result.","key":"STENCILOPERATION_INCRSAT","value":"4"},{"text":"Decrements the value in the stencil buffer by 1, clamping the result.","key":"STENCILOPERATION_DECRSAT","value":"5"},{"text":"Inverts the value in the stencil buffer.","key":"STENCILOPERATION_INVERT","value":"6"},{"text":"Increments the value in the stencil buffer by 1, wrapping around on overflow.","key":"STENCILOPERATION_INCR","value":"7"},{"text":"Decrements the value in the stencil buffer by 1, wrapping around on overflow.","key":"STENCILOPERATION_DECR","value":"8"}]}},"realms":["Server"],"type":"Enum"},
{"enum":{"realm":"Client","description":{"text":"Enumerations for use with render.SetStencilPassOperation, render.SetStencilFailOperation and render.SetStencilZFailOperation. Clientside only.\n\n\nAlso see this corresponding MSDN entry: http://msdn.microsoft.com/en-us/library/windows/desktop/ff476219%28v=vs.85%29.aspx.","note":"These enumerations are also mirrored as Enums/STENCIL."},"items":{"item":[{"text":"Preserves the existing stencil buffer value.","key":"STENCILOPERATION_KEEP","value":"1"},{"text":"Sets the value in the stencil buffer to 0.","key":"STENCILOPERATION_ZERO","value":"2"},{"text":"Sets the value in the stencil buffer to the reference value, set using render.SetStencilReferenceValue.","key":"STENCILOPERATION_REPLACE","value":"3"},{"text":"Increments the value in the stencil buffer by 1, clamping the result.","key":"STENCILOPERATION_INCRSAT","value":"4"},{"text":"Decrements the value in the stencil buffer by 1, clamping the result.","key":"STENCILOPERATION_DECRSAT","value":"5"},{"text":"Inverts the value in the stencil buffer.","key":"STENCILOPERATION_INVERT","value":"6"},{"text":"Increments the value in the stencil buffer by 1, wrapping around on overflow.","key":"STENCILOPERATION_INCR","value":"7"},{"text":"Decrements the value in the stencil buffer by 1, wrapping around on overflow.","key":"STENCILOPERATION_DECR","value":"8"}]}},"realms":["Client"],"type":"Enum"},
{"enum":{"realm":"Shared and Menu","description":"Enumerations used by render.PushFilterMin and render.PushFilterMag.\n\nSee [this](https://msdn.microsoft.com/en-us/library/windows/desktop/bb172615(v=vs.85).aspx) and [this page](https://en.wikipedia.org/wiki/Texture_filtering) for more information on texture filtering.","items":{"item":[{"key":"TEXFILTER.NONE","value":"0"},{"key":"TEXFILTER.POINT","value":"1"},{"key":"TEXFILTER.LINEAR","value":"2"},{"key":"TEXFILTER.ANISOTROPIC","value":"3"}]}},"realms":["Server","Client","Menu"],"type":"Enum"},
{"enum":{"realm":"Shared","description":"Default defined teams in Garry's Mod. This does not include any custom teams created in custom gamemodes. Enumerations to use with Player:Team","items":{"item":[{"text":"Connecting team ID, set when player connects to the server","key":"TEAM_CONNECTING","value":"0"},{"text":"Unassigned team ID, set right after player connected","key":"TEAM_UNASSIGNED","value":"1001"},{"text":"Spectator team ID","key":"TEAM_SPECTATOR","value":"1002"}]}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Client","description":{"text":"Bit flags used by Global.GetRenderTargetEx. Information taken from [here](https://developer.valvesoftware.com/wiki/Valve_Texture_Format#Image_flags)","warning":"These enumerations do not exist in game and are listed here only for reference"},"items":{"item":[{"text":"Low quality, \"pixel art\" texture filtering.","key":"TEXTUREFLAGS_POINTSAMPLE","value":"1"},{"text":"Medium quality texture filtering.","key":"TEXTUREFLAGS_TRILINEAR","value":"2"},{"text":"Clamp S coordinates.","key":"TEXTUREFLAGS_CLAMPS","value":"4"},{"text":"Clamp T coordinates.","key":"TEXTUREFLAGS_CLAMPT","value":"8"},{"text":"High quality texture filtering.","key":"TEXTUREFLAGS_ANISOTROPIC","value":"16"},{"text":"Used in skyboxes. Makes sure edges are seamless.","key":"TEXTUREFLAGS_HINT_DXT5","value":"32"},{"text":"Purpose unknown.","key":"TEXTUREFLAGS_PWL_CORRECTED","value":"64"},{"text":"Texture is a normal map.","key":"TEXTUREFLAGS_NORMAL","value":"128"},{"text":"Render largest mipmap only. (Does not delete existing mipmaps, just disables them.)","key":"TEXTUREFLAGS_NOMIP","value":"256"},{"text":"Not affected by texture resolution settings.","key":"TEXTUREFLAGS_NOLOD","value":"512"},{"text":"No Minimum Mipmap","key":"TEXTUREFLAGS_ALL_MIPS","value":"1024"},{"text":"Texture is an procedural texture (code can modify it).","key":"TEXTUREFLAGS_PROCEDURAL","value":"2048"},{"text":"One bit alpha channel used.","key":"TEXTUREFLAGS_ONEBITALPHA","value":"4096"},{"text":"Eight bit alpha channel used.","key":"TEXTUREFLAGS_EIGHTBITALPHA","value":"8192"},{"text":"Texture is an environment map.","key":"TEXTUREFLAGS_ENVMAP","value":"16384"},{"text":"Texture is a render target.","key":"TEXTUREFLAGS_RENDERTARGET","value":"32768"},{"text":"Texture is a depth render target.","key":"TEXTUREFLAGS_DEPTHRENDERTARGET","value":"65536"},{"key":"TEXTUREFLAGS_NODEBUGOVERRIDE","value":"131072"},{"key":"TEXTUREFLAGS_SINGLECOPY","value":"262144"},{"key":"TEXTUREFLAGS_UNUSED_00080000","value":"524288"},{"text":"Immediately destroy this texture when its reference count hits zero\n\n(aka TEXTUREFLAGS_UNUSED_00100000)","key":"TEXTUREFLAGS_IMMEDIATE_CLEANUP","value":"1048576","deprecated":""},{"key":"TEXTUREFLAGS_UNUSED_00200000","value":"2097152"},{"key":"TEXTUREFLAGS_UNUSED_00400000","value":"4194304"},{"text":"Do not buffer for Video Processing, generally render distance.","key":"TEXTUREFLAGS_NODEPTHBUFFER","value":"8388608"},{"key":"TEXTUREFLAGS_UNUSED_01000000","value":"16777216"},{"text":"Clamp U coordinates (for volumetric textures).","key":"TEXTUREFLAGS_CLAMPU","value":"33554432"},{"text":"Usable as a vertex texture","key":"TEXTUREFLAGS_VERTEXTEXTURE","value":"67108864"},{"text":"Texture is a SSBump. (SSB)","key":"TEXTUREFLAGS_SSBUMP","value":"134217728"},{"key":"TEXTUREFLAGS_UNUSED_10000000","value":"268435456"},{"text":"Clamp to border colour on all texture coordinates","key":"TEXTUREFLAGS_BORDER","value":"536870912"},{"key":"TEXTUREFLAGS_UNUSED_40000000","value":"1073741824"},{"key":"TEXTUREFLAGS_UNUSED_80000000","value":"2147483648"}]},"suppresswarning":"Yes"},"realms":["Client"],"type":"Enum"},
{"enum":{"realm":"Shared","description":"Enumerations used by draw.SimpleText, draw.DrawText and in Structures/TextData.","items":{"item":[{"text":"Align the text on the left","key":"TEXT_ALIGN_LEFT","value":"0"},{"text":"Align the text in center","key":"TEXT_ALIGN_CENTER","value":"1"},{"text":"Align the text on the right","key":"TEXT_ALIGN_RIGHT","value":"2"},{"text":"Align the text on the top","key":"TEXT_ALIGN_TOP","value":"3"},{"text":"Align the text on the bottom","key":"TEXT_ALIGN_BOTTOM","value":"4"}]}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Shared","description":"Enumerations used by Structures/AmmoData.","items":{"item":[{"text":"Generates no tracer effects","key":"TRACER_NONE","value":"0"},{"text":"Generates tracer effects","key":"TRACER_LINE","value":"1"},{"text":"Unused.","key":"TRACER_RAIL","value":"2"},{"text":"Unused.","key":"TRACER_BEAM","value":"3"},{"text":"Generates tracer and makes whizzing noises if the bullet flies past the player being shot at","key":"TRACER_LINE_AND_WHIZ","value":"4"}]}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Shared","description":"Enumerations used in ENTITY:UpdateTransmitState hook.","items":{"item":[{"text":"Always transmit the entity","key":"TRANSMIT_ALWAYS","value":"0"},{"text":"Never transmit the entity, default for point entities","key":"TRANSMIT_NEVER","value":"1"},{"text":"Transmit when entity is in players view","key":"TRANSMIT_PVS","value":"2"}]}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Shared","description":"Enumerations used by ENTITY:Use.\n\nNot to be confused with Enums/_USE used by Entity:SetUseType.","items":{"item":[{"key":"USE_OFF","value":"0"},{"key":"USE_ON","value":"1"},{"key":"USE_SET","value":"2"},{"key":"USE_TOGGLE","value":"3"}]}},"realms":["Server","Client"],"type":"Enum"},
{"enum":{"realm":"Shared and Menu","description":"Enumerations used by net.ReadType and returned by Global.TypeID","items":{"item":[{"text":"Invalid type","key":"TYPE_NONE","value":"-1"},{"key":"TYPE_INVALID","value":"-1","deprecated":"Use TYPE_NONE"},{"text":"nil","key":"TYPE_NIL","value":"0"},{"text":"boolean","key":"TYPE_BOOL","value":"1"},{"text":"light userdata","key":"TYPE_LIGHTUSERDATA","value":"2"},{"text":"number","key":"TYPE_NUMBER","value":"3"},{"text":"string","key":"TYPE_STRING","value":"4"},{"text":"table","key":"TYPE_TABLE","value":"5"},{"text":"function","key":"TYPE_FUNCTION","value":"6"},{"text":"userdata","key":"TYPE_USERDATA","value":"7"},{"text":"thread","key":"TYPE_THREAD","value":"8"},{"text":"Entity and entity sub-classes including Player, Weapon, NPC, Vehicle, CSEnt, and NextBot","key":"TYPE_ENTITY","value":"9"},{"text":"Vector","key":"TYPE_VECTOR","value":"10"},{"text":"Angle","key":"TYPE_ANGLE","value":"11"},{"text":"PhysObj","key":"TYPE_PHYSOBJ","value":"12"},{"text":"ISave","key":"TYPE_SAVE","value":"13"},{"text":"IRestore","key":"TYPE_RESTORE","value":"14"},{"text":"CTakeDamageInfo","key":"TYPE_DAMAGEINFO","value":"15"},{"text":"CEffectData","key":"TYPE_EFFECTDATA","value":"16"},{"text":"CMoveData","key":"TYPE_MOVEDATA","value":"17"},{"text":"CRecipientFilter","key":"TYPE_RECIPIENTFILTER","value":"18"},{"text":"CUserCmd","key":"TYPE_USERCMD","value":"19"},{"key":"TYPE_SCRIPTEDVEHICLE","value":"20","deprecated":"Leftover from GMod 13 Beta"},{"text":"IMaterial","key":"TYPE_MATERIAL","value":"21"},{"text":"Panel","key":"TYPE_PANEL","value":"22"},{"text":"CLuaParticle","key":"TYPE_PARTICLE","value":"23"},{"text":"CLuaEmitter","key":"TYPE_PARTICLEEMITTER","value":"24"},{"text":"ITexture","key":"TYPE_TEXTURE","value":"25"},{"text":"bf_read","key":"TYPE_USERMSG","value":"26"},{"text":"ConVar","key":"TYPE_CONVAR","value":"27"},{"text":"IMesh","key":"TYPE_IMESH","value":"28"},{"text":"VMatrix","key":"TYPE_MATRIX","value":"29"},{"text":"CSoundPatch","key":"TYPE_SOUND","value":"30"},{"text":"pixelvis_handle_t","key":"TYPE_PIXELVISHANDLE","value":"31"},{"text":"dlight_t. Metatable of a Structures/DynamicLight","key":"TYPE_DLIGHT","value":"32"},{"text":"IVideoWriter","key":"TYPE_VIDEO","value":"33"},{"text":"File","key":"TYPE_FILE","value":"34"},{"text":"CLuaLocomotion","key":"TYPE_LOCOMOTION","value":"35"},{"text":"PathFollower","key":"TYPE_PATH","value":"36"},{"text":"CNavArea","key":"TYPE_NAVAREA","value":"37"},{"text":"IGModAudioChannel","key":"TYPE_SOUNDHANDLE","value":"38"},{"text":"CNavLadder","key":"TYPE_NAVLADDER","value":"39"},{"text":"CNewParticleEffect","key":"TYPE_PARTICLESYSTEM","value":"40"},{"text":"ProjectedTexture","key":"TYPE_PROJECTEDTEXTURE","value":"41"},{"text":"PhysCollide","key":"TYPE_PHYSCOLLIDE","value":"42"},{"text":"SurfaceInfo","key":"TYPE_SURFACEINFO","value":"43"},{"text":"Amount of TYPE_* enums","key":"TYPE_COUNT","value":"44"},{"text":"Metatable of a Color.","key":"TYPE_COLOR","value":"255","note":"This doesn't actually represent a unique type returned by Global.TypeID, but instead is a hack for networking colors with net.WriteType."}]}},"realms":["Server","Client","Menu"],"type":"Enum"},
{"enum":{"realm":"Shared","description":"Enumerations used by NPC:SetCurrentWeaponProficiency and  \nNPC:GetCurrentWeaponProficiency.","items":{"item":[{"text":"The NPC will miss a large majority of their shots.","key":"WEAPON_PROFICIENCY_POOR","value":"0"},{"text":"The NPC will miss about half of their shots.","key":"WEAPON_PROFICIENCY_AVERAGE","value":"1"},{"text":"The NPC will sometimes miss their shots.","key":"WEAPON_PROFICIENCY_GOOD","value":"2"},{"text":"The NPC will rarely miss their shots.","key":"WEAPON_PROFICIENCY_VERY_GOOD","value":"3"},{"text":"The NPC will almost never miss their shots.","key":"WEAPON_PROFICIENCY_PERFECT","value":"4"}]}},"realms":["Server","Client"],"type":"Enum"}
]