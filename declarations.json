[
{"name":"RotateAroundAxis","parent":"Angle","type":"classfunc","description":"Rotates the angle around the specified axis by the specified degrees.","realm":"Shared","args":[]},
{"name":"Add","parent":"Angle","type":"classfunc","description":"Adds the values of the argument angle to the orignal angle. \n\nThis functions the same as angle1 + angle2 without creating a new angle object, skipping object construction and garbage collection.","realm":"Shared","args":[]},
{"name":"Normalize","parent":"Angle","type":"classfunc","description":"Normalizes the angles by applying a module with 360 to pitch, yaw and roll.","realm":"Shared","args":[]},
{"name":"Div","parent":"Angle","type":"classfunc","description":"Divides all values of the original angle by a scalar. This functions the same as angle1 / num without creating a new angle object, skipping object construction and garbage collection.","realm":"Shared","args":[]},
{"name":"IsZero","parent":"Angle","type":"classfunc","description":"Returns whether the pitch, yaw and roll are 0 or not.","realm":"Shared","args":[]},
{"name":"Set","parent":"Angle","type":"classfunc","description":"Copies pitch, yaw and roll from the second angle to the first.","realm":"Shared","args":[]},
{"name":"Right","parent":"Angle","type":"classfunc","description":"Returns a normal vector facing in the direction that points right relative to the angle's direction.","realm":"Shared","args":[]},
{"name":"Mul","parent":"Angle","type":"classfunc","description":"Multiplies a scalar to all the values of the orignal angle. This functions the same as num * angle without creating a new angle object, skipping object construction and garbage collection.","realm":"Shared","args":[]},
{"name":"Forward","parent":"Angle","type":"classfunc","description":"Returns a normal vector facing in the direction that the angle points.","realm":"Shared","args":[]},
{"name":"SetUnpacked","parent":"Angle","type":"classfunc","description":"Sets the p, y, and r of the angle.","realm":"Shared","args":[]},
{"name":"LoadTGAImage","parent":"Panel","type":"panelfunc","description":"Sets a new image to be loaded by a TGAImage.","realm":"Client","args":[]},
{"name":"Set","parent":"ImageCheckBox","type":"panelfunc","description":"\nSets the checked state of the checkbox.\n\nChecked state can be obtained by ImageCheckBox.State.\n\t","realm":"Client","args":[]},
{"name":"SetChecked","parent":"ImageCheckBox","type":"panelfunc","description":"\nSets the checked state of the checkbox.\n\nChecked state can be obtained via ImageCheckBox:GetChecked\n\t","realm":"Client","args":[]},
{"name":"GetChecked","parent":"ImageCheckBox","type":"panelfunc","description":"Returns the checked state of the ImageCheckBox","realm":"Client","args":[]},
{"name":"SetIcon","parent":"IconEditor","type":"panelfunc","description":"Sets the SpawnIcon to modify. You should call Panel:Refresh immediately after this, as the user will not be able to make changes to the icon beforehand.","realm":"Client","args":[]},
{"name":"SetMaterial","parent":"Material","type":"panelfunc","description":"\nSets the material used by the panel.\n\nIf the material is not showing up as the correct size, try setting the Material panel's `AutoSize` variable to **false**\n\t","realm":"Client","args":[]},
{"name":"SetAlpha","parent":"Material","type":"panelfunc","description":"Sets the alpha value of the Material panel.","realm":"Client","args":[]},
{"name":"UpdateEntity","parent":"IconEditor","type":"panelfunc","description":" Updates the entity being rendered in the internal DAdjustableModelPanel. Called by the model panel's DModelPanel:LayoutEntity method.","realm":"Client","args":[]},
{"name":"SetMaterial","parent":"ImageCheckBox","type":"panelfunc","description":"\nSets the material that will be visible when the ImageCheckBox is checked.\n\nInternally calls Material:SetMaterial.\n\nWill error if no material was set.\n\t","realm":"Client","args":[]},
{"name":"SetFromEntity","parent":"IconEditor","type":"panelfunc","description":"\nSets the editor's model and icon from an entity. Alternative to IconEditor:SetIcon, with uses a SpawnIcon.\n\nYou do not need to call IconEditor:Refresh after this.\n\t","realm":"Client","args":[]},
{"name":"SetDefaultLighting","parent":"IconEditor","type":"panelfunc","description":" Sets up the default ambient and directional lighting for the DAdjustableModelPanel. Called by IconEditor:Refresh.","realm":"Client","args":[]},
{"name":"RightLayout","parent":"IconEditor","type":"panelfunc","description":"\nApplies the right side view camera settings for the model in the DAdjustableModelPanel.\n\nCalled when a user clicks the `Right` (fourth) button (See the ). (Note: The icon for this points left.)\n\t","realm":"Client","args":[]},
{"name":"OriginLayout","parent":"IconEditor","type":"panelfunc","description":"\nPlaces the camera at the origin (0,0,0), relative to the entity, in the DAdjustableModelPanel.\n\nCalled when a user clicks the `Center` (fifth) button (See the ).\n\t","realm":"Client","args":[]},
{"name":"RenderIcon","parent":"IconEditor","type":"panelfunc","description":"\nRe-renders the SpawnIcon.\n\nCalled when a user clicks the `RENDER` button, this retrieves the render data from the internal DAdjustableModelPanel and passes it as a table to Panel:RebuildSpawnIconEx.\n\t","realm":"Client","args":[]},
{"name":"AboveLayout","parent":"IconEditor","type":"panelfunc","description":"\nApplies the top-down view camera settings for the model in the DAdjustableModelPanel.\n\nCalled when a user clicks the `Above` (third) button (See the ).\n\t","realm":"Client","args":[]},
{"name":"Value","parent":"DVScrollBar","type":"panelfunc","description":"\n\n\nShould return nil in all cases. See DVScrollBar:GetScroll.\n\t","realm":"Client","args":[]},
{"name":"BestGuessLayout","parent":"IconEditor","type":"panelfunc","description":"\nApplies the best camera settings for the model in the DAdjustableModelPanel, using the values returned by Global.PositionSpawnIcon.\n\nCalled when a user clicks the `wand` button (See the ) and when IconEditor:Refresh is called.\n\t","realm":"Client","args":[]},
{"name":"Refresh","parent":"IconEditor","type":"panelfunc","description":"\nUpdates the internal DAdjustableModelPanel and SpawnIcon. \n\nThis should be called immediately after setting the SpawnIcon with IconEditor:SetIcon.\n\t","realm":"Client","args":[]},
{"name":"FillAnimations","parent":"IconEditor","type":"panelfunc","description":" Fills the DListView on the left of the editor with the model entity's animation list. Called by IconEditor:Refresh.","realm":"Client","args":[]},
{"name":"FullFrontalLayout","parent":"IconEditor","type":"panelfunc","description":"\nApplies the front view camera settings for the model in the DAdjustableModelPanel.\n\nCalled when a user clicks the `Front` (second) button (See the ).\n\t","realm":"Client","args":[]},
{"name":"SetUp","parent":"DVScrollBar","type":"panelfunc","description":"\nSets up the scrollbar for use.\n\nThe scrollbar will automatically disable itself if the total height of the canvas is lower than the height of the panel that holds the canvas during this function call.\n\t","realm":"Client","args":[]},
{"name":"SetScroll","parent":"DVScrollBar","type":"panelfunc","description":"Sets the scroll level in pixels.","realm":"Client","args":[]},
{"name":"AddScroll","parent":"DVScrollBar","type":"panelfunc","description":"Adds specified amount of scroll in pixels.","realm":"Client","args":[]},
{"name":"BarScale","parent":"DVScrollBar","type":"panelfunc","description":"No Description","realm":"Client","args":[]},
{"name":"AnimateTo","parent":"DVScrollBar","type":"panelfunc","description":"Smoothly scrolls to given level.","realm":"Client","args":[]},
{"name":"GetOffset","parent":"DVScrollBar","type":"panelfunc","description":"Returns the negative of DVScrollBar:GetScroll.","realm":"Client","args":[]},
{"name":"GetScroll","parent":"DVScrollBar","type":"panelfunc","description":"Returns the amount of scroll level from the top in pixels","realm":"Client","args":[]},
{"name":"SetHideButtons","parent":"DVScrollBar","type":"panelfunc","description":"Allows hiding the up and down buttons for better visual stylisation.","realm":"Client","args":[]},
{"name":"GetHideButtons","parent":"DVScrollBar","type":"panelfunc","description":"Returns whether or not the manual up/down scroll buttons are visible or not. Set by DVScrollBar:SetHideButtons.","realm":"Client","args":[]},
{"name":"Grip","parent":"DVScrollBar","type":"panelfunc","description":"\n\n\nCalled from within DScrollBarGrip\n\t","realm":"Client","args":[]},
{"name":"StartGrab","parent":"DVerticalDivider","type":"panelfunc","description":"\n\nCauses the user to start dragging the divider.\n\t","realm":"Client","args":[]},
{"name":"SetBottomMin","parent":"DVerticalDivider","type":"panelfunc","description":"Sets the minimum height of the bottom content panel.","realm":"Client","args":[]},
{"name":"SetHoldPos","parent":"DVerticalDivider","type":"panelfunc","description":"\n\nSets the local Y position of where the user starts dragging the divider.\n\t","realm":"Client","args":[]},
{"name":"SetTopMin","parent":"DVerticalDivider","type":"panelfunc","description":"Sets the minimum height of the top content panel.","realm":"Client","args":[]},
{"name":"SetDividerHeight","parent":"DVerticalDivider","type":"panelfunc","description":"Sets the height of the divider bar between the top and bottom content panels of the DVerticalDivider.","realm":"Client","args":[]},
{"name":"SetTop","parent":"DVerticalDivider","type":"panelfunc","description":"Sets the passed panel as the top content of the DVerticalDivider.","realm":"Client","args":[]},
{"name":"SetMiddle","parent":"DVerticalDivider","type":"panelfunc","description":"Places the passed panel in between the top and bottom content panels of the DVerticalDivider.","realm":"Client","args":[]},
{"name":"SetTopHeight","parent":"DVerticalDivider","type":"panelfunc","description":"\nSets the height of the top content panel.\n\nThe height of the bottom content panel is automatically calculated by taking the total height of the DVerticalDivider and subtracting it with the height of the top content panel and the divider bar.\n\t","realm":"Client","args":[]},
{"name":"SetTopMax","parent":"DVerticalDivider","type":"panelfunc","description":"Sets the maximum height of the top content panel. This is ignored if the panel would exceed the minimum bottom content panel height set from DVerticalDivider:SetBottomMin.","realm":"Client","args":[]},
{"name":"SetDragging","parent":"DVerticalDivider","type":"panelfunc","description":"\n\nSets whether the divider is being dragged or not.\n\t","realm":"Client","args":[]},
{"name":"SetBottom","parent":"DVerticalDivider","type":"panelfunc","description":"Sets the passed panel as the bottom content of the DVerticalDivider.","realm":"Client","args":[]},
{"name":"GetTopMin","parent":"DVerticalDivider","type":"panelfunc","description":"Returns the minimum height of the top content panel.","realm":"Client","args":[]},
{"name":"GetTop","parent":"DVerticalDivider","type":"panelfunc","description":"Returns the top content panel of the DVerticalDivider.","realm":"Client","args":[]},
{"name":"GetDragging","parent":"DVerticalDivider","type":"panelfunc","description":"Returns whether the divider is being dragged or not.","realm":"Client","args":[]},
{"name":"GetTopMax","parent":"DVerticalDivider","type":"panelfunc","description":"Returns the maximum height of the top content panel. See DVerticalDivider:SetTopMax for more information.","realm":"Client","args":[]},
{"name":"GetHoldPos","parent":"DVerticalDivider","type":"panelfunc","description":"\n\nReturns the local Y position of where the user starts dragging the divider.\n\t","realm":"Client","args":[]},
{"name":"GetDividerHeight","parent":"DVerticalDivider","type":"panelfunc","description":"Returns the height of the divider bar between the top and bottom content panels of the DVerticalDivider.","realm":"Client","args":[]},
{"name":"GetTopHeight","parent":"DVerticalDivider","type":"panelfunc","description":"Returns the current height of the top content panel set by DVerticalDivider:SetTopHeight or by the user.","realm":"Client","args":[]},
{"name":"GetMiddle","parent":"DVerticalDivider","type":"panelfunc","description":"Returns the middle content panel of the DVerticalDivider.","realm":"Client","args":[]},
{"name":"GetBottomMin","parent":"DVerticalDivider","type":"panelfunc","description":"Returns the minimum height of the bottom content panel.","realm":"Client","args":[]},
{"name":"GetBottom","parent":"DVerticalDivider","type":"panelfunc","description":"Returns the bottom content panel of the DVerticalDivider.","realm":"Client","args":[]},
{"name":"SetWildCard","parent":"DTree_Node","type":"panelfunc","description":"\n\n\nSets the search wildcard.\n\nUse DTree_Node:MakeFolder instead\n\t","realm":"Client","args":[]},
{"name":"SetNeedsPopulating","parent":"DTree_Node","type":"panelfunc","description":"\n\n\nSets whether or not the node needs populating from the filesystem.\n\t","realm":"Client","args":[]},
{"name":"SetShowFiles","parent":"DTree_Node","type":"panelfunc","description":"\n\n\nSets whether or not nodes for files should be added when populating the node from filesystem.\n\t","realm":"Client","args":[]},
{"name":"SetRoot","parent":"DTree_Node","type":"panelfunc","description":"\n\n\nSets the root node (the DTree) of this node.\n\nThis is set automatically, you shouldn't use this.\n\t","realm":"Client","args":[]},
{"name":"SetParentNode","parent":"DTree_Node","type":"panelfunc","description":"\n\n\nSets the parent node of this node. Not the same as Panel:SetParent.\n\nThis is set automatically, you shouldn't use this.\n\t","realm":"Client","args":[]},
{"name":"SetupCopy","parent":"DTree_Node","type":"panelfunc","description":"\n\n\nCurrently does nothing, not implemented.\n\t","realm":"Client","args":[]},
{"name":"SetSelected","parent":"DTree_Node","type":"panelfunc","description":"\n\n\nCalled automatically to update the \"selected\" status of this node.\n\t","realm":"Client","args":[]},
{"name":"ShowIcons","parent":"DTree_Node","type":"panelfunc","description":"\nReturns whether or not the DTree this node is in has icons enabled.\n\nSee DTree:ShowIcons for more info.\n\t","realm":"Client","args":[]},
{"name":"SetPathID","parent":"DTree_Node","type":"panelfunc","description":"\n\n\nSets the path ID (File Search Paths) for populating the tree from the filesystem.\n\nUse DTree_Node:MakeFolder instead.\n\t","realm":"Client","args":[]},
{"name":"SetNeedsChildSearch","parent":"DTree_Node","type":"panelfunc","description":"","realm":"Client","args":[]},
{"name":"SetDraggableName","parent":"DTree_Node","type":"panelfunc","description":"\n\n\nUsed to store name for sub elements for a Panel:Droppable call.\n\t","realm":"Client","args":[]},
{"name":"SetLastChild","parent":"DTree_Node","type":"panelfunc","description":"\n\n\nCalled automatically to set whether this node is the last child on this level or not.\n\t","realm":"Client","args":[]},
{"name":"SetHideExpander","parent":"DTree_Node","type":"panelfunc","description":"\n\n\nSets whether the expand button (little + button) should be shown or hidden.\n\t","realm":"Client","args":[]},
{"name":"SetForceShowExpander","parent":"DTree_Node","type":"panelfunc","description":"Sets whether or not the expand/collapse button (+/- button) should be shown on this node regardless of whether it has sub-elements or not.","realm":"Client","args":[]},
{"name":"SetFolder","parent":"DTree_Node","type":"panelfunc","description":"\n\n\nSets the folder to search files and folders in.\n\nUse DTree_Node:MakeFolder instead.\n\t","realm":"Client","args":[]},
{"name":"SetExpanded","parent":"DTree_Node","type":"panelfunc","description":"Expands or collapses this node.","realm":"Client","args":[]},
{"name":"SetIcon","parent":"DTree_Node","type":"panelfunc","description":"Sets the material for the icon of the DTree_Node.","realm":"Client","args":[]},
{"name":"SetFileName","parent":"DTree_Node","type":"panelfunc","description":"\n\n\nSets the file full filepath to the file attached to this node\n\t","realm":"Client","args":[]},
{"name":"SetDrawLines","parent":"DTree_Node","type":"panelfunc","description":"\n\n\nSets whether or not this node should draw visual lines.\n\t","realm":"Client","args":[]},
{"name":"SetDoubleClickToOpen","parent":"DTree_Node","type":"panelfunc","description":"Sets whether double clicking the node should expand/collapse it or not.","realm":"Client","args":[]},
{"name":"OnNodeSelected","parent":"DTree_Node","type":"panelfunc","description":"\n\n\nCalled when this or a sub node is selected. Do not use this, it is not for override.\n\nUse DTree:OnNodeSelected or DTree_Node:DoClick instead.\n\t","realm":"Client","args":[]},
{"name":"MoveToTop","parent":"DTree_Node","type":"panelfunc","description":"Moves this node to the top of the level.","realm":"Client","args":[]},
{"name":"SetDirty","parent":"DTree_Node","type":"panelfunc","description":"\n\n\nAppears to have no effect on the DTree_Node.\n\t","realm":"Client","args":[]},
{"name":"PerformRootNodeLayout","parent":"DTree_Node","type":"panelfunc","description":"\n\n\nCalled automatically to perform layout on this node if this node DTree_Node:IsRootNode.\n\t","realm":"Client","args":[]},
{"name":"MoveChildTo","parent":"DTree_Node","type":"panelfunc","description":"\nMoves given panel to the top of the children of this node.\n\nDespite name of this function, it cannot move the children to any position but the topmost.\n\t","realm":"Client","args":[]},
{"name":"PopulateChildrenAndSelf","parent":"DTree_Node","type":"panelfunc","description":"\n\n\nCalled automatically from DTree_Node:SetExpanded (or when user manually expands the node) to populate the node with sub-nodes from the filesystem if this was enabled via DTree_Node:MakeFolder.\n\t","realm":"Client","args":[]},
{"name":"PopulateChildren","parent":"DTree_Node","type":"panelfunc","description":"\n\n\nCalled automatically from DTree_Node:PopulateChildrenAndSelf.\n\t","realm":"Client","args":[]},
{"name":"OnModified","parent":"DTree_Node","type":"panelfunc","description":"Called when sub-nodes of this DTree_Node were changed, such as being rearranged if that functionality is enabled.","realm":"Client","args":[]},
{"name":"LeaveTree","parent":"DTree_Node","type":"panelfunc","description":"\nRemoves given node as a sub-node of this node.\n\nIt doesn't actually remove or unparent the panel, just removes it from the internal DListView.\n\t","realm":"Client","args":[]},
{"name":"MakeFolder","parent":"DTree_Node","type":"panelfunc","description":"\nMakes this node a folder in the filesystem. This will make it automatically populated.\n\nSee also DTree_Node:AddFolder.\n\t","realm":"Client","args":[]},
{"name":"InternalDoClick","parent":"DTree_Node","type":"panelfunc","description":"\n\n\n\n\nSee DTree_Node:DoClick\n\t","realm":"Client","args":[]},
{"name":"InternalDoRightClick","parent":"DTree_Node","type":"panelfunc","description":"\n\n\n\n\nSee DTree_Node:DoRightClick.\n\t","realm":"Client","args":[]},
{"name":"InstallDraggable","parent":"DTree_Node","type":"panelfunc","description":"\n\n\nCalled automatically internally.\n\nMakes the target node compatible with this node's drag'n'drop.\n\t","realm":"Client","args":[]},
{"name":"Insert","parent":"DTree_Node","type":"panelfunc","description":"Inserts a sub-node into this node before or after the given node.","realm":"Client","args":[]},
{"name":"InsertNode","parent":"DTree_Node","type":"panelfunc","description":"\n\n\nInserts an existing node as a \"child\" or a sub-node of this node.\nUsed internally by the drag'n'drop functionality.\n\t","realm":"Client","args":[]},
{"name":"GetRoot","parent":"DTree_Node","type":"panelfunc","description":"\nReturns the root node, the DTree this node is under.\n\nSee also DTree_Node:GetParentNode.\n\t","realm":"Client","args":[]},
{"name":"GetShowFiles","parent":"DTree_Node","type":"panelfunc","description":"Returns whether or not nodes for files should/will be added when populating the node from filesystem.","realm":"Client","args":[]},
{"name":"IsRootNode","parent":"DTree_Node","type":"panelfunc","description":"Returns true if DTree_Node:GetRoot is the same as DTree_Node:GetParentNode of this node.","realm":"Client","args":[]},
{"name":"GetPathID","parent":"DTree_Node","type":"panelfunc","description":"\nReturns the path ID (File Search Paths) used in populating the DTree from the filesystem.\n\nSee DTree_Node:SetPathID and DTree_Node:MakeFolder.\n\t","realm":"Client","args":[]},
{"name":"GetWildCard","parent":"DTree_Node","type":"panelfunc","description":"Returns the wildcard set by DTree_Node:MakeFolder.","realm":"Client","args":[]},
{"name":"GetParentNode","parent":"DTree_Node","type":"panelfunc","description":"Returns the parent DTree_Node. Note that Panel:GetParent will not be the same!","realm":"Client","args":[]},
{"name":"GetIcon","parent":"DTree_Node","type":"panelfunc","description":"Returns the image path to the icon of this node.","realm":"Client","args":[]},
{"name":"GetNeedsPopulating","parent":"DTree_Node","type":"panelfunc","description":"\n\n\nReturns whether or not the node is set to be populated from the filesystem.\n\t","realm":"Client","args":[]},
{"name":"GetFolder","parent":"DTree_Node","type":"panelfunc","description":"Returns the folder path to search in, set by DTree_Node:MakeFolder.","realm":"Client","args":[]},
{"name":"GetHideExpander","parent":"DTree_Node","type":"panelfunc","description":"Returns whether the expand button (little + button) should be shown or hidden.","realm":"Client","args":[]},
{"name":"GetIndentSize","parent":"DTree_Node","type":"panelfunc","description":"\nReturns the indentation level of the DTree this node belongs to.\n\nAlias of DTree:GetIndentSize, see it for more info.\n\t","realm":"Client","args":[]},
{"name":"GetLineHeight","parent":"DTree_Node","type":"panelfunc","description":"\nThe height of a single DTree_Node of the DTree this node belongs to.\n\nAlias of DTree:GetLineHeight.\n\t","realm":"Client","args":[]},
{"name":"GetLastChild","parent":"DTree_Node","type":"panelfunc","description":"Returns whether this node is the last child on this level or not.","realm":"Client","args":[]},
{"name":"GetNeedsChildSearch","parent":"DTree_Node","type":"panelfunc","description":"","realm":"Client","args":[]},
{"name":"GetForceShowExpander","parent":"DTree_Node","type":"panelfunc","description":"\nReturns whether the expand/collapse button is shown on this node regardless of whether or not it has sub-nodes.\n\nSee also DTree_Node:SetForceShowExpander.\n\t","realm":"Client","args":[]},
{"name":"GetDirty","parent":"DTree_Node","type":"panelfunc","description":"\n\n\nReturns value set by DTree_Node:SetDirty.\n\t","realm":"Client","args":[]},
{"name":"GetFileName","parent":"DTree_Node","type":"panelfunc","description":"Returns the filepath of the file attached to this node.","realm":"Client","args":[]},
{"name":"ExpandTo","parent":"DTree_Node","type":"panelfunc","description":"\nCollapses or expands all nodes from the topmost-level node to this one.\n\nWorks opposite of DTree_Node:ExpandRecurse.\n\t","realm":"Client","args":[]},
{"name":"GetDrawLines","parent":"DTree_Node","type":"panelfunc","description":"\n\n\nReturns whether or not this node is drawing lines\n\t","realm":"Client","args":[]},
{"name":"GetChildNode","parent":"DTree_Node","type":"panelfunc","description":"\nReturns n-th child node.\n\nBasically an alias of Panel:GetChild.\n\t","realm":"Client","args":[]},
{"name":"GetDraggableName","parent":"DTree_Node","type":"panelfunc","description":"\n\n\nReturns what is set by DTree_Node:SetDraggableName.\n\t","realm":"Client","args":[]},
{"name":"ExpandRecurse","parent":"DTree_Node","type":"panelfunc","description":"\nExpands or collapses this node, as well as ALL child nodes of this node.\n\nWorks opposite of DTree_Node:ExpandTo.\n\t","realm":"Client","args":[]},
{"name":"FilePopulate","parent":"DTree_Node","type":"panelfunc","description":"\n\n\nCalled automatically from DTree_Node:PopulateChildrenAndSelf and DTree_Node:PopulateChildren to populate this node with child nodes of files and folders.\n\t","realm":"Client","args":[]},
{"name":"FilePopulateCallback","parent":"DTree_Node","type":"panelfunc","description":"\n\n\nCalled automatically from DTree_Node:FilePopulate to actually fill the node with sub-nodes based on set preferences like should files be added, etc.\n\t","realm":"Client","args":[]},
{"name":"GetDoubleClickToOpen","parent":"DTree_Node","type":"panelfunc","description":"Returns whether the double clock to collapse/expand functionality is enabled on this node.","realm":"Client","args":[]},
{"name":"DoRightClick","parent":"DTree_Node","type":"panelfunc","description":"\nCalled when the node is right clicked.\n\nSee also DTree_Node:DoClick.\n\t","realm":"Client","args":[]},
{"name":"Copy","parent":"DTree_Node","type":"panelfunc","description":"Create and returns a copy of this node, including all the sub-nodes.","realm":"Client","args":[]},
{"name":"CreateChildNodes","parent":"DTree_Node","type":"panelfunc","description":"\n\n\nCreates the container DListLayout for the DTree_Nodes.\n\nThis is called automatically so you don't have to.\n\t","realm":"Client","args":[]},
{"name":"DoChildrenOrder","parent":"DTree_Node","type":"panelfunc","description":"\n\n\nCalled automatically to update the status of DTree_Node:GetLastChild on children of this node.\n\t","realm":"Client","args":[]},
{"name":"ChildExpanded","parent":"DTree_Node","type":"panelfunc","description":"\n\n\nCalled when a child node is expanded or collapsed to propagate this event to parent nodes to update layout.\n\t","realm":"Client","args":[]},
{"name":"AnimSlide","parent":"DTree_Node","type":"panelfunc","description":"\n\n\nInternal function that handles the expand/collapse animations.\n\t","realm":"Client","args":[]},
{"name":"DoClick","parent":"DTree_Node","type":"panelfunc","description":"\nCalled when the node is clicked.\n\nSee also DTree_Node:DoRightClick.\n\t","realm":"Client","args":[]},
{"name":"CleanList","parent":"DTree_Node","type":"panelfunc","description":"\nCleans up the internal table of items (sub-nodes) of this node from invalid panels or sub-nodes that were moved from this node to another.\n\nAppears the be completely unused by the game on its own.\n\t","realm":"Client","args":[]},
{"name":"AddPanel","parent":"DTree_Node","type":"panelfunc","description":"\n\n\nAdds the given panel to the child nodes list, a DListLayout.\n\t","realm":"Client","args":[]},
{"name":"AddNode","parent":"DTree_Node","type":"panelfunc","description":"Add a child node to the DTree_Node","realm":"Client","args":[]},
{"name":"AddFolder","parent":"DTree_Node","type":"panelfunc","description":"A helper function that adds a new node and calls to DTree_Node:MakeFolder on it.","realm":"Client","args":[]},
{"name":"SetLineHeight","parent":"DTree","type":"panelfunc","description":"\nSets the height of each DTree_Node in the tree.\n\nThe default value is 17.\n\t","realm":"Client","args":[]},
{"name":"SetSelectedItem","parent":"DTree","type":"panelfunc","description":"Set the currently selected top-level node.","realm":"Client","args":[]},
{"name":"SetExpanded","parent":"DTree","type":"panelfunc","description":"\n\n\nDoes nothing. Is not called by the DTree itself.\n\nUsed as a placeholder empty function alongside DTree:ExpandTo, DTree:MoveChildTo and DTree:ChildExpanded to prevent errors when DTree_Node:SetExpanded is incorrectly used on a DTree.\n\t","realm":"Client","args":[]},
{"name":"SetShowIcons","parent":"DTree","type":"panelfunc","description":"\nSets whether or not the Silkicons next to each node of the DTree will be displayed.\n\nIndividual icons can be set with DTree_Node:SetIcon or passed as the second argument in DTree:AddNode.\n\t","realm":"Client","args":[]},
{"name":"SetIndentSize","parent":"DTree","type":"panelfunc","description":"\nSets the indentation size of the DTree, the distance between each \"level\" of the tree is offset on the left from the previous level.\n\nCurrently this feature has no effect on the DTree element.\n\t","realm":"Client","args":[]},
{"name":"ShowIcons","parent":"DTree","type":"panelfunc","description":"\nReturns whether or not the Silkicons next to each node of the DTree will be displayed.\n\nAlias of DTree:GetShowIcons.\n\t","realm":"Client","args":[]},
{"name":"SetClickOnDragHover","parent":"DTree","type":"panelfunc","description":"\nEnables the \"click when drag-hovering\" functionality.\n\nIf enabled, when hovering over any DTree_Node of this DTree while dragging a panel, the node will be automatically clicked on (and subsequently DTree:OnNodeSelected will be called) to open any attached panels, such as spawnlists in spawnmenu.\n\nSee also: PANEL:DragHoverClick.\n\t","realm":"Client","args":[]},
{"name":"Root","parent":"DTree","type":"panelfunc","description":"Returns the root DTree_Node, the node that is the parent to all other nodes of the DTree.","realm":"Client","args":[]},
{"name":"OnNodeSelected","parent":"DTree","type":"panelfunc","description":"This function is called when a node within a tree is selected.","realm":"Client","args":[]},
{"name":"GetIndentSize","parent":"DTree","type":"panelfunc","description":"\nReturns the indentation size of the DTree, the distance between each \"level\" of the tree is offset on the left from the previous level.\n\nCurrently this feature has no effect on the DTree element.\n\t","realm":"Client","args":[]},
{"name":"ExpandTo","parent":"DTree","type":"panelfunc","description":"\n\n\nDoes nothing. Used as a placeholder empty function alongside DTree:MoveChildTo, DTree:SetExpanded and DTree:ChildExpanded.\n\nThe DTree acts a root node and methods with the same name in DTree_Node call to the parent.\n\t","realm":"Client","args":[]},
{"name":"MoveChildTo","parent":"DTree","type":"panelfunc","description":"\nMoves given node to the top of DTrees children. (Makes it the topmost mode)\n\nUsed as a placeholder function alongside DTree:ExpandTo, DTree:SetExpanded and DTree:ChildExpanded.\n\nThe DTree acts a root node and methods with the same name in DTree_Node call to the parent.\n\t","realm":"Client","args":[]},
{"name":"GetLineHeight","parent":"DTree","type":"panelfunc","description":"Returns the height of each DTree_Node in the tree.","realm":"Client","args":[]},
{"name":"GetClickOnDragHover","parent":"DTree","type":"panelfunc","description":"Returns the status of DTree:SetClickOnDragHover. See that for more info.","realm":"Client","args":[]},
{"name":"DoRightClick","parent":"DTree","type":"panelfunc","description":"Called when the any node is right clicked. Called by DTree_Node:DoRightClick.","realm":"Client","args":[]},
{"name":"GetShowIcons","parent":"DTree","type":"panelfunc","description":"\nReturns whether or not the Silkicons next to each node of the DTree will be displayed.\n\nIndividual icons can be set with DTree_Node:SetIcon or passed as the second argument in DTree:AddNode.\n\t","realm":"Client","args":[]},
{"name":"DoClick","parent":"DTree","type":"panelfunc","description":"Called when the any node is clicked. Called by DTree_Node:DoClick.","realm":"Client","args":[]},
{"name":"GetSelectedItem","parent":"DTree","type":"panelfunc","description":"Returns the currently selected node.","realm":"Client","args":[]},
{"name":"LayoutTree","parent":"DTree","type":"panelfunc","description":"\n\n\nDoes nothing.\n\t","realm":"Client","args":[]},
{"name":"SetSpaceY","parent":"DTileLayout","type":"panelfunc","description":"Sets the spacing between 2 elements in the DTileLayout on the Y axis.","realm":"Client","args":[]},
{"name":"SetContents","parent":"DTooltip","type":"panelfunc","description":"\nWhat Panel you want put inside of the DTooltip\n\nYou can only have one Panel at a time; use Parenting to add more\n\t","realm":"Client","args":[]},
{"name":"DrawArrow","parent":"DTooltip","type":"panelfunc","description":"\nUsed to draw a triangle beneath the DTooltip\nRequires DTooltip:SetContents, without this it will error\n\t","realm":"Client","args":[]},
{"name":"PositionTooltip","parent":"DTooltip","type":"panelfunc","description":"\n\n\nPositions the DTooltip so it doesn't stay in the same draw position.\n\t","realm":"Client","args":[]},
{"name":"Close","parent":"DTooltip","type":"panelfunc","description":"Forces the tooltip to close. This will remove the panel.","realm":"Client","args":[]},
{"name":"OpenForPanel","parent":"DTooltip","type":"panelfunc","description":"Sets up the tooltip for display for given panel and starts the timer.","realm":"Client","args":[]},
{"name":"SetTile","parent":"DTileLayout","type":"panelfunc","description":" Called to set the occupied state of a tile.","realm":"Client","args":[]},
{"name":"SetSpaceX","parent":"DTileLayout","type":"panelfunc","description":"Sets the spacing between 2 elements in the DTileLayout on the X axis.","realm":"Client","args":[]},
{"name":"AddNode","parent":"DTree","type":"panelfunc","description":"Add a node to the DTree","realm":"Client","args":[]},
{"name":"ChildExpanded","parent":"DTree","type":"panelfunc","description":"\n\n\nCalls directly to Panel:InvalidateLayout.\nCalled by DTree_Nodes when a sub element has been expanded or collapsed.\n\nUsed as a placeholder function alongside DTree:ExpandTo, DTree:SetExpanded and DTree:MoveChildTo.\n\nThe DTree acts a root node and methods with the same name in DTree_Node call to the parent.\n\t","realm":"Client","args":[]},
{"name":"OnModified","parent":"DTileLayout","type":"panelfunc","description":"Called when anything is dropped on or rearranged within the DTileLayout.","realm":"Client","args":[]},
{"name":"GetMinHeight","parent":"DTileLayout","type":"panelfunc","description":"Returns the minimum height the DTileLayout can resize to.","realm":"Client","args":[]},
{"name":"SetBaseSize","parent":"DTileLayout","type":"panelfunc","description":"\nSets the size of a single tile. If a child panel is larger than this size, it will occupy several tiles.\n\nIf you are setting the size of the children properly then you probably don't need to change this.\n\t","realm":"Client","args":[]},
{"name":"SetBorder","parent":"DTileLayout","type":"panelfunc","description":"Sets the spacing between the border/edge of the DTileLayout and all the elements inside.","realm":"Client","args":[]},
{"name":"SetMinHeight","parent":"DTileLayout","type":"panelfunc","description":"Determines the minimum height the DTileLayout will resize to. This is useful if child panels will be added/removed often.","realm":"Client","args":[]},
{"name":"GetSpaceY","parent":"DTileLayout","type":"panelfunc","description":"Returns the Y axis spacing between 2 elements set by DTileLayout:SetSpaceY.","realm":"Client","args":[]},
{"name":"Layout","parent":"DTileLayout","type":"panelfunc","description":"Resets the last width/height info, and invalidates the panel's layout, causing it to recalculate all child positions. It is called whenever a child is added or removed, and can be called to refresh the panel.","realm":"Client","args":[]},
{"name":"LayoutTiles","parent":"DTileLayout","type":"panelfunc","description":" Called by PANEL:PerformLayout to arrange and lay out the child panels, if it has changed in size.","realm":"Client","args":[]},
{"name":"GetSpaceX","parent":"DTileLayout","type":"panelfunc","description":"Returns the X axis spacing between 2 elements set by DTileLayout:SetSpaceX.","realm":"Client","args":[]},
{"name":"GetTile","parent":"DTileLayout","type":"panelfunc","description":" Gets the occupied state of a tile.","realm":"Client","args":[]},
{"name":"FindFreeTile","parent":"DTileLayout","type":"panelfunc","description":" Finds the coordinates of the first group of free tiles that fit the given size.","realm":"Client","args":[]},
{"name":"ConsumeTiles","parent":"DTileLayout","type":"panelfunc","description":" Called to designate a range of tiles as occupied by a panel.","realm":"Client","args":[]},
{"name":"CopyContents","parent":"DTileLayout","type":"panelfunc","description":"Creates copies of all the children from the given panel object and parents them to this one.","realm":"Client","args":[]},
{"name":"GetBaseSize","parent":"DTileLayout","type":"panelfunc","description":"Returns the size of each single tile, set with DTileLayout:SetBaseSize.","realm":"Client","args":[]},
{"name":"FitsInTile","parent":"DTileLayout","type":"panelfunc","description":" Determines if a group of tiles is vacant.","realm":"Client","args":[]},
{"name":"SetValue","parent":"DTextEntry","type":"panelfunc","description":"Sets the text of the DTextEntry and calls DTextEntry:OnValueChange.","realm":"Client","args":[]},
{"name":"ClearTiles","parent":"DTileLayout","type":"panelfunc","description":" Clears the panel's tile table. Used by DTileLayout:LayoutTiles.","realm":"Client","args":[]},
{"name":"SetUpdateOnType","parent":"DTextEntry","type":"panelfunc","description":"Sets whether we should fire DTextEntry:OnValueChange every time we type or delete a character or only when Enter is pressed.","realm":"Client","args":[]},
{"name":"GetBorder","parent":"DTileLayout","type":"panelfunc","description":"Returns the border spacing set by DTileLayout:SetBorder.","realm":"Client","args":[]},
{"name":"Copy","parent":"DTileLayout","type":"panelfunc","description":"Creates and returns an exact copy of the DTileLayout.","realm":"Client","args":[]},
{"name":"SetNumeric","parent":"DTextEntry","type":"panelfunc","description":"\nSets whether or not to decline non-numeric characters as input.\n\nNumeric characters are 1234567890.-\n\t","realm":"Client","args":[]},
{"name":"SetTextColor","parent":"DTextEntry","type":"panelfunc","description":"Sets the text color of the DTextEntry.","realm":"Client","args":[]},
{"name":"SetPlaceholderColor","parent":"DTextEntry","type":"panelfunc","description":"Allow you to set placeholder color.","realm":"Client","args":[]},
{"name":"SetPlaceholderText","parent":"DTextEntry","type":"panelfunc","description":"Allow you to add a hint.","realm":"Client","args":[]},
{"name":"SetFont","parent":"DTextEntry","type":"panelfunc","description":"Changes the font of the DTextEntry.","realm":"Client","args":[]},
{"name":"SetMultiline","parent":"DTextEntry","type":"panelfunc","description":"Enables or disables the multi-line functionality of DTextEntry.","realm":"Client","args":[]},
{"name":"SetEnterAllowed","parent":"DTextEntry","type":"panelfunc","description":"Sets whether pressing the Enter key will cause the DTextEntry to lose focus or not, provided it is not multiline. This is true by default.","realm":"Client","args":[]},
{"name":"SetDisabled","parent":"DTextEntry","type":"panelfunc","description":"\nUse Panel:SetEnabled instead.\n\nDisables input on a DTextEntry and greys it out visually. This differs from DTextEntry:SetEditable which doesn't visually change the textbox.\n\t","realm":"Client","args":[]},
{"name":"SetEditable","parent":"DTextEntry","type":"panelfunc","description":"Disables Input on a DTextEntry. This differs from DTextEntry:SetDisabled - SetEditable will not affect the appearance of the textbox.","realm":"Client","args":[]},
{"name":"SetCursorColor","parent":"DTextEntry","type":"panelfunc","description":"Sets the cursor's color in  DTextEntry (the blinking line).","realm":"Client","args":[]},
{"name":"OpenAutoComplete","parent":"DTextEntry","type":"panelfunc","description":"\nYou really should be using DTextEntry:GetAutoComplete instead.\nBuilds a DMenu for the DTextEntry based on the input table.\n\t","realm":"Client","args":[]},
{"name":"OnTextChanged","parent":"DTextEntry","type":"panelfunc","description":"\nCalled internally when the text inside the DTextEntry changes.\n\nYou should not override this function. Use DTextEntry:OnValueChange instead.\n\t","realm":"Client","args":[]},
{"name":"OnEnter","parent":"DTextEntry","type":"panelfunc","description":"\nCalled whenever enter is pressed on a DTextEntry.\n\nDTextEntry:IsEditing will still return true in this callback!\n\t","realm":"Client","args":[]},
{"name":"IsEditing","parent":"DTextEntry","type":"panelfunc","description":"Returns whether this DTextEntry is being edited or not. (i.e. has focus)","realm":"Client","args":[]},
{"name":"OnValueChange","parent":"DTextEntry","type":"panelfunc","description":"\nCalled internally when the text changes of the DTextEntry are applied. (And set to the attached console variable, if one is given)\n\nSee also DTextEntry:OnChange for a function that is called on every text change, even if the console variable is not updated.\n\nYou should override this function to define custom behavior when the text changes.\n\nThis method is called:\n* When Enter is pressed after typing\n* When DTextEntry:SetValue is used\n* For every key typed - only if DTextEntry:SetUpdateOnType was set to true (default is false)\n\t","realm":"Client","args":[]},
{"name":"OnGetFocus","parent":"DTextEntry","type":"panelfunc","description":"Called whenever the DTextEntry gains focus.","realm":"Client","args":[]},
{"name":"OnKeyCodeTyped","parent":"DTextEntry","type":"panelfunc","description":"\nCalled whenever a valid character is typed while the text entry is focused.\n\nThis hook only works on panels derived from TextEntry, such as DTextEntry.\n\t","realm":"Client","args":[]},
{"name":"GetUpdateOnType","parent":"DTextEntry","type":"panelfunc","description":"Returns whether the DTextEntry is set to run DTextEntry:OnValueChange every time a character is typed or deleted or only when Enter is pressed.","realm":"Client","args":[]},
{"name":"OnChange","parent":"DTextEntry","type":"panelfunc","description":"\nCalled internally by DTextEntry:OnTextChanged when the user modifies the text in the DTextEntry.\n\nYou should override this function to define custom behavior when the DTextEntry text changes.\n\t","realm":"Client","args":[]},
{"name":"GetTextColor","parent":"DTextEntry","type":"panelfunc","description":"Returns the text color of a DTextEntry.","realm":"Client","args":[]},
{"name":"IsMultiline","parent":"DTextEntry","type":"panelfunc","description":"Determines whether or not DTextEntry is in multi-line mode. This is set with DTextEntry:SetMultiline.","realm":"Client","args":[]},
{"name":"GetPlaceholderColor","parent":"DTextEntry","type":"panelfunc","description":"Return current color of panel placeholder","realm":"Client","args":[]},
{"name":"GetInt","parent":"DTextEntry","type":"panelfunc","description":"Similar to DTextEntry:GetFloat, but rounds the value to the nearest integer.","realm":"Client","args":[]},
{"name":"GetEnterAllowed","parent":"DTextEntry","type":"panelfunc","description":"Returns whether pressing Enter can cause the panel to lose focus. Note that a multiline DTextEntry cannot be escaped using the Enter key even when this function returns true.","realm":"Client","args":[]},
{"name":"GetFloat","parent":"DTextEntry","type":"panelfunc","description":"Returns the contents of the DTextEntry as a number.","realm":"Client","args":[]},
{"name":"GetCursorColor","parent":"DTextEntry","type":"panelfunc","description":"Returns the cursor color of a DTextEntry.","realm":"Client","args":[]},
{"name":"GetNumeric","parent":"DTextEntry","type":"panelfunc","description":"Returns whether only numeric characters (123456789.-) can be entered into the DTextEntry.","realm":"Client","args":[]},
{"name":"CheckNumeric","parent":"DTextEntry","type":"panelfunc","description":"\nReturns whether a string is numeric or not.\nAlways returns false if the DTextEntry:SetNumeric is set to false.\n\t","realm":"Client","args":[]},
{"name":"SetRotation","parent":"DSprite","type":"panelfunc","description":"Sets the 2D rotation angle of the sprite, in the plane of the screen.","realm":"Client","args":[]},
{"name":"AllowInput","parent":"DTextEntry","type":"panelfunc","description":"\nCalled whenever the value of the panel has been updated (whether by user input or otherwise).\n\nIt allows you to determine whether a user can modify the TextEntry's text.\n\nBy default, this only checks whether the panel disallows numeric characters, preventing it from being edited if the value contains any.\n\nThis is actually an engine hook that only works on TextEntry derived elements.\n\t","realm":"Client","args":[]},
{"name":"GetAutoComplete","parent":"DTextEntry","type":"panelfunc","description":"Called by the DTextEntry when a list of autocompletion options is requested. Meant to be overridden.","realm":"Client","args":[]},
{"name":"GetHandle","parent":"DSprite","type":"panelfunc","description":"No Description","realm":"Client","args":[]},
{"name":"SetMaterial","parent":"DSprite","type":"panelfunc","description":"Sets the source material for the sprite.","realm":"Client","args":[]},
{"name":"GetMaterial","parent":"DSprite","type":"panelfunc","description":"Gets the material the sprite is using.","realm":"Client","args":[]},
{"name":"GetRotation","parent":"DSprite","type":"panelfunc","description":"Gets the 2D rotation angle of the sprite, in the plane of the screen.","realm":"Client","args":[]},
{"name":"SetHandle","parent":"DSprite","type":"panelfunc","description":"Seems to be an unused feature. Does nothing.","realm":"Client","args":[]},
{"name":"SetColor","parent":"DSprite","type":"panelfunc","description":"Sets the color modifier for the sprite.","realm":"Client","args":[]},
{"name":"SetTrapInside","parent":"DSlider","type":"panelfunc","description":"\n\n\nAppears to be non functioning, however is still used by panels such as DNumSlider.\n\t","realm":"Client","args":[]},
{"name":"SetSlideY","parent":"DSlider","type":"panelfunc","description":"\n\n\nUsed to position the draggable panel of the slider on the Y axis.\n\t","realm":"Client","args":[]},
{"name":"GetColor","parent":"DSprite","type":"panelfunc","description":"Gets the color the sprite is using as a modifier.","realm":"Client","args":[]},
{"name":"TranslateValues","parent":"DSlider","type":"panelfunc","description":"For override by child panels, such as DNumSlider.","realm":"Client","args":[]},
{"name":"SetLockY","parent":"DSlider","type":"panelfunc","description":"\nSets the lock on the Y axis. \n\nFor example the value 0.5 will lock the draggable panel to half the height of the slider's panel.\n\t","realm":"Client","args":[]},
{"name":"SetSlideX","parent":"DSlider","type":"panelfunc","description":"\n\n\nUsed to position the draggable panel of the slider on the X axis.\n\t","realm":"Client","args":[]},
{"name":"SetLockX","parent":"DSlider","type":"panelfunc","description":"\nSets the lock on the X axis. \n\nFor example the value 0.5 will lock the draggable panel to half the width of the slider's panel.\n\t","realm":"Client","args":[]},
{"name":"SetNumSlider","parent":"DSlider","type":"panelfunc","description":"\n\n\nDoes nothing.\n\t","realm":"Client","args":[]},
{"name":"SetNotches","parent":"DSlider","type":"panelfunc","description":"\n\n\nAppears to be non functioning, however is still used by panels such as DNumSlider.\n\t","realm":"Client","args":[]},
{"name":"SetImageColor","parent":"DSlider","type":"panelfunc","description":"\n\n\nDoes nothing.\n\t","realm":"Client","args":[]},
{"name":"SetImage","parent":"DSlider","type":"panelfunc","description":"\n\n\nDoes nothing.\n\t","realm":"Client","args":[]},
{"name":"SetBackground","parent":"DSlider","type":"panelfunc","description":"Sets the background for the slider.","realm":"Client","args":[]},
{"name":"IsEditing","parent":"DSlider","type":"panelfunc","description":"Returns true if this element is being edited by the player.","realm":"Client","args":[]},
{"name":"SetDragging","parent":"DSlider","type":"panelfunc","description":"\n\n\nSets whether or not the slider is being dragged.\n\t","realm":"Client","args":[]},
{"name":"GetLockY","parent":"DSlider","type":"panelfunc","description":"\nReturns the draggable panel's lock on the Y axis.\n\nSee DSlider:SetLockY for more info.\n\t","realm":"Client","args":[]},
{"name":"GetNotches","parent":"DSlider","type":"panelfunc","description":"\n\n\nAppears to be non functioning, however is still used by panels such as DNumSlider.\n\t","realm":"Client","args":[]},
{"name":"GetSlideY","parent":"DSlider","type":"panelfunc","description":"\nReturns the target position of the draggable \"knob\" panel of the slider on the Y axis.\n\nSet by DSlider:SetSlideY.\n\t","realm":"Client","args":[]},
{"name":"GetTrapInside","parent":"DSlider","type":"panelfunc","description":"\n\n\nAppears to be non functioning, however is still used by panels such as DNumSlider.\n\t","realm":"Client","args":[]},
{"name":"GetSlideX","parent":"DSlider","type":"panelfunc","description":"\nReturns the target position of the draggable \"knob\" panel of the slider on the X axis.\n\nSet by DSlider:SetSlideX.\n\t","realm":"Client","args":[]},
{"name":"GetNumSlider","parent":"DSlider","type":"panelfunc","description":"\n\n\nDoes nothing.\n\t","realm":"Client","args":[]},
{"name":"GetLockX","parent":"DSlider","type":"panelfunc","description":"\nReturns the draggable panel's lock on the X axis.\n\nSee DSlider:SetLockX for more info.\n\t","realm":"Client","args":[]},
{"name":"GetDragging","parent":"DSlider","type":"panelfunc","description":"Identical to DSlider:IsEditing","realm":"Client","args":[]},
{"name":"SetColor","parent":"DShape","type":"panelfunc","description":"Sets the color to display the shape with.","realm":"Client","args":[]},
{"name":"SetType","parent":"DShape","type":"panelfunc","description":"Sets the shape to be drawn.","realm":"Client","args":[]},
{"name":"SetCanvas","parent":"DScrollPanel","type":"panelfunc","description":"Sets the canvas of the DScrollPanel.","realm":"Client","args":[]},
{"name":"GetColor","parent":"DShape","type":"panelfunc","description":"Returns the color set to display the shape with.","realm":"Client","args":[]},
{"name":"SetBorderColor","parent":"DShape","type":"panelfunc","description":"\nSets the border color of the shape.\n\nCurrently does nothing.\n\t","realm":"Client","args":[]},
{"name":"SetPadding","parent":"DScrollPanel","type":"panelfunc","description":"Sets the DScrollPanel's padding. This function appears to be unused.","realm":"Client","args":[]},
{"name":"GetType","parent":"DShape","type":"panelfunc","description":"\nReturns the current type of shape this panel is set to display.\n\nSee DShape:SetType.\n\t","realm":"Client","args":[]},
{"name":"GetBorderColor","parent":"DShape","type":"panelfunc","description":"\nReturns the current type of shape this panel is set to display.\n\nSee DShape:SetBorderColor.\n\t","realm":"Client","args":[]},
{"name":"Rebuild","parent":"DScrollPanel","type":"panelfunc","description":"","realm":"Client","args":[]},
{"name":"GetVBar","parent":"DScrollPanel","type":"panelfunc","description":"Returns the vertical scroll bar of the panel.","realm":"Client","args":[]},
{"name":"InnerWidth","parent":"DScrollPanel","type":"panelfunc","description":"Return the width of the DScrollPanel's canvas.","realm":"Client","args":[]},
{"name":"ScrollToChild","parent":"DScrollPanel","type":"panelfunc","description":"Scrolls to the given child","realm":"Client","args":[]},
{"name":"OnChange","parent":"DRGBPicker","type":"panelfunc","description":"Function which is called when the cursor is clicked and/or moved on the color picker. Meant to be overridden.","realm":"Client","args":[]},
{"name":"GetCanvas","parent":"DScrollPanel","type":"panelfunc","description":"Returns the canvas ( The panel all child panels are parented to ) of the DScrollPanel.","realm":"Client","args":[]},
{"name":"AddItem","parent":"DScrollPanel","type":"panelfunc","description":"Parents the passed panel to the DScrollPanel's canvas.","realm":"Client","args":[]},
{"name":"SetRGB","parent":"DRGBPicker","type":"panelfunc","description":"\nSets the color stored in the color picker.\n\nThis function is meant to be called internally and will not update the position of the color picker line or call DRGBPicker:OnChange\n\t","realm":"Client","args":[]},
{"name":"GetPadding","parent":"DScrollPanel","type":"panelfunc","description":"Gets the DScrollPanels padding","realm":"Client","args":[]},
{"name":"GetRGB","parent":"DRGBPicker","type":"panelfunc","description":"Returns the color currently set on the color picker.","realm":"Client","args":[]},
{"name":"GetPosColor","parent":"DRGBPicker","type":"panelfunc","description":"\n\n\nReturns the color at given position on the internal texture.\n\t","realm":"Client","args":[]},
{"name":"SizeToContentWidth","parent":"DPropertySheet","type":"panelfunc","description":"Sets the width of the DPropertySheet to fit the contents of all of the tabs.","realm":"Client","args":[]},
{"name":"SetupCloseButton","parent":"DPropertySheet","type":"panelfunc","description":"Creates a close button on the right side of the DPropertySheet that will run the given callback function when pressed.","realm":"Client","args":[]},
{"name":"SwitchToName","parent":"DPropertySheet","type":"panelfunc","description":"Switches the active tab to a tab with given name.","realm":"Client","args":[]},
{"name":"SetPadding","parent":"DPropertySheet","type":"panelfunc","description":"Sets the padding from parent panel to children panel.","realm":"Client","args":[]},
{"name":"SetFadeTime","parent":"DPropertySheet","type":"panelfunc","description":"Sets the amount of time (in seconds) it takes to fade between tabs.","realm":"Client","args":[]},
{"name":"SetShowIcons","parent":"DPropertySheet","type":"panelfunc","description":"\n\n\nDoes nothing.\n\t","realm":"Client","args":[]},
{"name":"SetActiveTab","parent":"DPropertySheet","type":"panelfunc","description":"Sets the active tab of the DPropertySheet.","realm":"Client","args":[]},
{"name":"OnActiveTabChanged","parent":"DPropertySheet","type":"panelfunc","description":"Called when a player switches the tabs","realm":"Client","args":[]},
{"name":"GetShowIcons","parent":"DPropertySheet","type":"panelfunc","description":"\n\n\nReturns whatever value was set by DPropertySheet:SetShowIcons.\n\t","realm":"Client","args":[]},
{"name":"GetFadeTime","parent":"DPropertySheet","type":"panelfunc","description":"\nReturns the amount of time (in seconds) it takes to fade between tabs.\n\nSet by DPropertySheet:SetFadeTime\n\t","realm":"Client","args":[]},
{"name":"GetActiveTab","parent":"DPropertySheet","type":"panelfunc","description":"Returns the active DTab of this DPropertySheet.","realm":"Client","args":[]},
{"name":"GetPadding","parent":"DPropertySheet","type":"panelfunc","description":"Gets the padding from the parent panel to child panels.","realm":"Client","args":[]},
{"name":"GetItems","parent":"DPropertySheet","type":"panelfunc","description":"Returns a list of all tabs of this DPropertySheet.","realm":"Client","args":[]},
{"name":"SetValue","parent":"DProperty_VectorColor","type":"panelfunc","description":"Sets the color value of the property.","realm":"Client","args":[]},
{"name":"CloseTab","parent":"DPropertySheet","type":"panelfunc","description":"Removes tab and/or panel from the parent DPropertySheet.","realm":"Client","args":[]},
{"name":"CrossFade","parent":"DPropertySheet","type":"panelfunc","description":"\n\n\nInternal function that handles the cross fade animation when the player switches tabs.\n\t","realm":"Client","args":[]},
{"name":"AddSheet","parent":"DPropertySheet","type":"panelfunc","description":"Adds a new tab.","realm":"Client","args":[]},
{"name":"Setup","parent":"DProperty_Combo","type":"panelfunc","description":"Sets up a combo control.","realm":"Client","args":[]},
{"name":"Setup","parent":"DProperty_VectorColor","type":"panelfunc","description":" Called by a property row to setup a color selection control.","realm":"Client","args":[]},
{"name":"SetSelected","parent":"DProperty_Combo","type":"panelfunc","description":"Set the selected option.","realm":"Client","args":[]},
{"name":"DataChanged","parent":"DProperty_Combo","type":"panelfunc","description":"Called after the user selects a new value.","realm":"Client","args":[]},
{"name":"AddChoice","parent":"DProperty_Combo","type":"panelfunc","description":"Add a choice to your combo control.","realm":"Client","args":[]},
{"name":"GetCategory","parent":"DProperties","type":"panelfunc","description":"\n\n\nReturns (or creates) a category of properties.\n\nSee DProperties:CreateRow for adding actual properties.\n\t","realm":"Client","args":[]},
{"name":"SetFraction","parent":"DProgress","type":"panelfunc","description":"Sets the fraction of the progress bar. 0 is 0% and 1 is 100%.","realm":"Client","args":[]},
{"name":"PaintInnerCorners","parent":"DPanelOverlay","type":"panelfunc","description":"Used internally by the panel for types 1 and 2.","realm":"Client","args":[]},
{"name":"SetColor","parent":"DPanelOverlay","type":"panelfunc","description":"Sets the border color of the DPanelOverlay.","realm":"Client","args":[]},
{"name":"CreateRow","parent":"DProperties","type":"panelfunc","description":"Creates a row in the properties panel.","realm":"Client","args":[]},
{"name":"GetFraction","parent":"DProgress","type":"panelfunc","description":"Returns the progress bar's fraction. 0 is 0% and 1 is 100%.","realm":"Client","args":[]},
{"name":"SetType","parent":"DPanelOverlay","type":"panelfunc","description":"Sets the type of the DPanelOverlay.","realm":"Client","args":[]},
{"name":"GetCanvas","parent":"DProperties","type":"panelfunc","description":"Returns the DScrollPanel all the properties panels are attached to.","realm":"Client","args":[]},
{"name":"PaintDifferentColours","parent":"DPanelOverlay","type":"panelfunc","description":"Used internally by the panel for type 3.","realm":"Client","args":[]},
{"name":"GetType","parent":"DPanelOverlay","type":"panelfunc","description":"Returns the type of the DPanelOverlay set by DPanelOverlay:SetType.","realm":"Client","args":[]},
{"name":"GetColor","parent":"DPanelOverlay","type":"panelfunc","description":"Returns the border color of the DPanelOverlay set by DPanelOverlay:SetColor.","realm":"Client","args":[]},
{"name":"SetSpacing","parent":"DPanelList","type":"panelfunc","description":"Sets distance between list items","realm":"Client","args":[]},
{"name":"GetSpacing","parent":"DPanelList","type":"panelfunc","description":"Returns distance between list items set by DPanelList:SetSpacing","realm":"Client","args":[]},
{"name":"SetPadding","parent":"DPanelList","type":"panelfunc","description":"Sets the offset of the lists items from the panel borders","realm":"Client","args":[]},
{"name":"GetItems","parent":"DPanelList","type":"panelfunc","description":"Returns all panels has added by DPanelList:AddItem","realm":"Client","args":[]},
{"name":"InsertAtTop","parent":"DPanelList","type":"panelfunc","description":"","realm":"Client","args":[]},
{"name":"EnableVerticalScrollbar","parent":"DPanelList","type":"panelfunc","description":"Enables/creates the vertical scroll bar so that the panel list can be scrolled through.","realm":"Client","args":[]},
{"name":"GetPadding","parent":"DPanelList","type":"panelfunc","description":"Returns offset of list items from the panel borders set by DPanelList:SetPadding","realm":"Client","args":[]},
{"name":"CleanList","parent":"DPanelList","type":"panelfunc","description":"Removes all items.","realm":"Client","args":[]},
{"name":"SetPaintBackground","parent":"DPanel","type":"panelfunc","description":"Sets whether or not to paint/draw the panel background.","realm":"Client","args":[]},
{"name":"AddItem","parent":"DPanelList","type":"panelfunc","description":"Adds a existing panel to the end of DPanelList.","realm":"Client","args":[]},
{"name":"SetDrawBackground","parent":"DPanel","type":"panelfunc","description":"You should use DPanel:SetPaintBackground instead.Sets whether or not to draw the panel background. Alias of DPanel:SetPaintBackground.","realm":"Client","args":[]},
{"name":"GetBackgroundColor","parent":"DPanel","type":"panelfunc","description":"\nReturns the panel's background color.\n\nBy default this returns **nil** even though the default background color is white\n\t","realm":"Client","args":[]},
{"name":"SetDisabled","parent":"DPanel","type":"panelfunc","description":"Sets whether or not to disable the panel.","realm":"Client","args":[]},
{"name":"GetDisabled","parent":"DPanel","type":"panelfunc","description":"Returns whether or not the panel is disabled.","realm":"Client","args":[]},
{"name":"SetBackgroundColor","parent":"DPanel","type":"panelfunc","description":"Sets the background color of the panel.","realm":"Client","args":[]},
{"name":"GetDrawBackground","parent":"DPanel","type":"panelfunc","description":"You should use DPanel:GetPaintBackground instead.Returns whether or not the panel background is being drawn. Alias of DPanel:GetPaintBackground.","realm":"Client","args":[]},
{"name":"GetPaintBackground","parent":"DPanel","type":"panelfunc","description":"Returns whether or not the panel background is being drawn.","realm":"Client","args":[]},
{"name":"ValueChanged","parent":"DNumSlider","type":"panelfunc","description":"\n Called when the value has been changed. This will also be called when the user manually changes the value through the text panel.\n\nThis is an internal function. Override DNumSlider:OnValueChanged instead.\n\t","realm":"Client","args":[]},
{"name":"TranslateSliderValues","parent":"DNumSlider","type":"panelfunc","description":"","realm":"Client","args":[]},
{"name":"UpdateNotches","parent":"DNumSlider","type":"panelfunc","description":"","realm":"Client","args":[]},
{"name":"SetMax","parent":"DNumSlider","type":"panelfunc","description":"Sets the maximum value for the slider.","realm":"Client","args":[]},
{"name":"SetMinMax","parent":"DNumSlider","type":"panelfunc","description":"Sets the minimum and the maximum value of the slider.","realm":"Client","args":[]},
{"name":"SetMin","parent":"DNumSlider","type":"panelfunc","description":"Sets the minimum value for the slider","realm":"Client","args":[]},
{"name":"SetDefaultValue","parent":"DNumSlider","type":"panelfunc","description":"Sets the default value of the slider, to be used by DNumSlider:ResetToDefaultValue or by middle mouse clicking the draggable knob of the slider.","realm":"Client","args":[]},
{"name":"OnValueChanged","parent":"DNumSlider","type":"panelfunc","description":"Called when the value of the slider is changed, through code or changing the slider.","realm":"Client","args":[]},
{"name":"ResetToDefaultValue","parent":"DNumSlider","type":"panelfunc","description":"\nResets the slider to the default value, if one was set by DNumSlider:SetDefaultValue.\n\nThis function is called by the DNumSlider when user middle mouse clicks on the draggable knob of the slider.\n\t","realm":"Client","args":[]},
{"name":"SetConVar","parent":"DNumSlider","type":"panelfunc","description":"Sets the console variable to be updated when the value of the slider is changed.","realm":"Client","args":[]},
{"name":"SetDark","parent":"DNumSlider","type":"panelfunc","description":"Calls DLabel:SetDark on the DLabel part of the DNumSlider.","realm":"Client","args":[]},
{"name":"SetValue","parent":"DNumSlider","type":"panelfunc","description":"Sets the value of the DNumSlider.","realm":"Client","args":[]},
{"name":"SetDecimals","parent":"DNumSlider","type":"panelfunc","description":"Sets the desired amount of numbers after the decimal point.","realm":"Client","args":[]},
{"name":"GetValue","parent":"DNumSlider","type":"panelfunc","description":"Returns the value of the DNumSlider","realm":"Client","args":[]},
{"name":"GetTextArea","parent":"DNumSlider","type":"panelfunc","description":"Returns the DTextEntry component of the slider.","realm":"Client","args":[]},
{"name":"IsEditing","parent":"DNumSlider","type":"panelfunc","description":"Returns true if either the DTextEntry, the DSlider or the DNumberScratch are being edited.","realm":"Client","args":[]},
{"name":"GetDefaultValue","parent":"DNumSlider","type":"panelfunc","description":"Returns the default value of the slider, if one was set by DNumSlider:SetDefaultValue","realm":"Client","args":[]},
{"name":"GetRange","parent":"DNumSlider","type":"panelfunc","description":"Returns the range of the slider, basically maximum value - minimum value.","realm":"Client","args":[]},
{"name":"SetValue","parent":"DNumberWang","type":"panelfunc","description":"Sets the value of the DNumberWang and triggers DNumberWang:OnValueChanged","realm":"Client","args":[]},
{"name":"GetMin","parent":"DNumSlider","type":"panelfunc","description":"Returns the minimum value of the slider","realm":"Client","args":[]},
{"name":"SetMinMax","parent":"DNumberWang","type":"panelfunc","description":"Sets the minimum and maximum value allowed by the number selector.","realm":"Client","args":[]},
{"name":"GetMax","parent":"DNumSlider","type":"panelfunc","description":"Returns the maximum value of the slider","realm":"Client","args":[]},
{"name":"GetDecimals","parent":"DNumSlider","type":"panelfunc","description":"Returns the amount of numbers after the decimal point.","realm":"Client","args":[]},
{"name":"SetMax","parent":"DNumberWang","type":"panelfunc","description":"Sets the maximum numeric value allowed by the number selector.","realm":"Client","args":[]},
{"name":"SetMin","parent":"DNumberWang","type":"panelfunc","description":"Sets the minimum numeric value allowed by the number selector.","realm":"Client","args":[]},
{"name":"SetFraction","parent":"DNumberWang","type":"panelfunc","description":"Sets the value of the number selector based on the given fraction number.","realm":"Client","args":[]},
{"name":"OnValueChanged","parent":"DNumberWang","type":"panelfunc","description":"Internal function which is called when the number selector value is changed. This function is empty by default so it needs to be overridden in order to provide functionality.","realm":"Client","args":[]},
{"name":"SetDecimals","parent":"DNumberWang","type":"panelfunc","description":"Sets the amount of decimal places allowed in the number selector.","realm":"Client","args":[]},
{"name":"GetValue","parent":"DNumberWang","type":"panelfunc","description":"Returns the numeric value inside the number selector.","realm":"Client","args":[]},
{"name":"SetFloatValue","parent":"DNumberWang","type":"panelfunc","description":"\n\n\nAppears to do nothing.\n\t","realm":"Client","args":[]},
{"name":"GetTextArea","parent":"DNumberWang","type":"panelfunc","description":"\n\n\nThis function returns the panel it is used on.\n\t","realm":"Client","args":[]},
{"name":"GetMin","parent":"DNumberWang","type":"panelfunc","description":"Returns the minimum numeric value allowed by the number selector.","realm":"Client","args":[]},
{"name":"GetFloatValue","parent":"DNumberWang","type":"panelfunc","description":"\n\n\nReturns whatever is set by DNumberWang:SetFloatValue or 0.\n\t","realm":"Client","args":[]},
{"name":"GetFraction","parent":"DNumberWang","type":"panelfunc","description":"Returns a fraction representing the current number selector value to number selector min/max range ratio. If argument `val` is supplied, that number will be computed instead.","realm":"Client","args":[]},
{"name":"HideWang","parent":"DNumberWang","type":"panelfunc","description":"Hides the number selector arrows.","realm":"Client","args":[]},
{"name":"GetMax","parent":"DNumberWang","type":"panelfunc","description":"Returns the maximum numeric value allowed by the number selector.","realm":"Client","args":[]},
{"name":"UpdateConVar","parent":"DNumberScratch","type":"panelfunc","description":"\n\n\nForces the assigned ConVar to be updated to the value of this DNumberScratch\n\t","realm":"Client","args":[]},
{"name":"GetDecimals","parent":"DNumberWang","type":"panelfunc","description":"Returns the amount of decimal places allowed in the number selector, set by DNumberWang:SetDecimals","realm":"Client","args":[]},
{"name":"SetValue","parent":"DNumberScratch","type":"panelfunc","description":"Sets the value of the DNumberScratch and triggers DNumberScratch:OnValueChanged","realm":"Client","args":[]},
{"name":"SetShouldDrawScreen","parent":"DNumberScratch","type":"panelfunc","description":"\n\n\nSets if the scratch window should be drawn or not. Cannot be used to force it to draw, only to hide it, which will not stop the panel from working with invisible window.\n\t","realm":"Client","args":[]},
{"name":"SetZoom","parent":"DNumberScratch","type":"panelfunc","description":"Sets the zoom level of the scratch panel.","realm":"Client","args":[]},
{"name":"SetFraction","parent":"DNumberScratch","type":"panelfunc","description":"Sets the value of the DNumberScratch as a fraction, a value between 0 and 1 where 0 is the minimum and 1 is the maximum value of the DNumberScratch","realm":"Client","args":[]},
{"name":"SetMin","parent":"DNumberScratch","type":"panelfunc","description":"Sets the minimum value that can be selected on the number scratch.","realm":"Client","args":[]},
{"name":"SetFloatValue","parent":"DNumberScratch","type":"panelfunc","description":"\n\n\nDoes not trigger DNumberScratch:OnValueChanged\n\nUse DNumberScratch:SetValue instead.\n\t","realm":"Client","args":[]},
{"name":"SetDecimals","parent":"DNumberScratch","type":"panelfunc","description":"Sets the desired amount of numbers after the decimal point.","realm":"Client","args":[]},
{"name":"SetMax","parent":"DNumberScratch","type":"panelfunc","description":"Sets the max value that can be selected on the number scratch","realm":"Client","args":[]},
{"name":"PaintScratchWindow","parent":"DNumberScratch","type":"panelfunc","description":"\n\n\nUsed to paint the 'scratch' window.\n\t","realm":"Client","args":[]},
{"name":"OnValueChanged","parent":"DNumberScratch","type":"panelfunc","description":"Called when the value of the DNumberScratch is changed.","realm":"Client","args":[]},
{"name":"SetActive","parent":"DNumberScratch","type":"panelfunc","description":"\n\n\nSets whether or not the panel is 'active'.\n\nForcing this panel to be active may not work.\n\t","realm":"Client","args":[]},
{"name":"IsEditing","parent":"DNumberScratch","type":"panelfunc","description":"Returns whether the player is currently editing the value of the DNumberScratch.","realm":"Client","args":[]},
{"name":"LockCursor","parent":"DNumberScratch","type":"panelfunc","description":"\n\n\nUsed to lock the cursor in place.\n\t","realm":"Client","args":[]},
{"name":"GetTextValue","parent":"DNumberScratch","type":"panelfunc","description":"\nReturns the real value of the DNumberScratch as a string.\n\nSee also DNumberScratch:GetFloatValue and DNumberScratch:GetFraction.\n\t","realm":"Client","args":[]},
{"name":"GetMin","parent":"DNumberScratch","type":"panelfunc","description":"Returns the minimum value that can be selected on the number scratch","realm":"Client","args":[]},
{"name":"GetShouldDrawScreen","parent":"DNumberScratch","type":"panelfunc","description":"Returns whether the scratch window should be visible or not.","realm":"Client","args":[]},
{"name":"GetRange","parent":"DNumberScratch","type":"panelfunc","description":"Returns the range of the DNumberScratch. Basically max value - min value.","realm":"Client","args":[]},
{"name":"IdealZoom","parent":"DNumberScratch","type":"panelfunc","description":"Returns the ideal zoom level for the panel based on the DNumberScratch:GetRange.","realm":"Client","args":[]},
{"name":"GetZoom","parent":"DNumberScratch","type":"panelfunc","description":"Returns the zoom level of the scratch window","realm":"Client","args":[]},
{"name":"GetMax","parent":"DNumberScratch","type":"panelfunc","description":"Returns the maximum value that can be selected on the number scratch","realm":"Client","args":[]},
{"name":"GetFraction","parent":"DNumberScratch","type":"panelfunc","description":"\nReturns the value of the DNumberScratch as a fraction, a value between 0 and 1 where 0 is the minimum and 1 is the maximum value of the DNumberScratch.\n\nSee also:\n* DNumberScratch:GetTextValue\n* DNumberScratch:GetFloatValue\n* DNumberScratch:SetFraction\n\t","realm":"Client","args":[]},
{"name":"GetDecimals","parent":"DNumberScratch","type":"panelfunc","description":"Returns the desired amount of numbers after the decimal point.","realm":"Client","args":[]},
{"name":"GetFloatValue","parent":"DNumberScratch","type":"panelfunc","description":"\nReturns the real value of the DNumberScratch as a number.\n\nSee also DNumberScratch:GetTextValue and DNumberScratch:GetFraction.\n\t","realm":"Client","args":[]},
{"name":"DrawNotches","parent":"DNumberScratch","type":"panelfunc","description":"\n\n\nUsed by DNumberScratch:DrawScreen.\n\t","realm":"Client","args":[]},
{"name":"DrawScreen","parent":"DNumberScratch","type":"panelfunc","description":"\n\n\nUsed by DNumberScratch:PaintScratchWindow.\n\t","realm":"Client","args":[]},
{"name":"GetActive","parent":"DNumberScratch","type":"panelfunc","description":"Returns whether this panel is active or not, i.e. if the player is currently changing its value.","realm":"Client","args":[]},
{"name":"Shuffle","parent":"DNotify","type":"panelfunc","description":"","realm":"Client","args":[]},
{"name":"SetAlignment","parent":"DNotify","type":"panelfunc","description":"Sets the alignment of the child panels in the notification","realm":"Client","args":[]},
{"name":"SetLife","parent":"DNotify","type":"panelfunc","description":"Sets the display time in seconds for the DNotify.","realm":"Client","args":[]},
{"name":"SetSpacing","parent":"DNotify","type":"panelfunc","description":"Sets the spacing between child elements of the notification panel.","realm":"Client","args":[]},
{"name":"GetSpacing","parent":"DNotify","type":"panelfunc","description":"Returns the spacing between items set by DNotify:SetSpacing.","realm":"Client","args":[]},
{"name":"GetItems","parent":"DNotify","type":"panelfunc","description":"Returns all the items added with DNotify:AddItem.","realm":"Client","args":[]},
{"name":"GetLife","parent":"DNotify","type":"panelfunc","description":"\nReturns the display time in seconds of the DNotify. This is set with \nDNotify:SetLife.\n\t","realm":"Client","args":[]},
{"name":"StartScene","parent":"DModelPanel","type":"panelfunc","description":"No Description","realm":"Client","args":[]},
{"name":"SetLookAt","parent":"DModelPanel","type":"panelfunc","description":"Makes the panel's camera face the given position.","realm":"Client","args":[]},
{"name":"SetHeight","parent":"DModelSelect","type":"panelfunc","description":"\nSets the height of the panel **in the amount of 64px spawnicons**.\n\nOverrides Panel:SetHeight.\n\t","realm":"Client","args":[]},
{"name":"GetAlignment","parent":"DNotify","type":"panelfunc","description":"Returns the current alignment of this notification panel. Set by DNotify:SetAlignment.","realm":"Client","args":[]},
{"name":"AddItem","parent":"DNotify","type":"panelfunc","description":"Adds a panel to the notification","realm":"Client","args":[]},
{"name":"SetModel","parent":"DModelPanel","type":"panelfunc","description":"Sets the model of the rendered entity.","realm":"Client","args":[]},
{"name":"SetModelList","parent":"DModelSelect","type":"panelfunc","description":"Called to set the list of models within the panel element.","realm":"Client","args":[]},
{"name":"SetLookAng","parent":"DModelPanel","type":"panelfunc","description":"Sets the angles of the camera.","realm":"Client","args":[]},
{"name":"SetEntity","parent":"DModelPanel","type":"panelfunc","description":"\nSets the entity to be rendered by the model panel.\n\nIf you set `ent` to a shared entity you must set `ent` to nil before removing this panel or else a \"Trying to remove server entity on client!\" error is thrown\n\t","realm":"Client","args":[]},
{"name":"SetFOV","parent":"DModelPanel","type":"panelfunc","description":"Sets the panel camera's FOV (field of view).","realm":"Client","args":[]},
{"name":"SetCamPos","parent":"DModelPanel","type":"panelfunc","description":"Sets the position of the camera.","realm":"Client","args":[]},
{"name":"SetDirectionalLight","parent":"DModelPanel","type":"panelfunc","description":"Sets the directional lighting used on the rendered entity.","realm":"Client","args":[]},
{"name":"SetAmbientLight","parent":"DModelPanel","type":"panelfunc","description":"Sets the ambient lighting used on the rendered entity.","realm":"Client","args":[]},
{"name":"SetAnimated","parent":"DModelPanel","type":"panelfunc","description":"Sets whether or not to animate the entity when the default DModelPanel:LayoutEntity is called.","realm":"Client","args":[]},
{"name":"SetAnimSpeed","parent":"DModelPanel","type":"panelfunc","description":"\nSets the speed used by DModelPanel:RunAnimation to advance frame on an entity sequence.\n\nEntity:FrameAdvance doesn't seem to have any functioning arguments and therefore changing this will not have any affect on the panel entity's sequence speed without reimplementation. It only affects the value returned by DModelPanel:GetAnimSpeed\n\t","realm":"Client","args":[]},
{"name":"RunAnimation","parent":"DModelPanel","type":"panelfunc","description":"This function is used in the **DModelPanel:LayoutEntity**. It will set the active model to the last set animation using Entity:SetSequence. By default, it is the walking animation.","realm":"Client","args":[]},
{"name":"SetColor","parent":"DModelPanel","type":"panelfunc","description":"\nSets the color of the rendered entity.\n\nThis does not work on Garry's Mod player models since they use a different color system. To modify a player model color, see Example 2 on the DModelPanel page\n\t","realm":"Client","args":[]},
{"name":"LayoutEntity","parent":"DModelPanel","type":"panelfunc","description":"\n By default, this function slowly rotates and animates the entity being rendered.\n\nIf you want to change this behavior, you should override it.\n\t","realm":"Client","args":[]},
{"name":"PostDrawModel","parent":"DModelPanel","type":"panelfunc","description":"\nCalled when the entity of the DModelPanel was drawn.\n\nThis is a rendering hook with 3d drawing context.\n\t","realm":"Client","args":[]},
{"name":"PreDrawModel","parent":"DModelPanel","type":"panelfunc","description":"Called **before** the entity of the DModelPanel is drawn.","realm":"Client","args":[]},
{"name":"GetFOV","parent":"DModelPanel","type":"panelfunc","description":"Returns the FOV (field of view) the camera is using.","realm":"Client","args":[]},
{"name":"GetModel","parent":"DModelPanel","type":"panelfunc","description":"Gets the model of the rendered entity.","realm":"Client","args":[]},
{"name":"GetLookAng","parent":"DModelPanel","type":"panelfunc","description":"Returns the angles of the model viewing camera. Is **nil** until changed with DModelPanel:SetLookAng.","realm":"Client","args":[]},
{"name":"GetCamPos","parent":"DModelPanel","type":"panelfunc","description":"Returns the position of the model viewing camera.","realm":"Client","args":[]},
{"name":"GetColor","parent":"DModelPanel","type":"panelfunc","description":"Returns the color of the rendered entity.","realm":"Client","args":[]},
{"name":"GetEntity","parent":"DModelPanel","type":"panelfunc","description":"Returns the entity being rendered by the model panel.","realm":"Client","args":[]},
{"name":"GetLookAt","parent":"DModelPanel","type":"panelfunc","description":"Returns the position the viewing camera is pointing toward.","realm":"Client","args":[]},
{"name":"GetAnimated","parent":"DModelPanel","type":"panelfunc","description":"Returns whether or not the panel entity should be animated when the default DModelPanel:LayoutEntity function is called.","realm":"Client","args":[]},
{"name":"GetAnimSpeed","parent":"DModelPanel","type":"panelfunc","description":"Returns the animation speed of the panel entity, see DModelPanel:SetAnimSpeed.","realm":"Client","args":[]},
{"name":"GetAmbientLight","parent":"DModelPanel","type":"panelfunc","description":"Returns the ambient lighting used on the rendered entity.","realm":"Client","args":[]},
{"name":"SetConVar","parent":"DMenuOptionCVar","type":"panelfunc","description":"Sets the ConVars to be used by DMenuOptionCVar.","realm":"Client","args":[]},
{"name":"SetValueOff","parent":"DMenuOptionCVar","type":"panelfunc","description":"Sets the value of the ConVars when the DMenuOptionCVar is not checked.","realm":"Client","args":[]},
{"name":"GetConVar","parent":"DMenuOptionCVar","type":"panelfunc","description":"Returns the ConVars used by the DMenuOptionCVar.","realm":"Client","args":[]},
{"name":"GetValueOff","parent":"DMenuOptionCVar","type":"panelfunc","description":"Returns the value of the ConVars when the DMenuOptionCVar is not checked.","realm":"Client","args":[]},
{"name":"GetValueOn","parent":"DMenuOptionCVar","type":"panelfunc","description":"Return the value of the ConVars when the DMenuOptionCVar is checked.","realm":"Client","args":[]},
{"name":"ToggleCheck","parent":"DMenuOption","type":"panelfunc","description":"Toggles the checked state of DMenuOption. Does not respect DMenuOption:GetIsCheckable.","realm":"Client","args":[]},
{"name":"SetValueOn","parent":"DMenuOptionCVar","type":"panelfunc","description":"Sets the value of the ConVars when the DMenuOptionCVar is checked.","realm":"Client","args":[]},
{"name":"SetSubMenu","parent":"DMenuOption","type":"panelfunc","description":"\n\n\nUsed internally by DMenuOption:AddSubMenu to create the submenu arrow and assign the created submenu to be opened this this option is hovered.\n\t","realm":"Client","args":[]},
{"name":"DrawModel","parent":"DModelPanel","type":"panelfunc","description":" Used by the DModelPanel's paint hook to draw the model and background.","realm":"Client","args":[]},
{"name":"SetMenu","parent":"DMenuOption","type":"panelfunc","description":"No Description","realm":"Client","args":[]},
{"name":"GetIsCheckable","parent":"DMenuOption","type":"panelfunc","description":"Returns whether the DMenuOption is a checkbox option or a normal button option.","realm":"Client","args":[]},
{"name":"SetIsCheckable","parent":"DMenuOption","type":"panelfunc","description":"Sets whether the DMenuOption is a checkbox option or a normal button option.","realm":"Client","args":[]},
{"name":"GetMenu","parent":"DMenuOption","type":"panelfunc","description":"No Description","realm":"Client","args":[]},
{"name":"AddSubMenu","parent":"DMenuOption","type":"panelfunc","description":"Creates a sub DMenu and returns it. Has no duplicate call protection.","realm":"Client","args":[]},
{"name":"SetPaintBackground","parent":"DMenuBar","type":"panelfunc","description":"Sets whether or not the background should be painted. Is the same as DMenuBar:SetDrawBackground","realm":"Client","args":[]},
{"name":"SetChecked","parent":"DMenuOption","type":"panelfunc","description":"Sets the checked state of the DMenuOption. Does not invoke DMenuOption:OnChecked.","realm":"Client","args":[]},
{"name":"GetChecked","parent":"DMenuOption","type":"panelfunc","description":"Returns the checked state of DMenuOption.","realm":"Client","args":[]},
{"name":"OnChecked","parent":"DMenuOption","type":"panelfunc","description":"Called whenever the DMenuOption's checked state changes.","realm":"Client","args":[]},
{"name":"SetIsMenu","parent":"DMenuBar","type":"panelfunc","description":"Sets whether or not the panel is a menu. Used for closing menus when another panel is selected.","realm":"Client","args":[]},
{"name":"SetDrawBackground","parent":"DMenuBar","type":"panelfunc","description":"\nUse DMenuBar:SetPaintBackground\n\nSets whether or not the background should be painted. Is the same as DMenuBar:SetPaintBackground\n\t","realm":"Client","args":[]},
{"name":"AddOrGetMenu","parent":"DMenuBar","type":"panelfunc","description":"\nRetrieves a DMenu object from the menu bar. If one with the given label doesn't exist, a new one is created.\n\nTo add a DMenu without checking, use DMenuBar:AddMenu.\n\t","realm":"Client","args":[]},
{"name":"GetDisabled","parent":"DMenuBar","type":"panelfunc","description":"Returns whether or not the DMenuBar is disabled","realm":"Client","args":[]},
{"name":"GetIsMenu","parent":"DMenuBar","type":"panelfunc","description":"Returns whether or not the panel is a menu. Used for closing menus when another panel is selected.","realm":"Client","args":[]},
{"name":"SetBackgroundColor","parent":"DMenuBar","type":"panelfunc","description":"Sets the background color","realm":"Client","args":[]},
{"name":"SetDisabled","parent":"DMenuBar","type":"panelfunc","description":"Sets whether or not the panel is disabled","realm":"Client","args":[]},
{"name":"GetBackgroundColor","parent":"DMenuBar","type":"panelfunc","description":"Returns the DMenuBar's background color","realm":"Client","args":[]},
{"name":"GetPaintBackground","parent":"DMenuBar","type":"panelfunc","description":"Returns whether or not the background should be painted. Is the same as DMenuBar:GetDrawBackground","realm":"Client","args":[]},
{"name":"GetDrawBackground","parent":"DMenuBar","type":"panelfunc","description":"\nUse DMenuBar:GetPaintBackground instead.\n\nReturns whether or not the background should be painted. Is the same as DMenuBar:GetPaintBackground\n\t","realm":"Client","args":[]},
{"name":"GetOpenMenu","parent":"DMenuBar","type":"panelfunc","description":"If a menu is visible/opened, then the menu is returned.","realm":"Client","args":[]},
{"name":"AddMenu","parent":"DMenuBar","type":"panelfunc","description":"\nCreates a new DMenu object tied to a DButton with the given label on the menu bar.\n\nThis will create a new menu regardless of whether or not one with the same label exists. To add **or** get a menu, use DMenuBar:AddOrGetMenu.\n\t","realm":"Client","args":[]},
{"name":"OptionSelected","parent":"DMenu","type":"panelfunc","description":"Called when a option has been selected","realm":"Client","args":[]},
{"name":"OpenSubMenu","parent":"DMenu","type":"panelfunc","description":"Closes any active sub menus, and opens a new one.","realm":"Client","args":[]},
{"name":"OptionSelectedInternal","parent":"DMenu","type":"panelfunc","description":"\n\n\nCalled by DMenuOption. Calls DMenu:OptionSelected.\n\t","realm":"Client","args":[]},
{"name":"SetDeleteSelf","parent":"DMenu","type":"panelfunc","description":"\nSet to true by default. IF set to true, the menu will be deleted when it is closed, not simply hidden.\n\nThis is used by DMenuBar\n\t","realm":"Client","args":[]},
{"name":"SetMinimumWidth","parent":"DMenu","type":"panelfunc","description":"Sets the minimum width of the DMenu. The menu will be stretched to match the given value.","realm":"Client","args":[]},
{"name":"SetMaxHeight","parent":"DMenu","type":"panelfunc","description":"Sets the maximum height the DMenu can have. If the height of all menu items exceed this value, a scroll bar will be automatically added.","realm":"Client","args":[]},
{"name":"SetDrawColumn","parent":"DMenu","type":"panelfunc","description":"Sets whether the DMenu should draw the icon column with a different color.","realm":"Client","args":[]},
{"name":"SetDrawBorder","parent":"DMenu","type":"panelfunc","description":"\n\n\nDoes nothing.\n\t","realm":"Client","args":[]},
{"name":"SetOpenSubMenu","parent":"DMenu","type":"panelfunc","description":"\n\n\nUsed internally to store the open submenu by DMenu:Hide, DMenu:OpenSubMenu, DMenu:CloseSubMenu\n\t","realm":"Client","args":[]},
{"name":"Open","parent":"DMenu","type":"panelfunc","description":"Opens the DMenu at the current mouse position","realm":"Client","args":[]},
{"name":"GetDrawColumn","parent":"DMenu","type":"panelfunc","description":"\nReturns whether the DMenu should draw the icon column with a different color or not.\n\nSee DMenu:SetDrawColumn\n\t","realm":"Client","args":[]},
{"name":"GetDrawBorder","parent":"DMenu","type":"panelfunc","description":"\n\n\nReturns the value set by DMenu:SetDrawBorder.\n\t","realm":"Client","args":[]},
{"name":"GetMinimumWidth","parent":"DMenu","type":"panelfunc","description":"Returns the minimum width of the DMenu in pixels","realm":"Client","args":[]},
{"name":"Hide","parent":"DMenu","type":"panelfunc","description":"Used to safely hide (not remove) the menu. This will also hide any opened submenues recursively.","realm":"Client","args":[]},
{"name":"GetMaxHeight","parent":"DMenu","type":"panelfunc","description":"Returns the maximum height of the DMenu.","realm":"Client","args":[]},
{"name":"HighlightItem","parent":"DMenu","type":"panelfunc","description":"\n\n\nHighlights selected item in the DMenu by setting the item's key \"Highlight\" to true.\n\nDoesn't appear to be working or used.\n\t","realm":"Client","args":[]},
{"name":"GetDeleteSelf","parent":"DMenu","type":"panelfunc","description":"\n\n\nSet by DMenu:SetDeleteSelf\n\t","realm":"Client","args":[]},
{"name":"GetChild","parent":"DMenu","type":"panelfunc","description":"Gets a child by its index.","realm":"Client","args":[]},
{"name":"GetOpenSubMenu","parent":"DMenu","type":"panelfunc","description":"\n\n\nReturns the currently opened submenu.\n\nUsed internally to store the open submenu by DMenu:Hide, DMenu:OpenSubMenu.\n\t","realm":"Client","args":[]},
{"name":"AddSubMenu","parent":"DMenu","type":"panelfunc","description":"Add a sub menu to the DMenu","realm":"Client","args":[]},
{"name":"ClearHighlights","parent":"DMenu","type":"panelfunc","description":"\n\n\nClears all highlights made by DMenu:HighlightItem.\n\nDoesn't appear to be used or do anything.\n\t","realm":"Client","args":[]},
{"name":"CloseSubMenu","parent":"DMenu","type":"panelfunc","description":"\n\n\nUsed internally by DMenu:OpenSubMenu.\n\t","realm":"Client","args":[]},
{"name":"AddCVar","parent":"DMenu","type":"panelfunc","description":"Creates a DMenuOptionCVar and adds it as an option into the menu. Checking and unchecking the option will alter the given console variable's value.","realm":"Client","args":[]},
{"name":"AddSpacer","parent":"DMenu","type":"panelfunc","description":"Adds a horizontal line spacer.","realm":"Client","args":[]},
{"name":"AddOption","parent":"DMenu","type":"panelfunc","description":"Add an option to the DMenu","realm":"Client","args":[]},
{"name":"AddPanel","parent":"DMenu","type":"panelfunc","description":"\nAdds a panel to the DMenu as if it were an option.\n\nThis invokes DScrollPanel:AddItem and will not create a new panel if a class name is passed, unlike Panel:Add.\n\t","realm":"Client","args":[]},
{"name":"ChildCount","parent":"DMenu","type":"panelfunc","description":"Returns the number of child elements of DMenu's DScrollPanel:GetCanvas.","realm":"Client","args":[]},
{"name":"GetColumnText","parent":"DListView_Line","type":"panelfunc","description":"\nGets the string held in the specified column of a DListView_Line panel.\n\nThis is the same thing as doing DListView_Line:GetValue( column_number ).\n\t","realm":"Client","args":[]},
{"name":"SetColumnText","parent":"DListView_Line","type":"panelfunc","description":"Sets the string held in the specified column of a DListView_Line panel.","realm":"Client","args":[]},
{"name":"SetTextAlign","parent":"DListView_Column","type":"panelfunc","description":"Sets the text alignment for the column","realm":"Client","args":[]},
{"name":"SetMinWidth","parent":"DListView_Column","type":"panelfunc","description":"Sets the minimum width of a column.","realm":"Client","args":[]},
{"name":"SetWidth","parent":"DListView_Column","type":"panelfunc","description":"Sets the width of the panel.","realm":"Client","args":[]},
{"name":"SetMaxWidth","parent":"DListView_Column","type":"panelfunc","description":"Sets the maximum width of a column.","realm":"Client","args":[]},
{"name":"SetMultiSelect","parent":"DListView","type":"panelfunc","description":"Sets whether multiple lines can be selected by the user by using the Ctrl or Shift keys. When set to false, only one line can be selected.","realm":"Client","args":[]},
{"name":"SortByColumns","parent":"DListView","type":"panelfunc","description":"\nSorts the list based on given columns.\n\nAll arguments are optional\n\t","realm":"Client","args":[]},
{"name":"SetFixedWidth","parent":"DListView_Column","type":"panelfunc","description":"Sets the fixed width of the column.","realm":"Client","args":[]},
{"name":"SortByColumn","parent":"DListView","type":"panelfunc","description":"Sorts the items in the specified column.","realm":"Client","args":[]},
{"name":"SetSortable","parent":"DListView","type":"panelfunc","description":"Enables/disables the sorting of columns by clicking.","realm":"Client","args":[]},
{"name":"SetHideHeaders","parent":"DListView","type":"panelfunc","description":"Sets whether the header line should be visible on not.","realm":"Client","args":[]},
{"name":"SelectFirstItem","parent":"DListView","type":"panelfunc","description":"Selects the line at the first index of the DListView if one has been added.","realm":"Client","args":[]},
{"name":"SetDataHeight","parent":"DListView","type":"panelfunc","description":"\nSets the height of all lines of the DListView except for the header line.\n\nSee also DListView:SetHeaderHeight.\n\t","realm":"Client","args":[]},
{"name":"OnRowSelected","parent":"DListView","type":"panelfunc","description":"Called internally by DListView:OnClickLine when a line is selected. This is the function you should override to define the behavior when a line is selected.","realm":"Client","args":[]},
{"name":"SetHeaderHeight","parent":"DListView","type":"panelfunc","description":"\nSets the height of the header line of the DListView.\n\nSee also DListView:SetDataHeight.\n\t","realm":"Client","args":[]},
{"name":"SelectItem","parent":"DListView","type":"panelfunc","description":"Selects a line in the listview.","realm":"Client","args":[]},
{"name":"SetDirty","parent":"DListView","type":"panelfunc","description":"\n\n\nUsed internally to signify if the DListView needs a rebuild.\n\t","realm":"Client","args":[]},
{"name":"OnRequestResize","parent":"DListView","type":"panelfunc","description":"\n\n\nCalled from DListView_Column.\n\t","realm":"Client","args":[]},
{"name":"OnRowRightClick","parent":"DListView","type":"panelfunc","description":"Called when a row is right-clicked","realm":"Client","args":[]},
{"name":"RemoveLine","parent":"DListView","type":"panelfunc","description":"Removes a line from the list view.","realm":"Client","args":[]},
{"name":"OnClickLine","parent":"DListView","type":"panelfunc","description":"\nUse DListView:OnRowSelected instead!\n\nCalled whenever a line is clicked.\n\t","realm":"Client","args":[]},
{"name":"GetInnerTall","parent":"DListView","type":"panelfunc","description":"\nReturns the height of DListView:GetCanvas.\n\nIntended to represent the height of all data lines.\n\t","realm":"Client","args":[]},
{"name":"GetSelected","parent":"DListView","type":"panelfunc","description":"Gets all of the lines that are currently selected.","realm":"Client","args":[]},
{"name":"GetMultiSelect","parent":"DListView","type":"panelfunc","description":"\nReturns whether multiple lines can be selected or not.\n\nSee DListView:SetMultiSelect.\n\t","realm":"Client","args":[]},
{"name":"GetLines","parent":"DListView","type":"panelfunc","description":"Gets all of the lines added to the DListView.","realm":"Client","args":[]},
{"name":"GetHideHeaders","parent":"DListView","type":"panelfunc","description":"Returns whether the header line should be visible on not.","realm":"Client","args":[]},
{"name":"GetSortable","parent":"DListView","type":"panelfunc","description":"\nReturns whether sorting of columns by clicking their headers is allowed or not.\n\nSee also DListView:SetSortable.\n\t","realm":"Client","args":[]},
{"name":"GetHeaderHeight","parent":"DListView","type":"panelfunc","description":"\nReturns the height of the header of the DListView.\n\nSee also DListView:SetHeaderHeight.\n\t","realm":"Client","args":[]},
{"name":"GetSelectedLine","parent":"DListView","type":"panelfunc","description":"\nGets the currently selected DListView_Line index.\n\nIf DListView:SetMultiSelect is set to true, only the first line of all selected lines will be returned. Use DListView:GetSelected instead to get all of the selected lines.\n\t","realm":"Client","args":[]},
{"name":"GetSortedID","parent":"DListView","type":"panelfunc","description":"\n\n\nConverts LineID to SortedID\n\t","realm":"Client","args":[]},
{"name":"GetLine","parent":"DListView","type":"panelfunc","description":"Gets the DListView_Line at the given index.","realm":"Client","args":[]},
{"name":"Clear","parent":"DListView","type":"panelfunc","description":"Removes all lines that have been added to the DListView.","realm":"Client","args":[]},
{"name":"ColumnWidth","parent":"DListView","type":"panelfunc","description":"Gets the width of a column.","realm":"Client","args":[]},
{"name":"GetDirty","parent":"DListView","type":"panelfunc","description":"\n\n\nSee DListView:SetDirty.\n\t","realm":"Client","args":[]},
{"name":"DataLayout","parent":"DListView","type":"panelfunc","description":"Creates the lines and gets the height of the contents, in a DListView.","realm":"Client","args":[]},
{"name":"GetDataHeight","parent":"DListView","type":"panelfunc","description":"\nReturns the height of the data of the DListView.\n\nSee also DListView:SetDataHeight.\n\t","realm":"Client","args":[]},
{"name":"ClearSelection","parent":"DListView","type":"panelfunc","description":"Clears the current selection in the DListView.","realm":"Client","args":[]},
{"name":"FixColumnsLayout","parent":"DListView","type":"panelfunc","description":"\n\n\nInternal helper function called from the PANEL:PerformLayout of DListView.\n\t","realm":"Client","args":[]},
{"name":"GetCanvas","parent":"DListView","type":"panelfunc","description":"Gets the canvas.","realm":"Client","args":[]},
{"name":"DisableScrollbar","parent":"DListView","type":"panelfunc","description":"Removes the scrollbar.","realm":"Client","args":[]},
{"name":"DoDoubleClick","parent":"DListView","type":"panelfunc","description":"Called when a line in the DListView is double clicked.","realm":"Client","args":[]},
{"name":"AddColumn","parent":"DListView","type":"panelfunc","description":"Adds a column to the listview.","realm":"Client","args":[]},
{"name":"SetTextColor","parent":"DLabelURL","type":"panelfunc","description":"\nSets the text color of the DLabelURL. Overrides DLabelURL:SetTextStyleColor.\n\n\nThis should only be used immediately after it is created, and otherwise Panel:SetFGColor.\n\t","realm":"Client","args":[]},
{"name":"SetColor","parent":"DLabelURL","type":"panelfunc","description":"Alias of DLabelURL:SetTextColor.","realm":"Client","args":[]},
{"name":"OnLabelTextChanged","parent":"DLabelEditable","type":"panelfunc","description":"\nA hook called when the player presses Enter (i.e. the finished editing the label) and the text has changed.\n\nAllows you to override/modify the text that will be set to display.\n\t","realm":"Client","args":[]},
{"name":"GetTextStyleColor","parent":"DLabelURL","type":"panelfunc","description":"Returns the color set by DLabelURL:SetTextStyleColor.","realm":"Client","args":[]},
{"name":"SetTextStyleColor","parent":"DLabelURL","type":"panelfunc","description":"Sets the base text color of the DLabelURL. This is overridden by DLabelURL:SetTextColor.","realm":"Client","args":[]},
{"name":"AddLine","parent":"DListView","type":"panelfunc","description":"Adds a line to the list view.","realm":"Client","args":[]},
{"name":"UpdateFGColor","parent":"DLabel","type":"panelfunc","description":"\n\n\nCalled internally to update the color of the text.\n\t","realm":"Client","args":[]},
{"name":"GetTextColor","parent":"DLabelURL","type":"panelfunc","description":"Gets the current text color of the DLabelURL set by DLabelURL:SetTextColor.","realm":"Client","args":[]},
{"name":"GetColor","parent":"DLabelURL","type":"panelfunc","description":"Gets the current text color of the DLabelURL. Alias as DLabelURL:GetTextColor.","realm":"Client","args":[]},
{"name":"SetDoubleClickingEnabled","parent":"DLabel","type":"panelfunc","description":"\nSets whether or not double clicking should call DLabel:DoDoubleClick.\n\nThis is enabled by default.\n\t","realm":"Client","args":[]},
{"name":"UpdateColours","parent":"DLabel","type":"panelfunc","description":"A hook called from within DLabel:ApplySchemeSettings to determine the color of the text on display.","realm":"Client","args":[]},
{"name":"SetHighlight","parent":"DLabel","type":"panelfunc","description":"\nYou really should use DLabel:SetTextColor.\n\nSets the color of the text to the highlight text color defined in the skin.\n\nFor the default Derma skin this makes the label red.\n\nSee also DLabel:SetBright and DLabel:SetDark.\n\nYou should only consider using this if you are using background elements that are not manually painted and are using the skin colors.\n\t","realm":"Client","args":[]},
{"name":"SetDisabled","parent":"DLabel","type":"panelfunc","description":"\nUse Panel:SetEnabled instead.\n\nSets the disabled state of the DLabel.\n\nWhen disabled, the label does not respond to click, toggle or drag & drop actions.\n\t","realm":"Client","args":[]},
{"name":"SetTextColor","parent":"DLabel","type":"panelfunc","description":"Sets the text color of the DLabel. This will take precedence over DLabel:SetTextStyleColor.","realm":"Client","args":[]},
{"name":"SetFont","parent":"DLabel","type":"panelfunc","description":"Sets the font of the label.","realm":"Client","args":[]},
{"name":"Toggle","parent":"DLabel","type":"panelfunc","description":"\nToggles the label's state. This can be set and retrieved with DLabel:SetToggle and DLabel:GetToggle.\n\nIn order to use toggle functionality, you must first call DLabel:SetIsToggle with `true`, as it is disabled by default.\n\t","realm":"Client","args":[]},
{"name":"SetTextStyleColor","parent":"DLabel","type":"panelfunc","description":"\nUse DLabel:SetTextColor instead!\n\n\nUsed by DLabel:SetDark, DLabel:SetBright and DLabel:SetHighlight to set the text color without affecting DLabel:SetTextColor calls.\n\t","realm":"Client","args":[]},
{"name":"SetToggle","parent":"DLabel","type":"panelfunc","description":"\nSets the toggle state of the label. This can be retrieved with DLabel:GetToggle and toggled with DLabel:Toggle.\n\nIn order to use toggle functionality, you must first call DLabel:SetIsToggle with `true`, as it is disabled by default.\n\t","realm":"Client","args":[]},
{"name":"SetIsToggle","parent":"DLabel","type":"panelfunc","description":"\nEnables or disables toggle functionality for a label. Retrieved with DLabel:GetIsToggle.\n\nYou must call this before using DLabel:SetToggle, DLabel:GetToggle or DLabel:Toggle.\n\t","realm":"Client","args":[]},
{"name":"OnToggled","parent":"DLabel","type":"panelfunc","description":"\nCalled when the toggle state of the label is changed by DLabel:Toggle.\n\nIn order to use toggle functionality, you must first call DLabel:SetIsToggle with `true`, as it is disabled by default.\n\t","realm":"Client","args":[]},
{"name":"SetDark","parent":"DLabel","type":"panelfunc","description":"\nYou really should use DLabel:SetTextColor.\n\nSets the color of the text to the dark text color defined in the skin.\n\nSee also DLabel:SetBright and DLabel:SetHighlight.\n\nYou should only consider using this if you are using background elements that are not manually painted and are using the skin colors.\n\t","realm":"Client","args":[]},
{"name":"SetColor","parent":"DLabel","type":"panelfunc","description":"Changes color of label. Alias of DLabel:SetTextColor.","realm":"Client","args":[]},
{"name":"SetBright","parent":"DLabel","type":"panelfunc","description":"\nYou really should use DLabel:SetTextColor.\n\nSets the color of the text to the bright text color defined in the skin.\n\nSee also DLabel:SetDark and DLabel:SetHighlight.\n\nYou should only consider using this if you are using background elements that are not manually painted and are using the skin colors.\n\t","realm":"Client","args":[]},
{"name":"GetTextColor","parent":"DLabel","type":"panelfunc","description":"Returns the \"override\" text color, set by DLabel:SetTextColor.","realm":"Client","args":[]},
{"name":"GetTextStyleColor","parent":"DLabel","type":"panelfunc","description":"\n\n\nReturns the \"internal\" or fallback color of the text.\n\nSee also DLabel:GetTextColor and DLabel:SetTextStyleColor.\n\t","realm":"Client","args":[]},
{"name":"SetAutoStretchVertical","parent":"DLabel","type":"panelfunc","description":"Automatically adjusts the height of the label dependent of the height of the text inside of it.","realm":"Client","args":[]},
{"name":"GetToggle","parent":"DLabel","type":"panelfunc","description":"\nReturns the current toggle state of the label. This can be set with DLabel:SetToggle and toggled with DLabel:Toggle.\n\nIn order to use toggle functionality, you must first call DLabel:SetIsToggle with `true`, as it is disabled by default.\n\t","realm":"Client","args":[]},
{"name":"OnDepressed","parent":"DLabel","type":"panelfunc","description":"\nCalled when the player presses the label with any mouse button.\n\nThis works as an alternative to PANEL:OnMousePressed as that hook is used heavily by DLabel and overriding it will break functionality.\n\nSee also DLabel:DoClick, DLabel:DoMiddleClick, DLabel:DoRightClick, DLabel:OnReleased and DLabel:DoDoubleClick.\n\t","realm":"Client","args":[]},
{"name":"OnReleased","parent":"DLabel","type":"panelfunc","description":"\nCalled when the player releases any mouse button on the label. This is always called after DLabel:OnDepressed.\n\nThis works as an alternative to PANEL:OnMouseReleased as that hook is used heavily by DLabel and overriding it will break functionality.\n\nSee also DLabel:DoClick, DLabel:DoMiddleClick, DLabel:DoRightClick and DLabel:DoDoubleClick.\n\t","realm":"Client","args":[]},
{"name":"GetBright","parent":"DLabel","type":"panelfunc","description":"\nReturns whether the DLabel should set its text color to the current skin's bright text color.\n\nSee DLabel:SetBright.\n\t","realm":"Client","args":[]},
{"name":"GetDark","parent":"DLabel","type":"panelfunc","description":"\nReturns whether the DLabel should set its text color to the current skin's dark text color.\n\nSee DLabel:SetDark.\n\t","realm":"Client","args":[]},
{"name":"GetFont","parent":"DLabel","type":"panelfunc","description":"Returns the current font of the DLabel. This is set with DLabel:SetFont.","realm":"Client","args":[]},
{"name":"DoRightClick","parent":"DLabel","type":"panelfunc","description":"\nCalled when the label is right clicked (on key release) by the player.\n\nThis will be called after DLabel:OnDepressed and DLabel:OnReleased.\n\nSee also DLabel:DoClick, DLabel:DoMiddleClick and DLabel:DoDoubleClick.\n\t","realm":"Client","args":[]},
{"name":"GetHighlight","parent":"DLabel","type":"panelfunc","description":"\nReturns whether the DLabel should set its text color to the current skin's highlighted text color.\n\nSee DLabel:SetHighlight.\n\t","realm":"Client","args":[]},
{"name":"GetAutoStretchVertical","parent":"DLabel","type":"panelfunc","description":"\nReturns whether the label stretches vertically or not.\n\nSet by DLabel:SetAutoStretchVertical.\n\t","realm":"Client","args":[]},
{"name":"GetIsToggle","parent":"DLabel","type":"panelfunc","description":"Returns whether the toggle functionality is enabled for a label. Set with DLabel:SetIsToggle.","realm":"Client","args":[]},
{"name":"GetDoubleClickingEnabled","parent":"DLabel","type":"panelfunc","description":"\nReturns whether or not double clicking will call DLabel:DoDoubleClick.\n\nSee DLabel:SetDoubleClickingEnabled.\n\t","realm":"Client","args":[]},
{"name":"GetColor","parent":"DLabel","type":"panelfunc","description":"\nReturns the actual color of the text.\n\nSee also DLabel:GetTextColor and DLabel:GetTextStyleColor.\n\t","realm":"Client","args":[]},
{"name":"GetDisabled","parent":"DLabel","type":"panelfunc","description":"\nUse Panel:IsEnabled instead.\n\nGets the disabled state of the DLabel. This is set with DLabel:SetDisabled.\n\t","realm":"Client","args":[]},
{"name":"DoDoubleClickInternal","parent":"DLabel","type":"panelfunc","description":"Called just before DLabel:DoDoubleClick. In DLabel does nothing and is safe to override.","realm":"Client","args":[]},
{"name":"SetStretchToFit","parent":"DImageButton","type":"panelfunc","description":"\nSets whether the image inside the DImageButton should be stretched to fill the entire size of the button, without preserving aspect ratio.\n\nIf set to false, the image will not be resized at all.\n\t","realm":"Client","args":[]},
{"name":"GetName","parent":"DKillIcon","type":"panelfunc","description":"Gets the killicon being shown.","realm":"Client","args":[]},
{"name":"DoClickInternal","parent":"DLabel","type":"panelfunc","description":"\nCalled just before DLabel:DoClick.\n\nIn DLabel does nothing and is safe to override. Used by DMenuOption and DCollapsibleCategory's tabs.\n\t","realm":"Client","args":[]},
{"name":"SetName","parent":"DKillIcon","type":"panelfunc","description":"\nSets the killicon to be displayed. You should call DKillIcon:SizeToContents following this.\n\nKillicons can be added with killicon.Add and killicon.AddFont.\n\t","realm":"Client","args":[]},
{"name":"DoDoubleClick","parent":"DLabel","type":"panelfunc","description":"\nCalled when the label is double clicked by the player with left clicks.\n\nDLabel:SetDoubleClickingEnabled must be set to true for this hook to work, which it is by default.\n\nThis will be called after DLabel:OnDepressed and DLabel:OnReleased and DLabel:DoClick.\n\nSee also DLabel:DoRightClick and DLabel:DoMiddleClick.\n\t","realm":"Client","args":[]},
{"name":"SetOnViewMaterial","parent":"DImageButton","type":"panelfunc","description":"See DImage:SetOnViewMaterial","realm":"Client","args":[]},
{"name":"DoClick","parent":"DLabel","type":"panelfunc","description":"\nCalled when the label is left clicked (on key release) by the player.\n\nThis will be called after DLabel:OnDepressed and DLabel:OnReleased.\n\nThis can be overridden; by default, it calls DLabel:Toggle.\n\nSee also DLabel:DoRightClick, DLabel:DoMiddleClick and DLabel:DoDoubleClick.\n\t","realm":"Client","args":[]},
{"name":"DoMiddleClick","parent":"DLabel","type":"panelfunc","description":"\nCalled when the label is middle mouse (Mouse wheel, also known as mouse 3) clicked (on key release) by the player.\n\nThis will be called after DLabel:OnDepressed and DLabel:OnReleased.\n\nSee also DLabel:DoClick, DLabel:DoRightClick and DLabel:DoDoubleClick.\n\t","realm":"Client","args":[]},
{"name":"SetMaterial","parent":"DImageButton","type":"panelfunc","description":"Sets a Global.Material directly as an image. Equivalent of DImage:SetMaterial.","realm":"Client","args":[]},
{"name":"Unloaded","parent":"DImage","type":"panelfunc","description":"Returns true if the image is **not** yet loaded.","realm":"Client","args":[]},
{"name":"SetKeepAspect","parent":"DImageButton","type":"panelfunc","description":"\nSets whether the DImageButton should keep the aspect ratio of its image. Equivalent of DImage:SetKeepAspect.\n\nNote that this will not try to fit the image inside the button, but instead it will fill the button with the image.\n\t","realm":"Client","args":[]},
{"name":"SetOnViewMaterial","parent":"DImage","type":"panelfunc","description":"\nSimilar to DImage:SetImage, but will only do the expensive part of actually loading the textures/material if the material is about to be rendered/viewed.\n\nUseful for cases like DIconBrowser, where there are hundreds of small icons in 1 panel in a list that do not need all to be loaded at the same time.\n\t","realm":"Client","args":[]},
{"name":"SetImageVisible","parent":"DImageButton","type":"panelfunc","description":"Hides or shows the image of the image button. Internally this calls Panel:SetVisible on the internal DImage.","realm":"Client","args":[]},
{"name":"SetMatName","parent":"DImage","type":"panelfunc","description":"\n\n\nSets the material to be loaded when the image is first rendered. Used by DImage:SetOnViewMaterial.\n\t","realm":"Client","args":[]},
{"name":"SetImage","parent":"DImageButton","type":"panelfunc","description":"Sets the \"image\" of the DImageButton. Equivalent of DImage:SetImage.","realm":"Client","args":[]},
{"name":"SetColor","parent":"DImageButton","type":"panelfunc","description":"Sets the color of the image. Equivalent of DImage:SetImageColor","realm":"Client","args":[]},
{"name":"GetStretchToFit","parent":"DImageButton","type":"panelfunc","description":"\nReturns whether the image inside the button should be stretched to fit it or not\n\nSee DImageButton:SetStretchToFit\n\t","realm":"Client","args":[]},
{"name":"GetImage","parent":"DImageButton","type":"panelfunc","description":"Returns the \"image\" of the DImageButton. Equivalent of DImage:GetImage.","realm":"Client","args":[]},
{"name":"SetIcon","parent":"DImageButton","type":"panelfunc","description":"\n\n\nAlias of DImageButton:SetImage.\n\t","realm":"Client","args":[]},
{"name":"SetImageColor","parent":"DImage","type":"panelfunc","description":"Sets the image's color override.","realm":"Client","args":[]},
{"name":"SetMaterial","parent":"DImage","type":"panelfunc","description":"Sets a Global.Material directly as an image.","realm":"Client","args":[]},
{"name":"LoadMaterial","parent":"DImage","type":"panelfunc","description":"\n\n\nInitializes the loading process of the material to render if it is not loaded yet.\n\nYou do not need to call this function. It is done for you automatically.\n\t","realm":"Client","args":[]},
{"name":"PaintAt","parent":"DImage","type":"panelfunc","description":"Paints a ghost copy of the DImage panel at the given position and dimensions. This function overrides Panel:PaintAt.","realm":"Client","args":[]},
{"name":"GetKeepAspect","parent":"DImage","type":"panelfunc","description":"\nReturns whether the DImage should keep the aspect ratio of its image when being resized.\n\nSee DImage:SetKeepAspect for more info on how it works.\n\t","realm":"Client","args":[]},
{"name":"GetMaterial","parent":"DImage","type":"panelfunc","description":"Returns the current Global.Material of the DImage.","realm":"Client","args":[]},
{"name":"SetKeepAspect","parent":"DImage","type":"panelfunc","description":"\nSets whether the DImage should keep the aspect ratio of its image when being resized.\n\nNote that this will not try to fit the image inside the button, but instead it will fill the button with the image.\n\t","realm":"Client","args":[]},
{"name":"GetMatName","parent":"DImage","type":"panelfunc","description":"\n\n\nReturns the texture path set by DImage:SetMatName.\n\t","realm":"Client","args":[]},
{"name":"SetImage","parent":"DImage","type":"panelfunc","description":"\nSets the image to load into the frame. If the first image can't be loaded and `strBackup` is set, that image will be loaded instead.\n\nThis eventually calls DImage:SetMaterial.\n\t","realm":"Client","args":[]},
{"name":"SetFailsafeMatName","parent":"DImage","type":"panelfunc","description":"\n\n\nSets the backup material to be loaded when the image is first rendered. Used by DImage:SetOnViewMaterial.\n\t","realm":"Client","args":[]},
{"name":"SetSpaceX","parent":"DIconLayout","type":"panelfunc","description":"Sets the horizontal (x) spacing between children within the DIconLayout. You must call DIconLayout:Layout in order for the changes to take effect.","realm":"Client","args":[]},
{"name":"SetSpaceY","parent":"DIconLayout","type":"panelfunc","description":"Sets the vertical (y) spacing between children within the DIconLayout. You must call DIconLayout:Layout in order for the changes to take effect.","realm":"Client","args":[]},
{"name":"SetLayoutDir","parent":"DIconLayout","type":"panelfunc","description":"\nSets the direction that it will be layed out, using the Enums/DOCK.\n\nCurrently only TOP and LEFT are supported.\n\t","realm":"Client","args":[]},
{"name":"SetStretchHeight","parent":"DIconLayout","type":"panelfunc","description":"\nIf set to true, the icon layout will stretch its height to fit all the children.\n\nSee also DIconLayout:SetStretchWidth\n\t","realm":"Client","args":[]},
{"name":"FixVertexLitMaterial","parent":"DImage","type":"panelfunc","description":"\n\n\n\"Fixes\" the current material of the DImage if it has VertexLit shader by creating a new one with the same name and a prefix of \"_DImage\" and automatically calling DImage:SetMaterial with the new material.\n\nThis fixes the problem where using materials using shaders that expect lighting information causing \"weird\" flickering when displayed in 2D/Unlit environment.\n\t","realm":"Client","args":[]},
{"name":"SetStretchWidth","parent":"DIconLayout","type":"panelfunc","description":"\nIf set to true, the icon layout will stretch its width to fit all the children.\n\nSee also DIconLayout:SetStretchHeight\n\t","realm":"Client","args":[]},
{"name":"DoLoadMaterial","parent":"DImage","type":"panelfunc","description":"\n\n\nActually loads the IMaterial to render it. Called from DImage:LoadMaterial.\n\t","realm":"Client","args":[]},
{"name":"GetImage","parent":"DImage","type":"panelfunc","description":"Returns the image loaded in the image panel.","realm":"Client","args":[]},
{"name":"GetFailsafeMatName","parent":"DImage","type":"panelfunc","description":"\n\n\nReturns the texture path set by DImage:SetFailsafeMatName.\n\t","realm":"Client","args":[]},
{"name":"GetImageColor","parent":"DImage","type":"panelfunc","description":"Returns the color override of the image panel.","realm":"Client","args":[]},
{"name":"SetBorder","parent":"DIconLayout","type":"panelfunc","description":"Sets the internal border (padding) within the DIconLayout. This will not change its size, only the positioning of children. You must call DIconLayout:Layout in order for the changes to take effect.","realm":"Client","args":[]},
{"name":"GetStretchHeight","parent":"DIconLayout","type":"panelfunc","description":"\nReturns whether the icon layout will stretch its height to fit all the children.\n\nSee also DIconLayout:GetStretchWidth\n\t","realm":"Client","args":[]},
{"name":"Layout","parent":"DIconLayout","type":"panelfunc","description":"Resets layout vars before calling Panel:InvalidateLayout. This is called when children are added or removed, and must be called when the spacing, border or layout direction is changed.","realm":"Client","args":[]},
{"name":"LayoutIcons_TOP","parent":"DIconLayout","type":"panelfunc","description":"\n\n\nUsed internally to layout the child elements if the DIconLayout:SetLayoutDir is set to TOP (See Enums/DOCK).\n\t","realm":"Client","args":[]},
{"name":"GetSpaceX","parent":"DIconLayout","type":"panelfunc","description":"Returns the distance between two 'icons' on the X axis.","realm":"Client","args":[]},
{"name":"GetLayoutDir","parent":"DIconLayout","type":"panelfunc","description":"Returns the direction that it will be layed out, using the DOCK enumerations.","realm":"Client","args":[]},
{"name":"LayoutIcons_LEFT","parent":"DIconLayout","type":"panelfunc","description":"\n\n\nUsed internally to layout the child elements if the DIconLayout:SetLayoutDir is set to LEFT (See Enums/DOCK).\n\t","realm":"Client","args":[]},
{"name":"GetSpaceY","parent":"DIconLayout","type":"panelfunc","description":"Returns distance between two \"Icons\" on the Y axis.","realm":"Client","args":[]},
{"name":"OnModified","parent":"DIconLayout","type":"panelfunc","description":"Called when the panel is modified.","realm":"Client","args":[]},
{"name":"GetStretchWidth","parent":"DIconLayout","type":"panelfunc","description":"\nReturns whether the icon layout will stretch its width to fit all the children.\n\nSee also DIconLayout:GetStretchHeight\n\t","realm":"Client","args":[]},
{"name":"GetBorder","parent":"DIconLayout","type":"panelfunc","description":"Returns the size of the border.","realm":"Client","args":[]},
{"name":"Copy","parent":"DIconLayout","type":"panelfunc","description":"Creates a replica of the DIconLayout it is called on.","realm":"Client","args":[]},
{"name":"GetSelectedIcon","parent":"DIconBrowser","type":"panelfunc","description":"Returns the currently selected icon's file path.","realm":"Client","args":[]},
{"name":"SetSelectedIcon","parent":"DIconBrowser","type":"panelfunc","description":"\n\n\nSet the currently selected file path. Do not use. Use DIconBrowser:SelectIcon instead.\n\t","realm":"Client","args":[]},
{"name":"CopyContents","parent":"DIconLayout","type":"panelfunc","description":"Copies the contents (Child elements) of another DIconLayout to itself.","realm":"Client","args":[]},
{"name":"OnChangeInternal","parent":"DIconBrowser","type":"panelfunc","description":"\n\n\nUse DIconBrowser:OnChange instead\n\t","realm":"Client","args":[]},
{"name":"SelectIcon","parent":"DIconBrowser","type":"panelfunc","description":"Selects an icon from file path","realm":"Client","args":[]},
{"name":"ScrollToSelected","parent":"DIconBrowser","type":"panelfunc","description":"Scrolls the browser to the selected icon","realm":"Client","args":[]},
{"name":"OnChange","parent":"DIconBrowser","type":"panelfunc","description":"Called when the selected icon was changed. Use DIconBrowser:GetSelectedIcon to get the selected icon's filepath.","realm":"Client","args":[]},
{"name":"SetManual","parent":"DIconBrowser","type":"panelfunc","description":"Sets whether or not the browser should automatically fill itself with icons.","realm":"Client","args":[]},
{"name":"Fill","parent":"DIconBrowser","type":"panelfunc","description":"\n\n\nAutomatically called to fill the browser with icons. Will not work if DIconBrowser:SetManual is set to true.\n\t","realm":"Client","args":[]},
{"name":"StartedLoading","parent":"DHTMLControls","type":"panelfunc","description":"","realm":"Client","args":[]},
{"name":"SetButtonColor","parent":"DHTMLControls","type":"panelfunc","description":"Sets the color of the navigation buttons.","realm":"Client","args":[]},
{"name":"GetManual","parent":"DIconBrowser","type":"panelfunc","description":"Returns whether or not the browser should fill itself with icons.","realm":"Client","args":[]},
{"name":"UpdateNavButtonStatus","parent":"DHTMLControls","type":"panelfunc","description":"","realm":"Client","args":[]},
{"name":"FilterByText","parent":"DIconBrowser","type":"panelfunc","description":"A simple unused search feature, hides all icons that do not contain given text in their file path.","realm":"Client","args":[]},
{"name":"UpdateHistory","parent":"DHTMLControls","type":"panelfunc","description":"\n\n\nBasically adds an URL to the history.\n\t","realm":"Client","args":[]},
{"name":"SetHTML","parent":"DHTMLControls","type":"panelfunc","description":"Sets the DHTML element to control with these DHTMLControls.","realm":"Client","args":[]},
{"name":"FinishedLoading","parent":"DHTMLControls","type":"panelfunc","description":"","realm":"Client","args":[]},
{"name":"StopLoading","parent":"DHTML","type":"panelfunc","description":"Stops the loading of the HTML panel's current page.","realm":"Client","args":[]},
{"name":"AddFunction","parent":"DHTML","type":"panelfunc","description":"\nDefines a Javascript function that when called will call a Lua callback.\nMust be called after the HTML document has fully loaded.\n\t","realm":"Client","args":[]},
{"name":"QueueJavascript","parent":"DHTML","type":"panelfunc","description":"\nRuns/Executes a string as JavaScript code in a panel.\nThis function does **NOT** evaluate expression (i.e. allow you to pass variables from JavaScript (JS) to Lua context).Because a return value is nil/no value (a.k.a. void).If you wish to pass/return values from JS to Lua, you may want to use DHTML:AddFunction function to accomplish that job.\n\t","realm":"Client","args":[]},
{"name":"SetAllowLua","parent":"DHTML","type":"panelfunc","description":"Determines whether the loaded page can run Lua code or not. See DHTML for how to run Lua from a DHTML window.","realm":"Client","args":[]},
{"name":"SetScroll","parent":"DHorizontalScroller","type":"panelfunc","description":"Sets the scroll amount, automatically clamping the value.","realm":"Client","args":[]},
{"name":"SetShowDropTargets","parent":"DHorizontalScroller","type":"panelfunc","description":"No Description","realm":"Client","args":[]},
{"name":"SetScrollbars","parent":"DHTML","type":"panelfunc","description":"Broken. Use the CSS `overflow` rule instead. Sets if the loaded window should display scrollbars when the webpage is larger than the viewing window. This is similar to the CSS `overflow` rule.","realm":"Client","args":[]},
{"name":"Call","parent":"DHTML","type":"panelfunc","description":"\nRuns/Executes a string as JavaScript code in a panel.\nThis function does **NOT** evaluate expression (i.e. allow you to pass variables from JavaScript (JS) to Lua context).Because a return value is nil/no value (a.k.a. void).If you wish to pass/return values from JS to Lua, you may want to use DHTML:AddFunction function to accomplish that job.\nThis function is an alias of DHTML:QueueJavascript ([source](https://github.com/Facepunch/garrysmod/blob/master/garrysmod/lua/vgui/dhtml.lua#L62)).\n\t","realm":"Client","args":[]},
{"name":"SetUseLiveDrag","parent":"DHorizontalScroller","type":"panelfunc","description":"Same as DDragBase:SetUseLiveDrag","realm":"Client","args":[]},
{"name":"GetAllowLua","parent":"DHTML","type":"panelfunc","description":"Returns if the loaded page can run Lua code, set by DHTML:SetAllowLua","realm":"Client","args":[]},
{"name":"ConsoleMessage","parent":"DHTML","type":"panelfunc","description":"Called when the page inside the DHTML window runs `console.log`. This can also be called within the Lua environment to emulate `console.log`. If the contained message begins with `RUNLUA:` the following text will be executed as code within the Lua environment (this is how Lua is called from DHTML windows).","realm":"Client","args":[]},
{"name":"ScrollToChild","parent":"DHorizontalScroller","type":"panelfunc","description":"Scrolls the DHorizontalScroller to given child panel.","realm":"Client","args":[]},
{"name":"AddPanel","parent":"DHorizontalScroller","type":"panelfunc","description":"Adds a panel to the DHorizontalScroller.","realm":"Client","args":[]},
{"name":"SetOverlap","parent":"DHorizontalScroller","type":"panelfunc","description":"Controls the spacing between elements of the horizontal scroller.","realm":"Client","args":[]},
{"name":"GetShowDropTargets","parent":"DHorizontalScroller","type":"panelfunc","description":"No Description","realm":"Client","args":[]},
{"name":"GetCanvas","parent":"DHorizontalScroller","type":"panelfunc","description":"Returns the internal canvas panel where the content of DHorizontalScroller are placed on.","realm":"Client","args":[]},
{"name":"GetOverlap","parent":"DHorizontalScroller","type":"panelfunc","description":"No Description","realm":"Client","args":[]},
{"name":"SetRightMin","parent":"DHorizontalDivider","type":"panelfunc","description":"Sets the minimum width of the right side","realm":"Client","args":[]},
{"name":"MakeDroppable","parent":"DHorizontalScroller","type":"panelfunc","description":"\nSame as DDragBase:MakeDroppable.\nTODO: Transclude or whatever to here?\n\t","realm":"Client","args":[]},
{"name":"StartGrab","parent":"DHorizontalDivider","type":"panelfunc","description":"","realm":"Client","args":[]},
{"name":"OnDragModified","parent":"DHorizontalScroller","type":"panelfunc","description":"Called when the panel is scrolled.","realm":"Client","args":[]},
{"name":"SetLeftMin","parent":"DHorizontalDivider","type":"panelfunc","description":"Sets the minimum width of the left side","realm":"Client","args":[]},
{"name":"SetRight","parent":"DHorizontalDivider","type":"panelfunc","description":"Sets the right side content","realm":"Client","args":[]},
{"name":"GetRightMin","parent":"DHorizontalDivider","type":"panelfunc","description":"Returns the minimum width of the right side, set by DHorizontalDivider:SetRightMin.","realm":"Client","args":[]},
{"name":"GetRight","parent":"DHorizontalDivider","type":"panelfunc","description":"Returns the right side content","realm":"Client","args":[]},
{"name":"SetDividerWidth","parent":"DHorizontalDivider","type":"panelfunc","description":"Sets the width of the horizontal divider bar.","realm":"Client","args":[]},
{"name":"SetMiddle","parent":"DHorizontalDivider","type":"panelfunc","description":"Sets the middle content, over the draggable divider bar panel.","realm":"Client","args":[]},
{"name":"SetHoldPos","parent":"DHorizontalDivider","type":"panelfunc","description":"\n\n\nSets the local X coordinate of where the player started dragging the thing\n\t","realm":"Client","args":[]},
{"name":"SetLeft","parent":"DHorizontalDivider","type":"panelfunc","description":"Sets the left side content of the DHorizontalDivider.","realm":"Client","args":[]},
{"name":"SetDragging","parent":"DHorizontalDivider","type":"panelfunc","description":"\n\n\nSets whether the player is dragging the divider or not\n\t","realm":"Client","args":[]},
{"name":"SetLeftWidth","parent":"DHorizontalDivider","type":"panelfunc","description":"\nSets the current/starting width of the left side.\n\nThe width of the right side is automatically calculated by subtracting this from the total width of the DHorizontalDivider.\n\t","realm":"Client","args":[]},
{"name":"GetMiddle","parent":"DHorizontalDivider","type":"panelfunc","description":"Returns the middle content, set by DHorizontalDivider:SetMiddle.","realm":"Client","args":[]},
{"name":"GetHoldPos","parent":"DHorizontalDivider","type":"panelfunc","description":"\n\n\nReturns the local X coordinate of where the player started dragging the thing\n\t","realm":"Client","args":[]},
{"name":"SetRowHeight","parent":"DGrid","type":"panelfunc","description":"\nSets the height of each row. \n\nThe cell panels (grid items) will not be resized or centered.\n\t","realm":"Client","args":[]},
{"name":"GetLeftMin","parent":"DHorizontalDivider","type":"panelfunc","description":"Returns the minimum width of the left side, set by DHorizontalDivider:SetLeftMin.","realm":"Client","args":[]},
{"name":"GetLeft","parent":"DHorizontalDivider","type":"panelfunc","description":"Returns the left side content of the DHorizontalDivider","realm":"Client","args":[]},
{"name":"GetLeftWidth","parent":"DHorizontalDivider","type":"panelfunc","description":"Returns the current width of the left side, set by DHorizontalDivider:SetLeftWidth or by the user.","realm":"Client","args":[]},
{"name":"GetDragging","parent":"DHorizontalDivider","type":"panelfunc","description":"Returns whether or not the player is currently dragging the middle divider bar.","realm":"Client","args":[]},
{"name":"SetColWide","parent":"DGrid","type":"panelfunc","description":"\nSets the width of each column.\n\nThe cell panels (grid items) will not be resized or centered.\n\t","realm":"Client","args":[]},
{"name":"SortByMember","parent":"DGrid","type":"panelfunc","description":"Sorts the items in the grid. Does not visually update the grid, use Panel:InvalidateLayout for that.","realm":"Client","args":[]},
{"name":"GetDividerWidth","parent":"DHorizontalDivider","type":"panelfunc","description":"Returns the width of the horizontal divider bar, set by DHorizontalDivider:SetDividerWidth.","realm":"Client","args":[]},
{"name":"ShowCloseButton","parent":"DFrame","type":"panelfunc","description":"Determines whether the DFrame's control box (close, minimise and maximise buttons) is displayed.","realm":"Client","args":[]},
{"name":"RemoveItem","parent":"DGrid","type":"panelfunc","description":"Removes given panel from the DGrid:GetItems.","realm":"Client","args":[]},
{"name":"SetCols","parent":"DGrid","type":"panelfunc","description":"\nSets the number of columns this panel should have.\n\nThe DGrid will resize its width to match this value.\n\t","realm":"Client","args":[]},
{"name":"SetSizable","parent":"DFrame","type":"panelfunc","description":"\nSets whether or not the DFrame can be resized by the user.\n\nThis is achieved by clicking and dragging in the bottom right corner of the frame.\n\nYou can set the minimum size using DFrame:SetMinWidth and DFrame:SetMinHeight.\n\t","realm":"Client","args":[]},
{"name":"AddItem","parent":"DGrid","type":"panelfunc","description":"Adds a new item to the grid.","realm":"Client","args":[]},
{"name":"GetCols","parent":"DGrid","type":"panelfunc","description":"Returns the number of columns of this DGrid. Set by DGrid:SetCols.","realm":"Client","args":[]},
{"name":"SetTitle","parent":"DFrame","type":"panelfunc","description":"Sets the title of the frame.","realm":"Client","args":[]},
{"name":"GetRowHeight","parent":"DGrid","type":"panelfunc","description":"Returns the height of each row of the DGrid, which is set by DGrid:SetRowHeight.","realm":"Client","args":[]},
{"name":"GetColWide","parent":"DGrid","type":"panelfunc","description":"Returns the width of each column of the DGrid, which is set by DGrid:SetColWide.","realm":"Client","args":[]},
{"name":"GetItems","parent":"DGrid","type":"panelfunc","description":"Returns a list of panels in the grid.","realm":"Client","args":[]},
{"name":"SetMinWidth","parent":"DFrame","type":"panelfunc","description":"\nSets the minimum width the DFrame can be resized to by the user.\n\nThis only applies to users attempting to resize the frame; Panel:SetWide and similar methods will not be affected. You must call DFrame:SetSizable before the user can resize the frame.\n\t","realm":"Client","args":[]},
{"name":"OnClose","parent":"DFrame","type":"panelfunc","description":"\nCalled when the DFrame is closed with DFrame:Close. This applies when the `close` button in the DFrame's control box is clicked.\n\nThis is **not** called when the DFrame is removed with Panel:Remove.\n\t","realm":"Client","args":[]},
{"name":"SetPaintShadow","parent":"DFrame","type":"panelfunc","description":"Sets whether or not the shadow effect bordering the DFrame should be drawn.","realm":"Client","args":[]},
{"name":"SetIcon","parent":"DFrame","type":"panelfunc","description":"Adds or removes an icon on the left of the DFrame's title.","realm":"Client","args":[]},
{"name":"SetScreenLock","parent":"DFrame","type":"panelfunc","description":"Sets whether the DFrame is restricted to the boundaries of the screen resolution.","realm":"Client","args":[]},
{"name":"SetDeleteOnClose","parent":"DFrame","type":"panelfunc","description":"Determines whether or not the DFrame is removed when it is closed with DFrame:Close.","realm":"Client","args":[]},
{"name":"SetIsMenu","parent":"DFrame","type":"panelfunc","description":"\nSets whether the frame is part of a derma menu or not.\n\nIf this is set to `true`, Global.CloseDermaMenus will not be called when the frame is clicked, and thus any open menus will remain open.\n\t","realm":"Client","args":[]},
{"name":"SetDraggable","parent":"DFrame","type":"panelfunc","description":"Sets whether the frame should be draggable by the user. The DFrame can only be dragged from its title bar.","realm":"Client","args":[]},
{"name":"SetMinHeight","parent":"DFrame","type":"panelfunc","description":"\nSets the minimum height the DFrame can be resized to by the user.\n\nThis only applies to users attempting to resize the frame; Panel:SetTall and similar methods will not be affected. You must call DFrame:SetSizable before the user can resize the frame.\n\t","realm":"Client","args":[]},
{"name":"SetBackgroundBlur","parent":"DFrame","type":"panelfunc","description":"Blurs background behind the frame.","realm":"Client","args":[]},
{"name":"GetTitle","parent":"DFrame","type":"panelfunc","description":"Returns the title of the frame.","realm":"Client","args":[]},
{"name":"GetDraggable","parent":"DFrame","type":"panelfunc","description":"Gets whether or not the frame is draggable by the user.","realm":"Client","args":[]},
{"name":"GetMinWidth","parent":"DFrame","type":"panelfunc","description":"\nGets the minimum width the DFrame can be resized to by the user.\n\nYou must call DFrame:SetSizable before the user can resize the frame.\n\t","realm":"Client","args":[]},
{"name":"GetSizable","parent":"DFrame","type":"panelfunc","description":"\nGets whether or not the DFrame can be resized by the user.\n\nThis is achieved by clicking and dragging in the bottom right corner of the frame.\n\t","realm":"Client","args":[]},
{"name":"GetMinHeight","parent":"DFrame","type":"panelfunc","description":"\nGets the minimum height the DFrame can be resized to by the user.\n\nYou must call DFrame:SetSizable before the user can resize the frame.\n\t","realm":"Client","args":[]},
{"name":"GetScreenLock","parent":"DFrame","type":"panelfunc","description":"Gets whether or not the DFrame is restricted to the boundaries of the screen resolution.","realm":"Client","args":[]},
{"name":"GetDeleteOnClose","parent":"DFrame","type":"panelfunc","description":"Determines whether or not the DFrame will be removed when it is closed. This is set with DFrame:SetDeleteOnClose.","realm":"Client","args":[]},
{"name":"GetIsMenu","parent":"DFrame","type":"panelfunc","description":"Gets whether or not the frame is part of a derma menu. This is set with DFrame:SetIsMenu.","realm":"Client","args":[]},
{"name":"GetPaintShadow","parent":"DFrame","type":"panelfunc","description":"Gets whether or not the shadow effect bordering the DFrame is being drawn.","realm":"Client","args":[]},
{"name":"IsActive","parent":"DFrame","type":"panelfunc","description":"Determines if the frame or one of its children has the screen focus.","realm":"Client","args":[]},
{"name":"Center","parent":"DFrame","type":"panelfunc","description":"Centers the frame relative to the whole screen and invalidates its layout. This overrides Panel:Center.","realm":"Client","args":[]},
{"name":"ListBox","parent":"DForm","type":"panelfunc","description":"Adds a DListBox onto the DForm","realm":"Client","args":[]},
{"name":"SetName","parent":"DForm","type":"panelfunc","description":"Sets the title (header) name of the DForm. This is `Label` until set.","realm":"Client","args":[]},
{"name":"Rebuild","parent":"DForm","type":"panelfunc","description":"\n\n\nDoes nothing.\n\t","realm":"Client","args":[]},
{"name":"PanelSelect","parent":"DForm","type":"panelfunc","description":"Creates a DPanelSelect and docks it to the top of the DForm.","realm":"Client","args":[]},
{"name":"GetBackgroundBlur","parent":"DFrame","type":"panelfunc","description":"Gets whether the background behind the frame is being blurred.","realm":"Client","args":[]},
{"name":"NumSlider","parent":"DForm","type":"panelfunc","description":"Adds a DNumSlider onto the DForm","realm":"Client","args":[]},
{"name":"Close","parent":"DFrame","type":"panelfunc","description":"\nHides or removes the DFrame, and calls DFrame:OnClose.\n\nTo set whether the frame is hidden or removed, use DFrame:SetDeleteOnClose.\n\t","realm":"Client","args":[]},
{"name":"NumberWang","parent":"DForm","type":"panelfunc","description":"Adds a DNumberWang onto the DForm","realm":"Client","args":[]},
{"name":"TextEntry","parent":"DForm","type":"panelfunc","description":"Adds a DTextEntry to a DForm","realm":"Client","args":[]},
{"name":"Help","parent":"DForm","type":"panelfunc","description":"Adds a DLabel onto the DForm as a helper","realm":"Client","args":[]},
{"name":"ComboBox","parent":"DForm","type":"panelfunc","description":"Adds a DComboBox onto the DForm","realm":"Client","args":[]},
{"name":"ControlHelp","parent":"DForm","type":"panelfunc","description":"Adds a DLabel onto the DForm. Unlike DForm:Help, this is indented and is colored blue, depending on the derma skin.","realm":"Client","args":[]},
{"name":"CheckBox","parent":"DForm","type":"panelfunc","description":"Adds a DCheckBoxLabel onto the DForm","realm":"Client","args":[]},
{"name":"AddItem","parent":"DForm","type":"panelfunc","description":"\nAdds one or two items to the DForm.\nIf this method is called with only one argument, it is added to the bottom of the form. If two arguments are passed, they are placed side-by-side at the bottom of the form.\n\nInternally, this function is used by the various DForm functions to, for example, add labels to the left of buttons.\n\t","realm":"Client","args":[]},
{"name":"Button","parent":"DForm","type":"panelfunc","description":"Adds a DButton onto the DForm","realm":"Client","args":[]},
{"name":"ShowFolder","parent":"DFileBrowser","type":"panelfunc","description":"\nBuilds the file or icon list for the current directory.\n\nYou should use DFileBrowser:SetCurrentFolder to change the directory.\n\t","realm":"Client","args":[]},
{"name":"SortFiles","parent":"DFileBrowser","type":"panelfunc","description":"\nSorts the file list.\n\nThis is only functional when not using the model viewer. See DFileBrowser:SetModels\n\t","realm":"Client","args":[]},
{"name":"SetupFiles","parent":"DFileBrowser","type":"panelfunc","description":"\n Called to set up the DListView or DIconBrowser by DFileBrowser:Setup.\n\nThe icon browser is used when in models mode. See DFileBrowser:SetModels.\n\t","realm":"Client","args":[]},
{"name":"SetupTree","parent":"DFileBrowser","type":"panelfunc","description":" Called to set up the DTree by DFileBrowser:Setup.","realm":"Client","args":[]},
{"name":"Setup","parent":"DFileBrowser","type":"panelfunc","description":"\n Called to set up the DTree and file viewer when a base path has been set.\n\nCalls DFileBrowser:SetupTree and DFileBrowser:SetupFiles.\n\t","realm":"Client","args":[]},
{"name":"SetSearch","parent":"DFileBrowser","type":"panelfunc","description":"\nSets the search filter for the file tree.\n\nThis accepts the same wildcards as file.Find.\n\t","realm":"Client","args":[]},
{"name":"SetModels","parent":"DFileBrowser","type":"panelfunc","description":"\nEnables or disables the model viewer mode. In this mode, files are displayed as SpawnIcons instead of a list.\n\nThis should only be used for `.mdl` files; the spawn icons will display error models for others. See DFileBrowser:SetFileTypes\n\t","realm":"Client","args":[]},
{"name":"SetOpen","parent":"DFileBrowser","type":"panelfunc","description":"Opens or closes the file tree.","realm":"Client","args":[]},
{"name":"SetPath","parent":"DFileBrowser","type":"panelfunc","description":"\nSets the access path for the file tree. This is set to `GAME` by default.\n\nSee file.Read for how paths work.\n\t","realm":"Client","args":[]},
{"name":"SetCurrentFolder","parent":"DFileBrowser","type":"panelfunc","description":"Sets the directory/folder from which to display the file list.","realm":"Client","args":[]},
{"name":"SetFileTypes","parent":"DFileBrowser","type":"panelfunc","description":"\nSets the file type filter for the file list.\n\nThis accepts the same file extension wildcards as file.Find.\n\t","realm":"Client","args":[]},
{"name":"SetName","parent":"DFileBrowser","type":"panelfunc","description":"Sets the name to use for the file tree.","realm":"Client","args":[]},
{"name":"OnSelect","parent":"DFileBrowser","type":"panelfunc","description":"Called when a file is selected.","realm":"Client","args":[]},
{"name":"SetBaseFolder","parent":"DFileBrowser","type":"panelfunc","description":"\nSets the root directory/folder of the file tree.\n\nThis needs to be set for the file tree to be displayed.\n\t","realm":"Client","args":[]},
{"name":"OnRightClick","parent":"DFileBrowser","type":"panelfunc","description":"\nCalled when a file is right-clicked.\n\nWhen not in model viewer mode, DFileBrowser:OnSelect will also be called if the file is not already selected.\n\t","realm":"Client","args":[]},
{"name":"GetSearch","parent":"DFileBrowser","type":"panelfunc","description":"Returns the current search filter on the file tree.","realm":"Client","args":[]},
{"name":"OnDoubleClick","parent":"DFileBrowser","type":"panelfunc","description":"\nCalled when a file is double-clicked.\n\nDouble-clicking a file or icon will trigger **both** this and DFileBrowser:OnSelect.\n\t","realm":"Client","args":[]},
{"name":"GetOpen","parent":"DFileBrowser","type":"panelfunc","description":"Returns whether or not the file tree is open.","realm":"Client","args":[]},
{"name":"GetPath","parent":"DFileBrowser","type":"panelfunc","description":"\nReturns the access path of the file tree. This is `GAME` unless changed with DFileBrowser:SetPath.\n\nSee file.Read for how paths work.\n\t","realm":"Client","args":[]},
{"name":"GetFileTypes","parent":"DFileBrowser","type":"panelfunc","description":"Returns the current file type filter on the file list.","realm":"Client","args":[]},
{"name":"GetName","parent":"DFileBrowser","type":"panelfunc","description":"Returns the name being used for the file tree.","realm":"Client","args":[]},
{"name":"GetFolderNode","parent":"DFileBrowser","type":"panelfunc","description":"\nReturns the DTree Node that the file tree stems from.\n\nThis is a child of the root node of the DTree.\n\t","realm":"Client","args":[]},
{"name":"GetModels","parent":"DFileBrowser","type":"panelfunc","description":"Returns whether or not the model viewer mode is enabled. In this mode, files are displayed as SpawnIcons instead of a list.","realm":"Client","args":[]},
{"name":"GetCurrentFolder","parent":"DFileBrowser","type":"panelfunc","description":"Returns the current directory/folder being displayed.","realm":"Client","args":[]},
{"name":"GetExpanded","parent":"DExpandButton","type":"panelfunc","description":"Returns whether this DExpandButton is expanded or not.","realm":"Client","args":[]},
{"name":"OnEntityLost","parent":"DEntityProperties","type":"panelfunc","description":"Called when we were editing an entity and then it became invalid (probably removed)","realm":"Client","args":[]},
{"name":"SetEntity","parent":"DEntityProperties","type":"panelfunc","description":"Sets the entity to be edited by this panel. The entity must support the Editable Entities system or nothing will happen.","realm":"Client","args":[]},
{"name":"GetBaseFolder","parent":"DFileBrowser","type":"panelfunc","description":"Returns the root directory/folder of the file tree.","realm":"Client","args":[]},
{"name":"RebuildControls","parent":"DEntityProperties","type":"panelfunc","description":"\n\n\nCalled internally by DEntityProperties:SetEntity to rebuild the controls.\n\t","realm":"Client","args":[]},
{"name":"EntityLost","parent":"DEntityProperties","type":"panelfunc","description":"\n\n\nCalled internally when an entity being edited became invalid.\n\nYou should use DEntityProperties:OnEntityLost instead.\n\t","realm":"Client","args":[]},
{"name":"SetExpanded","parent":"DExpandButton","type":"panelfunc","description":"Sets whether this DExpandButton should be expanded or not. Only changes appearance.","realm":"Client","args":[]},
{"name":"EditVariable","parent":"DEntityProperties","type":"panelfunc","description":"\n\n\nCalled internally by DEntityProperties:RebuildControls.\n\t","realm":"Client","args":[]},
{"name":"Clear","parent":"DFileBrowser","type":"panelfunc","description":"Clears the file tree and list, and resets all values.","realm":"Client","args":[]},
{"name":"Toggle","parent":"DDrawer","type":"panelfunc","description":"Toggles the DDrawer.","realm":"Client","args":[]},
{"name":"GetOpenTime","parent":"DDrawer","type":"panelfunc","description":"Return the Open Time of DDrawer.","realm":"Client","args":[]},
{"name":"SetOpenTime","parent":"DDrawer","type":"panelfunc","description":"Set the time (in seconds) for DDrawer to open.","realm":"Client","args":[]},
{"name":"Open","parent":"DDrawer","type":"panelfunc","description":"Opens the DDrawer.","realm":"Client","args":[]},
{"name":"Close","parent":"DDrawer","type":"panelfunc","description":"Closes the DDrawer.","realm":"Client","args":[]},
{"name":"UpdateDropTarget","parent":"DDragBase","type":"panelfunc","description":"\n\n\nInternal function used in DDragBase:DropAction_Normal\n\t","realm":"Client","args":[]},
{"name":"SetOpenSize","parent":"DDrawer","type":"panelfunc","description":"Set the height of DDrawer","realm":"Client","args":[]},
{"name":"SetDnD","parent":"DDragBase","type":"panelfunc","description":"No Description","realm":"Client","args":[]},
{"name":"SetDropPos","parent":"DDragBase","type":"panelfunc","description":"\nDetermines where you can drop stuff.\n\"4\" for left\n\"5\" for center\n\"6\" for right\n\"8\" for top\n\"2\" for bottom\n\t","realm":"Client","args":[]},
{"name":"GetOpenSize","parent":"DDrawer","type":"panelfunc","description":"Return the Open Size of DDrawer.","realm":"Client","args":[]},
{"name":"SetUseLiveDrag","parent":"DDragBase","type":"panelfunc","description":"No Description","realm":"Client","args":[]},
{"name":"GetDnD","parent":"DDragBase","type":"panelfunc","description":"No Description","realm":"Client","args":[]},
{"name":"DropAction_Normal","parent":"DDragBase","type":"panelfunc","description":"\n\n\nInternal function used in DDragBase:DropAction_Copy\n\t","realm":"Client","args":[]},
{"name":"DropAction_Copy","parent":"DDragBase","type":"panelfunc","description":"\n\n\nInternal function used in DDragBase:MakeDroppable\n\t","realm":"Client","args":[]},
{"name":"OnModified","parent":"DDragBase","type":"panelfunc","description":"Called when anything is dropped on or rearranged within the DDragBase.","realm":"Client","args":[]},
{"name":"GetUseLiveDrag","parent":"DDragBase","type":"panelfunc","description":"No Description","realm":"Client","args":[]},
{"name":"DropAction_Simple","parent":"DDragBase","type":"panelfunc","description":"\n\n\nInternal function used in DDragBase:DropAction_Normal\n\t","realm":"Client","args":[]},
{"name":"SetSortItems","parent":"DComboBox","type":"panelfunc","description":"\nSets whether or not the items should be sorted alphabetically in the dropdown menu of the DComboBox. If set to false, items will appear in the order they were added by DComboBox:AddChoice calls.\n\nThis is enabled by default.\n\t","realm":"Client","args":[]},
{"name":"MakeDroppable","parent":"DDragBase","type":"panelfunc","description":"Makes the panel a receiver for any droppable panel with the same DnD name. Internally calls Panel:Receiver.","realm":"Client","args":[]},
{"name":"SetValue","parent":"DComboBox","type":"panelfunc","description":"Sets the text shown in the combo box when the menu is not collapsed.","realm":"Client","args":[]},
{"name":"OpenMenu","parent":"DComboBox","type":"panelfunc","description":"Opens the combo box drop down menu. Called when the combo box is clicked.","realm":"Client","args":[]},
{"name":"GetSelected","parent":"DComboBox","type":"panelfunc","description":"Returns the currently selected option's text and data","realm":"Client","args":[]},
{"name":"GetSortItems","parent":"DComboBox","type":"panelfunc","description":"\nReturns an whether the items in the dropdown will be alphabetically sorted or not.\n\nSee DComboBox:SetSortItems.\n\t","realm":"Client","args":[]},
{"name":"OnSelect","parent":"DComboBox","type":"panelfunc","description":"Called when an option in the combo box is selected.","realm":"Client","args":[]},
{"name":"GetOptionData","parent":"DComboBox","type":"panelfunc","description":"Returns an option's data based on the given index.","realm":"Client","args":[]},
{"name":"CloseMenu","parent":"DComboBox","type":"panelfunc","description":"Closes the combo box menu. Called when the combo box is clicked while open.","realm":"Client","args":[]},
{"name":"GetSelectedID","parent":"DComboBox","type":"panelfunc","description":"Returns the index (ID) of the currently selected option.","realm":"Client","args":[]},
{"name":"GetOptionText","parent":"DComboBox","type":"panelfunc","description":"Returns an option's text based on the given index.","realm":"Client","args":[]},
{"name":"GetOptionTextByData","parent":"DComboBox","type":"panelfunc","description":"Returns an option's text based on the given data.","realm":"Client","args":[]},
{"name":"Clear","parent":"DComboBox","type":"panelfunc","description":"Clears the combo box's text value, choices, and data values.","realm":"Client","args":[]},
{"name":"IsMenuOpen","parent":"DComboBox","type":"panelfunc","description":"Returns whether or not the combo box's menu is opened.","realm":"Client","args":[]},
{"name":"UseButtonOnlyStyle","parent":"DColumnSheet","type":"panelfunc","description":"Makes the tabs/buttons show only the image and no text.","realm":"Client","args":[]},
{"name":"AddSheet","parent":"DColumnSheet","type":"panelfunc","description":"Adds a new column/tab.","realm":"Client","args":[]},
{"name":"ChooseOptionID","parent":"DComboBox","type":"panelfunc","description":"Selects an option within a combo box based on its table index.","realm":"Client","args":[]},
{"name":"AddChoice","parent":"DComboBox","type":"panelfunc","description":"Adds a choice to the combo box.","realm":"Client","args":[]},
{"name":"UpdateConVars","parent":"DColorPalette","type":"panelfunc","description":"\n\n\nUpdates all the console variables set by DColorPalette:SetConVarR and so on with given color.\n\nCalled internally when a palette color is clicked.\n\t","realm":"Client","args":[]},
{"name":"UpdateConVar","parent":"DColorPalette","type":"panelfunc","description":"\n\n\nInternal helper function for DColorPalette:UpdateConVars.\n\t","realm":"Client","args":[]},
{"name":"ChooseOption","parent":"DComboBox","type":"panelfunc","description":"Selects a combo box option by its index and changes the text displayed at the top of the combo box.","realm":"Client","args":[]},
{"name":"SetNumRows","parent":"DColorPalette","type":"panelfunc","description":"\nRoughly sets the number of colors that can be picked by the user. If the DColorPalette is exactly 6 rows tall, this function will set the number of colors shown per row in the palette.\nDColorPalette:Reset or DColorPalette:ResetSavedColors must be called after this function to apply changes.\n\t","realm":"Client","args":[]},
{"name":"GetActiveButton","parent":"DColumnSheet","type":"panelfunc","description":"Returns the active button of this DColumnSheet.","realm":"Client","args":[]},
{"name":"SetActiveButton","parent":"DColumnSheet","type":"panelfunc","description":"\n\n\nMakes a button an active button for this DColumnSheet.\n\t","realm":"Client","args":[]},
{"name":"SetColorButtons","parent":"DColorPalette","type":"panelfunc","description":"Clears the palette and adds new buttons with given colors.","realm":"Client","args":[]},
{"name":"SetConVarG","parent":"DColorPalette","type":"panelfunc","description":"\nSets the ConVar name for the green channel of the color.\n\nSee also:\n* DColorPalette:SetConVarR - For the red channel\n* DColorPalette:SetConVarB - For the blue channel\n* DColorPalette:SetConVarA - For the alpha channel\n\t","realm":"Client","args":[]},
{"name":"ResetSavedColors","parent":"DColorPalette","type":"panelfunc","description":"\nResets this entire color palette to a default preset one and saves the changes.\n\nSee DColorPalette:Reset for version that does not save the changes.\n\t","realm":"Client","args":[]},
{"name":"SetConVarR","parent":"DColorPalette","type":"panelfunc","description":"\nSets the ConVar name for the red channel of the color.\n\nSee also:\n* DColorPalette:SetConVarG - For the green channel\n* DColorPalette:SetConVarB - For the blue channel\n* DColorPalette:SetConVarA - For the alpha channel\n\t","realm":"Client","args":[]},
{"name":"SetColor","parent":"DColorPalette","type":"panelfunc","description":"\n\n\nCurrently does nothing. Intended to \"select\" the color.\n\t","realm":"Client","args":[]},
{"name":"SaveColor","parent":"DColorPalette","type":"panelfunc","description":"\nSaves the color of given button across sessions.\n\nThe color is saved as a panel cookie, see Panel:SetCookie and Panel:SetCookieName.\n```\n\n \n```\n\nIt is expected that the amount of colors per palette (Panel:SetCookieName) is the same every time.\n\t","realm":"Client","args":[]},
{"name":"Reset","parent":"DColorPalette","type":"panelfunc","description":"\nResets this entire color palette to a default preset one, without saving.\n\nSee DColorPalette:ResetSavedColors for version that also saves the changes.\n\t","realm":"Client","args":[]},
{"name":"SetButtonSize","parent":"DColorPalette","type":"panelfunc","description":"\nSets the size of each palette button.\n\nThis is best kept to such a number, where this equation would return a whole number:\n`WidthOfColorPalette / ButtonSize= WholeNumber`\n\nIf not, there will be ugly whitespace on the right side of the panel.\n\t","realm":"Client","args":[]},
{"name":"SetConVarA","parent":"DColorPalette","type":"panelfunc","description":"\nSets the ConVar name for the alpha channel of the color.\n\nSee also:\n* DColorPalette:SetConVarR - For the red channel\n* DColorPalette:SetConVarG - For the green channel\n* DColorPalette:SetConVarB - For the blue channel\n\t","realm":"Client","args":[]},
{"name":"SetConVarB","parent":"DColorPalette","type":"panelfunc","description":"\nSets the ConVar name for the blue channel of the color.\n\nSee also:\n* DColorPalette:SetConVarR - For the red channel\n* DColorPalette:SetConVarG - For the green channel\n* DColorPalette:SetConVarA - For the alpha channel\n\t","realm":"Client","args":[]},
{"name":"GetConVarA","parent":"DColorPalette","type":"panelfunc","description":"\nReturns the ConVar name for the alpha channel of the color.\n\nSee also:\n* DColorPalette:GetConVarR - For the red channel\n* DColorPalette:GetConVarG - For the green channel\n* DColorPalette:GetConVarB - For the blue channel\n\t","realm":"Client","args":[]},
{"name":"NetworkColorChange","parent":"DColorPalette","type":"panelfunc","description":"\n\n\nUsed internally to make sure changes on one palette affect other palettes with same name.\n\t","realm":"Client","args":[]},
{"name":"OnRightClickButton","parent":"DColorPalette","type":"panelfunc","description":"Called when a palette button has been pressed","realm":"Client","args":[]},
{"name":"GetNumRows","parent":"DColorPalette","type":"panelfunc","description":"Returns the number of rows of the palette, provided 6 colors fill each row. This value is equal to the number of colors in the DColorPalette divided by 6.","realm":"Client","args":[]},
{"name":"GetConVarB","parent":"DColorPalette","type":"panelfunc","description":"\nReturns the ConVar name for the blue channel of the color.\n\nSee also:\n* DColorPalette:GetConVarR - For the red channel\n* DColorPalette:GetConVarG - For the green channel\n* DColorPalette:GetConVarA - For the alpha channel\n\t","realm":"Client","args":[]},
{"name":"OnValueChanged","parent":"DColorPalette","type":"panelfunc","description":"Called when the color is changed after clicking a new value.","realm":"Client","args":[]},
{"name":"GetConVarR","parent":"DColorPalette","type":"panelfunc","description":"\nReturns the ConVar name for the red channel of the color.\n\nSee also:\n* DColorPalette:GetConVarG - For the green channel\n* DColorPalette:GetConVarB - For the blue channel\n* DColorPalette:GetConVarA - For the alpha channel\n\t","realm":"Client","args":[]},
{"name":"GetButtonSize","parent":"DColorPalette","type":"panelfunc","description":"Returns the size of each palette button. Set by DColorPalette:SetButtonSize.","realm":"Client","args":[]},
{"name":"GetConVarG","parent":"DColorPalette","type":"panelfunc","description":"\nReturns the ConVar name for the green channel of the color.\n\nSee also:\n* DColorPalette:GetConVarR - For the red channel\n* DColorPalette:GetConVarB - For the blue channel\n* DColorPalette:GetConVarA - For the alpha channel\n\t","realm":"Client","args":[]},
{"name":"DoClick","parent":"DColorPalette","type":"panelfunc","description":"\n\n\nBasically the same functionality as DColorPalette:OnValueChanged, you should use that instead!\n\t","realm":"Client","args":[]},
{"name":"TranslateValues","parent":"DColorMixer","type":"panelfunc","description":"\n\n\n\nDoes nothing.\n\t","realm":"Client","args":[]},
{"name":"SetVector","parent":"DColorMixer","type":"panelfunc","description":"Sets the color of DColorMixer from a Vector. Alpha is not included.","realm":"Client","args":[]},
{"name":"UpdateColor","parent":"DColorMixer","type":"panelfunc","description":"\n\n\nUse DColorMixer:SetColor instead!\n\t","realm":"Client","args":[]},
{"name":"UpdateConVar","parent":"DColorMixer","type":"panelfunc","description":"","realm":"Client","args":[]},
{"name":"UpdateConVars","parent":"DColorMixer","type":"panelfunc","description":"","realm":"Client","args":[]},
{"name":"SetWangs","parent":"DColorMixer","type":"panelfunc","description":"Show / Hide the colors indicators in DColorMixer","realm":"Client","args":[]},
{"name":"SetConVarR","parent":"DColorMixer","type":"panelfunc","description":"\nSets the ConVar name for the red channel of the color.\n\nSee also:\n* DColorMixer:SetConVarG - For the green channel\n* DColorMixer:SetConVarB - For the blue channel\n* DColorMixer:SetConVarA - For the alpha channel\n\t","realm":"Client","args":[]},
{"name":"ValueChanged","parent":"DColorMixer","type":"panelfunc","description":"Called when the player changes the color of the DColorMixer.","realm":"Client","args":[]},
{"name":"SetLabel","parent":"DColorMixer","type":"panelfunc","description":"Sets the label's text to show.","realm":"Client","args":[]},
{"name":"SetPalette","parent":"DColorMixer","type":"panelfunc","description":"Show or hide the palette panel","realm":"Client","args":[]},
{"name":"GetPalette","parent":"DColorMixer","type":"panelfunc","description":"Return true if palette is shown, false if not.","realm":"Client","args":[]},
{"name":"SetConVarG","parent":"DColorMixer","type":"panelfunc","description":"\nSets the ConVar name for the green channel of the color.\n\nSee also:\n* DColorMixer:SetConVarR - For the red channel\n* DColorMixer:SetConVarB - For the blue channel\n* DColorMixer:SetConVarA - For the alpha channel\n\t","realm":"Client","args":[]},
{"name":"SetBaseColor","parent":"DColorMixer","type":"panelfunc","description":"\nSets the base color of the DColorCube part of the DColorMixer.\n\nSee also DColorCube:SetBaseRGB\n\t","realm":"Client","args":[]},
{"name":"SetColor","parent":"DColorMixer","type":"panelfunc","description":"Sets the color of the DColorMixer","realm":"Client","args":[]},
{"name":"SetConVarA","parent":"DColorMixer","type":"panelfunc","description":"\nSets the ConVar name for the alpha channel of the color.\n\nSee also:\n* DColorMixer:SetConVarR - For the red channel\n* DColorMixer:SetConVarG - For the green channel\n* DColorMixer:SetConVarB - For the blue channel\n\t","realm":"Client","args":[]},
{"name":"GetVector","parent":"DColorMixer","type":"panelfunc","description":"Returns the color as a normalized Vector.","realm":"Client","args":[]},
{"name":"GetConVarR","parent":"DColorMixer","type":"panelfunc","description":"\nReturns the ConVar name for the red channel of the color.\n\nSee also:\n* DColorMixer:GetConVarG - For the green channel\n* DColorMixer:GetConVarB - For the blue channel\n* DColorMixer:GetConVarA - For the alpha channel\n\t","realm":"Client","args":[]},
{"name":"SetConVarB","parent":"DColorMixer","type":"panelfunc","description":"\nSets the ConVar name for the blue channel of the color.\n\nSee also:\n* DColorMixer:SetConVarR - For the red channel\n* DColorMixer:SetConVarG - For the green channel\n* DColorMixer:SetConVarA - For the alpha channel\n\t","realm":"Client","args":[]},
{"name":"GetWangs","parent":"DColorMixer","type":"panelfunc","description":"Return true if the wangs are shown, false if not.","realm":"Client","args":[]},
{"name":"SetAlphaBar","parent":"DColorMixer","type":"panelfunc","description":"Show/Hide the alpha bar in DColorMixer","realm":"Client","args":[]},
{"name":"ConVarThink","parent":"DColorMixer","type":"panelfunc","description":"","realm":"Client","args":[]},
{"name":"GetConVarA","parent":"DColorMixer","type":"panelfunc","description":"\nReturns the ConVar name for the alpha channel of the color.\n\nSee also:\n* DColorMixer:GetConVarR - For the red channel\n* DColorMixer:GetConVarG - For the green channel\n* DColorMixer:GetConVarB - For the blue channel\n\t","realm":"Client","args":[]},
{"name":"DoConVarThink","parent":"DColorMixer","type":"panelfunc","description":"","realm":"Client","args":[]},
{"name":"GetConVarG","parent":"DColorMixer","type":"panelfunc","description":"\nReturns the ConVar name for the green channel of the color.\n\nSee also:\n* DColorMixer:GetConVarR - For the red channel\n* DColorMixer:GetConVarB - For the blue channel\n* DColorMixer:GetConVarA - For the alpha channel\n\t","realm":"Client","args":[]},
{"name":"UpdateColor","parent":"DColorCube","type":"panelfunc","description":"\n\n\nUpdates the color cube RGB based on the given x and y position. Similar to DColorCube:TranslateValues.\n\t","realm":"Client","args":[]},
{"name":"GetAlphaBar","parent":"DColorMixer","type":"panelfunc","description":"Return true if alpha bar is shown, false if not.","realm":"Client","args":[]},
{"name":"GetConVarB","parent":"DColorMixer","type":"panelfunc","description":"\nReturns the ConVar name for the blue channel of the color.\n\nSee also:\n* DColorMixer:GetConVarR - For the red channel\n* DColorMixer:GetConVarG - For the green channel\n* DColorMixer:GetConVarA - For the alpha channel\n\t","realm":"Client","args":[]},
{"name":"GetColor","parent":"DColorMixer","type":"panelfunc","description":"Returns the current selected color.","realm":"Client","args":[]},
{"name":"SetRGB","parent":"DColorCube","type":"panelfunc","description":"\n\n\nUsed internally to set the real \"output\" color of the panel.\n\t","realm":"Client","args":[]},
{"name":"TranslateValues","parent":"DColorCube","type":"panelfunc","description":"\n\n\nUpdates the color cube RGB based on the given x and y position and returns its arguments. Similar to DColorCube:UpdateColor.\n\t","realm":"Client","args":[]},
{"name":"OnValueChanged","parent":"DColorCombo","type":"panelfunc","description":"Called when the value (color) of this panel was changed.","realm":"Client","args":[]},
{"name":"SetColor","parent":"DColorCombo","type":"panelfunc","description":"Sets the color of this panel.","realm":"Client","args":[]},
{"name":"SetHue","parent":"DColorCube","type":"panelfunc","description":"\n\n\nAppears to do nothing and unused.\n\t","realm":"Client","args":[]},
{"name":"OnUserChanged","parent":"DColorCube","type":"panelfunc","description":"Function which is called when the color cube slider is moved (through user input). Meant to be overridden.","realm":"Client","args":[]},
{"name":"SetColor","parent":"DColorCube","type":"panelfunc","description":"Sets the base color of the color cube and updates the slider position.","realm":"Client","args":[]},
{"name":"IsEditing","parent":"DColorCombo","type":"panelfunc","description":"\nReturns true if the panel is currently being edited\n\nMore of a internal method, it technically should only ever work (i.e. return true) inside DColorCombo:OnValueChanged.\n\t","realm":"Client","args":[]},
{"name":"GetBaseRGB","parent":"DColorCube","type":"panelfunc","description":"Returns the base Color set by DColorCube:SetBaseRGB.","realm":"Client","args":[]},
{"name":"GetRGB","parent":"DColorCube","type":"panelfunc","description":"Returns the color cube's current set color.","realm":"Client","args":[]},
{"name":"SetBaseRGB","parent":"DColorCube","type":"panelfunc","description":"\nSets the base color and the color used to draw the color cube panel itself.\n\nCalling this when using a color that isn't 100% saturated and valued (Global.HSVToColor with saturation and value set to 1) causes the color cube to look inaccurate compared to the color that's returned by methods like DColorCube:GetRGB and DColorCube:OnUserChanged. You should use DColorCube:SetColor instead\n\t","realm":"Client","args":[]},
{"name":"GetHue","parent":"DColorCube","type":"panelfunc","description":"\n\n\nReturns the value set by DColorCube:SetHue.\n\t","realm":"Client","args":[]},
{"name":"BuildControls","parent":"DColorCombo","type":"panelfunc","description":"\n\n\nCalled internally to create panels necessary for this panel to work.\n\t","realm":"Client","args":[]},
{"name":"GetColor","parent":"DColorCombo","type":"panelfunc","description":"Returns the color of the DColorCombo.","realm":"Client","args":[]},
{"name":"IsDown","parent":"DColorButton","type":"panelfunc","description":"Returns whether the DColorButton is currently being pressed (the user is holding it down).","realm":"Client","args":[]},
{"name":"SetColor","parent":"DColorButton","type":"panelfunc","description":"Sets the color of the DColorButton.","realm":"Client","args":[]},
{"name":"UnselectAll","parent":"DCollapsibleCategory","type":"panelfunc","description":"No Description","realm":"Client","args":[]},
{"name":"SetID","parent":"DColorButton","type":"panelfunc","description":"Used internally by DColorPalette to detect which button is which.","realm":"Client","args":[]},
{"name":"UpdateAltLines","parent":"DCollapsibleCategory","type":"panelfunc","description":"\n\n\nUsed internally to update the \"AltLine\" property on all \"child\" panels.\n\t","realm":"Client","args":[]},
{"name":"Toggle","parent":"DCollapsibleCategory","type":"panelfunc","description":"Toggles the expanded state of the DCollapsibleCategory.","realm":"Client","args":[]},
{"name":"GetColor","parent":"DColorButton","type":"panelfunc","description":"Returns the color of the button","realm":"Client","args":[]},
{"name":"GetID","parent":"DColorButton","type":"panelfunc","description":"\nReturns the unique ID set by DColorButton:SetID.\n\nUsed internally by DColorPalette\n\t","realm":"Client","args":[]},
{"name":"SetLabel","parent":"DCollapsibleCategory","type":"panelfunc","description":"Sets the name of the DCollapsibleCategory.","realm":"Client","args":[]},
{"name":"SetContents","parent":"DCollapsibleCategory","type":"panelfunc","description":"Sets the contents of the DCollapsibleCategory.","realm":"Client","args":[]},
{"name":"SetList","parent":"DCollapsibleCategory","type":"panelfunc","description":"No Description","realm":"Client","args":[]},
{"name":"SetPadding","parent":"DCollapsibleCategory","type":"panelfunc","description":"Doesn't actually do anything.","realm":"Client","args":[]},
{"name":"SetAnimTime","parent":"DCollapsibleCategory","type":"panelfunc","description":"Sets the time in seconds it takes to expand the DCollapsibleCategory","realm":"Client","args":[]},
{"name":"SetStartHeight","parent":"DCollapsibleCategory","type":"panelfunc","description":"No Description","realm":"Client","args":[]},
{"name":"SetPaintBackground","parent":"DCollapsibleCategory","type":"panelfunc","description":"Sets whether or not the background should be painted.","realm":"Client","args":[]},
{"name":"SetExpanded","parent":"DCollapsibleCategory","type":"panelfunc","description":"\nSets whether the DCollapsibleCategory is expanded or not upon opening the container.\n\nYou should use DCollapsibleCategory:Toggle or DCollapsibleCategory:DoExpansion instead.\n\t","realm":"Client","args":[]},
{"name":"OnToggle","parent":"DCollapsibleCategory","type":"panelfunc","description":"Called by DCollapsibleCategory:Toggle.","realm":"Client","args":[]},
{"name":"GetStartHeight","parent":"DCollapsibleCategory","type":"panelfunc","description":"No Description","realm":"Client","args":[]},
{"name":"DoExpansion","parent":"DCollapsibleCategory","type":"panelfunc","description":"Forces the category to open or collapse","realm":"Client","args":[]},
{"name":"GetPadding","parent":"DCollapsibleCategory","type":"panelfunc","description":"\nDoesn't actually do anything.\n\nReturns the number set by DCollapsibleCategory:SetPadding.\n\t","realm":"Client","args":[]},
{"name":"GetList","parent":"DCollapsibleCategory","type":"panelfunc","description":"No Description","realm":"Client","args":[]},
{"name":"Add","parent":"DCollapsibleCategory","type":"panelfunc","description":"Adds a new text button to the collapsible category, like the tool menu in Spawnmenu.","realm":"Client","args":[]},
{"name":"Toggle","parent":"DCheckBoxLabel","type":"panelfunc","description":"Toggles the checked state of the DCheckBoxLabel.","realm":"Client","args":[]},
{"name":"GetExpanded","parent":"DCollapsibleCategory","type":"panelfunc","description":"Returns whether the DCollapsibleCategory is expanded or not.","realm":"Client","args":[]},
{"name":"GetAnimTime","parent":"DCollapsibleCategory","type":"panelfunc","description":"Returns the expand/collapse animation time set by DCollapsibleCategory:SetAnimTime.","realm":"Client","args":[]},
{"name":"GetPaintBackground","parent":"DCollapsibleCategory","type":"panelfunc","description":"Returns whether or not the background should be painted.","realm":"Client","args":[]},
{"name":"AnimSlide","parent":"DCollapsibleCategory","type":"panelfunc","description":"\n\n\nInternal function that handles the open/close animations.\n\t","realm":"Client","args":[]},
{"name":"SetValue","parent":"DCheckBoxLabel","type":"panelfunc","description":"Sets the checked state of the checkbox, and calls DCheckBoxLabel:OnChange and the checkbox's Panel:ConVarChanged methods.","realm":"Client","args":[]},
{"name":"SetTextColor","parent":"DCheckBoxLabel","type":"panelfunc","description":"Sets the text color for the DCheckBoxLabel.","realm":"Client","args":[]},
{"name":"OnChange","parent":"DCheckBoxLabel","type":"panelfunc","description":"Called when the \"checked\" state is changed.","realm":"Client","args":[]},
{"name":"GetIndent","parent":"DCheckBoxLabel","type":"panelfunc","description":"Gets the indentation of the element on the X axis.","realm":"Client","args":[]},
{"name":"SetChecked","parent":"DCheckBoxLabel","type":"panelfunc","description":"Sets the checked state of the checkbox. Does not call DCheckBoxLabel:OnChange or Panel:ConVarChanged, unlike DCheckBoxLabel:SetValue.","realm":"Client","args":[]},
{"name":"SetDark","parent":"DCheckBoxLabel","type":"panelfunc","description":"\nYou really should be using DCheckBoxLabel:SetTextColor instread\n\nSets the text of the DCheckBoxLabel to be dark colored.\n\t","realm":"Client","args":[]},
{"name":"SetConVar","parent":"DCheckBoxLabel","type":"panelfunc","description":"Sets the console variable to be set when the checked state of the DCheckBoxLabel changes.","realm":"Client","args":[]},
{"name":"SetBright","parent":"DCheckBoxLabel","type":"panelfunc","description":"\nYou really should be using DCheckBoxLabel:SetTextColor instread\n\nSets the color of the DCheckBoxLabel's text to the bright text color defined in the skin.\n\t","realm":"Client","args":[]},
{"name":"SetFont","parent":"DCheckBoxLabel","type":"panelfunc","description":"Sets the font of the text part of the DCheckBoxLabel.","realm":"Client","args":[]},
{"name":"SetIndent","parent":"DCheckBoxLabel","type":"panelfunc","description":"Sets the indentation of the element on the X axis.","realm":"Client","args":[]},
{"name":"GetChecked","parent":"DCheckBoxLabel","type":"panelfunc","description":"Gets the checked state of the checkbox. This calls the checkbox's DCheckBox:GetChecked function.","realm":"Client","args":[]},
{"name":"IsEditing","parent":"DCheckBox","type":"panelfunc","description":"Returns whether the state of the checkbox is being edited. This means whether the user is currently clicking (mouse-down) on the checkbox, and applies to both the left and right mouse buttons.","realm":"Client","args":[]},
{"name":"SetValue","parent":"DCheckBox","type":"panelfunc","description":"Sets the checked state of the checkbox, and calls the checkbox's DCheckBox:OnChange and Panel:ConVarChanged methods.","realm":"Client","args":[]},
{"name":"SetChecked","parent":"DCheckBox","type":"panelfunc","description":"Sets the checked state of the checkbox. Does not call the checkbox's DCheckBox:OnChange and Panel:ConVarChanged methods, unlike DCheckBox:SetValue.","realm":"Client","args":[]},
{"name":"Toggle","parent":"DCheckBox","type":"panelfunc","description":"Toggles the checked state of the checkbox, and calls the checkbox's DCheckBox:OnChange and Panel:ConVarChanged methods. This is called by DCheckBox:DoClick.","realm":"Client","args":[]},
{"name":"OnChange","parent":"DCheckBox","type":"panelfunc","description":"Called when the \"checked\" state is changed.","realm":"Client","args":[]},
{"name":"GetChecked","parent":"DCheckBox","type":"panelfunc","description":"Gets the checked state of the checkbox.","realm":"Client","args":[]},
{"name":"AddItem","parent":"DCategoryList","type":"panelfunc","description":"Adds an element to the list.","realm":"Client","args":[]},
{"name":"Add","parent":"DCategoryList","type":"panelfunc","description":"Adds a DCollapsibleCategory to the list.","realm":"Client","args":[]},
{"name":"UnselectAll","parent":"DCategoryList","type":"panelfunc","description":"Calls Panel:UnselectAll on all child elements, if they have it.","realm":"Client","args":[]},
{"name":"UpdateColours","parent":"DButton","type":"panelfunc","description":"A hook called from within DLabel's PANEL:ApplySchemeSettings to determine the color of the text on display.","realm":"Client","args":[]},
{"name":"OpenForPos","parent":"DBubbleContainer","type":"panelfunc","description":"Sets the speech bubble position and size along with the dialog point position.","realm":"Client","args":[]},
{"name":"GetDrawBorder","parent":"DButton","type":"panelfunc","description":"\n\n\nReturns value set by DButton:SetDrawBorder. See that page for more info.\n\t","realm":"Client","args":[]},
{"name":"SetConsoleCommand","parent":"DButton","type":"panelfunc","description":"\nSets a console command to be called when the button is clicked.\n\nThis overrides the button's `DoClick` method.\n\t","realm":"Client","args":[]},
{"name":"IsDown","parent":"DButton","type":"panelfunc","description":"Returns true if the DButton is currently depressed (a user is clicking on it).","realm":"Client","args":[]},
{"name":"SetDrawBorder","parent":"DButton","type":"panelfunc","description":"\n\n\nDoes absolutely nothing at all. Default value is automatically set to true.\n\t","realm":"Client","args":[]},
{"name":"SetDisabled","parent":"DButton","type":"panelfunc","description":"\nUse Panel:SetEnabled instead.Sets whether or not the DButton is disabled.\n\nWhen disabled, the button is `greyed out` and cannot be clicked.\n\t","realm":"Client","args":[]},
{"name":"SetIcon","parent":"DButton","type":"panelfunc","description":"Sets an image to be displayed as the button's background. Alias of DButton:SetImage","realm":"Client","args":[]},
{"name":"SetImage","parent":"DButton","type":"panelfunc","description":"\nSets an image to be displayed as the button's background.\n\nAlso see: DImageButton\n\t","realm":"Client","args":[]},
{"name":"UpdateText","parent":"DBinder","type":"panelfunc","description":" Used to set the text of the DBinder to the current key binding, or `NONE`.","realm":"Client","args":[]},
{"name":"SetValue","parent":"DBinder","type":"panelfunc","description":"Alias of DBinder:SetSelected.","realm":"Client","args":[]},
{"name":"OnChange","parent":"DBinder","type":"panelfunc","description":"Called when the player selects a new bind.","realm":"Client","args":[]},
{"name":"GetValue","parent":"DBinder","type":"panelfunc","description":"Gets the code of the key currently bound by the DBinder. Same as DBinder:GetSelectedNumber.","realm":"Client","args":[]},
{"name":"SetBarColor","parent":"DAlphaBar","type":"panelfunc","description":"Sets the base color of the alpha bar. This is the color for which the alpha channel is being modified.","realm":"Client","args":[]},
{"name":"GetSelectedNumber","parent":"DBinder","type":"panelfunc","description":"Gets the code of the key currently bound by the DBinder. Same as DBinder:GetValue.","realm":"Client","args":[]},
{"name":"SetValue","parent":"DAlphaBar","type":"panelfunc","description":"Sets the alpha value or the alpha bar.","realm":"Client","args":[]},
{"name":"OnChange","parent":"DAlphaBar","type":"panelfunc","description":"Called when user changes the desired alpha value with the control.","realm":"Client","args":[]},
{"name":"GetValue","parent":"DAlphaBar","type":"panelfunc","description":"Returns the alpha value of the alpha bar.","realm":"Client","args":[]},
{"name":"SetFirstPerson","parent":"DAdjustableModelPanel","type":"panelfunc","description":"\nEnables mouse and keyboard-based adjustment of the perspective.\n\nThis is set to `true` automatically each time mouse capture is enabled, and hence doesn't serve as a usable setting, other than to disable this functionality after the PANEL:OnMousePressed event.\n\t","realm":"Client","args":[]},
{"name":"SetSelectedNumber","parent":"DBinder","type":"panelfunc","description":"Sets the current key bound by the DBinder, and updates the button's text as well as the ConVar.","realm":"Client","args":[]},
{"name":"GetBarColor","parent":"DAlphaBar","type":"panelfunc","description":"Returns the base color of the alpha bar. This is the color for which the alpha channel is being modified.","realm":"Client","args":[]},
{"name":"GetFirstPerson","parent":"DAdjustableModelPanel","type":"panelfunc","description":"Gets whether mouse and keyboard-based adjustment of the perspective has been enabled. See DAdjustableModelPanel:SetFirstPerson for more information.","realm":"Client","args":[]},
{"name":"FirstPersonControls","parent":"DAdjustableModelPanel","type":"panelfunc","description":" Used to adjust the perspective in the model panel via the keyboard, when the right mouse button is used.","realm":"Client","args":[]},
{"name":"MatSelect","parent":"ControlPanel","type":"panelfunc","description":"Creates a MatSelect panel and adds it as an ControlPanel:AddPanel.","realm":"Client","args":[]},
{"name":"SetLabel","parent":"ControlPresets","type":"panelfunc","description":"Set the name label text.","realm":"Client","args":[]},
{"name":"FillViaFunction","parent":"ControlPanel","type":"panelfunc","description":"Calls the given function with this panel as the only argument. Used by the spawnmenu to populate the control panel.","realm":"Client","args":[]},
{"name":"GetEmbeddedPanel","parent":"ControlPanel","type":"panelfunc","description":"Returns this control panel.","realm":"Client","args":[]},
{"name":"AddConVar","parent":"ControlPresets","type":"panelfunc","description":"Adds a convar to be managed by this control.","realm":"Client","args":[]},
{"name":"CaptureMouse","parent":"DAdjustableModelPanel","type":"panelfunc","description":" Used by the panel to perform mouse capture operations when adjusting the model.","realm":"Client","args":[]},
{"name":"ControlValues","parent":"ControlPanel","type":"panelfunc","description":"Sets control values of the control panel.","realm":"Client","args":[]},
{"name":"GetConVars","parent":"ControlPresets","type":"panelfunc","description":"Get a list of all Console Variables being managed by this panel.","realm":"Client","args":[]},
{"name":"SetName","parent":"ContentIcon","type":"panelfunc","description":"Sets the tool tip and the \"nice\" name to be displayed by the content icon.","realm":"Client","args":[]},
{"name":"TestForChanges","parent":"ContextBase","type":"panelfunc","description":"You should override this function and use it to check whether your convar value changed.","realm":"Client","args":[]},
{"name":"SetConVar","parent":"ContextBase","type":"panelfunc","description":"Sets the ConVar for the panel to change/handle.","realm":"Client","args":[]},
{"name":"ConVar","parent":"ContextBase","type":"panelfunc","description":"Returns the ConVar for the panel to change/handle, set by ContextBase:SetConVar","realm":"Client","args":[]},
{"name":"AddPanel","parent":"ControlPanel","type":"panelfunc","description":"Adds an item by calling DForm:AddItem.","realm":"Client","args":[]},
{"name":"AddControl","parent":"ControlPanel","type":"panelfunc","description":"\nIt is recommended to use DForm's members instead.\n\nAdds a control to the control panel.\n\t","realm":"Client","args":[]},
{"name":"SetNPCWeapon","parent":"ContentIcon","type":"panelfunc","description":"Sets a table of weapon classes for the content icon with \"NPC\" content type to be randomly chosen from when user tries to spawn the NPC.","realm":"Client","args":[]},
{"name":"SetMaterial","parent":"ContentIcon","type":"panelfunc","description":"Sets the material to be displayed as the content icon.","realm":"Client","args":[]},
{"name":"SetSpawnName","parent":"ContentIcon","type":"panelfunc","description":"Sets the internal \"name\" for the content icon, usually a class name for an entity.","realm":"Client","args":[]},
{"name":"ControlValues","parent":"ContextBase","type":"panelfunc","description":"Called by spawnmenu functions (when creating a context menu) to fill this control with data.","realm":"Client","args":[]},
{"name":"GetColor","parent":"ContentIcon","type":"panelfunc","description":"Returns the color set by ContentIcon:SetColor","realm":"Client","args":[]},
{"name":"GetContentType","parent":"ContentIcon","type":"panelfunc","description":"Returns the content type used to save and restore the content icon in a spawnlist.","realm":"Client","args":[]},
{"name":"SetAdminOnly","parent":"ContentIcon","type":"panelfunc","description":"Sets whether the content item is admin only. This makes the icon to display a admin icon in the top left corner of the icon.","realm":"Client","args":[]},
{"name":"SetColor","parent":"ContentIcon","type":"panelfunc","description":"Sets the color for the content icon. Currently is not used by the content icon panel.","realm":"Client","args":[]},
{"name":"ViewModelDrawn","parent":"WEAPON","type":"hook","description":"Called straight after the view model has been drawn. This is called before GM:PostDrawViewModel and WEAPON:PostDrawViewModel.","realm":"Client","args":[]},
{"name":"GetSpawnName","parent":"ContentIcon","type":"panelfunc","description":"Returns the internal \"name\" for the content icon, usually a class name for an entity.","realm":"Client","args":[]},
{"name":"TranslateFOV","parent":"WEAPON","type":"hook","description":"\nAllows to change players field of view while player holds the weapon.\n\nThis hook must be defined shared and return same value on both to properly affect Area Portals.\n\t","realm":"Shared","args":[]},
{"name":"SetContentType","parent":"ContentIcon","type":"panelfunc","description":"Sets the content type used to save and restore the content icon in a spawnlist.","realm":"Client","args":[]},
{"name":"OpenMenu","parent":"ContentIcon","type":"panelfunc","description":"A hook for override, by default does nothing. Called when user right clicks on the content icon, you are supposed to open a Global.DermaMenu here with additional options.","realm":"Client","args":[]},
{"name":"GetNPCWeapon","parent":"ContentIcon","type":"panelfunc","description":"Returns a table of weapon classes for the content icon with \"NPC\" content type to be randomly chosen from when user tries to spawn the NPC.","realm":"Client","args":[]},
{"name":"TakeSecondaryAmmo","parent":"WEAPON","type":"hook","description":"A convenience function to remove secondary ammo from clip.","realm":"Shared","args":[]},
{"name":"Think","parent":"WEAPON","type":"hook","description":"\nCalled when the swep thinks.\n\nThis hook won't be called during the deploy animation and when using Weapon:DefaultReload.\n\nDespite being a predicted hook, this hook is called clientside in single player, however it will not be recognized as a predicted hook to Player:GetCurrentCommand.\n\nThis hook will be called before Player movement is processed on the client, and after on the server.\n\nThis will not be run during deploy animations after a serverside-only deploy. This usually happens after picking up and dropping an object with +use.\n\t","realm":"Shared","args":[]},
{"name":"TakePrimaryAmmo","parent":"WEAPON","type":"hook","description":"A convenience function to remove primary ammo from clip.","realm":"Shared","args":[]},
{"name":"ShouldDrawViewModel","parent":"WEAPON","type":"hook","description":"Called to determine if the view model should be drawn or not.","realm":"Client","args":[]},
{"name":"TranslateActivity","parent":"WEAPON","type":"hook","description":"\nTranslate a player's Activity into a weapon's activity, depending on how you want the player to be holding the weapon.\n\nFor example, ACT_MP_RUN becomes ACT_HL2MP_RUN_PISTOL.\n\t","realm":"Shared","args":[]},
{"name":"ShootBullet","parent":"WEAPON","type":"hook","description":"A convenience function to shoot bullets.","realm":"Shared","args":[]},
{"name":"ShootEffects","parent":"WEAPON","type":"hook","description":"A convenience function to create shoot effects.","realm":"Shared","args":[]},
{"name":"ShouldDropOnDie","parent":"WEAPON","type":"hook","description":"\nShould this weapon be dropped when its owner dies?\n\nThis only works if the player has Player:ShouldDropWeapon set to true.\n\t","realm":"Server","args":[]},
{"name":"SetWeaponHoldType","parent":"WEAPON","type":"hook","description":"\nSets the hold type of the weapon. This must be called on **both** the server and the client to work properly.\n\n**NOTE:** You should avoid calling this function and call Weapon:SetHoldType now.\n\t","realm":"Shared","args":[]},
{"name":"SetupDataTables","parent":"WEAPON","type":"hook","description":"Called when the SWEP should set up its Networking_Entities.","realm":"Shared","args":[]},
{"name":"PreDrawViewModel","parent":"WEAPON","type":"hook","description":"Allows you to modify viewmodel while the weapon in use before it is drawn. This hook only works if you haven't overridden GM:PreDrawViewModel.","realm":"Client","args":[]},
{"name":"SecondaryAttack","parent":"WEAPON","type":"hook","description":"\nCalled when secondary attack button ( +attack2 ) is pressed.\n\nFor issues with this hook being called rapidly on the client side, see the global function Global.IsFirstTimePredicted.\n\t","realm":"Shared","args":[]},
{"name":"PrimaryAttack","parent":"WEAPON","type":"hook","description":"\nCalled when primary attack button ( +attack ) is pressed.\n\nSince this is a .\n\nWhen in singleplayer, this function is only called in the server realm. When in multiplayer, the hook will be called on both the server and the client in order to allow for Prediction.\n\nYou can force the hook to always be called on client like this:\n\n```\nif ( game.SinglePlayer() ) then self:CallOnClient( \"PrimaryAttack\" ) end\n```\n\n\nNote that due to prediction, in multiplayer SWEP:PrimaryAttack is called multiple times per one \"shot\" with the gun. To work around that, use Global.IsFirstTimePredicted.\n\t","realm":"Shared","args":[]},
{"name":"RenderScreen","parent":"WEAPON","type":"hook","description":"\nCalled every frame just before GM:RenderScene.\n\nUsed by the Tool Gun to render view model screens (TOOL:DrawToolScreen).\n\n\nMaterials rendered in this hook require $ignorez parameter to draw properly.\n\t","realm":"Client","args":[]},
{"name":"SetDeploySpeed","parent":"WEAPON","type":"hook","description":"Sets the weapon deploy speed. This value needs to match on client and server.","realm":"Shared","args":[]},
{"name":"Reload","parent":"WEAPON","type":"hook","description":"Called when the reload key ( +reload ) is pressed.","realm":"Shared","args":[]},
{"name":"PrintWeaponInfo","parent":"WEAPON","type":"hook","description":"A convenience function that draws the weapon info box, used in WEAPON:DrawWeaponSelection.","realm":"Client","args":[]},
{"name":"OnRestore","parent":"WEAPON","type":"hook","description":"\nCalled when the weapon entity is reloaded from a Source Engine save (not the Sandbox saves or dupes) or on a changelevel (for example Half-Life 2 campaign level transitions).\n\nFor the duplicator callbacks, see ENTITY:OnDuplicated.\n\nSee also saverestore for relevant functions.\n\t","realm":"Shared","args":[]},
{"name":"OwnerChanged","parent":"WEAPON","type":"hook","description":"\nCalled when weapon is dropped or picked up by a new player.\n\nSee also WEAPON:OnDrop.\n\t","realm":"Shared","args":[]},
{"name":"PostDrawViewModel","parent":"WEAPON","type":"hook","description":"\nCalled after the view model has been drawn while the weapon in use. This hook is called from the default implementation of GM:PostDrawViewModel, and as such, will not occur if it has been overridden.\n\nWEAPON:ViewModelDrawn is an alternative hook which is always called before GM:PostDrawViewModel.\n\t","realm":"Client","args":[]},
{"name":"OnReloaded","parent":"WEAPON","type":"hook","description":"Called whenever the weapons Lua script is reloaded.","realm":"Shared","args":[]},
{"name":"Holster","parent":"WEAPON","type":"hook","description":"\nCalled when weapon tries to holster.\n\nThis is called twice for every holster clientside, one in Prediction and one not.\n\nBefore WEAPON:OnRemove is called, this function is only called serverside.\n\t","realm":"Shared","args":[]},
{"name":"HUDShouldDraw","parent":"WEAPON","type":"hook","description":"This hook determines which parts of the HUD to draw.","realm":"Client","args":[]},
{"name":"OnDrop","parent":"WEAPON","type":"hook","description":"\nCalled when weapon is dropped by Player:DropWeapon.\n\nSee also WEAPON:OwnerChanged.\n\t","realm":"Server","args":[]},
{"name":"OnRemove","parent":"WEAPON","type":"hook","description":"Called when the swep is about to be removed.","realm":"Shared","args":[]},
{"name":"Initialize","parent":"WEAPON","type":"hook","description":"\nCalled when the weapon entity is created.\n\nEntity:GetOwner will return NULL at this point because the weapon is not equpped by a player or NPC yet. Use WEAPON:Equip or WEAPON:Deploy if you need the owner to be valid.\n\nThis is sometimes not called clientside. You can work around this by setting a variable in Initialize and check if it exists in WEAPON:Think. See the example below.\n\nThis is not called serverside after a quicksave.\n\t","realm":"Shared","args":[]},
{"name":"KeyValue","parent":"WEAPON","type":"hook","description":"\nCalled when the engine sets a value for this scripted weapon.\n\nSee GM:EntityKeyValue for a hook that works for all entities.\n\n\nSee ENTITY:KeyValue for an  hook that works for scripted entities.\n\t","realm":"Server","args":[]},
{"name":"GetTracerOrigin","parent":"WEAPON","type":"hook","description":"Allows you to override where the tracer effect comes from. ( Visual bullets )","realm":"Client","args":[]},
{"name":"GetNPCRestTimes","parent":"WEAPON","type":"hook","description":"Called when the weapon is used by NPCs to tell the NPC how to use this weapon. Controls amount of time the NPC can rest (not shoot) between bursts.","realm":"Server","args":[]},
{"name":"GetViewModelPosition","parent":"WEAPON","type":"hook","description":"This hook allows you to adjust view model position and angles.","realm":"Client","args":[]},
{"name":"Equip","parent":"WEAPON","type":"hook","description":"Called when a player or NPC has picked the weapon up.","realm":"Server","args":[]},
{"name":"GetNPCBulletSpread","parent":"WEAPON","type":"hook","description":"\nCalled when the weapon is used by NPCs to determine how accurate the bullets fired should be.\n\nThe inaccuracy is simulated by changing the NPC:GetAimVector based on the value returned from this hook.\n\t","realm":"Server","args":[]},
{"name":"EquipAmmo","parent":"WEAPON","type":"hook","description":"\nThe player has picked up the weapon and has taken the ammo from it.\nThe weapon will be removed immidiately after this call.\n\t","realm":"Server","args":[]},
{"name":"FreezeMovement","parent":"WEAPON","type":"hook","description":"\nThis hook allows you to freeze players screen.\nPlayer will still be able to move or shoot\n\t","realm":"Client","args":[]},
{"name":"FireAnimationEvent","parent":"WEAPON","type":"hook","description":"\nCalled before firing animation events, such as muzzle flashes or shell ejections.\n\nThis will only be called serverside for 3000-range events, and clientside for 5000-range  and other events.\n\t","realm":"Shared","args":[]},
{"name":"GetCapabilities","parent":"WEAPON","type":"hook","description":"This hook is for NPCs, you return what they should try to do with it.","realm":"Server","args":[]},
{"name":"GetNPCBurstSettings","parent":"WEAPON","type":"hook","description":"Called when the weapon is used by NPCs to tell the NPC how to use this weapon. Controls how long the NPC can or should shoot continuously.","realm":"Server","args":[]},
{"name":"DrawWeaponSelection","parent":"WEAPON","type":"hook","description":"This hook draws the selection icon in the weapon selection menu.","realm":"Client","args":[]},
{"name":"DrawWorldModel","parent":"WEAPON","type":"hook","description":"Called when we are about to draw the world model.","realm":"Client","args":[]},
{"name":"DrawWorldModelTranslucent","parent":"WEAPON","type":"hook","description":"Called when we are about to draw the translucent world model.","realm":"Client","args":[]},
{"name":"Deploy","parent":"WEAPON","type":"hook","description":"\nCalled when player has just switched to this weapon.\n\nDue to this hook being predicted, it is not called clientside in singleplayer at all, and in multiplayer it will not be called clientside if the weapon is switched with Player:SelectWeapon or the \"use\" console command, however it will be called clientside with the default weapon selection menu and when using CUserCmd:SelectWeapon\n\t","realm":"Shared","args":[]},
{"name":"CustomAmmoDisplay","parent":"WEAPON","type":"hook","description":"\nAllows you to use any numbers you want for the ammo display on the HUD.\n\nCan be useful for weapons that don't use standard ammo.\n\t","realm":"Client","args":[]},
{"name":"DoDrawCrosshair","parent":"WEAPON","type":"hook","description":"\nCalled when the crosshair is about to get drawn, and allows you to override it.\n\nThis function will not be called if **SWEP.DrawCrosshair** set to false.\nThis function will not be called if player was affected by Player:CrosshairDisable.\n\nThe arguments passed to this function are not affected by **SWEP.AccurateCrosshair**.\n\t","realm":"Client","args":[]},
{"name":"DrawHUD","parent":"WEAPON","type":"hook","description":"\nThis hook allows you to draw on screen while this weapon is in use.\n\nIf you want to draw a custom crosshair, consider using WEAPON:DoDrawCrosshair instead.\n\t","realm":"Client","args":[]},
{"name":"CanSecondaryAttack","parent":"WEAPON","type":"hook","description":"Helper function for checking for no ammo.","realm":"Shared","args":[]},
{"name":"DrawHUDBackground","parent":"WEAPON","type":"hook","description":"This hook allows you to draw on screen while this weapon is in use. This hook is called **before** WEAPON:DrawHUD and is equivalent of GM:HUDPaintBackground.","realm":"Client","args":[]},
{"name":"DoImpactEffect","parent":"WEAPON","type":"hook","description":"Called so the weapon can override the impact effects it makes.","realm":"Shared","args":[]},
{"name":"CanPrimaryAttack","parent":"WEAPON","type":"hook","description":"Helper function for checking for no ammo.","realm":"Shared","args":[]},
{"name":"CalcViewModelView","parent":"WEAPON","type":"hook","description":"Allows overriding the position and angle of the viewmodel. This hook only works if you haven't overridden GM:CalcViewModelView.","realm":"Client","args":[]},
{"name":"RightClick","parent":"TOOL","type":"hook","description":"Called when the user right clicks with the tool.","realm":"Shared","args":[]},
{"name":"AdjustMouseSensitivity","parent":"WEAPON","type":"hook","description":"Allows you to adjust the mouse sensitivity. This hook only works if you haven't overridden GM:AdjustMouseSensitivity.","realm":"Client","args":[]},
{"name":"AcceptInput","parent":"WEAPON","type":"hook","description":"Called when another entity fires an event to this entity.","realm":"Server","args":[]},
{"name":"CanBePickedUpByNPCs","parent":"WEAPON","type":"hook","description":"Called when a Citizen NPC is looking around to a (better) weapon to pickup.","realm":"Server","args":[]},
{"name":"Ammo1","parent":"WEAPON","type":"hook","description":"Returns how much of primary ammo the player has.","realm":"Shared","args":[]},
{"name":"Think","parent":"TOOL","type":"hook","description":"Called when WEAPON:Think of the toolgun is called. This only happens when the tool gun is currently equipped/selected by the player and the selected tool is this tool.","realm":"Shared","args":[]},
{"name":"CalcView","parent":"WEAPON","type":"hook","description":"\nAllows you to adjust player view while this weapon in use.\n\nThis hook is called from the default implementation of GM:CalcView which is [here](https://github.com/garrynewman/garrysmod/blob/master/garrysmod/gamemodes/base/gamemode/cl_init.lua#L376-L383). Therefore, it will not be called if any other hook added to CalcView returns any value, or if the current gamemode overrides the default hook and does not call the SWEP function.\n\nSWEPs that define this function will not work with the Global.TauntCamera\n\t","realm":"Client","args":[]},
{"name":"Ammo2","parent":"WEAPON","type":"hook","description":"Returns how much of secondary ammo the player has.","realm":"Shared","args":[]},
{"name":"LeftClick","parent":"TOOL","type":"hook","description":"Called when the user left clicks with the tool","realm":"Shared","args":[]},
{"name":"Reload","parent":"TOOL","type":"hook","description":"Called when the user presses the reload key with the tool out.","realm":"Shared","args":[]},
{"name":"Deploy","parent":"TOOL","type":"hook","description":"\nCalled when WEAPON:Deploy of the toolgun is called.\n\nThis is also called when switching from another tool on the server.\n\t","realm":"Shared","args":[]},
{"name":"PreReloadToolsMenu","parent":"SANDBOX","type":"hook","description":"Called right before the Lua Loaded tool menus are reloaded.","realm":"Client","args":[]},
{"name":"Holster","parent":"TOOL","type":"hook","description":"Called when WEAPON:Holster of the toolgun is called, as well as when switching between different toolguns.","realm":"Shared","args":[]},
{"name":"FreezeMovement","parent":"TOOL","type":"hook","description":"Called when WEAPON:Think of the toolgun is called, only when the user has this tool selected.","realm":"Client","args":[]},
{"name":"SpawnMenuOpen","parent":"SANDBOX","type":"hook","description":"\nCalled when spawnmenu is trying to be opened.\n\nHiding the spawnmenu will not stop people from being able to use the various console commands to spawn in items, etc. See GM:PlayerSpawn* hooks for blocking actual spawning.\n\t","realm":"Client","args":[]},
{"name":"DrawHUD","parent":"TOOL","type":"hook","description":"Called when WEAPON:DrawHUD of the toolgun is called, only when the user has this tool selected.","realm":"Client","args":[]},
{"name":"SpawnMenuEnabled","parent":"SANDBOX","type":"hook","description":"If false is returned then the spawn menu is never created. This saves load times if your mod doesn't actually use the spawn menu for any reason.","realm":"Client","args":[]},
{"name":"DrawToolScreen","parent":"TOOL","type":"hook","description":"\nCalled after the default tool screen has been drawn from WEAPON:RenderScreen.\n\nIf this method exists on the TOOL object table, the default scrolling text will not be drawn\nMaterials rendered in this hook require $ignorez parameter to draw properly.\n\t","realm":"Client","args":[]},
{"name":"PostReloadToolsMenu","parent":"SANDBOX","type":"hook","description":"Called right after the Lua Loaded tool menus are reloaded. This is a good place to set up any ControlPanels.","realm":"Client","args":[]},
{"name":"PopulateToolMenu","parent":"SANDBOX","type":"hook","description":"Add the STOOLS to the tool menu. You want to call spawnmenu.AddToolMenuOption in this hook.","realm":"Client","args":[]},
{"name":"PlayerSpawnRagdoll","parent":"SANDBOX","type":"hook","description":"Called when a player attempts to spawn a ragdoll from the Q menu.","realm":"Server","args":[]},
{"name":"PlayerSpawnSWEP","parent":"SANDBOX","type":"hook","description":"Called when a player attempts to spawn a weapon from the Q menu. ( Mouse wheel clicks on an icon )","realm":"Server","args":[]},
{"name":"PlayerSpawnVehicle","parent":"SANDBOX","type":"hook","description":"Called to ask if player allowed to spawn a particular vehicle or not.","realm":"Server","args":[]},
{"name":"PlayerSpawnSENT","parent":"SANDBOX","type":"hook","description":"Called when a player attempts to spawn an Entity from the Q menu.","realm":"Server","args":[]},
{"name":"PlayerSpawnProp","parent":"SANDBOX","type":"hook","description":"Called when a player attempts to spawn a prop from the Q menu.","realm":"Server","args":[]},
{"name":"PopulatePropMenu","parent":"SANDBOX","type":"hook","description":"\nThis hook makes the engine load the spawnlist text files.\nIt calls spawnmenu.PopulateFromEngineTextFiles by default.\n\t","realm":"Client","args":[]},
{"name":"PlayerSpawnObject","parent":"SANDBOX","type":"hook","description":"Called to ask whether player is allowed to spawn a given model. This includes props, effects and ragdolls and is called before the respective PlayerSpawn* hook.","realm":"Server","args":[]},
{"name":"PopulateSTOOLMenu","parent":"SANDBOX","type":"hook","description":"\nCalled to populate the Scripted Tool menu.\n\nThis hook is never called. Use SANDBOX:PopulateToolMenu, instead.\n\t","realm":"Client","args":[]},
{"name":"PlayerSpawnEffect","parent":"SANDBOX","type":"hook","description":"Called to ask if player allowed to spawn a particular effect or not.","realm":"Server","args":[]},
{"name":"PlayerSpawnNPC","parent":"SANDBOX","type":"hook","description":"Called to ask if player allowed to spawn a particular NPC or not.","realm":"Server","args":[]},
{"name":"PlayerSpawnedRagdoll","parent":"SANDBOX","type":"hook","description":"Called after the player spawned a ragdoll.","realm":"Server","args":[]},
{"name":"PlayerSpawnedNPC","parent":"SANDBOX","type":"hook","description":"Called after the player spawned an NPC.","realm":"Server","args":[]},
{"name":"PlayerSpawnedSENT","parent":"SANDBOX","type":"hook","description":"Called after the player has spawned a scripted entity.","realm":"Server","args":[]},
{"name":"PlayerSpawnedVehicle","parent":"SANDBOX","type":"hook","description":"Called after the player spawned a vehicle.","realm":"Server","args":[]},
{"name":"PlayerSpawnedSWEP","parent":"SANDBOX","type":"hook","description":"\nCalled after the player has spawned a scripted weapon from the spawnmenu with a middle mouse click.\n\nFor left mouse click spawns, see SANDBOX:PlayerGiveSWEP.\n\t","realm":"Server","args":[]},
{"name":"PlayerSpawnedEffect","parent":"SANDBOX","type":"hook","description":"Called after the player spawned an effect.","realm":"Server","args":[]},
{"name":"PersistenceSave","parent":"SANDBOX","type":"hook","description":"Called when persistent props are saved.","realm":"Server","args":[]},
{"name":"PlayerGiveSWEP","parent":"SANDBOX","type":"hook","description":"Called when a player attempts to give themselves a weapon from the Q menu. ( Left mouse clicks on an icon )","realm":"Server","args":[]},
{"name":"PlayerSpawnedProp","parent":"SANDBOX","type":"hook","description":"Called when a player has successfully spawned a prop from the Q menu.","realm":"Server","args":[]},
{"name":"PersistenceLoad","parent":"SANDBOX","type":"hook","description":"Called when persistent props are loaded.","realm":"Server","args":[]},
{"name":"PaintWorldTips","parent":"SANDBOX","type":"hook","description":"\nCalled from GM:HUDPaint to draw world tips. By default, enabling cl_drawworldtooltips will stop world tips from being drawn here.\nSee Global.AddWorldTip for more information.\n\nThis cannot be used with hook.Add\n\t","realm":"Client","args":[]},
{"name":"ContextMenuCreated","parent":"SANDBOX","type":"hook","description":"Called when the context menu is created.","realm":"Client","args":[]},
{"name":"ContentSidebarSelection","parent":"SANDBOX","type":"hook","description":"Called when player selects an item on the spawnmenu sidebar at the left.","realm":"Client","args":[]},
{"name":"PaintNotes","parent":"SANDBOX","type":"hook","description":"\nCalled from GM:HUDPaint; does nothing by default.\n\nThis cannot be used with hook.Add\n\t","realm":"Client","args":[]},
{"name":"ContextMenuOpen","parent":"SANDBOX","type":"hook","description":"Called when the context menu is trying to be opened. Return false to disallow it.","realm":"Client","args":[]},
{"name":"AddToolMenuTabs","parent":"SANDBOX","type":"hook","description":"This hook is used to add new tool tabs to spawnmenu.","realm":"Client","args":[]},
{"name":"CanProperty","parent":"SANDBOX","type":"hook","description":"Controls if a property can be used or not.","realm":"Shared","args":[]},
{"name":"CanTool","parent":"SANDBOX","type":"hook","description":"Called when a player attempts to fire their tool gun. Return true to specifically allow the attempt, false to block it.","realm":"Shared","args":[]},
{"name":"AddToolMenuCategories","parent":"SANDBOX","type":"hook","description":"This hook is used to add new categories to spawnmenu tool tabs.","realm":"Client","args":[]},
{"name":"CanDrive","parent":"SANDBOX","type":"hook","description":"Called when a player attempts to drive a prop via Prop Drive","realm":"Shared","args":[]},
{"name":"AddGamemodeToolMenuCategories","parent":"SANDBOX","type":"hook","description":"\n\n\nThis hook is used to add default categories to spawnmenu tool tabs.\n\nDo not override or hook this function, use SANDBOX:AddToolMenuCategories!\n\t","realm":"Client","args":[]},
{"name":"Spawn","parent":"PLAYER","type":"hook","description":"Called when the player spawns","realm":"Server","args":[]},
{"name":"ViewModelChanged","parent":"PLAYER","type":"hook","description":"Called when the player changes their weapon to another one causing their viewmodel model to change","realm":"Client","args":[]},
{"name":"AddGamemodeToolMenuTabs","parent":"SANDBOX","type":"hook","description":"\n\n\nThis hook is used to add default tool tabs to spawnmenu.\n\nDo not override or hook this function, use SANDBOX:AddToolMenuTabs!\n\t","realm":"Client","args":[]},
{"name":"StartMove","parent":"PLAYER","type":"hook","description":"\nCalled from GM:CreateMove.\n\nThis hook will not work if the current gamemode overrides GM:SetupMove and does not call this hook.\n\nThis hook is run after the drive.StartMove has been called.\n\t","realm":"Client","args":[]},
{"name":"PostDrawViewModel","parent":"PLAYER","type":"hook","description":"Called after the viewmodel has been drawn","realm":"Client","args":[]},
{"name":"SetupDataTables","parent":"PLAYER","type":"hook","description":"Setup the network table accessors.","realm":"Shared","args":[]},
{"name":"SetModel","parent":"PLAYER","type":"hook","description":"\nCalled when we need to set player model from the class.\n\nThis will only be called if you have not overridden GM:PlayerSetModel or call this function from it or anywhere else using player_manager.RunClass\n\t","realm":"Server","args":[]},
{"name":"PreDrawViewModel","parent":"PLAYER","type":"hook","description":"Called before the viewmodel is drawn","realm":"Client","args":[]},
{"name":"Move","parent":"PLAYER","type":"hook","description":"\nCalled from GM:Move.\n\nThis hook will not work if the current gamemode overrides GM:Move and does not call this hook.\n\nThis hook is run after the drive.Move has been called.\n\t","realm":"Client","args":[]},
{"name":"Think","parent":"PANEL","type":"hook","description":"Called every frame while Panel:IsVisible is true.","realm":"Client","args":[]},
{"name":"FinishMove","parent":"PLAYER","type":"hook","description":"\nCalled from GM:FinishMove.\n\nThis hook will not work if the current gamemode overrides GM:FinishMove and does not call this hook.\n\nThis hook is run after the drive.FinishMove has been called.\n\t","realm":"Client","args":[]},
{"name":"PreAutoRefresh","parent":"PANEL","type":"hook","description":"\nOnly works on elements defined with derma.DefineControl and only if the panel has **AllowAutoRefresh** set to true.\n\nCalled when derma.DefineControl is called with this panel's class name before applying changes to this panel.\n\nSee also PANEL:PostAutoRefresh\n\t","realm":"Client","args":[]},
{"name":"Init","parent":"PLAYER","type":"hook","description":"Called when the class object is created","realm":"Shared","args":[]},
{"name":"Loadout","parent":"PLAYER","type":"hook","description":"Called on spawn to give the player their default loadout","realm":"Server","args":[]},
{"name":"PerformLayout","parent":"PANEL","type":"hook","description":"\nCalled whenever the panels layout was invalidated. This means all child panels must be re-positioned to fit the possibly new size of this panel.\n\nDo **NOT** call this function directly. Use Panel:InvalidateLayout instead!\n\t","realm":"Client","args":[]},
{"name":"GetHandsModel","parent":"PLAYER","type":"hook","description":"Called on player spawn to determine which hand model to use","realm":"Client","args":[]},
{"name":"Paint","parent":"PANEL","type":"hook","description":"\nCalled whenever the panel should be drawn. \n\nYou can create panels with a customized appearance by overriding their Paint() function, which will prevent the default appearance from being drawn.\n\nRender operations from the surface (and consequentially the draw) are always offset by the global position of this panel, as seen in the example below\n\nThis hook will not run if the panel is completely off the screen. The hook will still run however if any parts of the panel are still on screen.\n\t","realm":"Client","args":[]},
{"name":"PaintOver","parent":"PANEL","type":"hook","description":"Called whenever the panel and all its children were drawn, return true to override the default drawing.","realm":"Client","args":[]},
{"name":"PostAutoRefresh","parent":"PANEL","type":"hook","description":"\nOnly works on elements defined with derma.DefineControl and only if the panel has **AllowAutoRefresh** set to true.\n\nCalled after derma.DefineControl is called with panel's class name.\n\nSee also PANEL:PreAutoRefresh\n\t","realm":"Client","args":[]},
{"name":"OnStartDragging","parent":"PANEL","type":"hook","description":" Called by dragndrop.StartDragging when the panel starts being dragged.","realm":"Client","args":[]},
{"name":"OnSizeChanged","parent":"PANEL","type":"hook","description":"\nCalled just after the panel size changes.\n\nAll size functions will return the new values when this hook is called.\n\nChanging the panel size in this hook will cause an infinite loop!\n\t","realm":"Client","args":[]},
{"name":"OnScreenSizeChanged","parent":"PANEL","type":"hook","description":"\nCalled when the player's screen resolution of the game changes.\n\nGlobal.ScrW and Global.ScrH will return the new values when this hook is called.\n\t","realm":"Client","args":[]},
{"name":"OnRemove","parent":"PANEL","type":"hook","description":"Called when the panel is about to be removed.","realm":"Client","args":[]},
{"name":"OnMouseWheeled","parent":"PANEL","type":"hook","description":"Called whenever the mouse wheel was used.","realm":"Client","args":[]},
{"name":"OnMouseReleased","parent":"PANEL","type":"hook","description":"Called whenever a mouse key was released while the panel is focused.","realm":"Client","args":[]},
{"name":"OnKeyCodePressed","parent":"PANEL","type":"hook","description":"\nCalled whenever a keyboard key was pressed while the panel is focused.\n\nThis is not run for ESC/\"cancelselect\" binding.\n\t","realm":"Client","args":[]},
{"name":"OnStopDragging","parent":"PANEL","type":"hook","description":" Called by Panel:DragMouseRelease when the panel object is released after being dragged.","realm":"Client","args":[]},
{"name":"OnKeyCodeReleased","parent":"PANEL","type":"hook","description":"\nCalled whenever a keyboard key was released while the panel is focused.\n\nThis is not run for TILDE/\"toggleconsole\" binding.\n\t","realm":"Client","args":[]},
{"name":"OnMousePressed","parent":"PANEL","type":"hook","description":"Called whenever a mouse key was pressed while the panel is focused.","realm":"Client","args":[]},
{"name":"OnDrop","parent":"PANEL","type":"hook","description":"\nWe're being dropped on something\nWe can create a new panel here and return it, so that instead of dropping us - it drops the new panel instead! We remain where we are!\n\nOnly works for panels derived from DDragBase.\n\t","realm":"Client","args":[]},
{"name":"OnCursorExited","parent":"PANEL","type":"hook","description":"Called whenever the cursor left the panels bounds.","realm":"Client","args":[]},
{"name":"OnCursorMoved","parent":"PANEL","type":"hook","description":"Called whenever the cursor was moved with the panels bounds.","realm":"Client","args":[]},
{"name":"OnChildViewCreated","parent":"PANEL","type":"hook","description":"Called by HTML panels when the page attempts to open a new child view (such as a popup or new tab).","realm":"Client","args":[]},
{"name":"OnCursorEntered","parent":"PANEL","type":"hook","description":"Called whenever the cursor entered the panels bounds.","realm":"Client","args":[]},
{"name":"OnChildRemoved","parent":"PANEL","type":"hook","description":"Called whenever a child of the panel is about to removed.","realm":"Client","args":[]},
{"name":"OnDocumentReady","parent":"PANEL","type":"hook","description":"Called by HTML panels when the panel's DOM has been set up. You can run JavaScript in here.","realm":"Client","args":[]},
{"name":"OnFocusChanged","parent":"PANEL","type":"hook","description":"\nCalled whenever the panel gained or lost focus.\n\nPanel:HasFocus will only be updated on the next frame and will return the \"old\" value at the time this hook is run. Same goes for vgui.GetKeyboardFocus.\n\t","realm":"Client","args":[]},
{"name":"OnChildAdded","parent":"PANEL","type":"hook","description":"\nCalled whenever a child was parented to the panel.\n\nThis is called before the panel's metatable is set.\n\t","realm":"Client","args":[]}